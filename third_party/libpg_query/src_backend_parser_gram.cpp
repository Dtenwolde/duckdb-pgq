/* A Bison parser, made by GNU Bison 3.0.4.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.0.4"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs


/* Copy the first part of user declarations.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp" /* yacc.c:339  */

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static PGNode *makeParamRefCast(int number, int location, PGTypeName *tpname);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static PGNode *makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod,
								  int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);


#line 238 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:339  */

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "grammar_out.hpp".  */
#ifndef YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED
# define YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int base_yydebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    IDENT = 258,
    FCONST = 259,
    SCONST = 260,
    BCONST = 261,
    XCONST = 262,
    Op = 263,
    ICONST = 264,
    PARAM = 265,
    TYPECAST = 266,
    DOT_DOT = 267,
    COLON_EQUALS = 268,
    EQUALS_GREATER = 269,
    LAMBDA_ARROW = 270,
    LESS_EQUALS = 271,
    GREATER_EQUALS = 272,
    NOT_EQUALS = 273,
    ABORT_P = 274,
    ABSOLUTE_P = 275,
    ACCESS = 276,
    ACTION = 277,
    ADD_P = 278,
    ADMIN = 279,
    AFTER = 280,
    AGGREGATE = 281,
    ALL = 282,
    ALSO = 283,
    ALTER = 284,
    ALWAYS = 285,
    ANALYSE = 286,
    ANALYZE = 287,
    AND = 288,
    ANY = 289,
    ARRAY = 290,
    AS = 291,
    ASC_P = 292,
    ASSERTION = 293,
    ASSIGNMENT = 294,
    ASYMMETRIC = 295,
    AT = 296,
    ATTACH = 297,
    ATTRIBUTE = 298,
    AUTHORIZATION = 299,
    BACKWARD = 300,
    BEFORE = 301,
    BEGIN_P = 302,
    BETWEEN = 303,
    BIGINT = 304,
    BINARY = 305,
    BIT = 306,
    BOOLEAN_P = 307,
    BOTH = 308,
    BY = 309,
    CACHE = 310,
    CALL_P = 311,
    CALLED = 312,
    CASCADE = 313,
    CASCADED = 314,
    CASE = 315,
    CAST = 316,
    CATALOG_P = 317,
    CHAIN = 318,
    CHAR_P = 319,
    CHARACTER = 320,
    CHARACTERISTICS = 321,
    CHECK_P = 322,
    CHECKPOINT = 323,
    CLASS = 324,
    CLOSE = 325,
    CLUSTER = 326,
    COALESCE = 327,
    COLLATE = 328,
    COLLATION = 329,
    COLUMN = 330,
    COLUMNS = 331,
    COMMENT = 332,
    COMMENTS = 333,
    COMMIT = 334,
    COMMITTED = 335,
    CONCURRENTLY = 336,
    CONFIGURATION = 337,
    CONFLICT = 338,
    CONNECTION = 339,
    CONSTRAINT = 340,
    CONSTRAINTS = 341,
    CONTENT_P = 342,
    CONTINUE_P = 343,
    CONVERSION_P = 344,
    COPY = 345,
    COST = 346,
    CREATE_P = 347,
    CROSS = 348,
    CSV = 349,
    CUBE = 350,
    CURRENT_P = 351,
    CURRENT_CATALOG = 352,
    CURRENT_DATE = 353,
    CURRENT_ROLE = 354,
    CURRENT_SCHEMA = 355,
    CURRENT_TIME = 356,
    CURRENT_TIMESTAMP = 357,
    CURRENT_USER = 358,
    CURSOR = 359,
    CYCLE = 360,
    DATA_P = 361,
    DATABASE = 362,
    DAY_P = 363,
    DAYS_P = 364,
    DEALLOCATE = 365,
    DEC = 366,
    DECIMAL_P = 367,
    DECLARE = 368,
    DEFAULT = 369,
    DEFAULTS = 370,
    DEFERRABLE = 371,
    DEFERRED = 372,
    DEFINER = 373,
    DELETE_P = 374,
    DELIMITER = 375,
    DELIMITERS = 376,
    DEPENDS = 377,
    DESC_P = 378,
    DESCRIBE = 379,
    DESTINATION = 380,
    DETACH = 381,
    DICTIONARY = 382,
    DISABLE_P = 383,
    DISCARD = 384,
    DISTINCT = 385,
    DO = 386,
    DOCUMENT_P = 387,
    DOMAIN_P = 388,
    DOUBLE_P = 389,
    DROP = 390,
    EACH = 391,
    EDGE = 392,
    ELSE = 393,
    ENABLE_P = 394,
    ENCODING = 395,
    ENCRYPTED = 396,
    END_P = 397,
    ENUM_P = 398,
    ESCAPE = 399,
    EVENT = 400,
    EXCEPT = 401,
    EXCLUDE = 402,
    EXCLUDING = 403,
    EXCLUSIVE = 404,
    EXECUTE = 405,
    EXISTS = 406,
    EXPLAIN = 407,
    EXPORT_P = 408,
    EXTENSION = 409,
    EXTERNAL = 410,
    EXTRACT = 411,
    FALSE_P = 412,
    FAMILY = 413,
    FETCH = 414,
    FILTER = 415,
    FIRST_P = 416,
    FLOAT_P = 417,
    FOLLOWING = 418,
    FOR = 419,
    FORCE = 420,
    FOREIGN = 421,
    FORWARD = 422,
    FREEZE = 423,
    FROM = 424,
    FULL = 425,
    FUNCTION = 426,
    FUNCTIONS = 427,
    GENERATED = 428,
    GLOB = 429,
    GLOBAL = 430,
    GRANT = 431,
    GRANTED = 432,
    GRAPH = 433,
    GRAPH_TABLE = 434,
    GROUP_P = 435,
    GROUPING = 436,
    HANDLER = 437,
    HAVING = 438,
    HEADER_P = 439,
    HOLD = 440,
    HOUR_P = 441,
    HOURS_P = 442,
    IDENTITY_P = 443,
    IF_P = 444,
    ILIKE = 445,
    IMMEDIATE = 446,
    IMMUTABLE = 447,
    IMPLICIT_P = 448,
    IMPORT_P = 449,
    IN_P = 450,
    INCLUDING = 451,
    INCREMENT = 452,
    INDEX = 453,
    INDEXES = 454,
    INHERIT = 455,
    INHERITS = 456,
    INITIALLY = 457,
    INLINE_P = 458,
    INNER_P = 459,
    INOUT = 460,
    INPUT_P = 461,
    INSENSITIVE = 462,
    INSERT = 463,
    INSTEAD = 464,
    INT_P = 465,
    INTEGER = 466,
    INTERSECT = 467,
    INTERVAL = 468,
    INTO = 469,
    INVOKER = 470,
    IS = 471,
    ISNULL = 472,
    ISOLATION = 473,
    JOIN = 474,
    KEY = 475,
    LABEL = 476,
    LANGUAGE = 477,
    LARGE_P = 478,
    LAST_P = 479,
    LATERAL_P = 480,
    LEADING = 481,
    LEAKPROOF = 482,
    LEFT = 483,
    LEVEL = 484,
    LIKE = 485,
    LIMIT = 486,
    LISTEN = 487,
    LOAD = 488,
    LOCAL = 489,
    LOCALTIME = 490,
    LOCALTIMESTAMP = 491,
    LOCATION = 492,
    LOCK_P = 493,
    LOCKED = 494,
    LOGGED = 495,
    MACRO = 496,
    MAPPING = 497,
    MATCH = 498,
    MATERIALIZED = 499,
    MAXVALUE = 500,
    METHOD = 501,
    MICROSECOND_P = 502,
    MICROSECONDS_P = 503,
    MILLISECOND_P = 504,
    MILLISECONDS_P = 505,
    MINUTE_P = 506,
    MINUTES_P = 507,
    MINVALUE = 508,
    MODE = 509,
    MONTH_P = 510,
    MONTHS_P = 511,
    MOVE = 512,
    NAME_P = 513,
    NAMES = 514,
    NATIONAL = 515,
    NATURAL = 516,
    NCHAR = 517,
    NEW = 518,
    NEXT = 519,
    NO = 520,
    NODE = 521,
    NONE = 522,
    NOT = 523,
    NOTHING = 524,
    NOTIFY = 525,
    NOTNULL = 526,
    NOWAIT = 527,
    NULL_P = 528,
    NULLIF = 529,
    NULLS_P = 530,
    NUMERIC = 531,
    OBJECT_P = 532,
    OF = 533,
    OFF = 534,
    OFFSET = 535,
    OIDS = 536,
    OLD = 537,
    ON = 538,
    ONLY = 539,
    OPERATOR = 540,
    OPTION = 541,
    OPTIONS = 542,
    OR = 543,
    ORDER = 544,
    ORDINALITY = 545,
    OUT_P = 546,
    OUTER_P = 547,
    OVER = 548,
    OVERLAPS = 549,
    OVERLAY = 550,
    OVERRIDING = 551,
    OWNED = 552,
    OWNER = 553,
    PARALLEL = 554,
    PARSER = 555,
    PARTIAL = 556,
    PARTITION = 557,
    PASSING = 558,
    PASSWORD = 559,
    PERCENT = 560,
    PLACING = 561,
    PLANS = 562,
    POLICY = 563,
    POSITION = 564,
    PRAGMA_P = 565,
    PRECEDING = 566,
    PRECISION = 567,
    PREPARE = 568,
    PREPARED = 569,
    PRESERVE = 570,
    PRIMARY = 571,
    PRIOR = 572,
    PRIVILEGES = 573,
    PROCEDURAL = 574,
    PROCEDURE = 575,
    PROGRAM = 576,
    PROPERTIES = 577,
    PROPERTY = 578,
    PUBLICATION = 579,
    QUOTE = 580,
    RANGE = 581,
    READ_P = 582,
    REAL = 583,
    REASSIGN = 584,
    RECHECK = 585,
    RECURSIVE = 586,
    REF = 587,
    REFERENCES = 588,
    REFERENCING = 589,
    REFRESH = 590,
    REINDEX = 591,
    RELATIONSHIP = 592,
    RELATIVE_P = 593,
    RELEASE = 594,
    RENAME = 595,
    REPEATABLE = 596,
    REPLACE = 597,
    REPLICA = 598,
    RESET = 599,
    RESTART = 600,
    RESTRICT = 601,
    RETURNING = 602,
    RETURNS = 603,
    REVOKE = 604,
    RIGHT = 605,
    ROLE = 606,
    ROLLBACK = 607,
    ROLLUP = 608,
    ROW = 609,
    ROWS = 610,
    RULE = 611,
    SAMPLE = 612,
    SAVEPOINT = 613,
    SCHEMA = 614,
    SCHEMAS = 615,
    SCROLL = 616,
    SEARCH = 617,
    SECOND_P = 618,
    SECONDS_P = 619,
    SECURITY = 620,
    SELECT = 621,
    SEQUENCE = 622,
    SEQUENCES = 623,
    SERIALIZABLE = 624,
    SERVER = 625,
    SESSION = 626,
    SESSION_USER = 627,
    SET = 628,
    SETOF = 629,
    SETS = 630,
    SHARE = 631,
    SHOW = 632,
    SIMILAR = 633,
    SIMPLE = 634,
    SKIP = 635,
    SMALLINT = 636,
    SNAPSHOT = 637,
    SOME = 638,
    SOURCE = 639,
    SQL_P = 640,
    STABLE = 641,
    STANDALONE_P = 642,
    START = 643,
    STATEMENT = 644,
    STATISTICS = 645,
    STDIN = 646,
    STDOUT = 647,
    STORAGE = 648,
    STRICT_P = 649,
    STRIP_P = 650,
    STRUCT = 651,
    SUBSCRIPTION = 652,
    SUBSTRING = 653,
    SYMMETRIC = 654,
    SYSID = 655,
    SYSTEM_P = 656,
    TABLE = 657,
    TABLES = 658,
    TABLESAMPLE = 659,
    TABLESPACE = 660,
    TEMP = 661,
    TEMPLATE = 662,
    TEMPORARY = 663,
    TEXT_P = 664,
    THEN = 665,
    TIME = 666,
    TIMESTAMP = 667,
    TO = 668,
    TRAILING = 669,
    TRANSACTION = 670,
    TRANSFORM = 671,
    TREAT = 672,
    TRIGGER = 673,
    TRIM = 674,
    TRUE_P = 675,
    TRUNCATE = 676,
    TRUSTED = 677,
    TYPE_P = 678,
    TYPES_P = 679,
    UNBOUNDED = 680,
    UNCOMMITTED = 681,
    UNENCRYPTED = 682,
    UNION = 683,
    UNIQUE = 684,
    UNKNOWN = 685,
    UNLISTEN = 686,
    UNLOGGED = 687,
    UNTIL = 688,
    UPDATE = 689,
    USER = 690,
    USING = 691,
    VACUUM = 692,
    VALID = 693,
    VALIDATE = 694,
    VALIDATOR = 695,
    VALUE_P = 696,
    VALUES = 697,
    VARCHAR = 698,
    VARIADIC = 699,
    VARYING = 700,
    VERBOSE = 701,
    VERSION_P = 702,
    VERTEX = 703,
    VIEW = 704,
    VIEWS = 705,
    VOLATILE = 706,
    WHEN = 707,
    WHERE = 708,
    WHITESPACE_P = 709,
    WINDOW = 710,
    WITH = 711,
    WITHIN = 712,
    WITHOUT = 713,
    WORK = 714,
    WRAPPER = 715,
    WRITE_P = 716,
    XML_P = 717,
    XMLATTRIBUTES = 718,
    XMLCONCAT = 719,
    XMLELEMENT = 720,
    XMLEXISTS = 721,
    XMLFOREST = 722,
    XMLNAMESPACES = 723,
    XMLPARSE = 724,
    XMLPI = 725,
    XMLROOT = 726,
    XMLSERIALIZE = 727,
    XMLTABLE = 728,
    YEAR_P = 729,
    YEARS_P = 730,
    YES_P = 731,
    ZONE = 732,
    NOT_LA = 733,
    NULLS_LA = 734,
    WITH_LA = 735,
    POSTFIXOP = 736,
    UMINUS = 737
  };
#endif

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED

union YYSTYPE
{
#line 14 "third_party/libpg_query/grammar/grammar.y" /* yacc.c:355  */

	core_YYSTYPE		core_yystype;
	/* these fields must match core_YYSTYPE: */
	int					ival;
	char				*str;
	const char			*keyword;
	const char          *conststr;

	char				chr;
	bool				boolean;
	PGJoinType			jtype;
	PGDropBehavior		dbehavior;
	PGOnCommitAction		oncommit;
	PGList				*list;
	PGNode				*node;
	PGValue				*value;
	PGObjectType			objtype;
	PGTypeName			*typnam;
	PGObjectWithArgs		*objwithargs;
	PGDefElem				*defelt;
	PGSortBy				*sortby;
	PGWindowDef			*windef;
	PGJoinExpr			*jexpr;
	PGIndexElem			*ielem;
	PGAlias				*alias;
	PGRangeVar			*range;
	PGIntoClause			*into;
	PGWithClause			*with;
	PGInferClause			*infer;
	PGOnConflictClause	*onconflict;
	PGAIndices			*aind;
	PGResTarget			*target;
	PGInsertStmt			*istmt;
	PGVariableSetStmt		*vsetstmt;
	PGOverridingKind       override;
	PGSortByDir            sortorder;
	PGSortByNulls          nullorder;
	PGLockClauseStrength lockstrength;
	PGLockWaitPolicy lockwaitpolicy;
	PGSubLinkType subquerytype;
	PGViewCheckOption viewcheckoption;

#line 804 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:355  */
};

typedef union YYSTYPE YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif

/* Location type.  */
#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE YYLTYPE;
struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
};
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif



int base_yyparse (core_yyscan_t yyscanner);

#endif /* !YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED  */

/* Copy the second part of user declarations.  */

#line 834 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:358  */

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif


#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  575
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   49273

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  508
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  389
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1694
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  2819

/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   744

#define YYTRANSLATE(YYX)                                                \
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,   489,     2,     2,
     494,   495,   487,   485,   498,   486,   496,   488,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   500,   497,
     481,   483,   482,   499,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   492,     2,   493,   490,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   484,   491,   501,   502,
     503,   504,   505,   506,   507
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   479,   479,   495,   507,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,   537,   538,   539,   540,
     541,   542,   543,   544,   545,   546,   547,   548,   549,   550,
     552,     6,     9,    16,    26,    33,    44,    45,    50,    51,
      52,    57,    58,    59,    60,    61,    65,    66,    67,    68,
      73,    74,    79,    83,    91,    92,    97,    98,    99,   105,
     110,   118,   119,     7,    21,    41,    42,    69,    70,    71,
      72,    73,    74,    78,    79,    84,    89,    90,    91,    92,
      93,    98,   105,   106,   107,   124,   131,   138,   148,   158,
     170,   179,   188,   207,   214,   219,   221,   223,   225,   228,
     233,   234,   238,   239,   240,   241,   246,   250,   251,   256,
     263,   268,   269,   270,   271,   272,   273,   274,   275,   281,
     282,   286,   291,   298,   305,   312,   324,   325,   326,   327,
     331,   336,   337,   338,   343,   348,   349,   350,   351,   352,
     353,   358,   381,   385,   392,   393,   397,   401,   402,   403,
     407,   411,   419,   420,   425,   426,   430,   438,   439,   444,
     445,   449,   454,   458,   462,   467,   475,   476,   480,   481,
     487,   498,   511,   525,   539,   553,   567,   590,   594,   601,
     605,   613,   618,   625,   635,   636,   637,   638,   639,   646,
     653,   654,   659,   660,    11,    24,    41,    42,    43,    48,
       3,    10,    16,    22,    28,    37,    37,    39,    40,     8,
      21,    34,    52,    74,    75,    76,    77,     7,    21,    25,
      32,    43,    44,    50,    51,    47,    48,    52,    53,    68,
      69,    76,    84,    92,   100,   108,   116,   127,   128,   155,
     170,   186,   187,   206,   210,   214,   235,   242,   249,   259,
     260,   263,   275,   286,   294,   299,   304,   309,   314,   322,
     330,   335,   340,   347,   348,   352,   353,   354,   361,   362,
     366,   367,   371,   372,   376,   380,   381,   384,   393,   404,
     405,   406,   409,   410,   411,   415,   416,   417,   418,   422,
     423,   427,   429,   445,   447,   452,   455,   463,   467,   471,
     475,   479,   483,   490,   495,   502,   503,   507,   511,   515,
     519,   526,   533,   534,   539,   540,   544,   545,   553,   573,
     574,   576,   581,   582,   586,   587,   590,   591,   616,   617,
     621,   622,   626,   627,   631,   644,   645,   649,   650,   654,
     655,   659,   660,   664,   675,   676,   677,   678,   682,   683,
     688,   689,   690,   699,   705,   723,   724,   725,   729,   730,
     736,   742,   750,   758,   794,   820,   824,   850,   854,   867,
     881,   896,   908,   924,   930,   935,   941,   948,   949,   957,
     961,   965,   971,   978,   983,   984,   985,   986,   990,   991,
    1003,  1004,  1009,  1016,  1023,  1030,  1062,  1073,  1086,  1091,
    1092,  1095,  1096,  1099,  1100,  1105,  1106,  1111,  1115,  1121,
    1142,  1150,  1163,  1166,  1170,  1170,  1172,  1177,  1184,  1189,
    1195,  1200,  1206,  1214,  1216,  1219,  1223,  1224,  1225,  1226,
    1227,  1228,  1233,  1253,  1254,  1255,  1256,  1267,  1273,  1281,
    1282,  1288,  1293,  1298,  1303,  1308,  1313,  1318,  1323,  1329,
    1335,  1341,  1348,  1370,  1379,  1383,  1391,  1395,  1403,  1415,
    1436,  1440,  1446,  1450,  1463,  1471,  1481,  1483,  1485,  1487,
    1489,  1491,  1496,  1497,  1504,  1513,  1521,  1530,  1541,  1549,
    1550,  1551,  1555,  1555,  1558,  1558,  1561,  1561,  1564,  1564,
    1567,  1567,  1570,  1570,  1573,  1573,  1576,  1576,  1579,  1581,
    1583,  1585,  1587,  1589,  1591,  1593,  1595,  1600,  1605,  1611,
    1618,  1623,  1629,  1635,  1666,  1668,  1670,  1678,  1693,  1695,
    1697,  1699,  1701,  1703,  1705,  1707,  1709,  1711,  1713,  1715,
    1717,  1719,  1722,  1724,  1726,  1729,  1731,  1733,  1735,  1738,
    1743,  1748,  1755,  1760,  1767,  1772,  1780,  1785,  1794,  1802,
    1810,  1818,  1836,  1844,  1852,  1860,  1868,  1876,  1880,  1888,
    1896,  1912,  1920,  1928,  1936,  1944,  1952,  1960,  1964,  1968,
    1972,  1976,  1984,  1992,  2000,  2008,  2028,  2050,  2061,  2068,
    2093,  2095,  2097,  2099,  2101,  2103,  2105,  2107,  2109,  2111,
    2113,  2115,  2117,  2119,  2121,  2123,  2125,  2127,  2129,  2131,
    2135,  2139,  2143,  2157,  2158,  2159,  2171,  2186,  2198,  2200,
    2202,  2213,  2237,  2250,  2254,  2260,  2267,  2274,  2284,  2291,
    2319,  2354,  2365,  2366,  2373,  2379,  2383,  2387,  2391,  2395,
    2399,  2403,  2407,  2411,  2415,  2419,  2423,  2427,  2431,  2435,
    2439,  2441,  2445,  2454,  2459,  2466,  2481,  2488,  2492,  2496,
    2500,  2504,  2518,  2519,  2523,  2524,  2532,  2533,  2537,  2538,
    2543,  2551,  2553,  2567,  2570,  2597,  2598,  2601,  2602,  2613,
    2631,  2638,  2647,  2664,  2709,  2717,  2725,  2733,  2741,  2762,
    2763,  2766,  2767,  2770,  2771,  2772,  2775,  2776,  2779,  2780,
    2781,  2782,  2783,  2784,  2785,  2786,  2787,  2788,  2789,  2790,
    2793,  2795,  2800,  2802,  2807,  2809,  2811,  2813,  2815,  2817,
    2819,  2821,  2835,  2837,  2841,  2845,  2852,  2856,  2862,  2866,
    2875,  2886,  2887,  2891,  2895,  2902,  2903,  2904,  2905,  2906,
    2907,  2908,  2909,  2910,  2911,  2921,  2925,  2932,  2939,  2940,
    2956,  2960,  2965,  2969,  2984,  2989,  2993,  2996,  2999,  3000,
    3001,  3004,  3011,  3021,  3035,  3036,  3040,  3051,  3052,  3055,
    3056,  3059,  3063,  3070,  3074,  3078,  3086,  3097,  3098,  3102,
    3103,  3107,  3108,  3111,  3112,  3122,  3123,  3127,  3128,  3131,
    3147,  3155,  3163,  3185,  3186,  3197,  3201,  3228,  3230,  3235,
    3237,  3247,  3249,  3260,  3264,  3268,  3272,  3276,  3285,  3292,
    3324,  3328,  3332,  3336,  3340,  3344,  3348,  3354,  3355,  3371,
    3372,  3373,  3376,  3377,  3382,  3383,  3384,  3387,  3388,  3391,
    3393,  3398,  3399,  3402,  3410,  3411,  3412,  3413,  3414,  3417,
    3418,    11,    24,    35,    36,    41,    42,    47,    48,    52,
      66,    70,    71,    75,    81,    82,    86,     7,    16,     7,
      20,     7,    13,    19,    25,     8,    33,    62,    66,    67,
      72,    73,    78,    79,    83,    84,    89,    90,     7,    53,
      54,    58,    62,    82,    86,    94,    95,    99,   100,   104,
     105,   109,   122,   123,   128,   129,   133,   134,   139,   152,
     165,   167,   171,   172,   173,   177,   178,   182,   183,   187,
     188,   192,   193,   194,     7,    16,    34,    41,    46,    47,
      48,    49,     8,    22,    36,    48,    56,    70,    71,    72,
      73,    74,    87,    88,    93,    94,    98,    99,     7,    18,
      19,    23,    24,    25,    26,     2,     7,    14,    24,    25,
      32,     5,    11,     6,    15,    25,    35,    45,    55,    65,
      75,    85,    95,   106,   117,   127,   140,   141,     7,    14,
      22,     9,    19,    29,    39,    49,    59,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    92,    93,    94,    95,    96,    97,    98,   103,
     104,   109,   110,   111,   116,   117,   118,     9,    17,    29,
      30,    34,    35,    36,    41,    42,    43,    48,    52,    56,
      60,    64,    68,    72,    76,    80,    84,    88,    92,    97,
     101,   105,   112,   113,   117,   118,   119,     9,    19,    32,
      33,     1,    30,    53,    54,    59,    63,    68,    72,    80,
      81,    85,    86,    91,    92,    96,    97,   102,   103,   104,
     105,   106,   111,   119,   123,   128,   129,   134,   138,   143,
     147,   151,   155,   159,   163,   167,   171,   175,   179,   183,
     187,   191,   195,   203,   209,   210,   211,   216,   220,     7,
      18,    19,    23,    27,     9,    18,    27,    36,    45,    54,
      63,    72,    85,    87,    93,    94,    99,   103,   107,   118,
     126,   130,   139,   148,   157,   166,   175,   184,   192,   200,
     209,   218,   227,   236,   253,   262,   271,   280,   290,   303,
     318,   327,   335,   350,   358,   368,   378,   385,   392,   400,
     407,   418,   419,   424,   428,   433,   438,   446,   447,   452,
     456,   457,    10,    16,    22,    32,    33,    41,    52,    64,
      72,    80,    87,    97,    99,   105,   109,   113,   128,   135,
     136,   137,   141,   142,     9,    19,     7,     2,     9,    15,
      21,    28,    35,    45,    46,    47,     7,    14,    31,    51,
      52,     7,    16,    25,    34,    43,    52,     8,    21,    28,
      35,    41,    48,    58,    62,    71,    80,    89,    96,    97,
     102,   114,   119,   144,   154,   164,   170,   181,   192,   207,
     208,   214,   215,   220,   221,   227,   228,   232,   233,   238,
     240,   246,   247,   251,   252,   257,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   270,   271,   271,   271,   271,
     271,   271,   271,   271,   271,   271,   271,   271,   271,   271,
     271,   271,   271,   271,   271,   271,   271,   271,   271,   271,
     271,   271,   271,   271,   271,   271,   271,   271,   271,   271,
     271,   271,   271,   271,   271,   271,   271,   271,   271,   271,
     271,   271,   271,   271,   271,   271,   271,   271,   271,   271,
     271,   271,   271,   271,   271,   271,   271,   271,   271,   271,
     271,   271,   271,   271,   271,   271,   271,   271,   271,   271,
     271,   271,   271,   271,   271,   271,   271,   271,   271,   271,
     271,   271,   271,   271,   271
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "IDENT", "FCONST", "SCONST", "BCONST",
  "XCONST", "Op", "ICONST", "PARAM", "TYPECAST", "DOT_DOT", "COLON_EQUALS",
  "EQUALS_GREATER", "LAMBDA_ARROW", "LESS_EQUALS", "GREATER_EQUALS",
  "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS", "ACTION", "ADD_P",
  "ADMIN", "AFTER", "AGGREGATE", "ALL", "ALSO", "ALTER", "ALWAYS",
  "ANALYSE", "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC_P", "ASSERTION",
  "ASSIGNMENT", "ASYMMETRIC", "AT", "ATTACH", "ATTRIBUTE", "AUTHORIZATION",
  "BACKWARD", "BEFORE", "BEGIN_P", "BETWEEN", "BIGINT", "BINARY", "BIT",
  "BOOLEAN_P", "BOTH", "BY", "CACHE", "CALL_P", "CALLED", "CASCADE",
  "CASCADED", "CASE", "CAST", "CATALOG_P", "CHAIN", "CHAR_P", "CHARACTER",
  "CHARACTERISTICS", "CHECK_P", "CHECKPOINT", "CLASS", "CLOSE", "CLUSTER",
  "COALESCE", "COLLATE", "COLLATION", "COLUMN", "COLUMNS", "COMMENT",
  "COMMENTS", "COMMIT", "COMMITTED", "CONCURRENTLY", "CONFIGURATION",
  "CONFLICT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS", "CONTENT_P",
  "CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CREATE_P", "CROSS", "CSV",
  "CUBE", "CURRENT_P", "CURRENT_CATALOG", "CURRENT_DATE", "CURRENT_ROLE",
  "CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER",
  "CURSOR", "CYCLE", "DATA_P", "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE",
  "DEC", "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE",
  "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS",
  "DESC_P", "DESCRIBE", "DESTINATION", "DETACH", "DICTIONARY", "DISABLE_P",
  "DISCARD", "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P",
  "DROP", "EACH", "EDGE", "ELSE", "ENABLE_P", "ENCODING", "ENCRYPTED",
  "END_P", "ENUM_P", "ESCAPE", "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING",
  "EXCLUSIVE", "EXECUTE", "EXISTS", "EXPLAIN", "EXPORT_P", "EXTENSION",
  "EXTERNAL", "EXTRACT", "FALSE_P", "FAMILY", "FETCH", "FILTER", "FIRST_P",
  "FLOAT_P", "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE",
  "FROM", "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOB", "GLOBAL",
  "GRANT", "GRANTED", "GRAPH", "GRAPH_TABLE", "GROUP_P", "GROUPING",
  "HANDLER", "HAVING", "HEADER_P", "HOLD", "HOUR_P", "HOURS_P",
  "IDENTITY_P", "IF_P", "ILIKE", "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P",
  "IMPORT_P", "IN_P", "INCLUDING", "INCREMENT", "INDEX", "INDEXES",
  "INHERIT", "INHERITS", "INITIALLY", "INLINE_P", "INNER_P", "INOUT",
  "INPUT_P", "INSENSITIVE", "INSERT", "INSTEAD", "INT_P", "INTEGER",
  "INTERSECT", "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL", "ISOLATION",
  "JOIN", "KEY", "LABEL", "LANGUAGE", "LARGE_P", "LAST_P", "LATERAL_P",
  "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE", "LIMIT", "LISTEN",
  "LOAD", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", "LOCATION", "LOCK_P",
  "LOCKED", "LOGGED", "MACRO", "MAPPING", "MATCH", "MATERIALIZED",
  "MAXVALUE", "METHOD", "MICROSECOND_P", "MICROSECONDS_P", "MILLISECOND_P",
  "MILLISECONDS_P", "MINUTE_P", "MINUTES_P", "MINVALUE", "MODE", "MONTH_P",
  "MONTHS_P", "MOVE", "NAME_P", "NAMES", "NATIONAL", "NATURAL", "NCHAR",
  "NEW", "NEXT", "NO", "NODE", "NONE", "NOT", "NOTHING", "NOTIFY",
  "NOTNULL", "NOWAIT", "NULL_P", "NULLIF", "NULLS_P", "NUMERIC",
  "OBJECT_P", "OF", "OFF", "OFFSET", "OIDS", "OLD", "ON", "ONLY",
  "OPERATOR", "OPTION", "OPTIONS", "OR", "ORDER", "ORDINALITY", "OUT_P",
  "OUTER_P", "OVER", "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNED", "OWNER",
  "PARALLEL", "PARSER", "PARTIAL", "PARTITION", "PASSING", "PASSWORD",
  "PERCENT", "PLACING", "PLANS", "POLICY", "POSITION", "PRAGMA_P",
  "PRECEDING", "PRECISION", "PREPARE", "PREPARED", "PRESERVE", "PRIMARY",
  "PRIOR", "PRIVILEGES", "PROCEDURAL", "PROCEDURE", "PROGRAM",
  "PROPERTIES", "PROPERTY", "PUBLICATION", "QUOTE", "RANGE", "READ_P",
  "REAL", "REASSIGN", "RECHECK", "RECURSIVE", "REF", "REFERENCES",
  "REFERENCING", "REFRESH", "REINDEX", "RELATIONSHIP", "RELATIVE_P",
  "RELEASE", "RENAME", "REPEATABLE", "REPLACE", "REPLICA", "RESET",
  "RESTART", "RESTRICT", "RETURNING", "RETURNS", "REVOKE", "RIGHT", "ROLE",
  "ROLLBACK", "ROLLUP", "ROW", "ROWS", "RULE", "SAMPLE", "SAVEPOINT",
  "SCHEMA", "SCHEMAS", "SCROLL", "SEARCH", "SECOND_P", "SECONDS_P",
  "SECURITY", "SELECT", "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER",
  "SESSION", "SESSION_USER", "SET", "SETOF", "SETS", "SHARE", "SHOW",
  "SIMILAR", "SIMPLE", "SKIP", "SMALLINT", "SNAPSHOT", "SOME", "SOURCE",
  "SQL_P", "STABLE", "STANDALONE_P", "START", "STATEMENT", "STATISTICS",
  "STDIN", "STDOUT", "STORAGE", "STRICT_P", "STRIP_P", "STRUCT",
  "SUBSCRIPTION", "SUBSTRING", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE",
  "TABLES", "TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY",
  "TEXT_P", "THEN", "TIME", "TIMESTAMP", "TO", "TRAILING", "TRANSACTION",
  "TRANSFORM", "TREAT", "TRIGGER", "TRIM", "TRUE_P", "TRUNCATE", "TRUSTED",
  "TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED", "UNENCRYPTED", "UNION",
  "UNIQUE", "UNKNOWN", "UNLISTEN", "UNLOGGED", "UNTIL", "UPDATE", "USER",
  "USING", "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES",
  "VARCHAR", "VARIADIC", "VARYING", "VERBOSE", "VERSION_P", "VERTEX",
  "VIEW", "VIEWS", "VOLATILE", "WHEN", "WHERE", "WHITESPACE_P", "WINDOW",
  "WITH", "WITHIN", "WITHOUT", "WORK", "WRAPPER", "WRITE_P", "XML_P",
  "XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT", "XMLEXISTS", "XMLFOREST",
  "XMLNAMESPACES", "XMLPARSE", "XMLPI", "XMLROOT", "XMLSERIALIZE",
  "XMLTABLE", "YEAR_P", "YEARS_P", "YES_P", "ZONE", "NOT_LA", "NULLS_LA",
  "WITH_LA", "'<'", "'>'", "'='", "POSTFIXOP", "'+'", "'-'", "'*'", "'/'",
  "'%'", "'^'", "UMINUS", "'['", "']'", "'('", "')'", "'.'", "';'", "','",
  "'?'", "':'", "\"-[\"", "\"]->\"", "\"->\"", "\"<-[\"", "\"]-\"",
  "\"<-\"", "\"-\"", "$accept", "stmtblock", "stmtmulti", "stmt",
  "CallStmt", "ExplainStmt", "opt_verbose", "explain_option_arg",
  "ExplainableStmt", "NonReservedWord", "NonReservedWord_or_Sconst",
  "explain_option_list", "analyze_keyword", "opt_boolean_or_string",
  "explain_option_elem", "explain_option_name", "CreateStmt",
  "ConstraintAttributeSpec", "def_arg", "OptParenthesizedSeqOptList",
  "generic_option_arg", "key_action", "ColConstraint", "ColConstraintElem",
  "generic_option_elem", "key_update", "key_actions",
  "create_generic_options", "OnCommitOption", "reloptions",
  "opt_no_inherit", "TableConstraint", "TableLikeOption", "reloption_list",
  "ExistingIndex", "ConstraintAttr", "OptWith", "definition",
  "TableLikeOptionList", "generic_option_name", "ConstraintAttributeElem",
  "columnDef", "generic_option_list", "def_list", "index_name",
  "TableElement", "def_elem", "opt_definition", "OptTableElementList",
  "columnElem", "opt_column_list", "ColQualList", "key_delete",
  "reloption_elem", "columnList", "func_type", "ConstraintElem",
  "TableElementList", "key_match", "TableLikeClause", "OptTemp",
  "generated_when", "CreateAsStmt", "opt_with_data", "create_as_target",
  "VariableShowStmt", "show_or_describe", "var_name", "ViewStmt",
  "opt_check_option", "DeleteStmt", "relation_expr_opt_alias",
  "where_or_current_clause", "using_clause", "SelectStmt",
  "select_with_parens", "select_no_parens", "select_clause",
  "simple_select", "with_clause", "cte_list", "common_table_expr",
  "into_clause", "OptTempTableName", "opt_table", "all_or_distinct",
  "distinct_clause", "opt_all_clause", "opt_sort_clause", "sort_clause",
  "sortby_list", "sortby", "opt_asc_desc", "opt_nulls_order",
  "select_limit", "opt_select_limit", "limit_clause", "offset_clause",
  "sample_count", "sample_clause", "opt_sample_func", "tablesample_entry",
  "tablesample_clause", "opt_tablesample_clause", "opt_repeatable_clause",
  "select_limit_value", "select_offset_value", "select_fetch_first_value",
  "I_or_F_const", "row_or_rows", "first_or_next", "group_clause",
  "group_by_list", "group_by_item", "empty_grouping_set", "having_clause",
  "for_locking_clause", "opt_for_locking_clause", "for_locking_items",
  "for_locking_item", "for_locking_strength", "locked_rels_list",
  "opt_nowait_or_skip", "values_clause", "from_clause", "from_list",
  "table_ref", "joined_table", "alias_clause", "opt_alias_clause",
  "func_alias_clause", "join_type", "join_outer", "join_qual",
  "relation_expr", "func_table", "rowsfrom_item", "rowsfrom_list",
  "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "Typename", "opt_array_bounds",
  "SimpleTypename", "ConstTypename", "GenericType", "opt_type_modifiers",
  "Numeric", "opt_float", "Bit", "ConstBit", "BitWithLength",
  "BitWithoutLength", "Character", "ConstCharacter", "CharacterWithLength",
  "CharacterWithoutLength", "character", "opt_varying", "ConstDatetime",
  "ConstInterval", "opt_timezone", "year_keyword", "month_keyword",
  "day_keyword", "hour_keyword", "minute_keyword", "second_keyword",
  "millisecond_keyword", "microsecond_keyword", "opt_interval", "a_expr",
  "b_expr", "c_expr", "func_application", "func_expr",
  "func_expr_windowless", "func_expr_common_subexpr",
  "within_group_clause", "filter_clause", "window_clause",
  "window_definition_list", "window_definition", "over_clause",
  "window_specification", "opt_existing_window_name",
  "opt_partition_clause", "opt_frame_clause", "frame_extent",
  "frame_bound", "qualified_row", "row", "sub_type", "all_Op", "MathOp",
  "qual_Op", "qual_all_Op", "subquery_Op", "any_operator", "expr_list",
  "func_arg_list", "func_arg_expr", "type_list", "extract_list",
  "extract_arg", "overlay_list", "overlay_placing", "position_list",
  "substr_list", "substr_from", "substr_for", "trim_list", "in_expr",
  "case_expr", "when_clause_list", "when_clause", "case_default",
  "case_arg", "columnref", "indirection_el", "opt_slice_bound",
  "indirection", "opt_indirection", "opt_asymmetric", "opt_target_list",
  "target_list", "target_el", "qualified_name_list", "qualified_name",
  "name_list", "name", "attr_name", "func_name", "AexprConst", "Iconst",
  "Sconst", "ColId", "ColIdOrString", "type_function_name", "any_name",
  "attrs", "opt_name_list", "param_name", "ColLabel", "ColLabelOrString",
  "CreatePropertyGraphStmt", "vertex_alias", "edge_alias",
  "VertexTableDefinitionList", "VertexTableDefinition",
  "GraphTableKeyClause", "LabelList", "LabelEnd",
  "EdgeTableDefinitionList", "EdgeTableDefinition", "LoadStmt",
  "file_name", "ExportStmt", "ImportStmt", "DeallocateStmt", "IndexStmt",
  "access_method", "access_method_clause", "opt_concurrently",
  "opt_index_name", "opt_reloptions", "opt_unique", "GraphTableStmt",
  "ColumnsClauseOptional", "ColumnList", "PathPatternList",
  "PathPatternNameOptional", "PathConcatenation", "ElementPattern",
  "VertexPattern", "GraphPatternVariableDeclarationOptional",
  "IsLabelExpressionOptional", "IsOrColon", "MandatoryEdgePatternFiller",
  "EdgePattern", "FullEdgePattern", "FullEdgePointingRight",
  "FullEdgePointingLeft", "FullEdgeAnyDirection", "AbbreviatedEdgePattern",
  "CreateSchemaStmt", "OptSchemaEltList", "schema_stmt", "VacuumStmt",
  "vacuum_option_elem", "opt_full", "vacuum_option_list", "opt_freeze",
  "PrepareStmt", "prep_type_clause", "PreparableStmt", "VariableResetStmt",
  "generic_reset", "reset_rest", "CheckPointStmt", "RenameStmt",
  "opt_column", "PragmaStmt", "DropStmt", "drop_type_any_name",
  "drop_type_name", "any_name_list", "opt_drop_behavior",
  "drop_type_name_on_any_name", "AlterSeqStmt", "SeqOptList", "opt_with",
  "NumericOnly", "SeqOptElem", "opt_by", "SignedIconst", "CreateSeqStmt",
  "OptSeqOptList", "CopyStmt", "copy_from", "copy_delimiter",
  "copy_generic_opt_arg_list", "opt_using", "opt_as", "opt_program",
  "copy_options", "copy_generic_opt_arg", "copy_generic_opt_elem",
  "opt_oids", "copy_opt_list", "opt_binary", "copy_opt_item",
  "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CreateFunctionStmt", "macro_alias",
  "param_list", "AlterTableStmt", "alter_identity_column_option_list",
  "alter_column_default", "alter_identity_column_option",
  "alter_generic_option_list", "alter_table_cmd", "alter_using",
  "alter_generic_option_elem", "alter_table_cmds", "alter_generic_options",
  "opt_set_data", "VariableSetStmt", "set_rest", "generic_set",
  "var_value", "zone_value", "var_list", "AnalyzeStmt", "UpdateStmt",
  "TransactionStmt", "opt_transaction", "ExecuteStmt",
  "execute_param_clause", "AlterObjectSchemaStmt", "InsertStmt",
  "insert_rest", "insert_target", "opt_conf_expr", "opt_with_clause",
  "insert_column_item", "set_clause", "opt_on_conflict", "index_elem",
  "returning_clause", "override_kind", "set_target_list", "opt_collate",
  "opt_class", "insert_column_list", "set_clause_list", "index_params",
  "set_target", "unreserved_keyword", "col_name_keyword",
  "type_func_name_keyword", "reserved_keyword", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,    60,    62,    61,   736,    43,    45,    42,    47,    37,
      94,   737,    91,    93,    40,    41,    46,    59,    44,    63,
      58,   738,   739,   740,   741,   742,   743,   744
};
# endif

#define YYPACT_NINF -2445

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-2445)))

#define YYTABLE_NINF -1588

#define yytable_value_is_error(Yytable_value) \
  (!!((Yytable_value) == (-1588)))

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const int yypact[] =
{
    3871,   260,    14, -2445, -2445,   260, 31711, -2445,   260,    85,
    3562, 34086, -2445,  5325,   260, 38361,   684,   243,   249,   295,
     351, 38361, 38361, 34561,   260,   246, 38836, -2445,   260, 35036,
     -24,    30, 39311, 38361,   210,   443,    58, -2445, -2445, -2445,
     227, -2445, -2445, -2445, 20403, -2445, -2445, -2445,    92, -2445,
      97,   154,   439,   191, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445,    41, -2445, -2445, -2445, 39786, 38361, 40261, 35511, 40736,
   -2445,   113, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445,   207,  -178, -2445,   120, -2445, -2445, -2445,
   -2445,  1022, 38361, -2445,   682,   749, -2445,   378,   554, 41211,
   -2445, -2445, -2445, -2445,   -41,   558, 38361, -2445, -2445, 35986,
   -2445, -2445, -2445,   518, -2445, -2445,   357, -2445,    55, -2445,
   -2445, -2445,   347, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445,   442, -2445, -2445, 41686, 42161, 42636, -2445,   318,   679,
     671, 19927, -2445,   227, -2445, -2445, -2445, -2445, -2445,   351,
   -2445,   351, -2445, -2445, -2445,    64,   341, -2445,   365,   628,
     375, -2445, -2445, -2445, -2445, -2445,   638,  8172,  8172, 43111,
     351, 43111,   453,    -4, -2445, -2445, -2445, 21831, -2445,   452,
    -178, -2445,   231,   781, 11154, 38361,   473, -2445,   508,   473,
     516,  1022,   539,   544,   439, -2445,  3871, -2445, 38361, -2445,
     630,   871,    30,   375, -2445,   258,   258,  1064,   258,   590,
     800, -2445,  1630, -2445,   639,   953,   927, 35036,   995,   118,
     810,  1024,  1174,  1031,   645,  1041,  1017,  6184, 11154, 25267,
   -2445,  -178, -2445, -2445,   692, -2445, -2445,   705, -2445, -2445,
   -2445, -2445,   679,  1224,   964, -2445,   811, 43586, 44061, 38361,
    1186,   777, -2445, -2445, -2445, -2445,   815, -2445, -2445,   174,
    1133,   799, -2445,    36,  1161,    39, -2445,  1179,  1067, 11154,
   -2445,   966, -2445, -2445, -2445,   505, -2445, -2445, 27167, -2445,
   -2445, -2445,   671,   862, -2445, 27167, 11154, 47861,  1343, -2445,
    1165, 38361,   935, -2445, -2445, -2445, -2445, -2445, -2445,  1390,
     125,  1404, 11154,   941,   125,   125,   942,  1258, -2445, -2445,
   -2445,   124,   948,   949, -2445,    98,    98, -2445,  1125,   975,
     981, -2445,   104,  1448,  1468,   135,   985,  1009,   958,   125,
   11154, -2445,  1035,    98,  1043,  1045,  1050,  1476,  1058, -2445,
    1481,  1066,   176,   182,  1070,  1075, -2445, -2445,   163, 11154,
   11154, 11154, -2445,  7178, -2445,  -178,   351, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445,  1076, -2445,   148,  5051, -2445,  1099,
   -2445, -2445, -2445,   205, 11154, -2445,  1530,   -37, -2445,   164,
   -2445, -2445, -2445,  -178,  1344,  1086, -2445, -2445, -2445,   206,
    1490, 26217, 26692, 38361, -2445, -2445,  -178, -2445, -2445, -2445,
   -2445, -2445, -2445,   550, -2445,   227, 28276,   605,   473, 38361,
   38361,  1556,  1353, -2445, -2445, -2445,   508, -2445,  1373, -2445,
   -2445,   439,   439, 11154,   439,   158,   863,  8669, 11651,  1446,
    1332,   129,   704,  1455, -2445,  1354,   590,   800, 11154, 35036,
   38361,  1262, 44536, 38361, 32186,   612,   837,  1137,  1226,  1146,
     151,  1560, -2445,  1143, -2445,  1233, 38361, 48796,   194, -2445,
    1598,   194,   194,   316,  1603,  1247,   262,  1406,   525,  -125,
    1298, -2445,  1143, 35036,    74,   533,  1143, 38361,  1249,   559,
    1143, 11154, 11154, 11154,  1176, -2445, 28276,   -68, -2445,  1062,
    1088, 24791,  1173, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445,  1261, 38361,  1219,   199,   -34,  1525,  1586, 38361,  1412,
    1298,  1413,  1647,  1191,   705, -2445, 45011,  9166,  1652, -2445,
   -2445, -2445, -2445, -2445, 38361, 29336,  1193, -2445, -2445, 38361,
   -2445, 38361, 38361, -2445, 38361, 38361,   634, 45486,   671, 31236,
   -2445, -2445, -2445, -2445,   737,   806, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, 29336, -2445,  1989, -2445, -2445,
   -2445,  1195,   665, -2445, -2445,  1246, -2445,  1246,  1246,  1200,
    1200,  1201, -2445, -2445, -2445,   958,  1246,  1200, -2445, -2445,
   48796, -2445, -2445,   202,   496, -2445,  1209, -2445,  1669, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,  3217,   685,
     462, -2445,  1022, -2445, -2445, 11154,  -178, -2445,  1212, 28276,
    1255, 11154, -2445, -2445, 11154,  1214,  1700,  1700, 11154, -2445,
   -2445, -2445, -2445,  2303,  1700, -2445,  1700,  1700,  1246,  1246,
   -2445, 28389, 11154, -2445, 23738, 11154, 14136,  9663, 11154,  1301,
    1302,  1700, -2445,  1700, -2445, 11154,  7675, 28389,  1710,  1710,
    2692,  4896,  1220,  -178,  -178, -2445,  1700, 11154,  3304,  3304,
   -2445,   144, 47861, 11154, 11154, 11154, 11154, 28861,  1314,   103,
   38361, 11154, 11154,  1232,   695, -2445, 11154,  1458, -2445,  1234,
   11154,  1328,    94, 11154, 11154, 11154, 11154, 11154, 11154, 11154,
   11154, 11154, -2445, -2445, 16113,   149,  1562,  1576, 11154,   -84,
     305, 11154, 36461,  8172,  1574,  6184, -2445,   143,  1574, -2445,
   -2445, -2445,   165, -2445, -2445, -2445, -2445, -2445,  1195, -2445,
    1195,  1251, 38361,   231, 33136, -2445, 11154, -2445,   707,  1256,
    1746, -2445, -2445,  1543, -2445,  1259, -2445, 27638,  1543, -2445,
   -2445, 14622,  1384,  1545,  1479, -2445, -2445, -2445,  1266, 28276,
   12148, 12148, -2445,   689, 28276,   807, -2445, -2445, -2445, -2445,
   -2445, -2445,   618, -2445, 38361,    31,  1446,   704,   724,  1333,
    1734,  1240, 22307, 38361, -2445,  1503,  1277, 45961, 38361,  1565,
    1518,  1567,  -129, -2445, -2445, -2445, 47861, -2445, 38361, 38361,
   46436, 46911, 29811, 38361, 29336, -2445, -2445, -2445, -2445, 38361,
     851, 38361,  5000, -2445, -2445, -2445,   194, -2445, -2445, -2445,
   -2445, -2445, 38361, 38361, -2445, -2445,   194, 38361, 38361,   194,
   -2445,  1544, 38361, 38361, 38361, 38361,  1621, 38361, 38361,   -51,
     -51,  1499, -2445, 10160,  1296, -2445, 11154, 11154, -2445, 11154,
    1471, -2445,   728, -2445,  1515,    35,  1349, 38361, -2445, -2445,
    1396, 38361,  1632, -2445, -2445, -2445, -2445, -2445,  1307,  1653,
    1298, -2445,  1655,  1003, 32661,   748,  1352,  1546, -2445, -2445,
    1532, -2445,   740, 11154,    36, -2445, 29336, -2445,    39, -2445,
    1533,   122, -2445,  1552,  1785,   705, -2445, -2445, -2445, -2445,
   -2445, -2445, 19451, -2445,   745, -2445, -2445,  1786,   351,  1786,
     534, -2445, -2445,  1786, -2445,  1786, -2445, 27167, -2445, 11154,
    1788, 38361,  1337,  1342, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,
    1700,  1423, -2445,  1424,  1425,  1427, -2445, -2445, -2445, -2445,
   -2445, 47861, -2445,   721, -2445,   750, -2445, 11154, 11154,    13,
   -2445, 27702,   764, 11154,  1330,  1346,   766, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445,  1351,  1675, -2445,  1355,
    1356,  1357, -2445, -2445,  4745, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,  1359,
    1368, 27762,  1375, 14136, 14136,  7178,  1736, -2445, 14136,  1379,
   -2445, -2445,   771, 27656,  1377,  1383,  1402,  1403,  1391,  1394,
   27991, 10657, 11154, 10657, 10657, 28037,  1377,  1395, -2445, 11154,
    1397,  5440, -2445, -2445, -2445,  3039,  3039,  3039, 28389, -2445,
   -2445, -2445,  1408, -2445, 14136, 14136, -2445,  3312,  1294,  7178,
   -2445, -2445,  1718, -2445,   719, -2445,  1399, -2445, -2445,  2645,
   -2445, 23738, 28312, 11154,   112, -2445, 11154,  1232, 11154,  1478,
    3039,  3039,  3039,   218,   218,   121,   121,   121,   286,   305,
   -2445, -2445, -2445,  1405,  1409,  1410,  1605, 28276,  1058, 11154,
   -2445, 28276,   825,   838, 38361,  2944,  4413,  4716, -2445, -2445,
   -2445, 17547,  1447,   -68,  1447,  1700,  3304, -2445,   508, -2445,
   -2445, -2445, 28276, -2445,  1022,  1866,  -160,  1071, 11154, -2445,
   -2445,   523,  1426,  1622,  1623,   915,   915,   689,  1625, -2445,
   -2445,  1482, -2445, 11154,   896, -2445,   959, -2445, -2445, -2445,
   -2445,  1415, -2445, -2445,  1676, -2445, -2445, -2445, -2445, 18023,
    1465, 38361,  1480,   -88, 20879, -2445,  1638, 38361, -2445, -2445,
     -38,  1441, -2445,  1514,  1143, 11154,  1664, -2445,   139,  1442,
    1789,  -101,  1745, 38361, -2445,  1657, -2445,   751,  1795,   122,
    1796,   122, 29336, 29336, 29336, -2445,   351, -2445,   798, -2445,
   -2445,   812, -2445,  -181, -2445, -2445, -2445,  1535,   610,  1298,
    1143, -2445, -2445, -2445, -2445, -2445, -2445, -2445,   107,   674,
    1143,  1536, -2445,  1537, -2445,  1538,   676,  1143, -2445, -2445,
    1459,  1461,  1467, 11154, -2445, -2445, 28276, 28276, 28276,  1460,
   -2445,   114, -2445, 38361, -2445, -2445, -2445,  1471, 38361,   705,
    1466, -2445,   710, 38361, 38361, 38361, 38361,  1507, 38361, -2445,
   -2445, -2445,  1469,  1472, -2445, 47861,   -62,  1690,  1699,  1146,
    1948,  1834, 38361, -2445, 28276, -2445, -2445, -2445, 38361, -2445,
    1835,  1022, -2445, 30761, -2445, -2445, -2445, -2445, 29336, -2445,
     351, -2445,   351,  1714, 38361, 25742,   351,   351, -2445,  1497,
    1342,   824, 47861,  1700,    93,  1496,  1065,   830,   434,   980,
   -2445, -2445, -2445,   834, 28161, 11154, -2445,  1850, 47861, -2445,
    5469, -2445, -2445, -2445, -2445, 11154, -2445, -2445, -2445, 11154,
   -2445, 23738, 11154,  1824, -2445,  1985,  1985,  4896, 47861, 14136,
   14136, 14136, 14136,   673,  1043, 14136, 14136, 14136, 14136, 14136,
   14136, 14136, 14136, 14136, 15119,   420, -2445, -2445, 11154, 11154,
    1836,  1824, -2445, -2445, -2445,   -16,   -16, 47861,  1506,  1377,
    1509,  1510, 11154, -2445,  -178, 24221, -2445,  3304, 11154,  1794,
    2665, 11154,   843, 11154,  1837, -2445, -2445,  1517, -2445, -2445,
   47861, 11154,  1513,  2888, 14136, 14136,  3387, -2445,  4344, 11154,
    7178, -2445,  1499,  1559, 22783, -2445,  1607,  1607,  1607,  1607,
   -2445, -2445, 38361, 38361, 38361,  1519, 18499,  1848, 17071, 36936,
    1521,  1185, -2445, 36936, 37411, -2445,  1540, -2445,  -178, 11154,
    1842,  1528,  1842,  1529, -2445, -2445,  1534, -2445,  1746,  1954,
      88,  2028,  2028, -2445,  2028,    95, -2445,  1071, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445,  1542, -2445,  1426,
      99, -2445, -2445, -2445,  1748, -2445, -2445, -2445, 38361, -2445,
    1521, 11154,  1694, -2445, -2445, -2445, -2445,  1601, -2445, -2445,
     850,  1960,  1694,   867, -2445,  -178, 22307,  1465, 11154, 38361,
   24239,  1893, -2445, 38361, 38361, 38361, -2445, 38361,   875,   933,
    1553, -2445,   933,  1873,   160,  1146,   262,  4233,   -20, -2445,
   -2445, -2445,  1626, 38361, -2445, 38361, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, 29811, -2445, 29336, 23262, 29336, 38361, 38361,
   38361, 38361, 38361, 38361, 38361, 38361, 38361, 38361, -2445, -2445,
   -2445,  1499, -2445, -2445, -2445, -2445,  -125, -2445,   114,  1554,
    1352, 38361,  1586, 47386,   901,  1298,  2014,  1557,   318,   138,
   -2445, -2445,   748, 32661, -2445, -2445, -2445,  1974, -2445, -2445,
    1022, 38361,  1618,   122, 38361, -2445,   919, -2445, -2445, -2445,
   -2445, 38361,  1558, -2445,  1558, -2445, -2445,  1700, -2445, 38361,
   -2445,  1566, -2445,  1572, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, -2445, -2445, 11154, 28276, -2445,  1583, -2445, 28276, 24257,
   -2445, 28276,  1836, -2445,   379,   379,   379,  1750,  1911,   111,
    1587,   379,   379,   379,   271,   271,   153,   153,   153,  1985,
     420, 28276, 28276, -2445, -2445, -2445, -2445,  1590, -2445, -2445,
   -2445,  1377, -2445, -2445,   281, 11154, 11154,  3312, -2445,  3714,
   11154, 47861,   928,  3312,   152, 11154,  3796,  4673, 11154, 11154,
    4702, 24285,  1592, 11154, 48321, -2445, -2445, 38361, 38361, 38361,
   38361, -2445, -2445, -2445,  2079, -2445, 36936, 37411,  1596, 16594,
    1185,  1597, 37886, -2445,  1687,  1602, 18023,  1875,  1803, -2445,
   18023,  1803,   102,  1803,  1878,  1687, 21355, -2445,  1687,  1609,
    1809, -2445,   662, 28276,  2047,  1921,   351,  1921,   351, -2445,
    1071,  1612,  1615,   -31, -2445,  2028, -2445,  2104,   334, -2445,
     -31,  1616,  1617,  1631, -2445, 23738, -2445, -2445, -2445, -2445,
   -2445, 28276,  8172, -2445,  1022,  -178,  1221, 38361,   -61, -2445,
    1641, 38361, -2445,  1694, 28276, -2445, -2445, 38361,   936, -2445,
     946,   933, -2445,  1671, -2445,   150,  1931,    47, -2445, 29336,
    2751,   310, -2445,  1946,  1864, -2445,   194, -2445, 11154,   310,
    1865,   208, 38361, -2445, -2445,  1600, -2445, 47861,   122,   122,
   -2445, -2445, -2445,  1542, 48796,   737,   806, -2445, -2445, -2445,
   -2445, -2445,   462, -2445, -2445,  1656, -2445, -2445,  1729, -2445,
    1731, -2445, -2445, -2445, -2445, -2445,  1651,   862,    67, 38361,
    2111,  1928,   952, -2445,  1881,  1658,  1352, -2445,  1268, 32661,
    1507, -2445,  2044,   513,  1699, -2445,   105,  1695,  1870, 38361,
    1661, -2445,  2120, -2445, 30761,  1558,  1665, 47861, -2445, -2445,
   28276, -2445, -2445, -2445, 14136,  1990,  1666, 47861, -2445,  3312,
    3312,  3714,   954, -2445,  3312, 11154, 11154,  3312,  3312, 11154,
   -2445, -2445, 24303,  1860, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445, 30286, 36936, -2445,  1672, -2445, 33611, -2445, -2445, 38361,
    1185, 18023, -2445, -2445,  1707, -2445, 18023,  1944, -2445, 18023,
   -2445, 38361,  1673, -2445, 38361, -2445, 12645, 11154,  1715, -2445,
    1715, -2445,  1071, 38361, 38361, -2445,  2169,  1681, -2445, -2445,
   -2445,  1680, -2445, -2445, -2445,  1682,  1086, -2445,   -88, -2445,
   -2445,  2091, 18975,  2048, 11154, -2445, -2445,   933, -2445,  1845,
    1671,  1686, -2445, -2445, -2445, -2445, -2445, -2445, -2445,   960,
    1688, 38361, 38361, 14136, -2445,   310,   181,   145, -2445,  1963,
   38361,  1671, -2445, -2445, -2445, -2445,  2070,  2150,  2036, -2445,
   -2445, 28276, -2445, -2445,  1700,  1700, -2445, -2445,  2116, -2445,
   -2445,   462,   459, 23262, 38361, 38361, -2445, -2445, -2445,  -125,
    2072,   962,  1022,  1701,  1973,    90, 38361,  2045, 32661,  2161,
   38361,  1507,  1704, -2445, -2445,   943,   943, -2445,  1846, -2445,
    1849,   220, -2445, 38361, -2445, -2445, 18975,  1022, -2445, -2445,
   -2445,  2311, 14136, 47861,   972, -2445,  3312,  3312,  3312, -2445,
    2146,  1499, -2445,   979,  2167, -2445, 38361,   -54,    37,  1711,
    1713, -2445, -2445,   990, -2445, 11154,  1716, -2445, -2445, 18023,
    1707,   992, -2445, 47861, 38361,   996, 47861,  6681,  1717, -2445,
   -2445, 28276, 28276, 38361,  1772,  1772,   998, -2445, -2445, -2445,
    1723, -2445, -2445,  1771, 38361, 11154,  2140,   175, -2445,  1030,
     -27, 28276, 38361, -2445, 29336, -2445,   933, -2445, 29336, 11154,
   -2445,   714,  1750,  2184, -2445, -2445, -2445, -2445,  1671,   705,
   -2445, -2445,  2039, -2445, 38361,  1792,   625,  1806, -2445, -2445,
   -2445,   862,   351,  1352,  1695, 38361,  2231,  2020, -2445, -2445,
    1843, -2445, 38361,  1022,   318, -2445,   748, -2445, -2445, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445, -2445,  2178,
    1961,  2182,  1618,  1032,  2311,  1036, -2445, 11154,   445,  1540,
   30286,  1756, -2445,  1051, -2445, -2445, -2445, -2445, -2445, 38361,
     916, -2445, 28276, 38361, -2445, -2445, -2445, 38361,  2116,  1087,
   -2445, -2445, 12645,  1753, -2445,  2216,  1897, -2445, -2445, -2445,
   38361, -2445,  1022, -2445, 24373, 38361, 38361, 38361,  1447, 18975,
   -2445,  1882,   705,   933,  1095, -2445,  1773, -2445, 24391,  1984,
   -2445,  2071, -2445,  2017,  1767, -2445, 11154, -2445,  1844, -2445,
   -2445, -2445,  2229, -2445,  1096, -2445, -2445,  2265,  1775,  1777,
    1695,  1507,  1699,  1986, -2445,  1992,  1791,  1352, -2445,  1377,
   13142, 13142,  1793, -2445, -2445, 38361, -2445,  1102,  1797,  1103,
   -2445, -2445, -2445, -2445, 38361,  1799, 33611, -2445, -2445,  2140,
   -2445, -2445,   228,   228, -2445, -2445, 22307,  2017, -2445, 29336,
   23262,  2021,  1767,    65,  2004,  1298, -2445, 28276, -2445,  1022,
   -2445, -2445, 38361, 32661, -2445, -2445, -2445, -2445, -2445, 18975,
    1447, 15616,  1935,   123, 27674, -2445, -2445, -2445, -2445,  1126,
   -2445,  2281,  1953, -2445, -2445, -2445, -2445, 38361,  1426,  1426,
    -154,  2004, -2445, -2445,  2095, -2445, -2445, -2445, -2445, -2445,
      83,  2013, -2445,  2016,  1323,  1695,  1928,  1131, -2445,  1135,
   -2445,  2264, -2445, -2445, -2445, -2445, -2445, -2445,  1805,  1807,
   -2445,   228, -2445, -2445, -2445, -2445, -2445,   588,   588,  2183,
   -2445,  1869, -2445, -2445, -2445,  1920, -2445, 38361,  1352, 13639,
   -2445,  2296,  1426,   933, -2445,  2285, -2445,   131, -2445, -2445,
    1928, -2445,  1447, -2445,  1814, -2445, -2445, -2445, -2445,  1977,
   -2445, -2445, 38361,  2186,  1928,  1979, 38361,  1973,  2020
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
    1209,  1185,     0,    65,    64,  1185,     0,   952,  1185,  1068,
     201,     0,   216,     0,  1185,     0,  1209,     0,     0,     0,
       0,     0,     0,     0,  1185,   281,     0,   215,  1185,     0,
     933,     0,     0,     0,     0,     0,     2,     4,     9,    22,
      47,    17,    12,    38,     0,    39,    19,    32,   248,   235,
     283,   247,  1208,   251,    14,    28,    23,    25,    18,    26,
      24,    15,    35,    30,    36,    10,    31,    29,    20,     6,
      16,    11,    13,     7,    37,     8,    34,    33,    21,     5,
      27,     0,  1184,  1183,  1177,     0,     0,     0,     0,     0,
    1178,   819,  1236,  1237,  1238,  1239,  1240,  1241,  1242,  1243,
    1244,  1245,  1246,  1247,  1248,  1249,  1250,  1251,  1582,  1252,
    1253,  1254,  1533,  1534,  1583,  1535,  1536,  1255,  1256,  1257,
    1258,  1259,  1260,  1261,  1262,  1537,  1538,  1263,  1264,  1265,
    1266,  1267,  1539,  1584,  1268,  1269,  1270,  1271,  1585,  1272,
    1273,  1274,  1275,  1276,  1277,  1278,  1279,  1280,  1586,  1281,
    1282,  1283,  1587,  1284,  1285,  1286,  1287,  1288,  1289,  1290,
    1540,  1541,  1291,  1292,  1293,  1294,  1295,  1296,  1297,  1298,
    1299,  1300,  1301,  1302,  1303,  1304,  1305,  1306,  1307,  1308,
    1309,  1310,  1311,  1312,  1313,  1314,  1315,  1316,  1317,  1318,
    1542,  1319,  1320,  1321,  1322,  1543,  1323,  1324,  1325,  1544,
    1326,  1327,  1328,  1588,  1589,  1329,  1330,  1331,  1590,  1332,
    1333,  1545,  1334,  1335,  1336,  1337,  1338,  1339,  1340,  1591,
    1341,  1342,  1343,  1344,  1345,  1346,  1347,  1348,  1349,  1350,
    1351,  1592,  1546,  1352,  1353,  1354,  1355,  1547,  1548,  1549,
    1356,  1593,  1594,  1357,  1595,  1358,  1359,  1360,  1361,  1362,
    1363,  1596,  1364,  1597,  1365,  1366,  1367,  1368,  1369,  1370,
    1371,  1372,  1373,  1374,  1375,  1376,  1377,  1378,  1379,  1380,
    1381,  1382,  1383,  1384,  1385,  1386,  1387,  1388,  1389,  1550,
    1598,  1551,  1390,  1391,  1392,  1552,  1393,  1394,  1599,  1395,
    1553,  1396,  1554,  1397,  1398,  1399,  1400,  1401,  1402,  1403,
    1404,  1405,  1555,  1600,  1406,  1601,  1556,  1407,  1408,  1409,
    1410,  1411,  1412,  1413,  1414,  1415,  1416,  1417,  1418,  1557,
    1419,  1420,  1558,  1421,  1422,  1423,  1424,  1425,  1426,  1427,
    1428,  1429,  1430,  1431,  1432,  1559,  1433,  1434,  1435,  1436,
    1437,  1438,  1439,  1440,  1441,  1442,  1443,  1444,  1445,  1446,
    1447,  1448,  1449,  1450,  1602,  1451,  1452,  1453,  1560,  1454,
    1455,  1456,  1457,  1458,  1459,  1460,  1461,  1462,  1463,  1464,
    1465,  1466,  1467,  1468,  1469,  1470,  1561,  1471,  1472,  1473,
    1603,  1474,  1475,  1562,  1476,  1477,  1478,  1479,  1480,  1481,
    1482,  1483,  1484,  1485,  1486,  1487,  1563,  1488,  1564,  1489,
    1490,  1491,  1604,  1492,  1493,  1494,  1495,  1496,  1565,  1566,
    1497,  1498,  1567,  1499,  1568,  1500,  1501,  1502,  1503,  1504,
    1505,  1506,  1507,  1508,  1509,  1510,  1511,  1512,  1513,  1514,
    1515,  1516,  1569,  1570,  1517,  1605,  1518,  1519,  1520,  1521,
    1522,  1523,  1524,  1525,  1526,  1527,  1528,  1571,  1572,  1573,
    1574,  1575,  1576,  1577,  1578,  1579,  1580,  1581,  1529,  1530,
    1531,  1532,    41,     0,     0,   801,   820,   821,   826,  1180,
    1067,  1209,     0,  1090,     0,     0,  1091,     0,     0,     0,
     195,   194,   876,   200,     0,     0,     0,   819,   863,  1421,
     861,   799,   820,     0,   985,   986,     0,   994,     0,   979,
     983,   980,     0,  1004,   996,  1005,   997,   978,   998,   987,
     977,     0,  1006,   981,     0,     0,     0,  1181,  1190,   201,
    1209,     0,    42,    47,    55,    54,    51,    53,    52,     0,
     951,     0,   818,   858,   857,   968,   940,   947,  1565,  1497,
     946,   217,   948,   945,  1182,   280,   278,     0,   786,  1367,
    1458,  1469,  1565,     0,  1152,  1155,  1179,     0,   252,   402,
     795,   932,     0,   937,     0,  1435,   256,   259,   832,   257,
       0,     0,   248,     0,     0,     1,  1209,    46,  1174,   214,
    1565,  1497,  1569,   211,   210,   277,   277,     0,   277,     0,
     240,   248,   243,   247,     0,     0,     0,     0,  1340,     0,
       0,  1340,     0,  1340,     0,  1340,     0,     0,   778,     0,
     779,   802,   944,   941,     0,   943,   942,   168,   199,   198,
     197,   196,   201,     0,  1340,   917,     0,     0,     0,     0,
     871,     0,   864,   862,   992,   993,     0,   984,   982,     0,
    1340,   827,   999,  1003,  1340,  1003,   797,  1340,     0,     0,
    1186,     0,    44,    56,    71,     0,    72,    62,    50,    57,
      58,    59,  1209,  1066,   860,     0,     0,     0,     0,   949,
       0,     0,     0,   804,   806,   807,   710,   817,   781,  1534,
    1535,  1536,   770,     0,  1537,  1538,  1539,  1584,   648,   635,
     644,   649,   636,   638,   645,  1540,  1541,   589,  1306,  1542,
    1543,   815,  1544,  1547,  1548,  1549,   640,   642,  1550,  1551,
       0,   816,  1553,  1554,  1402,  1556,  1557,  1559,  1560,   646,
    1562,  1564,  1565,  1566,  1567,  1568,   814,   647,  1570,     0,
       0,     0,   792,     0,   781,   620,     0,   443,   444,   466,
     467,   445,   472,   473,   475,   446,     0,   791,   524,   663,
     619,   631,   691,   567,     0,   618,   613,   263,   787,     0,
     614,   803,   805,   771,   263,   785,  1153,  1158,  1154,     0,
       0,     0,     0,     0,   404,   403,   796,   931,   929,   930,
     928,   927,   934,     0,   936,    47,   724,     0,   258,     0,
       0,     0,     0,   238,   237,     3,   832,   212,     0,   275,
     276,     0,     0,     0,     0,     0,     0,     0,     0,   350,
     297,   298,   300,   347,   351,   359,     0,   244,     0,     0,
       0,     0,   228,     0,     0,   967,   967,     0,     0,     0,
       0,     0,  1147,  1096,  1140,     0,     0,     0,     0,  1020,
    1033,     0,     0,     0,     0,     0,  1030,     0,     0,  1013,
    1007,  1009,  1098,     0,   967,     0,  1094,     0,     0,     0,
    1100,     0,     0,     0,     0,   623,   728,   283,   726,   801,
       0,   777,     0,   834,  1606,  1607,  1608,  1609,  1610,  1611,
    1612,  1613,  1614,  1615,  1616,  1617,  1618,  1619,  1620,  1621,
    1622,  1623,  1624,  1625,  1626,  1627,  1628,  1629,  1630,  1631,
    1632,  1633,  1634,  1635,  1636,  1637,  1638,  1639,  1640,  1641,
    1642,  1643,  1644,  1645,  1646,  1647,  1648,  1649,  1650,  1651,
    1652,  1653,  1654,  1655,  1656,  1657,  1658,  1659,  1660,  1661,
    1662,  1663,  1664,  1665,  1666,  1667,  1668,  1669,  1670,  1671,
    1672,  1673,  1674,  1675,  1676,  1677,  1678,  1679,  1680,  1681,
    1682,  1683,  1684,  1685,  1686,  1687,  1688,  1689,  1690,  1691,
    1692,  1693,  1694,   774,   773,   800,   835,   836,   837,   838,
     780,     0,     0,  1064,     0,   842,     0,   914,     0,  1340,
    1040,  1340,     0,   168,   168,   870,   873,     0,     0,   995,
     991,   989,   988,   990,     0,     0,   828,  1001,  1002,     0,
     972,     0,     0,   974,     0,     0,     0,     0,  1209,     0,
    1014,    67,    68,    66,     0,     0,    70,    60,    69,    48,
    1034,    61,    49,  1017,    43,     0,   859,  1055,  1163,  1164,
    1172,   969,     0,   824,   454,   483,   461,   483,   483,   450,
     450,   463,   451,   452,   488,     0,   483,   450,   455,   424,
       0,   453,   425,   491,   491,   478,     0,   731,   435,   436,
     437,   438,   464,   465,   439,   470,   471,   440,   523,     0,
     450,   825,  1209,   950,   218,     0,   616,   482,   469,   769,
       0,     0,   477,   476,     0,     0,     0,     0,     0,   459,
     458,   457,   622,   734,     0,   456,     0,     0,   483,   483,
     481,   547,     0,   460,     0,     0,   749,     0,   755,     0,
       0,     0,   487,     0,   485,     0,     0,   548,   528,   529,
     620,   724,     0,   615,   621,   810,     0,     0,   523,   523,
     790,   710,     0,   707,   708,   709,     0,     0,     0,   784,
       0,   718,   720,     0,     0,   563,   716,     0,   566,     0,
       0,     0,     0,   704,   705,   706,   698,   699,   700,   701,
     702,   703,   714,   697,   544,     0,     0,   665,     0,     0,
     543,     0,     0,     0,   367,     0,   808,   772,   367,  1166,
    1170,  1171,     0,  1165,  1169,  1157,  1156,  1161,  1159,  1162,
    1160,     0,   925,     0,   922,   363,     0,   260,     0,     0,
     886,  1175,   213,   255,   254,   284,   285,   291,   253,   336,
     337,     0,     0,     0,     0,   356,   354,   327,   301,   326,
       0,     0,   305,     0,   328,   524,   349,   242,   295,   296,
     299,   241,     0,   352,     0,   362,   350,   300,     0,   234,
    1203,     0,     0,     0,   229,     0,     0,     0,     0,     0,
    1340,     0,     0,  1131,  1112,   120,     0,   966,     0,     0,
       0,     0,     0,     0,     0,  1139,  1136,  1137,  1138,     0,
       0,     0,     0,  1018,  1019,  1032,     0,  1023,  1024,  1021,
    1025,  1026,     0,     0,  1011,  1012,     0,     0,     0,     0,
    1010,     0,     0,     0,     0,     0,     0,     0,     0,   283,
     283,   283,   629,     0,     0,   282,     0,     0,   775,   778,
    1054,   176,     0,   166,     0,     0,     0,     0,   844,   843,
       0,     0,   201,   918,   921,   919,   916,   920,     0,     0,
    1039,  1037,     0,     0,   165,   139,   875,  1340,   872,   156,
       0,  1092,     0,     0,  1003,   829,     0,  1000,  1003,   798,
       0,  1003,  1189,  1340,     0,   168,    45,    63,  1015,  1035,
    1016,  1036,  1061,  1087,     0,  1069,  1074,  1052,     0,  1052,
       0,  1071,  1075,  1052,  1070,  1052,  1065,     0,   970,     0,
     435,     0,   430,   426,   496,   497,   498,   499,   506,   507,
     504,   505,   500,   501,   494,   495,   502,   503,   492,   493,
       0,   508,   509,   510,   511,   512,   513,   514,   515,   441,
     939,     0,   447,   450,   938,     0,   782,     0,     0,   768,
     764,     0,     0,     0,     0,     0,     0,   735,   736,   737,
     738,   739,   740,   741,   742,   743,     0,     0,   744,     0,
       0,     0,   480,   479,     0,   696,   707,   708,   709,   704,
     705,   706,   698,   699,   700,   701,   702,   703,   722,     0,
       0,     0,     0,     0,     0,     0,     0,   590,     0,     0,
     613,   690,     0,   724,   754,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   724,   760,     0,   781,     0,
       0,     0,   812,   813,   525,   539,   540,   541,   545,   840,
     839,   789,     0,   783,     0,     0,   526,   549,   554,     0,
     761,   585,     0,   573,     0,   562,     0,   571,   575,   550,
     565,     0,   546,     0,   784,   719,   721,     0,   717,     0,
     536,   537,   538,   530,   531,   532,   533,   534,   535,   542,
     695,   693,   694,     0,     0,     0,   673,   568,     0,     0,
     570,   569,  1332,  1367,     0,   274,   274,   274,   262,   272,
     788,     0,   416,   283,   416,     0,   523,   405,   832,   935,
     923,   924,   725,   831,  1209,     0,   416,     0,     0,   289,
     290,     0,   294,  1560,  1454,     0,     0,     0,     0,   329,
     357,     0,   348,     0,   804,   330,   803,   331,   334,   335,
     306,   358,   793,   360,     0,   353,   246,   245,   364,     0,
     232,     0,     0,     0,     0,  1198,  1215,     0,   781,  1231,
     367,     0,   230,     0,  1097,     0,  1340,  1114,     0,     0,
       0,     0,     0,     0,    75,   111,    75,  1151,  1340,  1003,
    1340,  1003,  1240,  1307,  1470,  1143,     0,   144,     0,  1110,
     960,     0,   129,   173,  1133,  1148,   953,     0,     0,  1008,
    1099,  1022,  1027,   956,  1031,  1028,  1193,  1029,   967,     0,
    1095,     0,   954,     0,  1191,     0,     0,  1101,   958,  1195,
       0,     0,     0,     0,   727,   624,   729,   730,   777,     0,
    1053,     0,   167,     0,  1063,  1043,  1044,  1054,     0,   168,
       0,   917,     0,     0,     0,     0,     0,   208,     0,   159,
     157,   187,     0,   164,   158,   166,     0,     0,   115,     0,
       0,     0,     0,  1093,  1089,   971,   830,   973,     0,   975,
       0,     0,  1059,     0,  1057,  1058,  1062,  1056,     0,  1051,
       0,  1082,     0,     0,     0,     0,     0,     0,  1173,   431,
     427,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     732,   448,   279,     0,     0,     0,   765,     0,     0,   661,
       0,   637,   639,   449,   651,     0,   462,   641,   643,     0,
     711,     0,     0,     0,   652,   592,   593,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   608,   607,   653,   689,     0,     0,
     752,   753,   654,   490,   489,   491,   491,     0,     0,   759,
       0,     0,     0,   659,   617,   725,   474,   523,     0,     0,
       0,     0,     0,     0,     0,   574,   564,     0,   572,   576,
       0,     0,     0,   558,     0,     0,   556,   586,   552,     0,
       0,   587,     0,     0,     0,   630,   274,   274,   274,   274,
     271,   273,     0,     0,     0,     0,     0,  1454,     0,   388,
     365,   368,   375,   388,   393,   632,   414,   633,   795,     0,
     339,     0,   339,     0,  1167,   926,     0,   885,   886,   880,
       0,   893,   893,   912,   893,   913,   911,   883,   887,   889,
     890,   900,   902,   903,   904,   901,   286,     0,   712,   294,
       0,   288,   333,   332,     0,   304,   355,   302,     0,   361,
     233,     0,  1220,  1204,  1202,  1222,  1221,     0,   781,  1229,
       0,     0,  1220,     0,  1223,  1235,     0,   232,     0,     0,
       0,     0,   119,     0,     0,     0,    75,     0,     0,   183,
       0,   170,  1132,     0,     0,     0,  1106,     0,  1124,  1116,
    1102,  1130,     0,     0,  1135,     0,  1128,  1145,  1146,  1144,
     103,    85,  1149,     0,   116,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   627,   628,
     625,   283,   776,  1085,  1086,  1084,  1013,   177,     0,     0,
     875,     0,   915,     0,     0,  1040,     0,   168,  1190,     0,
     204,   143,   139,     0,   137,   136,   138,     0,   209,   874,
       0,     0,   869,  1003,     0,  1083,     0,  1047,  1088,  1072,
    1077,     0,  1081,  1079,  1078,  1073,  1076,     0,   432,     0,
     422,     0,   433,     0,   442,   516,   517,   518,   519,   520,
     521,   522,   468,     0,   767,   763,     0,   634,   733,     0,
     723,   747,   746,   591,   603,   604,   605,   748,     0,     0,
       0,   600,   601,   602,   594,   595,   596,   597,   598,   599,
     606,   757,   756,   750,   751,   486,   484,     0,   656,   657,
     658,   758,   692,   811,   527,     0,     0,   555,   762,   577,
       0,     0,     0,   551,   711,     0,     0,     0,     0,     0,
     560,     0,     0,     0,   676,   671,   672,     0,     0,     0,
       0,   265,   264,   270,     0,   366,   388,   393,     0,   248,
       0,   375,     0,   387,   323,   386,     0,     0,   399,   397,
       0,   399,     0,   399,     0,   323,     0,   389,   323,   386,
       0,   406,   796,   415,     0,   346,   624,   346,     0,   261,
       0,     0,     0,   895,   896,   893,   897,     0,     0,   892,
     895,     0,     0,     0,   888,     0,   287,   292,   293,   303,
     794,   231,     0,   227,     0,  1210,     0,     0,  1207,  1197,
       0,     0,  1232,  1220,  1211,   961,    75,     0,     0,  1113,
       0,   185,   131,   163,   146,     0,     0,     0,    76,     0,
     151,     0,  1105,  1125,     0,  1121,     0,  1150,     0,     0,
       0,     0,     0,  1120,  1108,     0,  1103,     0,  1003,  1003,
    1111,   130,    82,  1402,     0,   698,   699,   172,    77,   178,
      79,    81,   450,    80,    78,   175,   957,  1194,     0,   955,
       0,  1192,   964,   962,   959,  1196,     0,  1066,  1046,     0,
       0,     0,     0,   847,  1340,     0,   875,  1038,     0,   165,
     208,   206,     0,   193,   115,   188,     0,   226,     0,     0,
       0,   976,     0,  1060,     0,  1080,     0,     0,   428,   434,
     766,   650,   660,   745,     0,     0,     0,     0,   655,   583,
     581,   578,     0,   579,   559,     0,     0,   557,   553,     0,
     588,   662,     0,   678,   675,   269,   268,   267,   266,   374,
     372,     0,   377,   823,   822,   384,   316,   322,   373,     0,
     369,     0,   398,   394,     0,   395,     0,     0,   396,     0,
     370,     0,   822,   371,     0,   413,     0,     0,   667,   809,
     667,  1168,   884,     0,     0,   898,     0,     0,   899,   910,
     906,     0,   905,   907,   908,     0,  1219,  1199,     0,  1200,
    1230,     0,     0,     0,     0,  1224,  1176,   181,  1115,     0,
     163,     0,    75,   148,   147,   150,   145,   149,   152,     0,
       0,     0,     0,     0,   132,     0,     0,     0,    96,     0,
       0,   163,   169,    92,    93,   202,     0,     0,     0,  1117,
    1107,  1104,  1109,  1118,     0,     0,  1119,  1122,   421,  1134,
    1127,   450,   450,     0,     0,     0,   626,  1042,  1049,  1013,
       0,     0,     0,     0,     0,     0,     0,     0,   165,     0,
       0,   208,     0,  1187,   207,     0,     0,    73,     0,   112,
       0,     0,   219,     0,   867,   868,     0,     0,  1048,   429,
     423,   609,     0,     0,     0,   580,   584,   582,   561,   664,
       0,   283,   409,     0,   412,   376,     0,     0,   311,   318,
       0,   321,   315,     0,   378,     0,     0,   380,   382,     0,
       0,     0,   417,     0,     0,     0,   799,     0,   338,   340,
     343,   342,   345,     0,   314,   314,     0,   881,   878,   894,
       0,   891,   713,     0,     0,     0,  1226,  1226,  1233,     0,
       0,  1212,     0,    75,     0,   162,   182,   110,     0,     0,
      94,     0,   100,     0,   134,   135,   133,    95,   163,   168,
      97,   203,     0,  1126,     0,  1142,   450,     0,   174,   965,
     963,  1066,     0,   875,   226,     0,     0,   849,   845,   846,
       0,   848,     0,     0,  1190,   205,   139,   128,   121,   122,
     123,   124,   125,   126,   127,   142,   141,   113,   114,     0,
       0,     0,   869,     0,   610,     0,   611,     0,   681,   414,
       0,     0,   408,     0,   309,   307,   310,   312,   308,     0,
       0,   385,   401,     0,   381,   379,   390,     0,   421,     0,
     392,   344,     0,   666,   668,     0,     0,   250,   249,   879,
       0,   909,     0,  1206,     0,     0,  1228,  1228,   416,     0,
    1214,     0,   168,   184,     0,   154,   161,   153,     0,     0,
      91,     0,    98,   192,    84,   420,     0,  1129,     0,   179,
    1041,  1045,     0,   220,     0,   853,   851,     0,     0,     0,
     226,   208,   115,     0,   223,     0,     0,   875,   612,   677,
       0,     0,     0,   407,   410,     0,   383,     0,     0,     0,
     418,   419,   391,   341,     0,     0,   316,   882,  1201,  1226,
    1225,  1227,   291,   291,  1205,  1234,     0,   192,   140,     0,
       0,   118,    84,     0,   109,     0,  1123,  1141,   180,     0,
     850,   852,     0,   165,   221,  1188,    74,   224,   225,     0,
     416,  1533,  1283,  1504,     0,   679,   682,   680,   674,     0,
     319,     0,   325,   400,   669,   670,   313,  1228,   294,   294,
     416,   109,   155,   160,     0,    99,   101,   189,   190,   191,
       0,   105,   102,   106,     0,   226,     0,     0,   854,     0,
     865,     0,   686,   685,   684,   688,   687,   411,     0,     0,
     317,   291,  1217,  1216,  1213,    75,   117,     0,     0,     0,
     107,     0,   108,    83,   222,     0,   841,     0,   875,     0,
     320,     0,   294,   186,    88,     0,    87,     0,   171,   104,
       0,   855,   416,   683,     0,  1218,    86,    90,    89,     0,
     866,   324,     0,     0,     0,     0,     0,     0,   856
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -2445, -2445, -2445,  1737, -2445, -2445,  -307, -2445,  -431,  -425,
   -2445, -2445,    23,  -628,  1308, -2445,  -932, -1594, -2233,  -381,
   -2445,  -446, -2445,  -197, -1581,  -416,  -402, -2445, -2146,  -788,
   -2445,  1516,  -104, -2445,   712, -2445, -1934, -2445, -2445,   702,
   -2445,  -796, -2445, -2445, -1269,   333,  -349, -2126, -2159,   658,
    -605, -2445,  -399,   381, -1545, -2445,   725, -2445,  -340, -2445,
    -466, -1980,    71, -2147,  -952, -2445, -2445,   285,  -931, -2326,
      25,  1539,   423, -2445,     6,  2214,   -33,    22,    32,    51,
      60,  1573,  1599, -2445,  -532,   697, -2445, -2445,  -589,   -43,
   -2445,   783, -2397, -1866,  -375,  1128,  1561,  1564,  -232,  -136,
   -2445,  -311, -2445,  -974, -2445, -2445,   785,  1171, -1082, -1087,
   -2445,   494, -2445,  -229, -2445,   230,  -363,  1148, -2445,  1575,
   -2445, -2445, -2445, -2445, -1070,   780, -1723,   522, -1769, -1655,
     265,   251,  -842,   -95,    29,   530,  -191, -2445, -2445,  -188,
   -1529, -2194,  -204,  -202, -2445, -2445, -1031,  1027,  -813, -2445,
   -2445,  -677,   348, -2445, -2445, -2445,   603,   987, -2445, -2445,
    1494,  2289, -2445,  -259,  2331,  -568,  -671,  1315, -1029,  1316,
   -1027, -1018, -1033,  1317,  1320, -1059,  3300,  -291,  -735,     5,
   -2445, -2206,  -906, -2445, -2445,    66, -2445,  -270, -2445,  -268,
   -2445, -2445, -2445,  -256, -2444, -2445,  1252, -2445, -1083, -2445,
    3513,   841, -2445, -1453,  -542,  -581,  -806, -1768, -2445, -2445,
   -2445, -2445, -2445, -2445, -1434, -1603,  -506,   897, -2445, -2445,
    1004, -2445, -2445,  -901,  -524,  1116,  -527,  -703,   902, -2445,
    -534,  1254, -2445,   894,  -478,    89,  -828,    28, -2445,  1633,
      86,    -6, -2445,  -494,  -510, -1030,  -737, -2445,  -601, -2445,
   -2445, -2445, -2445, -2445,    -8, -1877,  -388, -2445, -2445,  -356,
   -2445, -2445, -2445, -2445, -2445,  -928, -2445,  -149, -2445, -2445,
   -1944, -2445,   570, -2445, -2445, -2445,   548,   277, -1777, -2445,
   -1637,   269, -1420,   549, -2445, -2445, -2445, -2445, -2445, -2445,
   -2445,   744, -2445, -2445,  1253, -2445, -2445, -2445, -2445, -2445,
    -977, -2445, -2445, -2445, -2445, -2445,  -764, -2445, -2445, -2445,
   -2445,  1457,  -613, -2445, -2445,  -600,  -820,  -645,  -840, -2445,
     232,  -923,   447, -2445, -2445, -2445, -2445, -2445,  -423,   758,
   -2102, -2445,   716, -2445, -2445, -2445, -2445,   172,   460, -2445,
   -2445, -2445, -2445, -2445, -2445, -2445,   499, -2445,  1189, -2445,
     487,  -490,   828, -2445, -2445,   757, -2445,  1085, -2445,   592,
    1272,    44, -2445,  1392, -2445, -1931, -2445,    48, -2445, -2164,
   -2445, -2445,   280,   532, -2445,  -157, -1699,   101, -2445, -2253,
   -2380, -2445,  -223, -2198, -1541,  1833,  -435,  -326, -1911
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    35,    36,    37,    38,    39,   578,  1016,   522,  1017,
    1018,   655,    40,  1028,   657,   658,    41,  1949,  2237,  2706,
    1970,  2798,  2402,  2403,  1645,  2751,  2752,  1951,  2018,  1268,
    2745,  1709,  2575,  1651,  1634,  2404,  1718,  2525,  2273,  1646,
    2208,  1710,  2389,  2634,  1338,  1711,  2635,  2382,  1712,  1311,
    1335,  2210,  2753,  1652,  1312,  2238,  1255,  1713,  2704,  1714,
     484,  2407,   524,  2010,   982,    43,    44,   553,    45,  2452,
     525,   821,  1922,  1610,   526,   735,    49,    50,    51,   574,
     566,   567,  1174,  1558,  1862,   801,   547,   548,   589,  1305,
    1205,  1206,  1582,  1911,  1230,  1231,   810,   811,  2479,  2617,
    2480,  2481,  2327,  2328,  2770,  1218,  1222,  1223,  1595,  1588,
    1211,  2155,  2498,  2499,  2500,  2348,  1226,  1227,   813,   814,
     815,  1235,  1605,    53,  1562,  1870,  1871,  1872,  2133,  2134,
    2148,  2144,  2333,  2487,  1873,  1874,  2472,  2473,  2592,  2151,
    1880,  2491,  2492,  2545,  1751,  1056,  1057,  1383,  1058,   736,
    1059,  1412,   737,  1095,  1061,   738,   739,   740,  1064,   741,
     742,   743,   744,  1078,   745,   746,  1112,  1401,  1402,  1403,
    1404,  1405,  1406,  1407,  1408,  1409,   786,  1466,   748,   749,
     750,  1876,   751,  1167,  1546,  2504,  2613,  2614,  1855,  2115,
    2313,  2471,  2672,  2725,  2726,   752,   753,  1543,  1162,  1163,
     754,  2240,  1165,  1459,  1486,   867,   868,  1069,  1436,  1437,
    1462,  1783,  1469,  1475,  1810,  1811,  1487,  1511,   755,  1419,
    1420,  1767,  1080,   756,   610,   872,   611,  1076,  1505,   764,
     757,   758,  1601,   559,  2483,   646,   964,   759,   760,   761,
     762,   763,  2325,   465,  2691,   996,   791,   870,  1647,  1501,
      54,  1320,  2560,  2262,  2263,  2434,  2557,  2656,  2757,  2758,
      55,   534,    56,    57,    58,    59,  2455,  2280,   986,  1340,
    1720,   485,    60,  2162,  2506,  1576,  1577,  1897,  1898,  1899,
    2170,  2355,  2167,  2168,  1900,  1901,  1902,  1903,  1904,  1905,
      61,   977,  1326,    62,   782,   563,   783,   785,    63,   668,
     614,    64,   542,   543,    65,    66,  1259,    67,    68,   514,
     515,   643,  1000,   516,    69,  1330,  1286,  1029,   851,  1276,
    1023,    70,  1331,    71,  1697,  2429,  2026,  2430,  1740,  1691,
    1026,  1736,  1363,  1315,  1027,   472,  1376,  2027,  1996,  1364,
      72,   486,   988,    73,  1958,  1959,  1960,  1648,   832,  2647,
    1649,   833,   834,  1962,    74,   554,   555,  1030,  1185,  1031,
      75,   527,    77,    84,    78,   650,    79,   528,  1616,  1241,
    2373,    81,  1929,  1619,  1932,  2518,  2183,  1927,  1933,  2626,
    2692,  1930,  1620,  2519,  1621,   492,   467,   468,   969
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     464,   573,   850,   816,   642,   491,    47,   590,   965,   491,
    1290,   462,   973,  1022,   765,   535,   491,   541,  1089,  1090,
     541,  1458,   787,   560,  1273,    46,   491,   491,  1254,  1289,
    1019,  1123,  1003,   776,   463,  1882,  1103,   645,   541,   523,
    1413,  1265,  1952,  2176,    76,  1323,  1324,  1889,    80,  1325,
     584,    52,  1114,   651,  1327,  1354,  2260,  1301,   558,  1201,
    1433,  1967,  1261,  1969,  1429,  2244,  1431,    52,  1842,  1492,
    1493,    42,  2102,  1225,   592,  1432,  1934,  2270,  2274,   560,
     491,   560,   560,   560,   593,  1032,   660,   970,  1948,   652,
    1294,  2163,  -236,   569,   997,  1414,   654,   997,  2163,  1068,
     490,  1494,   677,  -450,   518,  2147,   533,  1006,  1564,  -463,
    2442,   536,   852,   869,   856,  2474,   860,   604,  -824,   532,
    2174,   568,   568,  2443,  1184,  -825,  -824,  -824,  2447, -1587,
    -483,  1561,  1132,  -825,  -825,   470,  1600, -1587, -1587,  1597,
    -488,   824,  1524,  1503,  -488,  2130,   561,   825,  -802,  1257,
    2495,  1765,  1503,   532,  -239,  2427,   974,   677,  2004,  1292,
     595,   636,  1138,  2386,  1788,   770,  2516,  1345,  -478,   532,
     532,  -696,   869,  1070,   967,   600,  1540,  1172,  -696,  -715,
     997,  -491,  1257,  1541,  -236,  2164,  -715,  -491, -1050,  2507,
    2548,  1122,  1980,  1274,  1140,   661,  1277,  1278,  1010,  2032,
    2034,  1182,  2777,   677,  1695,  1470,  1246,  2083,  1124,  1179,
    1010,   532,    85,   570,   809,   677,   662,   677,  2145,  2014,
    1168,   587,  2371,   660,  2448,  1635,   812,  2558,  2653,  1132,
     660,  1024,  1318,  2189,   777,  2747,  1177,  1380,   587,  2412,
    2449,  2295,  2630,   585,  2271,  2807,  -239,  2693,  2625,   596,
    2516,  2594,   970,   826,  2523,  2171,   990,  2172,  2583,  1138,
    2177,  2536,     3,     4,  2627,  1579, -1013,  2383,  1525,  1068,
    1548, -1013,  2138,   545,  2212,  2540,  1238,  2761,  1304,  2579,
    1299,  1300,  1788,   968,  1526,   799,  2763,  2580,   805,  1527,
     626,  1140,  1132,  1879,  2565,  2738,  2739,  1132,  2534,  1879,
    2609,   991,  1976,  1603,  2164,  1249,  2139,  1632,   540,   586,
    1470,  2164,  1198,  1925,   608,  1977,  1132,   530,   609,  1209,
    1180,  2336,  2439,  2178,  1528,  1956,   627,  1138,  2060,   583,
    2141,  1284,   661,  2302,  2714,  1632,   660,   660,  1888,   661,
    2405,  2384,  2596,  1070,  1936,  2803,  1138,  1926,  2213,  2062,
     529,  1580,  2201,  2225,  1140,  1285,   532,  2771,  2147,  1140,
     807,   628,  1089,  1090,  2406,  1633,  2748,   869,   869,   869,
    1103,  1467,  2535,    86,  2792,  -236,   546,  2084,  1140,  1336,
    1760,    87,   998,  1114,  2474,   998,   587,   676,   800,  2296,
    1788,  1266,  2597,  1945,   965, -1588, -1588, -1588,  2198,   778,
    2200,   779,   531,  2272,  2808,   827,  1342,  2631,   629,   771,
    1549,  1604,  2642,  2330,  1319,  2533,    88,  2334,  2537,  1044,
    2450,  1279,  1210,  2516,  1362,  1082,  1083,  2559,  2214,  2784,
    1303,  1788,  1264,  2372,  2764,  2595,  2737,  -239,  1458,  -236,
    1181,  1236,  1109,   575,  2749,   661,   661,  1379,  1696,  2650,
    1100,  1627,  2143,  1237,  2581,  1251,  2687,   637,   828,  2293,
    1936,  1173,   829,    89,  1110,  1418,   560,  2743,   998,  2166,
     562,  2319,  1529,   625,   992,   597,  1589,   613,  1194,   772,
     560,  2729,  1068,   491,   642,  2387,  2285,  1293,   573,  1347,
    1290,   830,   671,   869,  2376,  1351,   612,  1684,  1908,  1169,
    1914,  -239,  1504,  2428,  1597,  1993,  1994,  1884,   641,   491,
     491,  1844,  2244,  2516,  2715,   615,  2716,  2778,  1726,   616,
    1981,  2759,    52,  1348,   564,   588,  2598,  -696,  2357,  2464,
    1316,  1445,  1542,  1415,   999,  -715,  1500,  1002,   573,  1446,
    1447,  1448,  1422,   541,   656,   541,  1426,   665,  -236,   817,
    1937,   560,  1416,  2475,  2442,   576,  1070,   831,   666,   491,
     967,  1280,  1470,  1470,  1068,  1472,  1474,  1470,  1252,  1281,
    1077,    52,   560,  1684,   660,  2174,    25,  1356,   633,   471,
    2165,   993,    47,  1267,   654,   781,  2042,  -236,  2166,  -236,
     967,   560,  1088,  1124,  1563,  2166,   592,  1886,  1094,  1416,
     970,    46,  2377,  1470,  1470,   648,   593,  -824,  2484,  2652,
    -239,  1161,    29,  2488,  -825,   663,  2490,   664, -1587,  -483,
      76,   560,   560,   560,    80,   788,   822,    52,  2388,  -488,
    1506,  1661,  2662,  2661,  1109,   608,   767,  -802,  1070,   609,
    1109,  1664,  1127,  1803,  1667,  1264,  2794,    42,  1317,  -239,
    2375,  -239,    31,   970,   568,  1877,  1110,  -478,  1175,  1565,
    1109,  2445,  1110,  1653,  1794,  1074,    32,   608,   824,   968,
    1111,   609,  1659,   577,   825,    82,  1113,   780,  2202,  1014,
    1015,   869,  1110,   661,  1635,  1392,  1393,  1257,  1068,   594,
      33,  1014,  1015,  2414,  2415,  2585,  1111,  1258,  1458,   968,
     573,   607,   967,  1877,   571,  1158,  1159,  1160,  1161,  2446,
    1680,  1681,  1682,    52,  2431,     3,     4,  1735,  1284,    83,
     622,  2040,  2365,  2720,  2048,  2050,  2051,  2045,  1467,  1467,
    2046,  1725,   623,  1467,  1734,  1727,  1761,  2056,  1729,  2047,
    2049,  1358,  1285,  2356,  1021,   965,   677, -1013, -1013,   805,
    2356,  1021,  2278,  2006,   806,  1624,   630,  2063,  1800,  1801,
    1802,  1803,  1070,   519,   634,  1266,  2604,   560,  2093,  1467,
    1467,  2670,  1662,  1266,  1953,   635,   519,  1665,  1082,  1083,
     826,  2390,  1660,   491,   491,  1824,  2087,  1100,  2526,  2244,
    1156,  1157,  1158,  1159,  1160,  1161,   638,  1396,  1397,  1266,
    2671,  1670,  1743,  2068,   639,    25,  1677,  1744,  1907,   869,
    1360,   968,   649,   560,   560,   677,  1244,   560,  1256,  1290,
    2359,   807,  1125,  1203,  1204,  1512,  1208,   967,  2393,   967,
     560,  1885,  1129,   593,   593,   667,   593,  2360,  1212,  1442,
    1443,    29,   669,  1068,  2802,  1176,   670,   560,   822,  1834,
    1266,   560,  1513,  2795,   474,  1183,  1702,  1021,  1021,  1745,
   -1588, -1588, -1588,   805,  1798,  1799,  1800,  1801,  1802,  1803,
     808,   671,  2772,  2773,   824,  1763,  1835,  1991,   568,  2785,
     825,    31,  1291,  1213,  1288,   869,  1954,  2395,  1470,  1470,
    1470,  1470,  1295,  1908,  1470,  1470,  1470,  1470,  1470,  1470,
    1470,  1470,  1470,  1470,  1982,  1798,  1799,  1800,  1801,  1802,
    1803,   967,  1257,   475,  1266,  1935,  1266,  1070,  1298,  1912,
    2477,   672,  1260,  2809,   677,  2478,  2805,   660,  2015,  2633,
     769,  2019,   827,   571,  2796,   807,   968,  2815,   968,   775,
    1819,  2069,   660,  1470,  1470,  2239,  1742,  2637,  2547,   784,
    1746,  2070,  1747,  1088,  1109,  1346,  1088,  1267,   995,  -282,
    1877,  2797,  1877,  1514,  -282,  1267,  1313,  1832,  1515,  1979,
    2567,   789,   560,  1516,  1881,  1818,  1110,  1820,  1821,   599,
    1339,   602,  2639,   606,   808,   854,   826,  2398,   641,   829,
    1113,  1267,  1836,   641,  1215,   491,   491,  1837,   491,   641,
    1008,   560,   790,  1009,  1449,  1450,  1451,  1122,  1452,  1453,
    1454,  1455,  1456,  1457,   792,  1060,  1386,  1387,   855,  1264,
     968,  2568,  1098,  1099,  1863,  1864,  1964,  1264,  1966,  2569,
    2399,  -282,   656,  1983,   793,  1987,   661,    25,   827,   794,
     824,   626,  1267,  1598,  1599,  1192,   825,  2400,  1193,  2204,
      25,   661,  1216,  1264,  1467,  1467,  1467,  1467,  2570,    52,
    1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,
    1323,  1324,  2282,    29,  1325,  -833,  -833,   627,   613,  1327,
    -282,  1392,  1393,  1212,   831,   480,    29,   481,   618,   798,
     619,  1349,  1458,  1350,  2000,  1955,  1956,   612,  1460,  2694,
    1195,  1306,  1307,  1196,  1264,  2025,  1267,   797,  1267,  1467,
    1467,   483,  2003,    31,  2648,  1517,   615,  2224,   803,  1088,
     616,  1346,   819,    52,  1957,  1518,    31,    32,  1213,  1352,
     520,  2571,  1196,   818,   641,  2205,  2216,  1362,   827,  1838,
      32,   820,  2572,  2401,  2085,  2086,   823,  1068,  2199,  1839,
     835,    33,   826,  1706,   608,   620,  -802,   621,   609,   629,
    1378,  -329,  -329,  1379,    33,   571,   560,  2215,  1264,  2223,
    1264,  2340,  1785,  1786,  2343,   836,  2257,  1805,   521,  1438,
    1410,  2793,   853,  1411,  1068,  1060,   560,   971,   560,   869,
    1214,  2760,   857,  1396,  1397,   829,  2418,   824,  2206,   972,
    1068,  2207,  1573,   825,  1716,  1002,  1717,   967,   967,   967,
     837,  2774,  2422,  1829,  1830,  1088,   781,  1346,  2023,  1608,
    1068,  1070,  1196,  1692,   830,  2185,  1693,   975,   560,   838,
    1877,  1856,   976,  1857,  1877,  1723,  1618,  1622,  1379,  1215,
    1737,  1256,   491,  1738,  1858,  1762,  1859,  1615,  1196,  1068,
    -333,  -333,   491,  1637,   491,  1641,  2460,   491,  1070,  1769,
     978,  1773,  1196,   491,  1196,   491,  1807,   985,  1566,  1196,
    1062,   987,  1068,  2810,  1070,   989,   641,   491,  2137,   839,
    2091,   641,   491,   802,   994,   804,   491,   491,   491,   491,
     831,   491,   491,  1972,  1070,   995,  1973,  1216,   660,  2335,
    1416,  2338,  1131,   967,   827,  1132,   766,  1974,   768,   826,
    1975,   560,  1001,  -332,  -332,  1701,   968,   968,   968,  2038,
    1394,  1395,  2039,  1070,  2117,  2118,  2119,  2120,  1715,  2052,
    1004,  2243,  1196,  2573,   837,  1138,  2574,  1628,  2098,  1707,
    1908,  1196, -1588,  1396,  1397,  2186,  1070,  1636,  2187,  1639,
    1005,  2152,  1650,   838,  1612,  2138,  1025,   858,  1654,   837,
    1656,   829,  2190,  1188,  1190,  2191,   617,  1140,  1007,    25,
    2203,   840,  1663,  1693,  1653,  1752,  2245,  1666,   838,  1072,
     631,  1671,  1672,  1673,  1674,  2224,  1678,  1679,    25,  2139,
     859,  2546,  2239,  1470,  1073,  -454,  2266,    90,  1060,  1693,
     469,  2378,  2256,   839,  2140,    29,   517,   661,  1068,  -461,
    2281,  1416,   968,  2141,  2283,  1877,   544,  2284,  2440,   841,
     556,  1380,  1085,  2303,    29,  1877,  1411,   842,   839,  1075,
    1877,  2379,   573,  1877,  1693,  1081,  1084,  1091,  1831,   843,
    1062,  2380,  1086,  1087,  1693,    31,  2142,  2435,  1021,  2465,
    2436,   774,  1411,  -451,  1741,  2527,   831,  2553,  2528,    32,
    1693,   827,  2608,  1021,    31,  2608,  1877,  2586, -1588,   571,
    1411,   844,   796,  -452,  2589,  1093,   573,  2590,    32,  1096,
    1060,  -455,  2242,    33, -1588,  2601,  -453,  2606,  1002, -1588,
    2607,  2610,  1470,  2619,  2607,   840,  2620,   571,  2064,  2065,
    2066,  2067,    33,  1097,  2071,  2072,  2073,  2074,  2075,  2076,
    2077,  2078,  2079,  2080,   845,  1460,   571,  2368,   829,   846,
     840,   980,   983,   984, -1588,  2628,   824,  2667,  2629,  1102,
    2629,  2668,   825,  1068,  1411,  2143,  1613,  1104,   967,  1105,
     967,   847,   967,   841,  1106,  1171,  2676,   848,   560,  1002,
    1877,   842,  1107,  2106,  2107,  1878,  1166,  1890,  1172,  1467,
    1108,  1470,   849,   843,  1115,  1891,  1875,   824,   841,  1116,
    1126,  2410,  1892,   825,  1893,  1894,   842,  1895,  1896,  1149,
     613,   573,  2682,  1877,  1173,  2607,  1186,    25,   843,   463,
    2698,  2710,  1199,  2699,  1002,   844,  1200,  2730,  2733,   612,
    2731,  1002,  1202,  1878,  1060,  1923,    25,  1070,  1928,  2551,
     806,  1618,   808,   831,  1875,  2419,  2420,  1908,   615,  1232,
     844,  2767,   616,    29,  2607,    52,  2786,  1313,   970,  2787,
    2788,  1262,  1234,  2629,    25,  1242,   837,   463,   826,  1263,
    1264,  1270,    29,   846,   824,  1269,  1271,   968,  2366,   968,
     825,   968,  1275,  1062,  1063,   838,  2025,  1282,  1467,  1068,
    1283,  1416,  1297,    31,  1287,   847,  1068,  1191,   846,  2239,
      29,  1302, -1588,  1309,  1310,  1314,  1321,    32,  1322,   826,
    1329,  1332,    31,  1333,  1877,  1334,   849,  1313,  1343,  1346,
     847,  1077,   560,  1377,  1088,  1094,    32,  1313,   560,   560,
     491,    33,   560,  1381,  1382,   839,  1417,  1418,  1423,   677,
      31,   849,  1476,  1477,  1240,   571,   560,  1245,  1489,  1068,
      33,  1132,   641,  1877,    32,  1502,  1509,  1467,  1521,  1068,
    1272,  1520,  1971,  1070,  1614,  1062,  1545,  1707,  1313,  1313,
    2421,  1523,  1544,  1561,   676,  1761,  1567,  1788,    33,  1575,
    1574,  1296,  1789,  1790,  1791,   586,   826,  1578,   676,  1060,
    1590,  1788,   571,  1592,  1593,  1591,  1789,  1790,  1791,  1609,
    1611,  1625, -1588,  2219,   967,  1460,   585,  1995,  2243,  1156,
    1157,  1158,  1159,  1160,  1161,  1629,  1630,  1631,   587,  -283,
     827,  1685,  1690,  1070,  -283,  2008,  1694,   840,  1698,  1700,
    2137,  1703,   676,  1070,  1704,  1788,  1705,   474,  1719,  2112,
    1789,  1790,  1791,  1877,  1721,  1722,  1728,   573,  2783,  1021,
    1730,  1731,  1739,  1749,  1063,  1771,  2029,  2095,  2030,  1753,
    -877,   827,  2035,  2036,  1754,   573,  1756,  1757,  1758,   466,
    1759,  1772,   586,  1623,  1775,   841,  1774,   829,  2116,   660,
    1776,  1777,  1778,   842,  1780,  1068,   560,   560,   560,  1062,
     464,  -283,  1878,  2135,  1781,   843,   475,  2135,  2149,  1761,
    1784,  1875,  1328,  1875,  1806,  1196,   830,  2138,  1812,  1813,
    1814,  2530,  2588,   968,  1668,  1828,  1815,  1833,   829,  1816,
    1823,  1849,  1826,  1840,   463,  1068,   463,   844,  1854,  1850,
    1879,  1355,  1887,  1852,  1853,  1910,  -334,  -335,   827,  1915,
    -283,  2139,   560,  1918,  1290,  1919,  1916,  1669,  1921,   587,
     477,  1931,  1924,  2636,  1938,  1068,  2140,  1939,  1068,  2242,
    1618,  1792,  1941,   491,  2643,  2141,  1943,  1313,  1256,  1313,
    1944,  1339,   831,  1947,  1950,   846,  1963,  1965,  1978,  1984,
    1985,  1986,  1793,  1992,  1988,  1122,  1989,   491,   661,  2229,
    2001,  1675,  1990,  2009,  2012,   829,  1793,   847,  2142,  1070,
    2013,  2016,   491,   491,   491,   491,   491,   491,   491,   491,
     491,   491,  2017,   831,  2020,  2021,  2024,  2031,   849,  2037,
    2485,  2044,  2055,  1809,  1676,   560,  1788,   560,  2593,  1070,
    1808,  2088,  1070,  2461,  2089,  2090,  2100,  1256,  2104,  1861,
    1793,  2101,  2113,  2124,  1062,  1339,  2593,  2128,   560,  2136,
    2150,  1794,  2154,  2156,  2158,  1313,  2277,  2697,  2195,  2159,
    2161,  2169,  2179,  2287,  2645,  1794,  2175,  1063,   480,  1365,
     481,  2182,  2184,  2188,  2197,  2669,  2211,  2209,  2259,  2227,
    2268,  2269,  2228,  2276,  2279,  2243,  1693,  2143,   588,  2288,
     831,   482,  2241,  1060,   483,  2289,  1559,  2246,  2247,  2248,
    2249,  2250,  2251,  2252,  2253,  2254,  2255,  2654,  2291,  1794,
    2294,  2297,   570,  1366,  1995,  2298,  1568,  2311,  1570,   967,
    2321,  2326,  2322,   967,  2331,  2332,  2329,  2339,  2636,  2345,
    1060,  2346,  2532,  2344,  2347,  2754,  2353,  2358,  2314,  1367,
    2354,   560,   560,   560,   560,  2690,  1060,  2364,  2362,  1063,
    2135,  2149,  2363,  2135,  2374,  2679,  2324,  2381,  1602,  1368,
    1878,  2385,  1068,  1369,  1878,  2408,  1060,  2409,  2413,  2423,
    2342,  1875,  2424,  2486,  2425,  1875,  2426,  2432,  2433,  2437,
    2444,  2451,  2438,  2453,  1370,  2456,  2457,  1371,  2459,  2462,
    2463,  1065,  2470,  2489,   463,  1060,  2476,  2494,   463,  1460,
    2503,  2584,  2509,  1372,  2510,  2511,  2514,  2512,  2522,  2520,
    2524,  1928,  2529,  2538,  2541,  1618,  2542,  2543,  1060,  2544,
    2367,  1256,  2369,  2552,  2556,  2555,  2562,  2563,   968,  2566,
    2587,  2577,   968,  2591,  2578,  2599,  2242,  2600,  2616,  2621,
    2603,  1699,  2622,  2625,    48,  2612,  2417,  1795,  1796,  1797,
    2641,  1798,  1799,  1800,  1801,  1802,  1803,  2644,  2646,  2649,
      48,  1795,  1796,  1797,  2655,  1798,  1799,  1800,  1801,  1802,
    1803,  2657,  2349,  1063,  2351,  2663,  2658,  2664,   572,  2665,
    2675,  2684,  2685,  1313,  2686,  2696,  2700,  2537,    48,  2702,
    2703,  2705,  1373,  1715,   967,  2709,   591,  2708,  2711,  2712,
    1374,  2713,  2717,  2454,  2441,  1795,  1796,  1797,  2718,  1798,
    1799,  1800,  1801,  1802,  1803,  2719,  2744,  2750,  2728,  2762,
    2768,  1020,  2732,  2114,  2769,  2776,  2779,  2789,  1020,  2781,
    2790,  2791,  2777,  2778,  2800,  2804,  1427,  2806,   532,  2811,
    2812,  2814,  2816,   795,  1375,   464,  2135,  1357,  1062,   676,
    2482,  2746,  1788,   491,  1060,  1878,  1875,  1789,  1790,  1791,
    1878,  1065,  2799,  1878,  2640,  2493,  1875,  2782,  2496,  2775,
    1253,  1875,  2576,  1946,  1875,  1968,  2275,   560,   560,   463,
    2742,  1997,  2780,  1942,   659,  1062,  2231,  2741,  1239,   463,
    2193,  1906,  1197,  1178,   463,  1607,  2517,   463,  2678,  2618,
    1021,  1062,  1229,   968,  1228,  2736,  2157,  1875,  1917,  1128,
     466,   466,  1587,  2683,  1606,   641,   491,  2350,  1233,  1920,
    2131,  1062,  2320,  2337,   560,  2605,  2127,   466,  1063,  2674,
     463,  2673,  1020,  2680,  1020,  1020,  2681,  1750,  1428,  1430,
    1434,  1384,  1385,  1435,  2734,  2727,  2505,  2735,   491,   491,
    1062,  1550,  1909,  1766,  1847,  1689,  1845,  1560,  2561,  2818,
     560,  2801,  1256,  2666,   491,  2125,  2160,  2352,  2554,  2361,
     466,   466,   966,  1062,  2173,  2002,  1569,   560,  1860,  1060,
    2517,  1344,  2267,  2416,  2028,  1998,  2458,  2226,  2258,  1655,
    2230,  1875,  1748,  2441,   573,  1961,  1571,  2370,  2192,  2513,
     491,  1020,  2695,  2740,  1020,  1020,     0,     0,     0,     0,
       0,  2531,   466,  1878,   463,     0,     0,     0,  2496,  1386,
    1387,   659,     0,     0,  1875,     0,     0,  2615,   659,   466,
    1071,     0,     0,     0,     0,     0,     0,     0,   491,  2241,
       0,     0,     0,  2549,  2550,   466,   560,   463,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1588,     0,  2564,
       0,     0,     0,     0,     0,     0,     0,     0,   641,     0,
       0,     0,     0,   466,  1065,     0,     0,     0,     0,   491,
    1388,  1389,  1390,  1391,  1392,  1393,   560,     0,  1394,  1395,
       0,     0,   466,   466,   466,     0,   466,     0,     0,  2660,
       0,     0,     0,     0,     0,  1060,     0,     0,     0,  1062,
       0,     0,  1060,     0,   464,     0,     0,   466,     0,     0,
       0,     0,  1999,  2677,     0,  1875,  1794,   491,  2005,  2007,
       0,  2493,  2011,  2623,   659,   659,     0,     0,     0,     0,
       0,     0,     0,     0,   560,     0,  2022,     0,   463,   641,
     641,   641,     0,  2517,     0,     0,  1065,     0,  2688,     0,
       0,     0,     0,     0,  1875,  1060,   466,     0,  2651,     0,
     466,   466,     0,     0,     0,  1060,     0,  1359,  1361,     0,
       0,   466,     0,  1131,     0,     0,  1132,   463,     0,     0,
       0,     0,     0,     0,     0,     0,  1396,  1397,     0,  2493,
    1071,     0,     0,   676,     0,     0,  1788,     0,  2615,     0,
    2482,  1789,  1790,  1791,     0,    48,  1138,     0,     0,     0,
    1618,     0,     0, -1588,   466,   466,   466,     0,  2096,     0,
       0,     0,  1063,     0,  1062,     0,   560,  1256,     0,     0,
       0,     0,     0,  2517,     0,  2755,     0,     0,  1140,  1424,
    1425,     0,     0,     0,  1875,     0,     0,  1439,     0,  1440,
    1441,   641,     0,     0,    48,   572,     0,     0,     0,  1063,
       0,     0,     0,     0,  1478,     0,  1479,   463,     0,     0,
    1065,     0,     0,     0,     0,  1063,  2121,  2122,  2123,  1490,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1060,     0,     0,     0,  1063,     0,  1398,  1399,     0,
       0,   560,     0,     0,     0,   572,  2241,     0,   591,  1841,
      48,     0,  1795,  1796,  1797,     0,  1798,  1799,  1800,  1801,
    1802,  1803,     0,     0,  1063,     0,   560,     0,     0,     0,
     560,  1060,  2180,     0,     0,     0,     0,     0,  2390, -1588,
     466,     0,     0,     0,  2391,     0,     0,  1063,   966,     0,
    1062,     0,     0,     0,     0, -1588,  2392,  1062,  -248,     0,
   -1588,  1060,   659,     0,  1060,     0,     0,     0,     0,     0,
       0,  -248,     0,  1596,  1596,     0,  -248,     0,   966,     0,
       0,     0,     0,     0,     0,  2393,     0,  2394,     0,     0,
       0,     0,     0,     0,     0, -1588,    48,     0,     0,     0,
       0,  1793,     0,  1071,     0,     0,     0,     0,     0,     0,
    1062,     0,     0,     0,     0,  2261,  1131,  2265,     0,  1132,
    1062,     0,     0,     0,  -248,  1065,     0,     0,   466,  1020,
       0,     0,     0,  1092,   466,     0,     0,   466,  1355,  1020,
       0,   466,  1020,  -248,  2395,     0,     0,     0,     0,  1138,
    1149,     0,     0,     0,     0,   466, -1588,     0,   466,   466,
     466,   466,     0,     0, -1493,     0,     0,  1120,   466,   466,
    1794,     0,     0,  2396,     0,     0,  1066,     0,     0,     0,
     466,  1140,     0,  1063,     0,  1071,   466,   466,   466,   466,
     966,     0,  -248,     0,   466,   466,     0,     0,     0,   466,
       0,  -248,     0,   466,     0,     0,   466,   466,   466,   466,
     466,   466,   466,   466,   466,  1020,     0,   466,  1067,     0,
       0,   466,     0,     0,   466,     0,   466,     0,   466,     0,
    1020,  2315,  2316,  2317,  2318,   591,   591,     0,   591,  2397,
       0,     0,     0, -1588,  2398,     0,  1062,     0,     0,   466,
       0,     0,  2105,  1755,     0,     0, -1493,     0,     0,     0,
       0,     0,     0,     0,   466,     0,     0,  1131,  1060,     0,
    1132,     0,     0,   466,   466, -1588, -1588, -1588,     0,     0,
       0,     0, -1588,     0,     0,     0,  1062,  2399,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1588,     0,
    1138,     0,     0, -1588,  2400,     0,     0,  1139,  1063,  1071,
   -1493,     0,     0,     0,     0,   966,  1062,   966,     0,  1062,
       0,     0,     0, -1493,     0,     0,     0,     0, -1493,     0,
       0,     0,  1140, -1493,     0,     0,     0,     0, -1588,     0,
    -248,     0,     0, -1588, -1493,     0,  1066, -1493,     0,     0,
    1156,  1157,  1158,  1159,  1160,  1161,   466,     0,     0,   466,
     466,     0,   466,     0,     0,     0,  1795,  1796,  1797,     0,
    1798,  1799,  1800,  1801,  1802,  1803, -1493,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1067,     0,
       0,     0,     0,  1149,     0, -1493,   466,     0,     0,   966,
    2401,     0,     0,     0,   608,     0,     0,   793,   609,     0,
       0,     0,     0,     0,     0,   659,     0,     0,  1883,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1065,
     659,     0,   466,  1141,  1063,     0,     0,     0,  1913,  1913,
       0,  1063,    48,     0, -1493,     0,     0, -1493,     0,  1142,
       0,     0,     0, -1493,  1143,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1071,     0,  1065,  1240,  2508,     0,
     466,   466,     0,     0,     0,     0,   466,     0,     0,     0,
       0,     0,  1065,     0,     0,     0, -1588,     0,     0,  1146,
       0,     0,     0,     0,  1063,     0,     0,     0,     0,     0,
       0,     0,  1065,     0,  1063,     0,    48,     0,     0,     0,
       0, -1493,     0,     0,  2539,     0,   466,   466,   466,     0,
       0,   466,     0,  1062,     0,     0,     0,     0,     0,     0,
       0,  1065,     0,     0,   466,   466,   466,   466,     0,     0,
    1131,     0,   466,  1132,  1149,  1384,  1385,     0,     0,     0,
    2261,     0,     0,     0,  1065,     0,     0,   466,   466,  1066,
       0,     0,   466,     0,     0,     0,  1861,  2582,     0,     0,
       0,     0,     0,  1138,     0,     0,   466,  1510,     0,   466,
   -1588,   466,     0,     0,     0,     0, -1588,     0,     0,     0,
       0,     0, -1493,  1156,  1157,  1158,  1159,  1160,  1161,     0,
   -1493,  1067,   466,     0,     0,  1140,  2041,  2043,     0,     0,
       0,     0,     0,     0,   466,  1131,     0, -1493,  1132, -1493,
   -1493,     0,     0,  1386,  1387,     0,     0,     0,     0,     0,
    1063,   466,  1384,  1385,     0,     0,  2632,  1151,     0,     0,
       0,  1066,     0,     0,     0,     0,   466,     0,  1138,     0,
       0,     0,     0,     0,     0, -1588, -1493,     0,     0, -1493,
   -1493, -1493,   466,     0,     0,     0,     0,     0,     0,     0,
    1063,     0,     0,     0,     0,    48,  2659,     0,   466,     0,
    1140,     0,     0,  1067,  1388,  1389,  1390,  1391,  1392,  1393,
    1065,     0,  1394,  1395,     0,   966,   966,   966,     0,     0,
    1063,     0,     0,  1063,     0,     0, -1588,     0,     0,     0,
    1386,  1387,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1588,     0,     0,     0,     0, -1588,     0,     0,
       0,     0,     0,     0,  1240,     0,   466,  1152,     0,     0,
   -1588, -1588, -1588,     0,  1156,  1157,  1158,  1159,  1160,  1161,
       0,  2108,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1588,     0,     0,  1066,     0,    48,  1071,     0,
       0,  1388,  1389,  1390,  1391,  1392,  1393,     0,     0,  1394,
    1395, -1588,     0,     0,     0,     0,   659,     0,     0,     0,
       0,   966,     0,     0,     0,     0,     0, -1588,     0,     0,
    1396,  1397, -1588,     0,     0,  1071,     0,  1067,     0,     0,
       0,     0,     0,     0,     0,  1065,     0,  1149,   466,     0,
       0,  1071,     0,     0,     0,     0,  2756,     0,   466,  1020,
       0,     0,   466,     0,     0,   466,     0, -1588,     0,     0,
       0,  1071,   466,   466,   466,   466,     0,     0,   466,   466,
     466,   466,   466,   466,   466,   466,   466,   466,     0,     0,
       0,   466,   466,     0,     0,     0,     0,     0,     0,     0,
    1071,     0,     0,     0,     0,   466,     0,     0,     0,     0,
       0,   466,     0,     0,   466,     0,   466,  1396,  1397,     0,
    2286,     0,  1149,  1071,   466,     0,     0,   466,   466,  1120,
       0,  2756,   466,   466,     0,     0,     0,  1063,     0,     0,
   -1588,  1398,  1399,     0,     0,     0,     0,     0,     0,   466,
    1066,   466,     0,     0,     0,     0,  2813,     0,     0,     0,
    2817,  1400,   466,     0,     0,     0,     0,     0,     0,     0,
       0,  1065,  1131,  1120,     0,  1132,     0,     0,  1065,     0,
    1133,  1134,  1135,   473,     0,     0,     0,   474,     0,     0,
       0,  1510,  1067,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   466,  1138,     0,  1851,     0,     0,
    -877,     0,  1139,     0,     0, -1588,     0,     0,     0,     0,
       0,   466,     0,     0,     0,  1869,     0,     0,  1398,  1399,
       0,  1065,     0,     0,     0,     0,     0,  1140,    48,     0,
   -1588,  1065,     0,     0,     0,     0,   475,  1156,  1157,  1158,
    1159,  1160,  1161,   476,   676,     0,   966,  1788,   966,  1071,
     966,     0,  1789,  1790,  1791,     0,     0,     0,     0,     0,
       0,     0,     0,  1869,     0,     0,     0,     0,   572,  2305,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   747,   747,  1020,
     477,     0,     0,     0,  1020,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1588,     0,     0,  1359,  1361,
       0,   -40,  1156,  1157,  1158,  1159,  1160,  1161,     0,     0,
       0,     0,     0,     0,     0,   478,   466,     0,  1141,     0,
       1,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,     0,     3,     4,  1142,     0,     0,   866,   871,  1143,
       0,     0,     0,     0,     0,     0,     0,  1065,     5,     0,
       0,   479,     0,     0,     0,     0,     0,     6,   466,   466,
   -1588, -1588,     0,   466,  1071,     0,     0,     0,   466,     7,
       0,   466,   466,     0,  1146,    48,   466,     0,     0,     0,
       8,     0,     0,     0,     0,     0,     0,  1065,     0,     0,
       0,     9,     0,    10,     0,     0,   866,     0,   480,   466,
     481,     0,     0,   466,     0,     0,     0,     0,     0,     0,
       0,    11,  1079,     0,     0, -1588,     0,  1065,     0,     0,
    1065,   482,     0,     0,   483,    12,     0,     0,     0,  1149,
       0,     0,     0,     0,  1066,     0,    13,     0,     0,     0,
    1101,     0,  1793,    14,     0,   466,     0,     0,     0,     0,
       0,    15,     0,    16,    17,     0,     0,     0,     0,  1117,
    1118,  1119,     0,  1121,     0,     0,    18,     0,     0,     0,
       0,  1066,   966,     0,     0,     0,  1067,  1359,  1361,     0,
       0,   466,     0,     0,  1170,     0,  1020,  1066,     0,     0,
    1071,     0,     0,     0,  1120,    19,     0,  1071,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1066,     0,     0,
    2126,  1794,  2129,  1067,     0,     0,     0,     0,     0,     0,
       0,     0,  1151,     0,     0,     0,     0,     0,     0,  1067,
       0,     0,     0,  1207,    20,     0,  1066,  1219,  1224,     0,
       0,     0,     0,     0,     0,     0,     0,   659,     0,  1067,
    1071,     0,     0,     0,     0,     0,     0,   466,     0,  1066,
    1071,     0,     0,     0,     0,     0,     0,     0,   466,   466,
       0,     0,   466,     0,     0,     0,     0,     0,  1067,     0,
       0,     0,     0,     0,   466,     0,     0,     0,     0,     0,
       0,   866,   866,   866,   466,     0,     0,     0,     0,   466,
       0,  1067,   466,     0,     0,     0,     0,     0,     0,   466,
     466,    21,     0,     0,    22,     0,     0,     0,     0,     0,
       0,     0,  1152,     0,  1065,  1153,  1154,  1155,     0,  1156,
    1157,  1158,  1159,  1160,  1161,   466,     0,   466,     0,     0,
       0,     0,     0,     0,     0,    23,     0,     0,     0,     0,
       0,     0,     0,    24,     0,     0,   466,     0,     0,     0,
       0,     0,     0,     0,    48,     0,     0,    25,     0,     0,
       0,     0,     0,     0,    26,     0,     0,     0,    27,     0,
       0,     0,     0,     0,     0,     0,  1071,     0,     0,    28,
    1164,     0,     0,     0,     0,  1066,     0,     0,     0,   837,
       0,     0,     0,    29,     0,     0,     0,  1795,  1796,  1797,
       0,  1798,  1799,  1800,  1801,  1802,  1803,   866,   838,   466,
       0,     0,     0,     0,     0,   466,  1071,     0,     0,  1164,
       0,     0,     0,     0,     0,     0,     0,  1067,    30,     0,
       0,     0,     0,    31,     0,     0,     0,     0,   466,     0,
       0,     0,   466,     0,     0,     0,  1071,    32,     0,  1071,
     466,     0,     0,  1020,     0,     0,     0,     0,   839,  2217,
       0,     0,     0,     0,     0,     0,     0,  2218,   466,     0,
    1869,    33,  1131,     0,  1869,  1132,     0,   966,     0,     0,
       0,   966,   466,     0,     0,    34,     0,     0,   -40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1164,
       0,  1421,     0,     0,  1164,  1138,     0,     0,     0,     0,
    1066,     0, -1588,     0,     0,     0,     0,     0,    48,     0,
      48,     0,  1444,     0,     0,  1461,  2219,     0,  1473,     0,
       0,     0,     0, -1495,     0,  1480,  1485,  1140,     0,     0,
     466,     0,     0,   466,     0,     0,     0,  1491,     0,     0,
     840,     0,  1067,  1495,  1496,  1497,  1498,     0,     0,     0,
       0,  1507,  1508,     0,     0,   466,  1519,     0,     0,     0,
    1522,     0,     0,  1530,  1531,  1532,  1533,  1534,  1535,  1536,
    1537,  1538,   466,     0,  1539,     0,     0,     0,  1547,     0,
       0,  1551,     0,   747,     0,   866,     0,     0,   841,   466,
       0,     0,    48,     0,     0,     0,   842,     0,  2109,     0,
       0,     0,     0,     0,     0,     0,  1572,     0,   843,     0,
       0,  2220,     0,   466,   466, -1495,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1066,     0, -1588,     0,
    1118,  1119,     0,  1066,     0,     0,     0,     0,     0,     0,
     844,     0,   966,  1071, -1588,     0,     0,     0,     0, -1588,
       0,     0,     0,     0,     0,  1869,     0,     0,     0,     0,
    1869,     0,   466,  1869,   466,     0,     0,     0,  1067, -1495,
       0,     0,     0,     0,     0,  1067,     0,     0,     0,     0,
       0,     0, -1495,     0, -1588,     0,  1066, -1495,   846,     0,
       0,     0, -1495,     0,     0,     0,  1066,     0,     0,     0,
       0,     0,  1164, -1495,     0,     0, -1495,     0,     0,     0,
     847,     0,     0,   866,     0,     0,  1686,  1687,     0,  1688,
       0,     0,     0,     0,  1164,     0,     0,     0,  1067,  1468,
       0,   849,   466,  2221,     0, -1495,  2222,     0,  1067,  1149,
    1164,  1164,  1164,     0,  1164,     0,     0,     0,     0,     0,
       0,     0,     0,  1724, -1495,     0,    48,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    48,     0,     0,     0,     0,     0,     0,     0,   866,
       0,   676,     0,  1164,  1788,     0,     0,     0,     0,  1789,
    1790,  1791,     0, -1495,     0,     0, -1495,     0,     0,     0,
       0,     0, -1495,  1869,     0,     0,  2306,     0,     0,     0,
    1131,  1120,  1066,  1132,     0,     0, -1509,     0,  1764,     0,
    1164,     0, -1588,  1770,     0,     0,     0,  1264,     0,     0,
       0,     0,  1164,     0,     0,     0,     0,  1164,     0,     0,
       0,     0,     0,  1138,     0,     0,     0,     0,     0,     0,
   -1588,     0,  1066,  1131,  1067,     0,  1132,     0,     0,     0,
   -1495,  1133,  1134,  1135,     0,  1787,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1140,     0,    48,  1136,     0,
       0,  1485,  1066,  1485,  1485,  1066,  1138,     0,     0,  1825,
       0,     0,     0,  1139,  1067,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1509,     0,
       0,     0,     0,     0,     0,  1861,     0,     0,  1140,     0,
       0,     0, -1588,  1843,  1067,     0,  1846,  1067,  1848,  1156,
    1157,  1158,  1159,  1160,  1161,     0,    48,     0,     0,     0,
       0, -1495,     0,     0,     0,     0,  2309,     0,     0, -1495,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1509,     0,     0,     0, -1495,     0, -1495, -1495,
       0,     0,     0,     0,     0, -1509, -1588,     0,  1207,     0,
   -1509,     0,     0,     0,     0, -1509,     0,     0,     0,  1793,
       0,     0, -1588,  1224,     0,     0, -1509, -1588,     0, -1509,
       0,     0,     0,     0,  1131, -1495,     0,  1132, -1495, -1495,
   -1495,     0,  1133,  1134,  1135,     0,     0,     0,     0,  1141,
       0,     0,     0,    48,     0,  1940,     0,     0, -1509,  1136,
       0,     0, -1588,     0,  1164,  1142,     0,  1138,     0,     0,
    1143,     0,     0,     0,  1139,     0,     0, -1509,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1164,  1794,     0,
       0,  1144,  1145,     0,     0,     0,     0,     0,     0,  1140,
       0,     0,     0,     0,  1164,  1146,  1468,  1468,     0,  1804,
       0,  1468,     0,   866,     0,     0,  1164,  1149,     0,  1066,
       0,     0,     0,  1164,     0,     0, -1509,     0,  1164, -1509,
       0,     0,     0,     0,  1164, -1509,     0,     0,  1164,  1164,
    1164,  1164,     0,  1147,     0,     0,  1148,  1468,  1468,     0,
    1164,  1164,     0,   824,     0,     0,     0,     0,     0,   825,
    1149,  1067,  1164,  1150,     0,  1164,   837,     0,     0,     0,
       0,     0,     0,  1164,  1164,  1164,  1164,  1164,  1164,  1164,
    1164,  1164,  1164,     0,  1130,   838,     0,     0,     0,  1131,
    1164,     0,  1132, -1509,  1164,  2054,     0,  1133,  1134,  1135,
    1141,     0,     0,     0,     0,  2058,     0,     0,     0,  2059,
   -1588,     0,  2061,     0,  1136,  1164,  1142,  1137,     0,     0,
       0,  1143,  1138,     0,     0,     0,     0,     0,     0,  1139,
       0,     0,     0,     0,     0,   839,     0,     0,  2081,  2082,
       0,     0,  1144,  1145,     0,     0,     0,     0,  1861,     0,
       0,     0,     0,  1151,  1140,     0,  1146,     0,  2094,     0,
       0,  2097,     0,  2099,     0,   826,     0,     0,     0,     0,
       0,  2103,     0,     0, -1509,     0,     0,     0,     0,  2110,
    2111,     0, -1509,     0,  1795,  1796,  1797,     0,  1798,  1799,
    1800,  1801,  1802,  1803,  1147,     0,     0,  1148,     0, -1509,
       0, -1509, -1509,     0,     0,     0,     0,     0,     0,  2153,
   -1588,  1149,     0,     0,  1150,     0,     0,  1156,  1157,  1158,
    1159,  1160,  1161,     0,     0,     0,     0,   840,     0,  1164,
    1164,  1164,     0,     0,     0,     0,     0,     0, -1509,     0,
       0, -1509, -1509, -1509,     0,     0,     0,     0,     0,     0,
       0,  2181,     0,  1152,     0,  1141,  1153,  1154,  1155,     0,
    1156,  1157,  1158,  1159,  1160,  1161,     0,  1164,  2194,     0,
       0,  1142,     0,  1779,     0,   841,  1143,     0,     0,     0,
       0,     0,     0,   842,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   843,     0,  1144,  1145,     0,
       0,     0,     0,     0,  1151,     0,     0,  1164,     0,     0,
       0,  1146,     0,  1164,     0,     0,     0,   827,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   844,  1804,  1804,
    1164,     0,  1468,  1468,  1468,  1468,     0,     0,  1468,  1468,
    1468,  1468,  1468,  1468,  1468,  1468,  1468,  1468,  1804,  1147,
       0,     0,  1148,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1149,     0,  1164,  1150,
    1657,     0,  1804,  1804,   829,   846,   493,     0,     0,     0,
       0,     0,     0,  2290,     0,     0,  1164,  1468,  1468,  1164,
       0,  1164,     0,     0,     0,     0,     0,   847,     0,     0,
       0,     0,     0,  1658,  1152,     0,     0,  1153,  1154,  1155,
       0,  1156,  1157,  1158,  1159,  1160,  1161,     0,   849,     0,
       0,  1488,     0,     0,     0,  2299,  2300,     0,     0,   494,
    2301,     0,     0,     0,     0,  2304,     0,     0,  2307,  2308,
       0,     0,     0,  2312,   495,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1151,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   831,
       0,     0,     0,     0,     0,     0,     0,     0,  1131,     0,
       0,  1132,     0,  1164,     0,     0,  1133,  1134,  1135,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     496,     0,     0,  1136,     0,     0,     0,  1131,     0,   497,
    1132,  1138,   747,     0,     0,  1133,  1134,  1135,  1139,     0,
       0,   498,     0,     0,     0,     0,   499,     0,     0,     0,
       0,     0,  1136,     0,     0,     0,     0,     0,     0,     0,
    1138,     0,     0,  1140,     0,     0,     0,  1139,  2411,     0,
       0,     0,     0,   500,     0,     0,     0,     0,     0,  1152,
       0,     0,  1153,  1154,  1155,     0,  1156,  1157,  1158,  1159,
    1160,  1161,  1140,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   501,  1164,     0,   502,
       0,  1164,  1164,     0,  1164,     0,     0,  1804,  1804,  1804,
    1804,     0,     0,     0,  1804,  1804,  1804,  1804,  1804,  1804,
    1804,  1804,  1804,  1804,  1164,  1164,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2466,  2467,  1164,     0,  2468,
    1164,     0,  1164,     0,  1141,     0,  1164,     0,     0,  1804,
    1804,     0,     0,  1164,  1164,     0,     0,     0,     0,     0,
    1142,     0,     0,   503,     0,  1143,     0,     0,     0,     0,
       0,     0,     0,  1141,     0,     0,  2501,  2502,     0,   504,
       0,     0,     0,     0,     0,     0,  1144,  1145,     0,  1142,
       0,     0,     0,     0,  1143,     0,  1164,     0,     0,     0,
    1146,     0,     0,     0,  2521,     0,     0,     0,     0,     0,
       0,   505,     0,     0,   506,  1144,  1145,     0,     0,     0,
       0,     0,   507,     0,  1164,   508,     0,     0,     0,  1146,
       0,     0,     0,     0,     0,     0,     0,  1164,  1147,     0,
       0,  1148,     0,     0,     0,   509,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1149,     0,   510,  1150,     0,
       0,     0,     0,     0,   511,     0,     0,  1147,     0,     0,
    1148,     0,     0,   512,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1149,     0,     0,  1150,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   513,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2602,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1121,     0,     0,
       0,     0,     0,  1164,     0,     0,     0,  1468,     0,     0,
       0,     0,  1164,  1164,  1164,  2624,     0,  1164,  1151,     0,
    1164,  1164,     0,     0,     0,  1164,     0,     0,     0,  2638,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1151,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1468,     0,     0,     0,
       0,     0,  2501,     0,     0,     0,     0,     0,  1152,     0,
       0,  1153,  1154,  1155,  1164,  1156,  1157,  1158,  1159,  1160,
    1161,     0,     0,     0,     0,  1827,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2707,  1152,     0,     0,
    1153,  1154,  1155,     0,  1156,  1157,  1158,  1159,  1160,  1161,
       0,     0,     0,     0,  2057,     0,     0,     0,     0,     0,
    2724,  2724,     0,     0,  1804,  1468,     0,     0,     0,  1164,
    1164,  1164,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1164,  1164,     0,     0,     0,     0,
       0,  2724,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1164,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1804,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2724,
       0,     0,     0,     0,     0,     0,     0,  1804,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1164,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1164,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1164,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    91,   673,   532,
     674,   675,   676,   677,   678,     0,     0,     0,     0,     0,
       0,     0,     0,    92,    93,    94,    95,    96,    97,    98,
      99,   861,   100,   101,   102,     0,     0,     0,     0,     0,
    1164,     0,   103,   104,     0,   105,   106,   107,   108,   109,
     110,   111,   112,   679,   114,   680,   681,  1164,   117,   118,
     119,   120,   121,   122,   682,   683,   123,   124,   684,   685,
     127,     0,   128,   129,   130,   131,   686,     0,   687,     0,
       0,   134,   135,   136,   137,   138,   139,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,   148,   149,   150,
     151,   688,   689,   690,   691,   692,   693,   694,   153,   154,
     155,   156,   157,   158,   159,   695,   696,   162,   697,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,     0,
     171,   172,   173,   174,   862,     0,   175,   176,   698,   178,
     179,     0,     0,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,   189,   699,   191,   192,   193,   194,
     700,   701,   196,     0,   197,   198,   702,   200,     0,   201,
       0,   202,   203,     0,   204,   205,   206,   207,   208,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,   231,   232,
     233,   234,   235,   236,   703,   704,     0,   705,     0,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,     0,
       0,   250,   251,   252,   253,     0,   254,   255,   256,   706,
     707,   257,   258,   259,   260,   261,   262,     0,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   708,   280,   709,   282,   283,   284,
       0,   285,   710,   286,   287,   288,   289,   711,   712,   291,
     713,   293,   294,   295,     0,   296,   297,     0,     0,   714,
     299,   300,     0,     0,   301,   302,   303,   304,   305,   715,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   716,   320,   321,   322,   323,   324,   325,
       0,   326,   327,   328,   329,   330,     0,     0,   331,   332,
     333,   334,   717,   336,   337,   338,   339,     0,   340,   341,
     342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   718,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,   719,   375,   376,   377,
     378,   379,   380,   381,   382,   720,   384,     0,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   721,     0,   399,   400,     0,   401,   402,   403,
     404,   405,   406,   407,     0,   722,   723,     0,     0,   410,
     411,   724,   413,   725,   726,   415,   416,   417,   418,   419,
     420,   421,     0,     0,   422,   423,   424,   425,   426,   727,
       0,   427,   428,   429,   430,   431,   432,   728,   863,   434,
     435,   436,     0,   437,   438,   439,     0,     0,   440,     0,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   729,     0,     0,     0,     0,     0,     0,   730,
     731,   864,     0,     0,     0,     0,     0,     0,   733,   865,
       0,     0,     0,   734,    91,   673,   532,   674,   675,   676,
     677,   678,     0,     0,     0,     0,     0,     0,     0,     0,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,   108,   109,   110,   111,   112,
     679,   114,   680,   681,     0,   117,   118,   119,   120,   121,
     122,   682,   683,   123,   124,   684,   685,   127,     0,   128,
     129,   130,   131,   686,     0,   687,     0,     0,   134,   135,
     136,   137,   138,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,   148,   149,   150,   151,   688,   689,
     690,   691,   692,   693,   694,   153,   154,   155,   156,   157,
     158,   159,   695,   696,   162,   697,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   698,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   699,   191,   192,   193,   194,   700,   701,   196,
       0,   197,   198,   702,   200,     0,   201,     0,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
     236,   703,   704,     0,   705,     0,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,     0,     0,   250,   251,
     252,   253,     0,   254,   255,   256,   706,   707,   257,   258,
     259,   260,   261,   262,     0,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   708,   280,   709,   282,   283,   284,     0,   285,   710,
     286,   287,   288,   289,   711,   712,   291,   713,   293,   294,
     295,     0,   296,   297,     0,     0,   714,   299,   300,     0,
       0,   301,   302,   303,   304,   305,   715,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     716,   320,   321,   322,   323,   324,   325,     0,   326,   327,
     328,   329,   330,     0,     0,   331,   332,   333,   334,   717,
     336,   337,   338,   339,     0,   340,   341,   342,     0,   343,
     344,   345,   346,   347,   348,   349,   350,   351,     0,   352,
     353,   354,   355,   356,   357,   718,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    25,   370,   371,
     372,   373,   374,   719,   375,   376,   377,   378,   379,   380,
     381,   382,   720,   384,     0,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   721,
       0,   399,   400,    29,   401,   402,   403,   404,   405,   406,
     407,     0,   722,   723,     0,     0,   410,   411,   724,   413,
     725,   726,   415,   416,   417,   418,   419,   420,   421,     0,
       0,   422,   423,   424,   425,   426,   727,     0,   427,   428,
     429,   430,   431,   582,   728,     0,   434,   435,   436,     0,
     437,   438,   439,     0,     0,   440,     0,    32,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   729,
       0,    33,     0,     0,     0,     0,   730,   731,     0,     0,
       0,     0,     0,     0,     0,   733,  2611,     0,     0,     0,
     734,    91,   673,   532,   674,   675,   676,   677,   678,     0,
       0,     0,     0,     0,     0,     0,     0,    92,    93,    94,
      95,    96,    97,    98,    99,     0,   100,   101,   102,     0,
       0,     0,     0,     0,     0,     0,   103,   104,     0,   105,
     106,   107,   108,   109,   110,   111,   112,   679,   114,   680,
     681,     0,   117,   118,   119,   120,   121,   122,   682,   683,
     123,   124,   684,   685,   127,     0,   128,   129,   130,   131,
     686,     0,   687,     0,     0,   134,   135,   136,   137,   138,
     139,   140,   141,     0,   142,   143,   144,   145,   146,   147,
       0,   148,   149,   150,   151,   688,   689,   690,   691,   692,
     693,   694,   153,   154,   155,   156,   157,   158,   159,   695,
     696,   162,   697,   163,     0,   164,   165,   166,   167,   168,
     169,     0,   170,     0,   171,   172,   173,   174,     0,     0,
     175,   176,   698,   178,   179,     0,     0,   180,   181,   182,
       0,   183,   184,   185,     0,   186,   187,   188,   189,   699,
     191,   192,   193,   194,   700,   701,   196,     0,   197,   198,
     702,   200,     0,   201,     0,   202,   203,     0,   204,   205,
     206,   207,   208,   209,     0,   210,     0,     0,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,   230,   231,   232,   233,   234,   235,   236,   703,   704,
       0,   705,     0,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,     0,     0,   250,   251,   252,   253,     0,
     254,   255,   256,   706,   707,   257,   258,   259,   260,   261,
     262,     0,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   708,   280,
     709,   282,   283,   284,     0,   285,   710,   286,   287,   288,
     289,   711,   712,   291,   713,   293,   294,   295,     0,   296,
     297,     0,     0,   714,   299,   300,     0,     0,   301,   302,
     303,   304,   305,   715,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   317,   318,   716,   320,   321,
     322,   323,   324,   325,     0,   326,   327,   328,   329,   330,
       0,     0,   331,   332,   333,   334,   717,   336,   337,   338,
     339,     0,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,   352,   353,   354,   355,
     356,   357,   718,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    25,   370,   371,   372,   373,   374,
     719,   375,   376,   377,   378,   379,   380,   381,   382,   720,
     384,     0,     0,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   721,     0,   399,   400,
      29,   401,   402,   403,   404,   405,   406,   407,     0,   722,
     723,     0,     0,   410,   411,   724,   413,   725,   726,   415,
     416,   417,   418,   419,   420,   421,     0,     0,   422,   423,
     424,   425,   426,   727,     0,   427,   428,   429,   430,   431,
     582,   728,     0,   434,   435,   436,     0,   437,   438,   439,
       0,     0,   440,     0,    32,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   729,     0,    33,     0,
       0,     0,     0,   730,   731,     0,     0,     0,     0,     0,
       0,     0,   733,     0,     0,     0,     0,   734,    91,   673,
     532,   674,   675,   676,   677,   678,     0,     0,     0,     0,
       0,     0,     0,     0,    92,    93,    94,    95,    96,    97,
      98,    99,     0,   100,   101,   102,     0,     0,     0,     0,
       0,     0,     0,   103,   104,     0,   105,   106,   107,   108,
     109,   110,   111,   112,   679,   114,   680,   681,  1481,   117,
     118,   119,   120,   121,   122,   682,   683,   123,   124,   684,
     685,   127,     0,   128,   129,   130,   131,   686,     0,   687,
       0,     0,   134,   135,   136,   137,   138,   139,   140,   141,
       0,   142,   143,   144,   145,   146,   147,     0,   148,   149,
     150,   151,   688,   689,   690,   691,   692,   693,   694,   153,
     154,   155,   156,   157,   158,   159,   695,   696,   162,   697,
     163,     0,   164,   165,   166,   167,   168,   169,     0,   170,
       0,   171,   172,   173,   174,     0,     0,   175,   176,   698,
     178,   179,     0,     0,   180,   181,   182,     0,   183,   184,
     185,     0,   186,   187,   188,   189,   699,   191,   192,   193,
     194,   700,   701,   196,     0,   197,   198,   702,   200,     0,
     201,     0,   202,   203,  1482,   204,   205,   206,   207,   208,
     209,     0,   210,     0,     0,     0,   211,   212,     0,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,     0,   230,   231,
     232,   233,   234,   235,   236,   703,   704,     0,   705,     0,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
       0,  1483,   250,   251,   252,   253,     0,   254,   255,   256,
     706,   707,   257,   258,   259,   260,   261,   262,     0,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   708,   280,   709,   282,   283,
     284,     0,   285,   710,   286,   287,   288,   289,   711,   712,
     291,   713,   293,   294,   295,     0,   296,   297,     0,     0,
     714,   299,   300,     0,     0,   301,   302,   303,   304,   305,
     715,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   317,   318,   716,   320,   321,   322,   323,   324,
     325,     0,   326,   327,   328,   329,   330,     0,     0,   331,
     332,   333,   334,   717,   336,   337,   338,   339,     0,   340,
     341,   342,     0,   343,   344,   345,   346,   347,   348,   349,
     350,   351,     0,   352,   353,   354,   355,   356,   357,   718,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,   719,   375,   376,
     377,   378,   379,   380,   381,   382,   720,   384,     0,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   721,     0,   399,   400,     0,   401,   402,
     403,   404,   405,   406,   407,     0,   722,   723,     0,  1484,
     410,   411,   724,   413,   725,   726,   415,   416,   417,   418,
     419,   420,   421,     0,     0,   422,   423,   424,   425,   426,
     727,     0,   427,   428,   429,   430,   431,   432,   728,     0,
     434,   435,   436,     0,   437,   438,   439,     0,     0,   440,
       0,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   729,     0,     0,     0,     0,     0,     0,
     730,   731,     0,     0,     0,     0,     0,     0,     0,   733,
       0,     0,     0,     0,   734,    91,   673,   532,   674,   675,
     676,   677,   678,     0,     0,     0,     0,     0,     0,     0,
       0,    92,    93,    94,    95,    96,    97,    98,    99,     0,
     100,   101,   102,     0,     0,     0,     0,     0,     0,     0,
     103,   104,     0,   105,   106,   107,   108,   109,   110,   111,
     112,   679,   114,   680,   681,     0,   117,   118,   119,   120,
     121,   122,   682,   683,   123,   124,   684,   685,   127,     0,
     128,   129,   130,   131,   686,     0,   687,     0,     0,   134,
     135,   136,   137,   138,   139,   140,   141,     0,   142,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   688,
     689,   690,   691,   692,   693,   694,   153,   154,   155,   156,
     157,   158,   159,   695,   696,   162,   697,   163,     0,   164,
     165,   166,   167,   168,   169,     0,   170,     0,   171,   172,
     173,   174,     0,     0,   175,   176,   698,   178,   179,     0,
       0,   180,   181,   182,     0,   183,   184,   185,     0,   186,
     187,   188,   189,   699,   191,   192,   193,   194,   700,   701,
     196,     0,   197,   198,   702,   200,     0,   201,     0,   202,
     203,     0,   204,   205,   206,   207,   208,   209,     0,   210,
       0,     0,     0,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,   225,
     226,   227,   228,   229,     0,   230,   231,   232,   233,   234,
     235,   236,   703,   704,     0,   705,     0,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,     0,     0,   250,
     251,   252,   253,     0,   254,   255,   256,   706,   707,   257,
     258,   259,   260,   261,   262,     0,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   708,   280,   709,   282,   283,   284,     0,   285,
     710,   286,   287,   288,   289,   711,   712,   291,   713,   293,
     294,   295,     0,   296,   297,     0,     0,   714,   299,   300,
       0,     0,   301,   302,   303,   304,   305,   715,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   317,
     318,   716,   320,   321,   322,   323,   324,   325,     0,   326,
     327,   328,   329,   330,     0,     0,   331,   332,   333,   334,
     717,   336,   337,   338,   339,     0,   340,   341,   342,     0,
     343,   344,   345,   346,   347,   348,   349,   350,   351,     0,
     352,   353,   354,   355,   356,   357,   718,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,     0,   370,
     371,   372,   373,   374,   719,   375,   376,   377,   378,   379,
     380,   381,   382,   720,   384,     0,     0,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     721,     0,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,   722,   723,     0,     0,   410,   411,   724,
     413,   725,   726,   415,   416,   417,   418,   419,   420,   421,
       0,     0,   422,   423,   424,   425,   426,   727,     0,   427,
     428,   429,   430,   431,   432,   728,     0,   434,   435,   436,
       0,   437,   438,   439,     0,     0,   440,     0,     0,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     729,     0,     0,     0,     0,     0,     0,   730,   731,   732,
       0,     0,     0,     0,     0,     0,   733,     0,     0,     0,
       0,   734,    91,   673,   532,   674,   675,   676,   677,   678,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,  1217,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,   108,   109,   110,   111,   112,   679,   114,
     680,   681,     0,   117,   118,   119,   120,   121,   122,   682,
     683,   123,   124,   684,   685,   127,     0,   128,   129,   130,
     131,   686,     0,   687,     0,     0,   134,   135,   136,   137,
     138,   139,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,   148,   149,   150,   151,   688,   689,   690,   691,
     692,   693,   694,   153,   154,   155,   156,   157,   158,   159,
     695,   696,   162,   697,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,     0,   171,   172,   173,   174,     0,
       0,   175,   176,   698,   178,   179,     0,     0,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,   189,
     699,   191,   192,   193,   194,   700,   701,   196,     0,   197,
     198,   702,   200,     0,   201,     0,   202,   203,     0,   204,
     205,   206,   207,   208,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,   231,   232,   233,   234,   235,   236,   703,
     704,     0,   705,     0,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,     0,     0,   250,   251,   252,   253,
       0,   254,   255,   256,   706,   707,   257,   258,   259,   260,
     261,   262,     0,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   708,
     280,   709,   282,   283,   284,     0,   285,   710,   286,   287,
     288,   289,   711,   712,   291,   713,   293,   294,   295,     0,
     296,   297,     0,     0,   714,   299,   300,     0,     0,   301,
     302,   303,   304,   305,   715,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   716,   320,
     321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
     330,     0,     0,   331,   332,   333,   334,   717,   336,   337,
     338,   339,     0,   340,   341,   342,     0,   343,   344,   345,
     346,   347,   348,   349,   350,   351,     0,   352,   353,   354,
     355,   356,   357,   718,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,   719,   375,   376,   377,   378,   379,   380,   381,   382,
     720,   384,     0,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   721,     0,   399,
     400,     0,   401,   402,   403,   404,   405,   406,   407,     0,
     722,   723,     0,     0,   410,   411,   724,   413,   725,   726,
     415,   416,   417,   418,   419,   420,   421,     0,     0,   422,
     423,   424,   425,   426,   727,     0,   427,   428,   429,   430,
     431,   432,   728,     0,   434,   435,   436,     0,   437,   438,
     439,     0,     0,   440,     0,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   729,     0,     0,
       0,     0,     0,     0,   730,   731,     0,     0,     0,     0,
       0,     0,     0,   733,     0,     0,     0,     0,   734,    91,
     673,   532,   674,   675,   676,   677,   678,     0,     0,     0,
       0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
      97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
       0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
     108,   109,   110,   111,   112,   679,   114,   680,   681,     0,
     117,   118,   119,   120,   121,   122,   682,   683,   123,   124,
     684,   685,   127,     0,   128,   129,   130,   131,   686,     0,
     687,     0,     0,   134,   135,   136,   137,   138,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,   148,
     149,   150,   151,   688,   689,   690,   691,   692,   693,   694,
     153,   154,   155,   156,   157,   158,   159,   695,   696,   162,
     697,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     698,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   699,   191,   192,
     193,   194,   700,   701,   196,     0,   197,   198,   702,   200,
       0,   201,     0,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
     231,   232,   233,   234,   235,   236,   703,   704,     0,   705,
       0,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,     0,     0,   250,   251,   252,   253,     0,   254,   255,
     256,   706,   707,   257,   258,   259,   260,   261,   262,     0,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   708,   280,   709,   282,
     283,   284,     0,   285,   710,   286,   287,   288,   289,   711,
     712,   291,   713,   293,   294,   295,     0,   296,   297,     0,
       0,   714,   299,   300,     0,     0,   301,   302,   303,   304,
     305,   715,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   716,   320,   321,   322,   323,
     324,   325,     0,   326,   327,   328,   329,   330,     0,     0,
     331,   332,   333,   334,   717,   336,   337,   338,   339,     0,
     340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
     349,   350,   351,     0,   352,   353,   354,   355,   356,   357,
     718,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   719,   375,
     376,   377,   378,   379,   380,   381,   382,   720,   384,     0,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   721,     0,   399,   400,     0,   401,
     402,   403,   404,   405,   406,   407,     0,   722,   723,     0,
       0,   410,   411,   724,   413,   725,   726,   415,   416,   417,
     418,   419,   420,   421,     0,     0,   422,   423,   424,   425,
     426,   727,     0,   427,   428,   429,   430,   431,   432,   728,
       0,   434,   435,   436,     0,   437,   438,   439,     0,     0,
     440,     0,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   729,     0,     0,     0,     0,     0,
       0,   730,   731,     0,     0,     0,     0,     0,     0,     0,
     733,  1341,     0,     0,     0,   734,    91,   673,   532,   674,
     675,   676,   677,   678,     0,     0,     0,     0,     0,     0,
       0,     0,    92,    93,    94,    95,    96,    97,    98,    99,
       0,   100,   101,   102,     0,     0,     0,     0,     0,     0,
       0,   103,   104,     0,   105,   106,   107,   108,   109,   110,
     111,   112,   679,   114,   680,   681,     0,   117,   118,   119,
     120,   121,   122,   682,   683,   123,   124,   684,   685,   127,
       0,   128,   129,   130,   131,   686,     0,   687,     0,     0,
     134,   135,   136,   137,   138,   139,   140,   141,     0,   142,
     143,   144,   145,   146,   147,     0,   148,   149,   150,   151,
     688,   689,   690,   691,   692,   693,   694,   153,   154,   155,
     156,   157,   158,   159,   695,   696,   162,   697,   163,     0,
     164,   165,   166,   167,   168,   169,     0,   170,     0,   171,
     172,   173,   174,     0,     0,   175,   176,   698,   178,   179,
       0,     0,   180,   181,   182,     0,   183,   184,   185,     0,
     186,   187,   188,   189,   699,   191,   192,   193,   194,   700,
     701,   196,     0,   197,   198,   702,   200,     0,   201,     0,
     202,   203,     0,   204,   205,   206,   207,   208,   209,     0,
     210,     0,     0,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,   230,   231,   232,   233,
     234,   235,   236,   703,   704,     0,   705,     0,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,     0,     0,
     250,   251,   252,   253,     0,   254,   255,   256,   706,   707,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   708,   280,   709,   282,   283,   284,     0,
     285,   710,   286,   287,   288,   289,   711,   712,   291,   713,
     293,   294,   295,     0,   296,   297,     0,     0,   714,   299,
     300,     0,     0,   301,   302,   303,   304,   305,   715,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     0,
     317,   318,   716,   320,   321,   322,   323,   324,   325,     0,
     326,   327,   328,   329,   330,     0,     0,   331,   332,   333,
     334,   717,   336,   337,   338,   339,     0,   340,   341,   342,
       0,   343,   344,   345,   346,   347,   348,   349,   350,   351,
       0,   352,   353,   354,   355,   356,   357,   718,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,     0,
     370,   371,   372,   373,   374,   719,   375,   376,   377,   378,
     379,   380,   381,   382,   720,   384,     0,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   721,     0,   399,   400,     0,   401,   402,   403,   404,
     405,   406,   407,     0,   722,   723,     0,     0,   410,   411,
     724,   413,   725,   726,   415,   416,   417,   418,   419,   420,
     421,     0,     0,   422,   423,   424,   425,   426,   727,     0,
     427,   428,   429,   430,   431,   432,   728,     0,   434,   435,
     436,     0,   437,   438,   439,     0,     0,   440,     0,     0,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   729,     0,     0,     0,     0,     0,     0,   730,   731,
       0,     0,     0,     0,     0,     0,     0,   733,  1471,     0,
       0,     0,   734,    91,   673,   532,   674,   675,   676,   677,
     678,     0,     0,     0,     0,     0,     0,     0,     0,    92,
      93,    94,    95,    96,    97,    98,    99,     0,   100,   101,
     102,     0,     0,     0,     0,     0,     0,     0,   103,   104,
       0,   105,   106,   107,   108,   109,   110,   111,   112,   679,
     114,   680,   681,     0,   117,   118,   119,   120,   121,   122,
     682,   683,   123,   124,   684,   685,   127,     0,   128,   129,
     130,   131,   686,     0,   687,     0,     0,   134,   135,   136,
     137,   138,   139,   140,   141,     0,   142,   143,   144,   145,
     146,   147,     0,   148,   149,   150,   151,   688,   689,   690,
     691,   692,   693,   694,   153,   154,   155,   156,   157,   158,
     159,   695,   696,   162,   697,   163,     0,   164,   165,   166,
     167,   168,   169,     0,   170,     0,   171,   172,   173,   174,
       0,     0,   175,   176,   698,   178,   179,     0,     0,   180,
     181,   182,     0,   183,   184,   185,     0,   186,   187,   188,
     189,   699,   191,   192,   193,   194,   700,   701,   196,     0,
     197,   198,   702,   200,     0,   201,     0,   202,   203,     0,
     204,   205,   206,   207,   208,   209,     0,   210,     0,     0,
       0,   211,   212,     0,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,     0,   224,   225,   226,   227,
     228,   229,     0,   230,   231,   232,   233,   234,   235,   236,
     703,   704,     0,   705,     0,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,     0,     0,   250,   251,   252,
     253,     0,   254,   255,   256,   706,   707,   257,   258,   259,
     260,   261,   262,     0,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     708,   280,   709,   282,   283,   284,     0,   285,   710,   286,
     287,   288,   289,   711,   712,   291,   713,   293,   294,   295,
       0,   296,   297,     0,     0,   714,   299,   300,     0,     0,
     301,   302,   303,   304,   305,   715,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   317,   318,   716,
     320,   321,   322,   323,   324,   325,     0,   326,   327,   328,
     329,   330,     0,     0,   331,   332,   333,   334,   717,   336,
     337,   338,   339,     0,   340,   341,   342,     0,   343,   344,
     345,   346,   347,   348,   349,   350,   351,     0,   352,   353,
     354,   355,   356,   357,   718,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,     0,   370,   371,   372,
     373,   374,   719,   375,   376,   377,   378,   379,   380,   381,
     382,   720,   384,     0,     0,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   721,     0,
     399,   400,     0,   401,   402,   403,   404,   405,   406,   407,
       0,   722,   723,     0,     0,   410,   411,   724,   413,   725,
     726,   415,   416,   417,   418,   419,   420,   421,     0,     0,
     422,   423,   424,   425,   426,   727,     0,   427,   428,   429,
     430,   431,   432,   728,  1683,   434,   435,   436,     0,   437,
     438,   439,     0,     0,   440,     0,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   729,     0,
       0,     0,     0,     0,     0,   730,   731,     0,     0,     0,
       0,     0,     0,     0,   733,     0,     0,     0,     0,   734,
      91,   673,   532,   674,   675,   676,   677,   678,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,   108,   109,   110,   111,   112,   679,   114,   680,   681,
       0,   117,   118,   119,   120,   121,   122,   682,   683,   123,
     124,   684,   685,   127,     0,   128,   129,   130,   131,   686,
       0,   687,     0,     0,   134,   135,   136,   137,   138,   139,
     140,   141,     0,   142,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   688,   689,   690,   691,   692,   693,
     694,   153,   154,   155,   156,   157,   158,   159,   695,   696,
     162,   697,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,     0,   171,   172,   173,   174,     0,     0,   175,
     176,   698,   178,   179,     0,     0,   180,   181,   182,     0,
     183,   184,   185,     0,   186,   187,   188,   189,   699,   191,
     192,   193,   194,   700,   701,   196,     0,   197,   198,   702,
     200,     0,   201,     0,   202,   203,  1482,   204,   205,   206,
     207,   208,   209,     0,   210,     0,     0,     0,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,   225,   226,   227,   228,   229,     0,
     230,   231,   232,   233,   234,   235,   236,   703,   704,     0,
     705,     0,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,     0,     0,   250,   251,   252,   253,     0,   254,
     255,   256,   706,   707,   257,   258,   259,   260,   261,   262,
       0,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   708,   280,   709,
     282,   283,   284,     0,   285,   710,   286,   287,   288,   289,
     711,   712,   291,   713,   293,   294,   295,     0,   296,   297,
       0,     0,   714,   299,   300,     0,     0,   301,   302,   303,
     304,   305,   715,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   317,   318,   716,   320,   321,   322,
     323,   324,   325,     0,   326,   327,   328,   329,   330,     0,
       0,   331,   332,   333,   334,   717,   336,   337,   338,   339,
       0,   340,   341,   342,     0,   343,   344,   345,   346,   347,
     348,   349,   350,   351,     0,   352,   353,   354,   355,   356,
     357,   718,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,     0,   370,   371,   372,   373,   374,   719,
     375,   376,   377,   378,   379,   380,   381,   382,   720,   384,
       0,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   721,     0,   399,   400,     0,
     401,   402,   403,   404,   405,   406,   407,     0,   722,   723,
       0,     0,   410,   411,   724,   413,   725,   726,   415,   416,
     417,   418,   419,   420,   421,     0,     0,   422,   423,   424,
     425,   426,   727,     0,   427,   428,   429,   430,   431,   432,
     728,     0,   434,   435,   436,     0,   437,   438,   439,     0,
       0,   440,     0,     0,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   729,     0,     0,     0,     0,
       0,     0,   730,   731,     0,     0,     0,     0,     0,     0,
       0,   733,     0,     0,     0,     0,   734,    91,   673,   532,
     674,   675,   676,   677,   678,     0,     0,     0,     0,     0,
       0,     0,     0,    92,    93,    94,    95,    96,    97,    98,
      99,     0,   100,   101,   102,     0,     0,     0,     0,     0,
       0,     0,   103,   104,     0,   105,   106,   107,   108,   109,
     110,   111,   112,   679,   114,   680,   681,     0,   117,   118,
     119,   120,   121,   122,   682,   683,   123,   124,   684,   685,
     127,     0,   128,   129,   130,   131,   686,     0,   687,     0,
       0,   134,   135,   136,   137,   138,   139,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,   148,   149,   150,
     151,   688,   689,   690,   691,   692,   693,   694,   153,   154,
     155,   156,   157,   158,   159,   695,   696,   162,   697,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,     0,
     171,   172,   173,   174,     0,     0,   175,   176,   698,   178,
     179,     0,     0,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,   189,   699,   191,   192,   193,   194,
     700,   701,   196,     0,   197,   198,   702,   200,     0,   201,
       0,   202,   203,     0,   204,   205,   206,   207,   208,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,   231,   232,
     233,   234,   235,   236,   703,   704,     0,   705,     0,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,     0,
       0,   250,   251,   252,   253,     0,   254,   255,   256,   706,
     707,   257,   258,   259,   260,   261,   262,     0,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   708,   280,   709,   282,   283,   284,
       0,   285,   710,   286,   287,   288,   289,   711,   712,   291,
     713,   293,   294,   295,     0,   296,   297,     0,     0,   714,
     299,   300,     0,     0,   301,   302,   303,   304,   305,   715,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   716,   320,   321,   322,   323,   324,   325,
       0,   326,   327,   328,   329,   330,     0,     0,   331,   332,
     333,   334,   717,   336,   337,   338,   339,     0,   340,   341,
     342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   718,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,   719,   375,   376,   377,
     378,   379,   380,   381,   382,   720,   384,     0,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   721,     0,   399,   400,     0,   401,   402,   403,
     404,   405,   406,   407,     0,   722,   723,     0,     0,   410,
     411,   724,   413,   725,   726,   415,   416,   417,   418,   419,
     420,   421,     0,     0,   422,   423,   424,   425,   426,   727,
       0,   427,   428,   429,   430,   431,   432,   728,     0,   434,
     435,   436,     0,   437,   438,   439,     0,     0,   440,     0,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   729,     0,     0,     0,     0,     0,     0,   730,
     731,     0,     0,     0,     0,     0,     0,     0,   733,     0,
       0,     0,     0,   734,    91,   673,   532,   674,   675,   676,
     677,   678,     0,     0,     0,     0,     0,     0,     0,     0,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,   108,   109,   110,   111,   112,
     679,   114,   680,   681,     0,   117,   118,   119,   120,   121,
     122,   682,   683,   123,   124,   684,   685,   127,     0,   128,
     129,   130,   131,   686,     0,   687,     0,     0,   134,   135,
     136,   137,   138,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,   148,   149,   150,   151,   688,   689,
     690,   691,   692,   693,   694,   153,   154,   155,   156,   157,
     158,   159,   695,   696,   162,   697,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   698,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   699,   191,   192,   193,   194,   700,   701,   196,
       0,   197,   198,   702,   200,     0,   201,     0,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
     236,   703,   704,     0,   705,     0,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,     0,     0,   250,   251,
     252,   253,     0,   254,   255,   256,   706,   707,   257,   258,
     259,   260,   261,   262,     0,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   708,   280,   709,   282,   283,   284,     0,   285,   710,
     286,   287,   288,   289,   711,   712,   291,   713,   293,   294,
     295,     0,   296,   297,     0,     0,   714,   299,   300,     0,
       0,   301,   302,   303,   304,   305,   715,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     716,   320,   321,   322,   323,   324,   325,     0,   326,   327,
     328,   329,   330,     0,     0,   331,   332,   333,   334,   717,
     336,   337,   338,   339,     0,   340,   341,   342,     0,   343,
     344,   345,   346,   347,   348,   349,   350,   351,     0,   352,
     353,   354,   355,   356,   357,   718,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   719,   375,   376,   377,   378,   379,   380,
     381,   382,   720,   384,     0,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   721,
       0,   399,   400,     0,   401,   402,   403,   404,   405,   406,
     407,     0,   722,   723,     0,     0,   410,   411,   724,   413,
     725,   726,   415,   416,   417,   418,   419,   420,   421,     0,
       0,   422,   423,   424,   425,   426,   727,     0,   427,   428,
     429,   430,   431,   432,   728,     0,   434,   435,   436,     0,
     437,   438,   439,     0,     0,   440,     0,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   729,
       0,     0,     0,     0,     0,     0,  1220,  1221,     0,     0,
       0,     0,     0,     0,     0,   733,     0,     0,     0,     0,
     734,    91,  1594,   532,   674,   675,   676,   677,   678,     0,
       0,     0,     0,     0,     0,     0,     0,    92,    93,    94,
      95,    96,    97,    98,    99,     0,   100,   101,   102,     0,
       0,     0,     0,     0,     0,     0,   103,   104,     0,   105,
     106,   107,   108,   109,   110,   111,   112,   679,   114,   680,
     681,     0,   117,   118,   119,   120,   121,   122,   682,   683,
     123,   124,   684,   685,   127,     0,   128,   129,   130,   131,
     686,     0,   687,     0,     0,   134,   135,   136,   137,   138,
     139,   140,   141,     0,   142,   143,   144,   145,   146,   147,
       0,   148,   149,   150,   151,   688,   689,   690,   691,   692,
     693,   694,   153,   154,   155,   156,   157,   158,   159,   695,
     696,   162,   697,   163,     0,   164,   165,   166,   167,   168,
     169,     0,   170,     0,   171,   172,   173,   174,     0,     0,
     175,   176,   698,   178,   179,     0,     0,   180,   181,   182,
       0,   183,   184,   185,     0,   186,   187,   188,   189,   699,
     191,   192,   193,   194,   700,   701,   196,     0,   197,   198,
     702,   200,     0,   201,     0,   202,   203,     0,   204,   205,
     206,   207,   208,   209,     0,   210,     0,     0,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,   230,   231,   232,   233,   234,   235,   236,   703,   704,
       0,   705,     0,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,     0,     0,   250,   251,   252,   253,     0,
     254,   255,   256,   706,   707,   257,   258,   259,   260,   261,
     262,     0,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   708,   280,
     709,   282,   283,   284,     0,   285,   710,   286,   287,   288,
     289,   711,   712,   291,   713,   293,   294,   295,     0,   296,
     297,     0,     0,   714,   299,   300,     0,     0,   301,   302,
     303,   304,   305,   715,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   317,   318,   716,   320,   321,
     322,   323,   324,   325,     0,   326,   327,   328,   329,   330,
       0,     0,   331,   332,   333,   334,   717,   336,   337,   338,
     339,     0,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,   352,   353,   354,   355,
     356,   357,   718,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,     0,   370,   371,   372,   373,   374,
     719,   375,   376,   377,   378,   379,   380,   381,   382,   720,
     384,     0,     0,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   721,     0,   399,   400,
       0,   401,   402,   403,   404,   405,   406,   407,     0,   722,
     723,     0,     0,   410,   411,   724,   413,   725,   726,   415,
     416,   417,   418,   419,   420,   421,     0,     0,   422,   423,
     424,   425,   426,   727,     0,   427,   428,   429,   430,   431,
     432,   728,     0,   434,   435,   436,     0,   437,   438,   439,
       0,     0,   440,     0,     0,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   729,     0,     0,     0,
       0,     0,     0,   730,   731,     0,     0,     0,     0,     0,
       0,     0,   733,     0,     0,     0,     0,   734,    91,   673,
     532,   674,   675,   676,   677,   678,     0,     0,     0,     0,
       0,     0,     0,     0,    92,    93,    94,    95,    96,    97,
      98,    99,     0,   100,   101,   102,     0,     0,     0,     0,
       0,     0,     0,   103,   104,     0,   105,   106,   107,   108,
     109,   110,   111,   112,   679,   114,   680,   681,     0,   117,
     118,   119,   120,   121,   122,   682,   683,   123,   124,   684,
     685,   127,     0,   128,   129,   130,   131,   686,     0,   687,
       0,     0,   134,   135,   136,   137,   138,   139,   140,   141,
       0,   142,   143,   144,   145,   146,   147,     0,   148,   149,
     150,   151,   688,   689,   690,   691,   692,   693,   694,   153,
     154,   155,   156,   157,   158,   159,   695,   696,   162,   697,
     163,     0,   164,   165,   166,   167,   168,   169,     0,   170,
       0,   171,   172,   173,   174,     0,     0,   175,   176,   698,
     178,   179,     0,     0,   180,   181,   182,     0,   183,   184,
     185,     0,   186,   187,   188,   189,   699,   191,   192,   193,
     194,   700,   701,   196,     0,   197,   198,   702,   200,     0,
     201,     0,   202,   203,     0,   204,   205,   206,   207,   208,
     209,     0,   210,     0,     0,     0,   211,   212,     0,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,     0,   230,   231,
     232,   233,   234,   235,   236,   703,   704,     0,   705,     0,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
       0,     0,   250,   251,   252,   253,     0,   254,   255,   256,
     706,   707,   257,   258,   259,   260,   261,   262,     0,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   708,   280,   709,   282,   283,
     284,     0,   285,   710,   286,   287,   288,   289,   711,   712,
     291,   713,   293,   294,   295,     0,   296,   297,     0,     0,
     714,   299,   300,     0,     0,   301,   302,   303,   304,   305,
     715,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   317,   318,   716,   320,   321,   322,   323,   324,
     325,     0,   326,   327,   328,   329,   330,     0,     0,   331,
     332,   333,   334,   717,   336,   337,   338,   339,     0,   340,
     341,   342,     0,   343,   344,   345,   346,   347,   348,   349,
     350,   351,     0,   352,   353,   354,   355,   356,   357,   718,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,   719,   375,   376,
     377,   378,   379,   380,   381,   382,   720,   384,     0,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   721,     0,   399,   400,     0,   401,   402,
     403,   404,   405,   406,   407,     0,   722,   723,     0,     0,
     410,   411,   724,   413,   725,   726,   415,   416,   417,   418,
     419,   420,   421,     0,     0,   422,   423,   424,   425,   426,
     727,     0,   427,   428,   429,   430,   431,   432,   728,     0,
     434,   435,   436,     0,   437,   438,   439,     0,     0,   440,
       0,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   729,     0,     0,     0,     0,     0,     0,
     730,   731,     0,     0,     0,     0,     0,     0,     0,  2497,
       0,     0,     0,     0,   734,    91,   673,   532,   674,   675,
     676,   677,   678,     0,     0,     0,     0,     0,     0,     0,
       0,    92,    93,    94,    95,    96,    97,    98,    99,     0,
     100,   101,   102,     0,     0,     0,     0,     0,     0,     0,
     103,   104,     0,   105,   106,   107,   108,   109,   110,   111,
    2721,   679,   114,   680,   681,     0,   117,   118,   119,   120,
     121,   122,   682,   683,   123,   124,   684,   685,   127,     0,
     128,   129,   130,   131,   686,     0,   687,     0,     0,   134,
     135,   136,   137,   138,   139,   140,   141,     0,   142,   143,
     144,   145,   146,   147,     0,   148,   149,   150,  2722,   688,
     689,   690,   691,   692,   693,   694,   153,   154,   155,   156,
     157,   158,   159,   695,   696,   162,   697,   163,     0,   164,
     165,   166,   167,   168,   169,     0,   170,     0,   171,   172,
     173,   174,     0,     0,   175,   176,   698,   178,   179,     0,
       0,   180,   181,   182,     0,   183,   184,   185,     0,   186,
     187,   188,   189,   699,   191,   192,   193,   194,   700,   701,
     196,     0,   197,   198,   702,   200,     0,   201,     0,   202,
     203,     0,   204,   205,   206,   207,   208,   209,     0,   210,
       0,     0,     0,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,   225,
     226,   227,   228,   229,     0,   230,   231,   232,   233,   234,
     235,   236,   703,   704,     0,   705,     0,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,     0,     0,   250,
     251,   252,   253,     0,   254,   255,   256,   706,   707,   257,
     258,   259,   260,   261,   262,     0,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   708,   280,   709,   282,   283,   284,     0,   285,
     710,   286,   287,   288,   289,   711,   712,   291,   713,   293,
     294,   295,     0,   296,   297,     0,     0,   714,   299,   300,
       0,     0,   301,   302,   303,   304,   305,   715,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   317,
     318,   716,   320,   321,   322,   323,   324,   325,     0,   326,
     327,   328,   329,   330,     0,     0,   331,   332,   333,   334,
     717,   336,   337,   338,   339,     0,   340,   341,   342,     0,
     343,   344,   345,   346,   347,   348,   349,   350,   351,     0,
     352,   353,   354,   355,   356,   357,   718,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,     0,   370,
     371,   372,   373,   374,   719,   375,   376,   377,   378,   379,
     380,   381,   382,   720,   384,     0,     0,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     721,     0,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,   722,   723,     0,     0,   410,   411,   724,
     413,   725,   726,   415,   416,   417,   418,  2723,   420,   421,
       0,     0,   422,   423,   424,   425,   426,   727,     0,   427,
     428,   429,   430,   431,   432,   728,     0,   434,   435,   436,
       0,   437,   438,   439,     0,     0,   440,     0,     0,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     729,     0,     0,     0,     0,     0,     0,   730,   731,     0,
       0,     0,     0,     0,     0,     0,   733,     0,     0,     0,
       0,   734,    91,   673,   532,   674,   675,   676,   677,   678,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,   108,   109,   110,   111,   112,   679,   114,
     680,   681,     0,   117,   118,   119,   120,   121,   122,   682,
     683,   123,   124,   684,   685,   127,     0,   128,   129,   130,
     131,   686,     0,   687,     0,     0,   134,   135,   136,   137,
     138,   139,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,   148,   149,   150,  2722,   688,   689,   690,   691,
     692,   693,   694,   153,   154,   155,   156,   157,   158,   159,
     695,   696,   162,   697,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,     0,   171,   172,   173,   174,     0,
       0,   175,   176,   698,   178,   179,     0,     0,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,   189,
     699,   191,   192,   193,   194,   700,   701,   196,     0,   197,
     198,   702,   200,     0,   201,     0,   202,   203,     0,   204,
     205,   206,   207,   208,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,   231,   232,   233,   234,   235,   236,   703,
     704,     0,   705,     0,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,     0,     0,   250,   251,   252,   253,
       0,   254,   255,   256,   706,   707,   257,   258,   259,   260,
     261,   262,     0,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   708,
     280,   709,   282,   283,   284,     0,   285,   710,   286,   287,
     288,   289,   711,   712,   291,   713,   293,   294,   295,     0,
     296,   297,     0,     0,   714,   299,   300,     0,     0,   301,
     302,   303,   304,   305,   715,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   716,   320,
     321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
     330,     0,     0,   331,   332,   333,   334,   717,   336,   337,
     338,   339,     0,   340,   341,   342,     0,   343,   344,   345,
     346,   347,   348,   349,   350,   351,     0,   352,   353,   354,
     355,   356,   357,   718,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,   719,   375,   376,   377,   378,   379,   380,   381,   382,
     720,   384,     0,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   721,     0,   399,
     400,     0,   401,   402,   403,   404,   405,   406,   407,     0,
     722,   723,     0,     0,   410,   411,   724,   413,   725,   726,
     415,   416,   417,   418,  2723,   420,   421,     0,     0,   422,
     423,   424,   425,   426,   727,     0,   427,   428,   429,   430,
     431,   432,   728,     0,   434,   435,   436,     0,   437,   438,
     439,     0,     0,   440,     0,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   729,     0,     0,
       0,     0,     0,     0,   730,   731,     0,     0,     0,     0,
       0,     0,     0,   733,     0,     0,     0,     0,   734,    91,
     673,   532,   674,   675,   676,   677,   678,     0,     0,     0,
       0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
      97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
       0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
     108,   109,   110,   111,   112,   679,   114,   680,   681,     0,
     117,   118,   119,   120,   121,   122,   682,   683,   123,   124,
     684,   685,   127,     0,   128,   129,   130,   131,   686,     0,
     687,     0,     0,   134,   135,   136,   137,   138,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,   148,
     149,   150,   151,   688,   689,   690,   691,   692,   693,   694,
     153,   154,   155,   156,   157,   158,   159,   695,   696,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     698,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   699,   191,   192,
     193,   194,   700,   701,   196,     0,   197,   198,   702,   200,
       0,   201,     0,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
     231,   232,   233,   234,   235,   236,   703,   704,     0,   705,
       0,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,     0,     0,   250,   251,   252,   253,     0,   254,   255,
     256,   706,   707,   257,   258,   259,   260,   261,   262,     0,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   708,   280,   709,   282,
     283,   284,     0,   285,     0,   286,   287,   288,   289,   711,
     712,   291,   713,   293,   294,   295,     0,   296,   297,     0,
       0,   714,   299,   300,     0,     0,   301,   302,   303,   304,
     305,   715,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   716,   320,   321,   322,   323,
     324,   325,     0,   326,   327,   328,   329,   330,     0,     0,
     331,   332,   333,   334,   717,   336,   337,   338,   339,     0,
     340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
     349,   350,   351,     0,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   719,   375,
     376,   377,   378,   379,   380,   381,   382,   720,   384,     0,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   721,     0,   399,   400,     0,   401,
     402,   403,   404,   405,   406,   407,     0,   722,   723,     0,
       0,   410,   411,   724,   413,   725,   726,   415,   416,   417,
     418,   419,   420,   421,     0,     0,   422,   423,   424,   425,
     426,   727,     0,   427,   428,   429,   430,   431,   432,   728,
       0,   434,   435,   436,     0,   437,   438,   439,     0,     0,
     440,     0,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,     0,     0,     0,     0,     0,     0,
       0,  1463,  1464,     0,     0,    91,   673,   532,   674,   675,
    1465,   677,   678,     0,     0,   734,     0,     0,     0,     0,
       0,    92,    93,    94,    95,    96,    97,    98,    99,     0,
     100,   101,   102,     0,     0,     0,     0,     0,     0,     0,
     103,   104,     0,   105,   106,   107,   108,   109,   110,   111,
     112,   679,   114,   680,   681,     0,   117,   118,   119,   120,
     121,   122,   682,   683,   123,   124,   684,   685,   127,     0,
     128,   129,   130,   131,   686,     0,   687,     0,     0,   134,
     135,   136,   137,   138,   139,   140,   141,     0,   142,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   688,
     689,   690,   691,   692,   693,   694,   153,   154,   155,   156,
     157,   158,   159,   695,   696,   162,     0,   163,     0,   164,
     165,   166,   167,   168,   169,     0,   170,     0,   171,   172,
     173,   174,     0,     0,   175,   176,   698,   178,   179,     0,
       0,   180,   181,   182,     0,   183,   184,   185,     0,   186,
     187,   188,   189,   699,   191,   192,   193,   194,   700,   701,
     196,     0,   197,   198,   702,   200,     0,   201,     0,   202,
     203,     0,   204,   205,   206,   207,   208,   209,     0,   210,
       0,     0,     0,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,   225,
     226,   227,   228,   229,     0,   230,   231,   232,   233,   234,
     235,   236,   703,   704,     0,   705,     0,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,     0,     0,   250,
     251,   252,   253,     0,   254,   255,   256,   706,   707,   257,
     258,   259,   260,   261,   262,     0,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   708,   280,   709,   282,   283,   284,     0,   285,
       0,   286,   287,   288,   289,   711,   712,   291,   713,   293,
     294,   295,     0,   296,   297,     0,     0,   298,   299,   300,
       0,     0,   301,   302,   303,   304,   305,   715,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   317,
     318,   716,   320,   321,   322,   323,   324,   325,     0,   326,
     327,   328,   329,   330,     0,     0,   331,   332,   333,   334,
     717,   336,   337,   338,   339,     0,   340,   341,   342,     0,
     343,   344,   345,   346,   347,   348,   349,   350,   351,     0,
     352,   353,   354,   355,   356,   357,  1583,  1584,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,     0,   370,
     371,   372,   373,   374,   719,   375,   376,   377,   378,   379,
     380,   381,   382,   720,   384,     0,     0,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     721,     0,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,   722,   723,     0,     0,   410,   411,   724,
     413,   725,   726,   415,   416,   417,   418,   419,   420,   421,
       0,     0,   422,   423,   424,   425,   426,   727,     0,   427,
     428,   429,   430,   431,   432,   728,     0,   434,   435,   436,
       0,   437,   438,   439,     0,     0,   440,     0,     0,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
       0,     0,     0,     0,     0,     0,     0,  1585,  1586,     0,
       0,     0,     0,     0,     0,     0,  1465,     0,     0,     0,
       0,   734,    91,   673,   532,   674,   675,   676,   677,   678,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,   108,   109,   110,   111,   112,   679,   114,
     680,   681,     0,   117,   118,   119,   120,   121,   122,   682,
     683,   123,   124,   684,   685,   127,     0,   128,   129,   130,
     131,   686,     0,   687,     0,     0,   134,   135,   136,   137,
     138,   139,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,   148,   149,   150,   151,   688,   689,   690,   691,
     692,   693,   694,   153,   154,   155,   156,   157,   158,   159,
     695,   696,   162,     0,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,     0,   171,   172,   173,   174,     0,
       0,   175,   176,   698,   178,   179,     0,     0,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,   189,
     699,   191,   192,   193,   194,   700,   701,   196,     0,   197,
     198,   702,   200,     0,   201,     0,   202,   203,     0,   204,
     205,   206,   207,   208,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,   231,   232,   233,   234,   235,   236,   703,
     704,     0,   705,     0,   240,     0,   242,   243,   244,   245,
     246,   247,   248,   249,     0,     0,   250,   251,   252,   253,
       0,   254,   255,   256,   706,   707,   257,   258,   259,   260,
     261,   262,     0,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   708,
     280,   709,   282,   283,   284,     0,   285,     0,   286,   287,
     288,   289,   711,   712,   291,   713,   293,   294,   295,     0,
     296,   297,     0,     0,   714,   299,   300,     0,     0,   301,
     302,   303,   304,   305,   715,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   716,   320,
     321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
     330,     0,     0,   331,   332,   333,   334,   717,   336,   337,
     338,   339,     0,   340,   341,   342,     0,   343,   344,   345,
     346,   347,   348,   349,   350,   351,     0,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,   719,   375,   376,   377,   378,   379,   380,   381,   382,
     720,   384,     0,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   721,     0,   399,
     400,     0,   401,   402,   403,   404,   405,   406,   407,     0,
     722,   723,     0,     0,   410,   411,   724,   413,   725,   726,
     415,   416,   417,   418,   419,   420,   421,     0,     0,   422,
     423,   424,   425,   426,   727,     0,   427,   428,   429,   430,
     431,   432,   728,     0,   434,   435,   436,     0,   437,   438,
     439,     0,     0,   440,     0,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,     0,     0,     0,
       0,     0,     0,     0,  1463,  1464,     0,     0,     0,     0,
       0,     0,     0,  1465,     0,     0,     0,     0,   734,    91,
     673,   532,   674,   675,   676,   677,   678,     0,     0,     0,
       0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
      97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
       0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
     108,   109,   110,   111, -1588,   679,   114,   680,   681,     0,
     117,   118,   119,   120,   121,   122,   682,   683,   123,   124,
     684,   685,   127,     0,   128,   129,   130,   131,   686,     0,
     687,     0,     0,   134,   135,   136,   137,   138,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,   148,
     149,   150,  2722,   688,   689,   690,   691,   692,   693,   694,
     153,   154,   155,   156,   157,   158,   159,   695,   696,   162,
     697,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     698,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   699,   191,   192,
     193,   194,   700,   701,   196,     0,   197,   198,   702,   200,
       0,   201,     0,   202,   203,     0,   204,   205,   206,   207,
   -1588,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218, -1588,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
     231,   232,   233,   234,   235,   236,   703,   704,     0,   705,
       0,   240,     0,     0,   243,   244,   245,   246,   247,   248,
     249,     0,     0,   250,   251,   252, -1588,     0,   254,   255,
     256,   706,   707,   257,   258,   259,   260,   261,   262,     0,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   708,   280,   709,   282,
     283,   284,     0,   285,     0,   286,   287,     0,   289,   711,
     712,   291,   713,   293,   294,   295,     0,   296,   297,     0,
       0,   714,   299,   300,     0,     0,   301,   302,   303,   304,
     305,   715,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   716,   320,   321,   322,   323,
     324,   325,     0,   326,   327,   328,   329,   330,     0,     0,
     331,   332,   333,   334,   717,   336,   337,   338,   339,     0,
     340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
     349,   350,   351,     0,   352,   353,   354,   355,   356,   357,
     718,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   719,   375,
     376,   377,   378,   379, -1588,   381,   382,   720,   384,     0,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   721,     0,   399,   400,     0,   401,
     402,   403,   404,   405,   406,   407,     0,   722,   723,     0,
       0,   410,   411,   724,   413,   725,   726,   415,   416,   417,
     418,  2723,   420,   421,     0,     0,   422,   423,   424,   425,
     426,   727,     0,   427,   428,   429,   430,   431,   432,   728,
       0,   434,   435,   436,     0,   437,   438,   439,     0,     0,
     440,     0,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461, -1588,     0,     0,     0,     0,     0,
       0,   730,   731,     0,     0,     0,     0,     0,     0,     0,
     733,     0,     0,     0,     0,   734,    91,   673,   532,   674,
     675,   676,   677,   678,     0,     0,     0,     0,     0,     0,
       0,     0,    92,    93,    94,    95,    96,    97,    98,    99,
       0,   100,   101,   102,     0,     0,     0,     0,     0,     0,
       0,   103,   104,     0,   105,   106,   107,   108,   109,   110,
     111,     0,   679,   114,   680,   681,     0,   117,   118,   119,
     120,   121,   122,   682,   683,   123,   124,   684,   685,   127,
       0,   128,   129,   130,   131,   686,     0,   687,     0,     0,
     134,   135,   136,   137,   138,   139,   140,   141,     0,   142,
     143,   144,   145,   146,   147,     0,   148,   149,   150,   151,
     688,   689,   690,   691,   692,   693,   694,   153,   154,   155,
     156,   157,   158,   159,   695,   696,   162,   697,   163,     0,
     164,   165,   166,   167,   168,   169,     0,   170,     0,   171,
     172,   173,   174,     0,     0,   175,   176,   698,   178,   179,
       0,     0,   180,   181,   182,     0,   183,     0,   185,     0,
     186,   187,   188,   189,   699,   191,   192,   193,   194,   700,
     701,   196,     0,   197,   198,   702,   200,     0,   201,     0,
     202,   203,     0,   204,   205,   206,   207,     0,   209,     0,
     210,     0,     0,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,     0,   220,   221,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,   230,   231,   232,   233,
     234,   235,   236,   703,   704,     0,   705,     0,   240,     0,
       0,   243,   244,   245,   246,   247,   248,   249,     0,     0,
     250,   251,   252,     0,     0,   254,   255,   256,   706,   707,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   708,   280,   709,   282,   283,   284,     0,
     285,     0,   286,   287,     0,   289,   711,   712,   291,   713,
     293,   294,   295,     0,   296,   297,     0,     0,   714,   299,
     300,     0,     0,   301,   302,   303,   304,   305,   715,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     0,
     317,   318,   716,   320,   321,   322,   323,   324,   325,     0,
     326,   327,   328,   329,   330,     0,     0,   331,   332,   333,
     334,   717,   336,   337,   338,   339,     0,   340,   341,   342,
       0,   343,   344,   345,   346,   347,   348,   349,   350,   351,
       0,   352,   353,   354,   355,   356,   357,   718,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,     0,
     370,   371,   372,   373,   374,   719,   375,   376,   377,   378,
     379,     0,   381,   382,   720,   384,     0,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   721,     0,   399,   400,     0,   401,   402,   403,   404,
     405,   406,   407,     0,   722,   723,     0,     0,   410,   411,
     724,   413,   725,   726,   415,   416,   417,   418,   419,   420,
     421,     0,     0,   422,   423,   424,   425,   426,   727,     0,
     427,   428,   429,   430,   431,   432,   728,     0,   434,   435,
     436,     0,   437,   438,   439,     0,     0,   440,     0,     0,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,     0,     0,     0,     0,     0,     0,   487,   730,   731,
       0,     0,     0,     0,     0,     0,     0,   733,     0,     0,
       0,     0,   734,    92,    93,    94,    95,    96,    97,    98,
      99,     0,   100,   101,   102,     0,     0,     0,     0,     0,
    2132,     0,   103,   104,     0,   105,   106,   107,     0,   109,
     110,   111,   112,   113,     0,   115,   116,     0,   117,   118,
     119,   120,   121,   122,     0,     0,   123,   124,   125,   126,
     127,     0,   128,   129,   130,   131,   132,     0,     0,     0,
       0,   134,   135,   136,   137,     0,   139,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,  -388,   149,   150,
     151,     0,     0,     0,     0,     0,     0,     0,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,     0,
     171,   172,   173,   174,     0,     0,   175,   176,   177,   178,
     179,     0,     0,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,     0,   201,
       0,   202,     0,     0,  -388,   205,   206,   207,     0,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,     0,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,  -388,   232,
     233,   234,   235,   236,   237,   238,     0,   239,     0,   240,
       0,     0,   243,  -388,   245,   246,   247,   248,   249,     0,
       0,   250,  -388,   252,     0,     0,   254,   255,   256,     0,
       0,   257,   258,   259,   260,   261,   262,     0,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,  -388,   281,   282,   283,   284,
       0,   285,     0,   286,   287,     0,   289,     0,   290,   291,
     292,   293,   294,   295,     0,   296,   297,     0,     0,   298,
     299,   300,     0,     0,   301,   302,     0,   304,     0,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
       0,   326,   327,   328,   329,   330,     0,     0,   331,   332,
     333,   334,   335,   336,   337,   338,   339,     0,   340,   341,
     342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
     351,     0,   352,   353,  -388,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,     0,   381,   382,   383,   384,     0,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   401,  -388,   403,
     404,   405,   406,   407,     0,   408,   409,     0,     0,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
     420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,     0,   434,
       0,   436,     0,   437,   438,   439,     0,     0,   440,     0,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,     0,     0,    91,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   793,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,     0,   117,   118,   119,   120,   121,
     122,     0,   683,   123,   124,   125,   126,   127,     0,   128,
     129,   130,   131,   686,     0,   687,     0,     0,   134,   135,
     136,   137,   138,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,   148,   149,   150,   151,   688,   689,
     690,   691,   692,   693,   694,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   700,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,  1866,     0,   250,   251,
     252,   253,     0,   254,   255,   256,   706,   707,   257,   258,
     259,   260,   261,   262,     0,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,     0,   285,     0,
     286,   287,   288,   289,     0,   712,   291,   292,   293,   294,
     295,     0,   296,   297,     0,   557,   298,   299,   300,     0,
       0,   301,   302,   303,   304,   305,   715,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     716,   320,   321,   322,   323,   324,   325,     0,   326,   327,
     328,   329,   330,     0,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,     0,   340,   341,   342,     0,   343,
     344,   345,   346,   347,   348,   349,   350,   351,     0,   352,
     353,   354,   355,   356,   357,   358,  1867,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    25,   370,   371,
     372,   373,   374,   719,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,     0,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   721,
       0,   399,   400,    29,   401,   402,   403,   404,   405,   406,
     407,     0,   408,   409,     0,     0,   410,   411,   724,   413,
     725,     0,   415,   416,   417,   418,   419,   420,   421,     0,
       0,   422,   423,   424,   425,   426,   727,     0,   427,   428,
     429,   430,   431,   582,   433,     0,   434,   435,   436,     0,
     437,   438,   439,     0,     0,   440,     0,    32,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,     0,
      91,    33,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1868,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,   683,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   686,
       0,   687,     0,     0,   134,   135,   136,   137,   138,   139,
     140,   141,     0,   142,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   688,   689,   690,   691,   692,   693,
     694,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,     0,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,     0,   171,   172,   173,   174,     0,     0,   175,
     176,   177,   178,   179,     0,     0,   180,   181,   182,     0,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   700,     0,   196,     0,   197,   198,   199,
     200,     0,   201,     0,   202,   203,     0,   204,   205,   206,
     207,   208,   209,     0,   210,     0,  1865,     0,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,   225,   226,   227,   228,   229,     0,
     230,   231,   232,   233,   234,   235,   236,   237,   238,     0,
     239,     0,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,  1866,     0,   250,   251,   252,   253,     0,   254,
     255,   256,   706,   707,   257,   258,   259,   260,   261,   262,
       0,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,     0,   285,     0,   286,   287,   288,   289,
       0,   712,   291,   292,   293,   294,   295,     0,   296,   297,
       0,   557,   298,   299,   300,     0,     0,   301,   302,   303,
     304,   305,   715,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   317,   318,   716,   320,   321,   322,
     323,   324,   325,     0,   326,   327,   328,   329,   330,     0,
       0,   331,   332,   333,   334,   335,   336,   337,   338,   339,
       0,   340,   341,   342,     0,   343,   344,   345,   346,   347,
     348,   349,   350,   351,     0,   352,   353,   354,   355,   356,
     357,   358,  1867,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,     0,   370,   371,   372,   373,   374,   719,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
       0,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   721,     0,   399,   400,     0,
     401,   402,   403,   404,   405,   406,   407,     0,   408,   409,
       0,     0,   410,   411,   724,   413,   725,     0,   415,   416,
     417,   418,   419,   420,   421,     0,     0,   422,   423,   424,
     425,   426,   727,     0,   427,   428,   429,   430,   431,   432,
     433,     0,   434,   435,   436,     0,   437,   438,   439,     0,
       0,   440,     0,     0,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,     0,    91,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1868,    92,    93,    94,    95,    96,    97,    98,    99,
       0,   100,   101,   102,     0,     0,     0,     0,     0,     0,
       0,   103,   104,     0,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,     0,   117,   118,   119,
     120,   121,   122,     0,   683,   123,   124,   125,   126,   127,
       0,   128,   129,   130,   131,   686,     0,   687,     0,     0,
     134,   135,   136,   137,   138,   139,   140,   141,     0,   142,
     143,   144,   145,   146,   147,     0,   148,   149,   150,   151,
     688,   689,   690,   691,   692,   693,   694,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,     0,   163,     0,
     164,   165,   166,   167,   168,   169,     0,   170,     0,   171,
     172,   173,   174,     0,     0,   175,   176,   177,   178,   179,
       0,     0,   180,   181,   182,     0,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   700,
       0,   196,     0,   197,   198,   199,   200,     0,   201,     0,
     202,   203,     0,   204,   205,   206,   207,   208,   209,     0,
     210,     0,     0,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,   230,   231,   232,   233,
     234,   235,   236,   237,   238,     0,   239,     0,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,  1866,     0,
     250,   251,   252,   253,     0,   254,   255,   256,   706,   707,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     285,     0,   286,   287,   288,   289,     0,   712,   291,   292,
     293,   294,   295,     0,   296,   297,     0,   557,   298,   299,
     300,     0,     0,   301,   302,   303,   304,   305,   715,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     0,
     317,   318,   716,   320,   321,   322,   323,   324,   325,     0,
     326,   327,   328,   329,   330,     0,     0,   331,   332,   333,
     334,   335,   336,   337,   338,   339,     0,   340,   341,   342,
       0,   343,   344,   345,   346,   347,   348,   349,   350,   351,
       0,   352,   353,   354,   355,   356,   357,   358,  1867,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,     0,
     370,   371,   372,   373,   374,   719,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,     0,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   721,     0,   399,   400,     0,   401,   402,   403,   404,
     405,   406,   407,     0,   408,   409,     0,     0,   410,   411,
     724,   413,   725,     0,   415,   416,   417,   418,   419,   420,
     421,     0,     0,   422,   423,   424,   425,   426,   727,     0,
     427,   428,   429,   430,   431,   432,   433,     0,   434,   435,
     436,     0,   437,   438,   439,     0,     0,   440,     0,     0,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,     0,    91,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1868,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
     683,   123,   124,   125,   126,   127,     0,   128,   129,   130,
     131,   686,     0,   687,     0,     0,   134,   135,   136,   137,
     138,   139,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,   148,   149,   150,   151,   688,   689,   690,   691,
     692,   693,   694,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,     0,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,     0,   171,   172,   173,   174,     0,
       0,   175,   176,   177,   178,   179,     0,     0,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   700,     0,   196,     0,   197,
     198,   199,   200,     0,   201,     0,   202,   203,     0,   204,
     205,   206,   207,   208,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,   231,   232,   233,   234,   235,   236,   237,
     238,     0,   239,     0,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,     0,     0,   250,   251,   252,   253,
       0,   254,   255,   256,   706,   707,   257,   258,   259,   260,
     261,   262,     0,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,     0,   285,     0,   286,   287,
     288,   289,     0,   712,   291,   292,   293,   294,   295,     0,
     296,   297,     0,     0,   298,   299,   300,     0,     0,   301,
     302,   303,   304,   305,   715,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   716,   320,
     321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
     330,     0,     0,   331,   332,   333,   334,   335,   336,   337,
     338,   339,     0,   340,   341,   342,     0,   343,   344,   345,
     346,   347,   348,   349,   350,   351,     0,   352,   353,   354,
     355,   356,   357,   358,  1867,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,   719,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   721,     0,   399,
     400,     0,   401,   402,   403,   404,   405,   406,   407,     0,
     408,   409,     0,     0,   410,   411,   724,   413,   725,     0,
     415,   416,   417,   418,   419,   420,   421,     0,     0,   422,
     423,   424,   425,   426,   727,     0,   427,   428,   429,   430,
     431,   432,   433,     0,   434,   435,   436,     0,   437,   438,
     439,     0,     0,   440,     0,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,     0,    91,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   571,    92,    93,    94,    95,    96,    97,
      98,    99,     0,   100,   101,   102,     0,     0,     0,     0,
       0,     0,     0,   103,   104,     0,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,     0,   117,
     118,   119,   120,   121,   122,     0,   683,   123,   124,   125,
     126,   127,     0,   128,   129,   130,   131,   686,     0,   687,
       0,     0,   134,   135,   136,   137,   138,   139,   140,   141,
       0,   142,   143,   144,   145,   146,   147,     0,   148,   149,
     150,   151,   688,   689,   690,   691,   692,   693,   694,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,     0,
     163,     0,   164,   165,   166,   167,   168,   169,     0,   170,
       0,   171,   172,   173,   174,     0,     0,   175,   176,   177,
     178,   179,     0,     0,   180,   181,   182,     0,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   700,     0,   196,     0,   197,   198,   199,   200,     0,
     201,     0,   202,   203,     0,   204,   205,   206,   207,   208,
     209,     0,   210,     0,     0,     0,   211,   212,     0,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,     0,   230,   231,
     232,   233,   234,   235,   236,   237,   238,     0,   239,     0,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
       0,     0,   250,   251,   252,   253,     0,   254,   255,   256,
     706,   707,   257,   258,   259,   260,   261,   262,     0,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,     0,   285,     0,   286,   287,   288,   289,     0,   712,
     291,   292,   293,   294,   295,     0,   296,   297,     0,     0,
     298,   299,   300,     0,     0,   301,   302,   303,   304,   305,
     715,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   317,   318,   716,   320,   321,   322,   323,   324,
     325,     0,   326,   327,   328,   329,   330,     0,     0,   331,
     332,   333,   334,   335,   336,   337,   338,   339,     0,   340,
     341,   342,     0,   343,   344,   345,   346,   347,   348,   349,
     350,   351,     0,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,   719,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   721,     0,   399,   400,     0,   401,   402,
     403,   404,   405,   406,   407,     0,   408,   409,     0,     0,
     410,   411,   724,   413,   725,     0,   415,   416,   417,   418,
     419,   420,   421,     0,     0,   422,   423,   424,   425,   426,
     727,     0,   427,   428,   429,   430,   431,   432,   433,     0,
     434,   435,   436,     0,   437,   438,   439,     0,     0,   440,
       0,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,     0,   653,  1010,   532,     0,     0,     0,
     677,     0,     0,     0,     0,     0,     0,     0,     0,  2515,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,     0,   117,   118,   119,   120,   121,
     122,     0,     0,   123,   124,   125,   126,   127,     0,   128,
     129,   130,   131,   132,     0,   133,     0,     0,   134,   135,
     136,   137,   138,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,   148,   149,   150,   151,     0,     0,
       0,   152,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,  1011,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,     0,     0,   250,   251,
     252,   253,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,     0,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,     0,   285,     0,
     286,   287,   288,   289,     0,   290,   291,   292,   293,   294,
     295,     0,   296,   297,  1012,     0,   298,   299,   300,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   326,   327,
     328,   329,   330,     0,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,     0,   340,   341,   342,     0,   343,
     344,   345,   346,   347,   348,   349,   350,   351,     0,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,     0,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   401,   402,   403,   404,   405,   406,
     407,     0,   408,   409,     0,     0,   410,   411,   412,   413,
     414,  1013,   415,   416,   417,   418,   419,   420,   421,     0,
       0,   422,   423,   424,   425,   426,     0,     0,   427,   428,
     429,   430,   431,   432,   433,     0,   434,   435,   436,     0,
     437,   438,   439,     0,     0,   440,     0,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,     0,
     653,     0,     0,     0,     0,     0,  1014,  1015,  1732,     0,
       0,     0,     0,     0,     0,  1733,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     3,     4,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,   133,     0,     0,   134,   135,   136,   137,   138,   139,
     140,   141,     0,   142,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,     0,     0,     0,   152,     0,     0,
       0,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,     0,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,     0,   171,   172,   173,   174,     0,     0,   175,
     176,   177,   178,   179,     0,     0,   180,   181,   182,     0,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,     0,   196,     0,   197,   198,   199,
     200,     0,   201,     0,   202,   203,     0,   204,   205,   206,
     207,   208,   209,     0,   210,     0,     0,     0,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,   225,   226,   227,   228,   229,     0,
     230,   231,   232,   233,   234,   235,   236,   237,   238,     0,
     239,     0,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,     0,     0,   250,   251,   252,   253,     0,   254,
     255,   256,     0,     0,   257,   258,   259,   260,   261,   262,
       0,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,     0,   285,     0,   286,   287,   288,   289,
       0,   290,   291,   292,   293,   294,   295,     0,   296,   297,
       0,     0,   298,   299,   300,     0,     0,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
     323,   324,   325,     0,   326,   327,   328,   329,   330,     0,
       0,   331,   332,   333,   334,   335,   336,   337,   338,   339,
       0,   340,   341,   342,     0,   343,   344,   345,   346,   347,
     348,   349,   350,   351,     0,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    25,   370,   371,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
       0,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,    29,
     401,   402,   403,   404,   405,   406,   407,     0,   408,   409,
       0,     0,   410,   411,   412,   413,   414,     0,   415,   416,
     417,   418,   419,   420,   421,     0,     0,   422,   423,   424,
     425,   426,     0,     0,   427,   428,   429,   430,   431,   582,
     433,     0,   434,   435,   436,     0,   437,   438,   439,     0,
       0,   440,     0,    32,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,     0,   487,    33,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   571,    92,    93,    94,    95,    96,    97,    98,    99,
     579,   100,   101,   102,     0,     0,     0,     0,     0,     0,
       0,   103,   104,     0,   105,   106,   107,     0,   109,   110,
     111,   112,   113,     0,   115,   116,     0,   117,   118,   119,
     120,   121,   122,     0,     0,   123,   124,   125,   126,   127,
       0,   128,   129,   130,   131,   132,     0,     0,     0,     0,
     134,   135,   136,   137,     0,   139,   140,   141,     0,   142,
     143,   144,   145,   146,   147,     0,     0,   149,   150,   151,
       0,     0,     0,     0,     0,     0,     0,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,     0,   163,     0,
     164,   165,   166,   167,   168,   169,     0,   170,     0,   171,
     172,   173,   174,     0,     0,   175,   176,   177,   178,   179,
       0,     0,   180,   181,   182,     0,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,     0,   201,     0,
     202,     0,     0,     0,   205,   206,   207,     0,   209,     0,
     210,     0,     0,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,     0,   220,   221,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,   230,     0,   232,   233,
     234,   235,   236,   237,   238,     0,   239,     0,   240,     0,
       0,   243,     0,   245,   246,   247,   248,   249,     0,     0,
     250,     0,   252,     0,     0,   254,   255,   256,     0,     0,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   281,   282,   283,   284,     0,
     285,     0,   286,   287,     0,   289,     0,   290,   291,   292,
     293,   294,   295,     0,   296,   297,     0,     0,   298,   299,
     300,     0,     0,   301,   302,     0,   304,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     0,
     317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     326,   327,   328,   329,   330,     0,     0,   331,   332,   333,
     334,   335,   336,   337,   338,   339,     0,   340,   341,   342,
       0,   343,   344,   345,   346,   347,   348,   349,   350,   351,
       0,   352,   353,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,    25,
     370,   371,   372,   373,   374,     0,   375,   376,   377,   378,
     379,     0,   381,   382,   383,   384,     0,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,    29,   401,     0,   403,   404,
     405,   406,   407,     0,   580,   409,     0,     0,   581,   411,
     412,   413,   414,     0,   415,   416,   417,   418,   419,   420,
     421,     0,     0,   422,   423,   424,   425,   426,     0,     0,
     427,   428,   429,   430,   431,   582,   433,     0,   434,     0,
     436,     0,   437,   438,   439,     0,     0,   440,     0,    32,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,     0,   487,    33,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   571,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,     0,   109,   110,   111,   112,   113,     0,
     115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
       0,   123,   124,   125,   126,   127,     0,   128,   129,   130,
     131,   132,     0,     0,     0,     0,   134,   135,   136,   137,
       0,   139,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,     0,   149,   150,   151,     0,     0,     0,     0,
       0,     0,     0,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,     0,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,     0,   171,   172,   173,   174,     0,
       0,   175,   176,   177,   178,   179,     0,     0,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,     0,   196,     0,   197,
     198,   199,   200,     0,   201,     0,   202,     0,     0,     0,
     205,   206,   207,     0,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,   214,   215,   216,   217,   218,     0,
     220,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,     0,   232,   233,   234,   235,   236,   237,
     238,     0,   239,     0,   240,     0,     0,   243,     0,   245,
     246,   247,   248,   249,     0,     0,   250,     0,   252,     0,
       0,   254,   255,   256,     0,     0,   257,   258,   259,   260,
     261,   262,     0,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   281,   282,   283,   284,     0,   285,     0,   286,   287,
       0,   289,     0,   290,   291,   292,   293,   294,   295,     0,
     296,   297,     0,     0,   298,   299,   300,     0,     0,   301,
     302,     0,   304,     0,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
     321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
     330,     0,     0,   331,   332,   333,   334,   335,   336,   337,
     338,   339,     0,   340,   341,   342,     0,   343,   344,   345,
     346,   347,   348,   349,   350,   351,     0,   352,   353,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    25,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,     0,   381,   382,
     383,   384,     0,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,    29,   401,     0,   403,   404,   405,   406,   407,     0,
     408,   409,     0,     0,   410,   411,   412,   413,   414,     0,
     415,   416,   417,   418,   419,   420,   421,     0,     0,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   582,   433,     0,   434,     0,   436,     0,   437,   438,
     439,     0,     0,   440,     0,    32,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,     0,   487,    33,
    2323,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   571,    92,    93,    94,    95,    96,    97,
      98,    99,     0,   100,   101,   102,     0,     0,     0,     0,
       0,     0,     0,   103,   104,     0,   105,   106,   107,     0,
     109,   110,   111,   112,   113,     0,   115,   116,     0,   117,
     118,   119,   120,   121,   122,     0,     0,   123,   124,   125,
     126,   127,     0,   128,   129,   130,   131,   132,     0,     0,
       0,     0,   134,   135,   136,   137,     0,   139,   140,   141,
       0,   142,   143,   144,   145,   146,   147,     0,     0,   149,
     150,   151,     0,     0,     0,     0,     0,     0,     0,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,     0,
     163,     0,   164,   165,   166,   167,   168,   169,     0,   170,
       0,   171,   172,   173,   174,     0,     0,   175,   176,   177,
     178,   179,     0,     0,   180,   181,   182,     0,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,     0,   196,     0,   197,   198,   199,   200,     0,
     201,     0,   202,     0,     0,     0,   205,   206,   207,     0,
     209,     0,   210,     0,     0,     0,   211,   212,     0,   213,
     214,   215,   216,   217,   218,     0,   220,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,     0,   230,     0,
     232,   233,   234,   235,   236,   237,   238,     0,   239,     0,
     240,     0,     0,   243,     0,   245,   246,   247,   248,   249,
       0,     0,   250,     0,   252,     0,     0,   254,   255,   256,
       0,     0,   257,   258,   259,   260,   261,   262,     0,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,     0,   281,   282,   283,
     284,     0,   285,     0,   286,   287,     0,   289,     0,   290,
     291,   292,   293,   294,   295,     0,   296,   297,     0,     0,
     298,   299,   300,     0,     0,   301,   302,     0,   304,     0,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
     325,     0,   326,   327,   328,   329,   330,     0,     0,   331,
     332,   333,   334,   335,   336,   337,   338,   339,     0,   340,
     341,   342,     0,   343,   344,   345,   346,   347,   348,   349,
     350,   351,     0,   352,   353,     0,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,     0,   375,   376,
     377,   378,   379,     0,   381,   382,   383,   384,     0,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,   401,     0,
     403,   404,   405,   406,   407,     0,   408,   409,     0,     0,
     410,   411,   412,   413,   414,     0,   415,   416,   417,   418,
     419,   420,   421,     0,     0,   422,   423,   424,   425,   426,
       0,     0,   427,   428,   429,   430,   431,   432,   433,     0,
     434,     0,   436,     0,   437,   438,   439,     0,     0,   440,
       0,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,     0,   487,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2341,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,     0,   109,   110,   111,   112,
     113,     0,   115,   116,     0,   117,   118,   119,   120,   121,
     122,     0,     0,   123,   124,   125,   126,   127,     0,   128,
     129,   130,   131,   132,     0,     0,     0,     0,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,     0,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   281,   282,   283,   284,     0,   285,     0,
     286,   287,     0,   289,     0,   290,   291,   292,   293,   294,
     295,     0,   296,   297,     0,     0,   298,   299,   300,     0,
       0,   301,   302,     0,   304,     0,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   326,   327,
     328,   329,   330,     0,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,     0,   340,   341,   342,     0,   343,
     344,   345,   346,   347,   348,   349,   350,   351,     0,   352,
     353,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,     0,
     381,   382,   383,   384,     0,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   401,     0,   403,   404,   405,   406,
     407,     0,   408,   409,     0,     0,   410,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,   420,   421,     0,
       0,   422,   423,   424,   425,   426,     0,     0,   427,   428,
     429,   430,   431,   432,   433,     0,   434,     0,   436,     0,
     437,   438,   439,     0,     0,   440,     0,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,     0,
     487,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   773,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,     0,   134,   135,   136,   137,     0,   139,
     140,   141,     0,   142,   143,   144,   145,   146,   147,     0,
       0,   149,   150,   151,     0,     0,     0,     0,     0,     0,
       0,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,     0,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,     0,   171,   172,   173,   174,     0,     0,   175,
     176,   177,   178,   179,     0,     0,   180,   181,   182,     0,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,     0,   196,     0,   197,   198,   199,
     200,     0,   201,     0,   202,     0,     0,     0,   205,   206,
     207,     0,   209,     0,   210,     0,     0,     0,   211,   212,
       0,   213,   214,   215,   216,   217,   218,     0,   220,   221,
     222,   223,     0,   224,   225,   226,   227,   228,   229,     0,
     230,     0,   232,   233,   234,   235,   236,   237,   238,     0,
     239,     0,   240,     0,     0,   243,     0,   245,   246,   247,
     248,   249,     0,     0,   250,     0,   252,     0,     0,   254,
     255,   256,     0,     0,   257,   258,   259,   260,   261,   262,
       0,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   281,
     282,   283,   284,     0,   285,     0,   286,   287,     0,   289,
       0,   290,   291,   292,   293,   294,   295,     0,   296,   297,
       0,     0,   298,   299,   300,     0,     0,   301,   302,     0,
     304,     0,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
     323,   324,   325,     0,   326,   327,   328,   329,   330,     0,
       0,   331,   332,   333,   334,   335,   336,   337,   338,   339,
       0,   340,   341,   342,     0,   343,   344,   345,   346,   347,
     348,   349,   350,   351,     0,   352,   353,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,     0,   370,   371,   372,   373,   374,     0,
     375,   376,   377,   378,   379,     0,   381,   382,   383,   384,
       0,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,     0,
     401,     0,   403,   404,   405,   406,   407,     0,   408,   409,
       0,     0,   410,   411,   412,   413,   414,     0,   415,   416,
     417,   418,   419,   420,   421,     0,     0,   422,   423,   424,
     425,   426,     0,     0,   427,   428,   429,   430,   431,   432,
     433,     0,   434,     0,   436,     0,   437,   438,   439,     0,
       0,   440,     0,     0,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,     0,   487,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1617,    92,    93,    94,    95,    96,    97,    98,    99,
       0,   100,   101,   102,     0,     0,     0,     0,     0,     0,
       0,   103,   104,     0,   105,   106,   107,     0,   109,   110,
     111,   112,   113,     0,   115,   116,     0,   117,   118,   119,
     120,   121,   122,     0,     0,   123,   124,   125,   126,   127,
       0,   128,   129,   130,   131,   132,     0,     0,     0,     0,
     134,   135,   136,   137,     0,   139,   140,   141,     0,   142,
     143,   144,   145,   146,   147,     0,     0,   149,   150,   151,
       0,     0,     0,     0,     0,     0,     0,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,     0,   163,     0,
     164,   165,   166,   167,   168,   169,     0,   170,     0,   171,
     172,   173,   174,     0,     0,   175,   176,   177,   178,   179,
       0,     0,   180,   181,   182,     0,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,     0,   201,     0,
     202,     0,     0,     0,   205,   206,   207,     0,   209,     0,
     210,     0,     0,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,     0,   220,   221,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,   230,     0,   232,   233,
     234,   235,   236,   237,   238,     0,   239,     0,   240,     0,
       0,   243,     0,   245,   246,   247,   248,   249,     0,     0,
     250,     0,   252,     0,     0,   254,   255,   256,     0,     0,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   281,   282,   283,   284,     0,
     285,     0,   286,   287,     0,   289,     0,   290,   291,   292,
     293,   294,   295,     0,   296,   297,     0,     0,   298,   299,
     300,     0,     0,   301,   302,     0,   304,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     0,
     317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     326,   327,   328,   329,   330,     0,     0,   331,   332,   333,
     334,   335,   336,   337,   338,   339,     0,   340,   341,   342,
       0,   343,   344,   345,   346,   347,   348,   349,   350,   351,
       0,   352,   353,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,     0,
     370,   371,   372,   373,   374,     0,   375,   376,   377,   378,
     379,     0,   381,   382,   383,   384,     0,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,     0,   401,     0,   403,   404,
     405,   406,   407,     0,   408,   409,     0,     0,   410,   411,
     412,   413,   414,     0,   415,   416,   417,   418,   419,   420,
     421,     0,     0,   422,   423,   424,   425,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,     0,   434,     0,
     436,     0,   437,   438,   439,     0,     0,   440,     0,     0,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,     0,     0,     0,     0,  1033,  1010,   532,     0,     0,
    1445,   677,     0,     0,     0,     0,     0,  2114,  1446,  1447,
    1448,    92,    93,    94,    95,    96,    97,    98,    99,   874,
     100,   101,   102,   875,   876,   877,   878,   879,   880,   881,
     103,   104,   882,   105,   106,   107,   108,   109,   110,   111,
       0,  1034,   114,  1035,  1036,   883,   117,   118,   119,   120,
     121,   122,   884,   885,   123,   124,  1037,  1038,   127,   886,
     128,   129,   130,   131,     0,   887,   133,   888,   889,   134,
     135,   136,   137,   138,   139,   140,   141,   890,   142,   143,
     144,   145,   146,   147,   891,   148,   149,   150,   151,   892,
     893,   894,   152,   895,   896,   897,   153,   154,   155,   156,
     157,   158,   159,  1039,  1040,   162,   898,   163,   899,   164,
     165,   166,   167,   168,   169,   900,   170,   901,   171,   172,
     173,   174,   902,   903,   175,   176,   698,   178,   179,   904,
     905,   180,   181,   182,   906,   183,   184,   185,   907,   186,
     187,   188,   189,     0,   191,   192,   193,   194,     0,   908,
     196,   909,   197,   198,  1041,   200,   910,   201,   911,   202,
     203,   912,   204,   205,   206,   207,   208,   209,   913,   210,
     914,   915,   916,     0,   212,   917,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   918,   224,   225,
     226,   227,   228,   229,   919,   230,   231,     0,   233,   234,
     235,   236,  1042,  1043,   920,  1044,   921,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   922,   923,   250,
     251,   252,   253,   924,   254,   255,   256,   925,   926,   257,
     258,   259,   260,   261,   262,   927,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,  1045,   280,  1046,   282,   283,   284,   928,  2232,
     929,   286,   287,   288,   289,   930,     0,   291,  1047,   293,
     294,   295,   931,   296,   297,   932,   933,  2233,   299,   300,
     934,   935,   301,     0,   303,   304,   305,     0,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   936,   317,
     318,     0,   320,   321,     0,   323,   324,   325,   937,   326,
     327,   328,   329,   330,   938,   939,   331,   332,   333,   334,
    1048,   336,   337,   338,   339,   940,   340,   341,   342,   941,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   942,
     352,   353,   354,   355,   356,   357,  1049,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   943,   370,
     371,   372,   373,   374,   944,   375,  2234,   377,   378,   379,
     380,   381,   382,  1051,   384,   945,   946,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,  1052,   397,
       0,   947,   399,   400,   948,   401,   402,   403,   404,   405,
     406,   407,   949,  1053,  1054,   950,   951,   410,   411,     0,
     413,     0,   952,   415,   416,   417,   418,   419,   420,   421,
     953,   954,   422,   423,   424,   425,   426,   955,   956,   427,
     428,   429,   430,   431,     0,  1055,   957,   434,   435,   436,
     958,   437,   438,   439,   959,   960,   440,   961,   962,   441,
     442,   443,   444,   445,   446,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   458,   459,   460,   461,
       0,   487,     0,  1449,  1450,  1451,  1445,  2235,  2236,  1454,
    1455,  1456,  1457,     0,  1446,  1447,  1448,    92,    93,    94,
      95,    96,    97,    98,    99,     0,   100,   101,   102,     0,
       0,     0,     0,     0,     0,     0,   103,   104,     0,   105,
     106,   107,     0,   109,   110,   111,   112,   113,     0,   115,
     116,     0,   117,   118,   119,   120,   121,   122,     0,     0,
     123,   124,   125,   126,   127,     0,   128,   129,   130,   131,
     132,     0,     0,     0,     0,   134,   135,   136,   137,     0,
     139,   140,   141,     0,   142,   143,   144,   145,   146,   147,
       0,     0,   149,   150,   151,     0,     0,     0,     0,     0,
       0,     0,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,     0,   163,     0,   164,   165,   166,   167,   168,
     169,     0,   170,     0,   171,   172,   173,   174,     0,     0,
     175,   176,   177,   178,   179,     0,     0,   180,   181,   182,
       0,   183,   184,   185,     0,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,     0,   197,   198,
     199,   200,     0,   201,     0,   202,     0,     0,     0,   205,
     206,   207,     0,   209,     0,   210,     0,     0,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,     0,   220,
     221,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,   230,     0,   232,   233,   234,   235,   236,   237,   238,
       0,   239,     0,   240,     0,     0,   243,     0,   245,   246,
     247,   248,   249,     0,     0,   250,     0,   252,     0,     0,
     254,   255,   256,     0,     0,   257,   258,   259,   260,   261,
     262,     0,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     281,   282,   283,   284,     0,   285,     0,   286,   287,     0,
     289,     0,   290,   291,   292,   293,   294,   295,     0,   296,
     297,     0,     0,   298,   299,   300,     0,     0,   301,   302,
       0,   304,     0,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
     322,   323,   324,   325,     0,   326,   327,   328,   329,   330,
       0,     0,   331,   332,   333,   334,   335,   336,   337,   338,
     339,     0,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,   352,   353,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,     0,   370,   371,   372,   373,   374,
       0,   375,   376,   377,   378,   379,     0,   381,   382,   383,
     384,     0,     0,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
       0,   401,     0,   403,   404,   405,   406,   407,     0,   408,
     409,     0,     0,   410,   411,   412,   413,   414,     0,   415,
     416,   417,   418,   419,   420,   421,     0,     0,   422,   423,
     424,   425,   426,     0,     0,   427,   428,   429,   430,   431,
     432,   433,     0,   434,     0,   436,     0,   437,   438,   439,
       0,     0,   440,     0,     0,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,     0,     0,     0,  1449,
    1450,  1451,     0,  1452,  1453,  1454,  1455,  1456,  1457,  1131,
       0,     0,  1132,     0,     0,     0,     0,  1133,  1134,  1135,
       0,     0,     0,     0,     0,     0,     0,  1131,     0,     0,
    1132,     0,     0,     0,  1136,  1133,  1134,  1135,     0,     0,
       0,     0,  1138,     0,     0,  1131,     0,     0,  1132,  1139,
       0,     0,  1136,  1133,  1134,  1135,     0,     0,     0,     0,
    1138,     0,     0,     0,     0,     0,     0,  1139,     0,     0,
    1136,     0,     0,  1131,  1140,     0,  1132,     0,  1138,     0,
       0,  1133,  1134,  1135,     0,  1139,     0,     0,     0,     0,
       0,  1131,  1140,     0,  1132,     0,     0,     0,  1136,  1133,
    1134,  1135,     0,     0,     0,     0,  1138,     0,     0,     0,
    1140,     0,     0,  1139,     0,     0,  1136,     0,     0,     0,
       0,     0,     0,     0,  1138,     0,     0,     0,     0,     0,
       0,  1139,     0,     0,     0,     0,     0,     0,  1140,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1140,     0,     0,     0,
       0,  1131,     0,     0,  1132,     0,     0,     0,     0,  1133,
    1134,  1135,     0,     0,     0,  1141,     0,     0,     0,  1131,
       0,     0,  1132,     0,     0,     0,  1136,  1133,  1134,  1135,
       0,  1142,     0,  1141,  1138,     0,  1143,     0,     0,     0,
       0,  1139,     0,     0,  1136,     0,     0,     0,     0,  1142,
       0,  1141,  1138,     0,  1143,     0,     0,  1144,  1145,  1139,
       0,     0,     0,     0,     0,     0,  1140,  1142,     0,     0,
       0,  1146,  1143,     0,     0,  1144,  1145,     0,     0,  1141,
       0,     0,     0,     0,  1140,     0,     0,     0,     0,  1146,
       0,     0,     0,  1144,  1145,  1142,     0,  1141,     0,     0,
    1143,     0,     0,     0,     0,     0,     0,  1146,     0,  1147,
       0,     0,  1148,  1142,     0,     0,     0,     0,  1143,     0,
       0,  1144,  1145,     0,     0,     0,  1149,  1147,     0,  1150,
    1148,     0,     0,     0,     0,  1146,     0,     0,     0,  1144,
    1145,     0,     0,     0,  1149,  1147,     0,  1150,  1148,     0,
       0,     0,     0,  1146,     0,     0,     0,     0,     0,     0,
       0,     0,  1149,     0,     0,  1150,     0,  1141,     0,     0,
       0,     0,     0,  1147,     0,     0,  1148,     0,     0,     0,
       0,     0,     0,  1142,     0,  1141,     0,     0,  1143,     0,
    1149,  1147,     0,  1150,  1148,     0,     0,     0,     0,     0,
       0,  1142,     0,     0,     0,     0,  1143,     0,  1149,  1144,
    1145,  1150,     0,     0,     0,     0,     0,     0,     0,  1151,
       0,     0,     0,  1146,     0,     0,     0,  1144,  1145,     0,
       0,     0,     0,     0,     0,     0,     0,  1151,     0,     0,
       0,  1146,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1151,     0,     0,     0,     0,
       0,  1147,     0,     0,  1148,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1149,  1147,
       0,  1150,  1148,  1151,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1149,     0,     0,  1150,
       0,  1151,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1152,
       0,     0,  1153,  1154,  1155,     0,  1156,  1157,  1158,  1159,
    1160,  1161,     0,     0,     0,     0,  2092,  1152,     0,     0,
    1153,  1154,  1155,     0,  1156,  1157,  1158,  1159,  1160,  1161,
       0,     0,     0,     0,  2196,  1152,     0,     0,  1153,  1154,
    1155,     0,  1156,  1157,  1158,  1159,  1160,  1161,     0,     0,
       0,  1151,  2292,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1152,     0,     0,  1153,  1154,  1155,  1151,
    1156,  1157,  1158,  1159,  1160,  1161,     0,     0,     0,     0,
    2310,  1152,     0,     0,  1153,  1154,  1155,     0,  1156,  1157,
    1158,  1159,  1160,  1161,     0,     0,     0,     0,  2469,  1131,
       0,     0,  1132,     0,     0,     0,     0,  1133,  1134,  1135,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1136,     0,     0,     0,     0,     0,
       0,     0,  1138,     0,     0,     0,     0,     0,     0,  1139,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1152,     0,     0,  1153,  1154,  1155,     0,  1156,  1157,
    1158,  1159,  1160,  1161,  1140,     0,     0,     0,  2689,  1152,
       0,     0,  1153,  1154,  1155,     0,  1156,  1157,  1158,  1159,
    1160,  1161,     0,     0,     0,     0,  2701,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1141,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1142,     0,     0,     0,     0,  1143,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1144,  1145,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1146,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1147,
       0,     0,  1148,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1149,     0,     0,  1150,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1151,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1152,
     873,     0,  1153,  1154,  1155,     0,  1156,  1157,  1158,  1159,
    1160,  1161,     0,     0,  1308,     0,    92,    93,    94,    95,
      96,    97,    98,    99,   874,   100,   101,   102,   875,   876,
     877,   878,   879,   880,   881,   103,   104,   882,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     883,   117,   118,   119,   120,   121,   122,   884,   885,   123,
     124,   125,   126,   127,   886,   128,   129,   130,   131,   132,
     887,   133,   888,   889,   134,   135,   136,   137,   138,   139,
     140,   141,   890,   142,   143,   144,   145,   146,   147,   891,
     148,   149,   150,   151,   892,   893,   894,   152,   895,   896,
     897,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   898,   163,   899,   164,   165,   166,   167,   168,   169,
     900,   170,   901,   171,   172,   173,   174,   902,   903,   175,
     176,   177,   178,   179,   904,   905,   180,   181,   182,   906,
     183,   184,   185,   907,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   908,   196,   909,   197,   198,   199,
     200,   910,   201,   911,   202,   203,   912,   204,   205,   206,
     207,   208,   209,   913,   210,   914,   915,   916,   211,   212,
     917,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   918,   224,   225,   226,   227,   228,   229,   919,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   920,
     239,   921,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   922,   923,   250,   251,   252,   253,   924,   254,
     255,   256,   925,   926,   257,   258,   259,   260,   261,   262,
     927,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   928,   285,   929,   286,   287,   288,   289,
     930,   290,   291,   292,   293,   294,   295,   931,   296,   297,
     932,   933,   298,   299,   300,   934,   935,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   936,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   937,   326,   327,   328,   329,   330,   938,
     939,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     940,   340,   341,   342,   941,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   942,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   943,   370,   371,   372,   373,   374,   944,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     945,   946,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   947,   399,   400,   948,
     401,   402,   403,   404,   405,   406,   407,   949,   408,   409,
     950,   951,   410,   411,   412,   413,   414,   952,   415,   416,
     417,   418,   419,   420,   421,   953,   954,   422,   423,   424,
     425,   426,   955,   956,   427,   428,   429,   430,   431,   432,
     433,   957,   434,   435,   436,   958,   437,   438,   439,   959,
     960,   440,   961,   962,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   487,     0,     0,     0,     0,
       0,     0,     0,     0,   963,     0,     0,     0,     0,     0,
       0,    92,    93,    94,    95,    96,    97,    98,    99,     0,
     100,   101,   102,     0,     0,     0,     0,     0,     0,     0,
     103,   104,     0,   105,   106,   107,     0,   109,   110,   111,
     112,   113,     0,   115,   116,     0,   117,   118,   119,   120,
     121,   122,     0,     0,   123,   124,   125,   126,   127,     0,
     128,   129,   130,   131,   132,     0,     0,     0,     0,   134,
     135,   136,   137,     0,   139,   140,   141,     0,   142,   143,
     144,   145,   146,   147,     0,     0,   149,   150,   151,     0,
       0,     0,     0,     0,     0,     0,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,     0,   163,     0,   164,
     165,   166,   167,   168,   169,     0,   170,     0,   171,   172,
     173,   174,     0,     0,   175,   176,   177,   178,   179,     0,
       0,   180,   181,   182,     0,   183,   184,   185,     0,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,     0,   197,   198,   199,   200,     0,   201,     0,   202,
       0,     0,     0,   205,   206,   207,     0,   209,     0,   210,
       0,     0,     0,   211,   212,     0,   213,   214,   215,   216,
     217,   218,     0,   220,   221,   222,   223,     0,   224,   225,
     226,   227,   228,   229,     0,   230,     0,   232,   233,   234,
     235,   236,   237,   238,     0,   239,     0,   240,     0,     0,
     243,     0,   245,   246,   247,   248,   249,     0,     0,   250,
       0,   252,     0,     0,   254,   255,   256,     0,     0,   257,
     258,   259,   260,   261,   262,     0,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   281,   282,   283,   284,     0,   285,
       0,   286,   287,     0,   289,     0,   290,   291,   292,   293,
     294,   295,     0,   296,   297,     0,     0,   298,   299,   300,
       0,     0,   301,   302,     0,   304,     0,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   317,
     318,   319,   320,   321,   322,   323,   324,   325,     0,   326,
     327,   328,   329,   330,     0,     0,   331,   332,   333,   334,
     335,   336,   337,   338,   339,     0,   340,   341,   342,     0,
     343,   344,   345,   346,   347,   348,   349,   350,   351,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,     0,   370,
     371,   372,   373,   374,     0,   375,   376,   377,   378,   379,
       0,   381,   382,   383,   384,     0,     0,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,     0,   401,     0,   403,   404,   405,
     406,   407,     0,   408,   409,     0,     0,   410,   411,   412,
     413,   414,     0,   415,   416,   417,   418,   419,   420,   421,
       0,     0,   422,   423,   424,   425,   426,     0,     0,   427,
     428,   429,   430,   431,   432,   433,     0,   434,     0,   436,
       0,   437,   438,   439,     0,     0,   440,     0,     0,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     653,  1010,   532,     0,     0,     0,   677,     0,     0,  2033,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,   133,     0,     0,   134,   135,   136,   137,   138,   139,
     140,   141,     0,   142,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,     0,     0,     0,   152,     0,     0,
       0,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,  1187,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,     0,   171,   172,   173,   174,     0,     0,   175,
     176,   177,   178,   179,     0,     0,   180,   181,   182,     0,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,  1011,   196,     0,   197,   198,   199,
     200,     0,   201,     0,   202,   203,     0,   204,   205,   206,
     207,   208,   209,     0,   210,     0,     0,     0,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,   225,   226,   227,   228,   229,     0,
     230,   231,   232,   233,   234,   235,   236,   237,   238,     0,
     239,     0,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,     0,     0,   250,   251,   252,   253,     0,   254,
     255,   256,     0,     0,   257,   258,   259,   260,   261,   262,
       0,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,     0,   285,     0,   286,   287,   288,   289,
       0,   290,   291,   292,   293,   294,   295,     0,   296,   297,
    1012,     0,   298,   299,   300,     0,     0,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
     323,   324,   325,     0,   326,   327,   328,   329,   330,     0,
       0,   331,   332,   333,   334,   335,   336,   337,   338,   339,
       0,   340,   341,   342,     0,   343,   344,   345,   346,   347,
     348,   349,   350,   351,     0,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,     0,   370,   371,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
       0,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,     0,
     401,   402,   403,   404,   405,   406,   407,     0,   408,   409,
       0,     0,   410,   411,   412,   413,   414,  1013,   415,   416,
     417,   418,   419,   420,   421,     0,     0,   422,   423,   424,
     425,   426,     0,     0,   427,   428,   429,   430,   431,   432,
     433,     0,   434,   435,   436,     0,   437,   438,   439,     0,
       0,   440,     0,     0,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   653,  1010,   532,     0,     0,
       0,   677,  1014,  1015,     0,     0,     0,     0,     0,     0,
       0,    92,    93,    94,    95,    96,    97,    98,    99,     0,
     100,   101,   102,     0,     0,     0,     0,     0,     0,     0,
     103,   104,     0,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,     0,   117,   118,   119,   120,
     121,   122,     0,     0,   123,   124,   125,   126,   127,     0,
     128,   129,   130,   131,   132,     0,   133,     0,     0,   134,
     135,   136,   137,   138,   139,   140,   141,     0,   142,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,     0,
       0,     0,   152,     0,     0,     0,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,  1189,   163,     0,   164,
     165,   166,   167,   168,   169,     0,   170,     0,   171,   172,
     173,   174,     0,     0,   175,   176,   177,   178,   179,     0,
       0,   180,   181,   182,     0,   183,   184,   185,     0,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,  1011,
     196,     0,   197,   198,   199,   200,     0,   201,     0,   202,
     203,     0,   204,   205,   206,   207,   208,   209,     0,   210,
       0,     0,     0,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,   225,
     226,   227,   228,   229,     0,   230,   231,   232,   233,   234,
     235,   236,   237,   238,     0,   239,     0,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,     0,     0,   250,
     251,   252,   253,     0,   254,   255,   256,     0,     0,   257,
     258,   259,   260,   261,   262,     0,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,     0,   285,
       0,   286,   287,   288,   289,     0,   290,   291,   292,   293,
     294,   295,     0,   296,   297,  1012,     0,   298,   299,   300,
       0,     0,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   317,
     318,   319,   320,   321,   322,   323,   324,   325,     0,   326,
     327,   328,   329,   330,     0,     0,   331,   332,   333,   334,
     335,   336,   337,   338,   339,     0,   340,   341,   342,     0,
     343,   344,   345,   346,   347,   348,   349,   350,   351,     0,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,     0,   370,
     371,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,     0,     0,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,   408,   409,     0,     0,   410,   411,   412,
     413,   414,  1013,   415,   416,   417,   418,   419,   420,   421,
       0,     0,   422,   423,   424,   425,   426,     0,     0,   427,
     428,   429,   430,   431,   432,   433,     0,   434,   435,   436,
       0,   437,   438,   439,     0,     0,   440,     0,     0,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     653,  1010,   532,     0,     0,     0,   677,  1014,  1015,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,   133,     0,     0,   134,   135,   136,   137,   138,   139,
     140,   141,     0,   142,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,     0,     0,     0,   152,     0,     0,
       0,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,     0,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,     0,   171,   172,   173,   174,     0,     0,   175,
     176,   177,   178,   179,     0,     0,   180,   181,   182,     0,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,  1011,   196,     0,   197,   198,   199,
     200,     0,   201,     0,   202,   203,     0,   204,   205,   206,
     207,   208,   209,     0,   210,     0,     0,     0,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,   225,   226,   227,   228,   229,     0,
     230,   231,   232,   233,   234,   235,   236,   237,   238,     0,
     239,     0,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,     0,     0,   250,   251,   252,   253,     0,   254,
     255,   256,     0,     0,   257,   258,   259,   260,   261,   262,
       0,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,     0,   285,     0,   286,   287,   288,   289,
       0,   290,   291,   292,   293,   294,   295,     0,   296,   297,
    1012,     0,   298,   299,   300,     0,     0,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
     323,   324,   325,     0,   326,   327,   328,   329,   330,     0,
       0,   331,   332,   333,   334,   335,   336,   337,   338,   339,
       0,   340,   341,   342,     0,   343,   344,   345,   346,   347,
     348,   349,   350,   351,     0,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,     0,   370,   371,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
       0,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,     0,
     401,   402,   403,   404,   405,   406,   407,     0,   408,   409,
       0,     0,   410,   411,   412,   413,   414,  1013,   415,   416,
     417,   418,   419,   420,   421,     0,     0,   422,   423,   424,
     425,   426,     0,     0,   427,   428,   429,   430,   431,   432,
     433,     0,   434,   435,   436,     0,   437,   438,   439,     0,
       0,   440,     0,     0,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,     0,  1131,     0,     0,  1132,
       0,     0,  1014,  1015,  1133,  1134,  1135,     0,     0,     0,
       0,     0,     0,     0,  1131,     0,     0,  1132,     0,     0,
       0,  1136,  1133,  1134,  1135,  1579,     0,     0,     0,  1138,
       0,     0,  1131,     0,     0,  1132,  1139,     0,     0,  1136,
    1133,  1134,  1135,     0,     0,     0,     0,  1138,     0,     0,
       0,     0,     0,     0,  1139,     0,     0,  1136,     0,     0,
    1131,  1140,     0,  1132,     0,  1138,     0,     0,  1133,  1134,
    1135,     0,  1139,     0,     0,     0,     0,     0,     0,  1140,
       0,     0,     0,     0,     0,  1136,     0,     0,  1768,     0,
       0,     0,     0,  1138,     0,     0,     0,  1140,     0,     0,
    1139,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1580,     0,     0,     0,     0,     0,     0,     0,     0,
    1131,     0,     0,  1132,     0,  1140,     0,     0,  1133,  1134,
    1135,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1136,     0,     0,     0,     0,
       0,     0,     0,  1138,     0,     0,     0,     0,     0,     0,
    1139,     0,  1141,     0,     0,     0,     0,     0,     0,     0,
    1808,     0,     0,     0,     0,  1809,     0,     0,  1142,     0,
    1141,     0,     0,  1143,     0,  1140,     0,  2765,     0,     0,
       0,     0,     0,     0,     0,     0,  1142,     0,  1141,     0,
       0,  1143,     0,     0,  1144,  1145,     0,     0,     0,     0,
       0,     0,     0,     0,  1142,     0,     0,     0,  1146,  1143,
       0,     0,  1144,  1145,     0,     0,  1141,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1146,     0,     0,     0,
    1144,  1145,  1142,     0,     0,     0,     0,  1143,     0,     0,
       0,     0,     0,     0,  1146,     0,  1147,     0,     0,  1148,
       0,     0,     0,     0,     0,     0,     0,     0,  1144,  1145,
       0,     0,     0,  1149,  1147,     0,  1150,  1148,     0,     0,
       0,     0,  1146,     0,     0,     0,  1141,     0,     0,     0,
       0,  1149,  1147,     0,  1150,  1148,     0,     0,     0,     0,
       0,     0,  1142,     0,     0,     0,     0,  1143,     0,  1149,
       0,     0,  1150,     0,     0,     0,     0,     0,     0,     0,
    1147,     0,     0,  1148,     0,     0,     0,     0,  1144,  1145,
       0,     0,     0,     0,     0,  2766,     0,  1149,     0,     0,
    1150,     0,  1146,     0,     0,     0,     0,     0,     0,  1131,
       0,     0,  1132,     0,     0,     0,     0,  1133,  1134,  1135,
       0,     0,     0,     0,     0,     0,  1151,     0,     0,     0,
       0,     0,     0,     0,  1136,     0,     0,  1817,     0,     0,
    1147,     0,  1138,  1148,  1151,     0,     0,     0,     0,  1139,
       0,     0,     0,     0,     0,  1131,     0,  1149,  1132,     0,
    1150,     0,  1151,  1133,  1134,  1135,     0,     0,     0,     0,
       0,     0,     0,     0,  1140,     0,     0,     0,  1782,     0,
    1136,     0,     0,     0,  1581,     0,     0,     0,  1138,     0,
    1151,     0,     0,     0,     0,  1139,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1140,     0,     0,     0,     0,     0,  1152,     0,     0,  1153,
    1154,  1155,     0,  1156,  1157,  1158,  1159,  1160,  1161,     0,
       0,     0,     0,     0,  1152,     0,     0,  1153,  1154,  1155,
    1151,  1156,  1157,  1158,  1159,  1160,  1161,     0,     0,     0,
       0,     0,  1152,     0,     0,  1153,  1154,  1155,     0,  1156,
    1157,  1158,  1159,  1160,  1161,  1141,     0,     0,     0,  1131,
       0,     0,  1132,     0,     0,     0,     0,  1133,  1134,  1135,
    1152,  1142,     0,  1153,  1154,  1155,  1143,  1156,  1157,  1158,
    1159,  1160,  1161,     0,  1136,     0,     0,     0,     0,     0,
       0,     0,  1138,     0,     0,     0,  1822,  1144,  1145,  1139,
       0,  1141,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1146,     0,     0,     0,     0,     0,  1142,     0,     0,
       0,     0,  1143,     0,  1140,     0,     0,     0,     0,     0,
    1152,     0,     0,  1153,  1154,  1155,     0,  1156,  1157,  1158,
    1159,  1160,  1161,  1144,  1145,     0,     0,     0,     0,  1147,
       0,     0,  1148,     0,     0,     0,     0,  1146,     0,     0,
       0,     0,     0,     0,     0,     0,  1149,     0,     0,  1150,
       0,     0,     0,     0,  1131,     0,     0,  1132,     0,     0,
       0,     0,  1133,  1134,  1135,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1147,     0,     0,  1148,  1136,
       0,     0,     0,     0,     0,     0,     0,  1138,     0,     0,
    1131,     0,  1149,  1132,  1139,  1150,     0,     0,  1133,  1134,
    1135,     0,     0,     0,     0,  1141,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1136,     0,     0,     0,  1140,
       0,  1142,     0,  1138,     0,     0,  1143,     0,     0,     0,
    1139,     0,     0,     0,     0,     0,     0,     0,     0,  1151,
       0,     0,     0,     0,     0,     0,     0,  1144,  1145,     0,
       0,     0,     0,     0,     0,  1140,     0,     0,     0,     0,
       0,  1146,     0,     0,     0,     0,     0,  1131,     0,     0,
    1132,     0,     0,     0,     0,  1133,  1134,  1135,     0,     0,
       0,     0,     0,     0,     0,  1151,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1147,
    1138,     0,  1148,     0,     0,     0,     0,  1139,     0,     0,
       0,     0,     0,     0,     0,     0,  1149,     0,     0,  1150,
    1141,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1140,     0,     0,     0,  1142,     0,     0,  1152,
       0,  1143,  1153,  1154,  1155,     0,  1156,  1157,  1158,  1159,
    1160,  1161,     0,     0,     0,     0,  1141,     0,     0,     0,
       0,     0,  1144,  1145,     0,     0,     0,     0,     0,     0,
       0,     0,  1142,     0,     0,     0,  1146,  1143,     0,     0,
       0,     0,     0,     0,     0,  1152,     0,     0,  1153,  1154,
    1155,     0,  1156,  1157,  1158,  1159,  1160,  1161,  1144,  1145,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1151,
       0,     0,  1146,     0,  1147,     0,     0,  1148,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1149,     0,  1141,  1150,     0,     0,     0,     0,     0,
       0,  2053,     0,     0,     0,     0,     0,     0,     0,  1142,
    1147,     0,     0,  1148,  1143,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1149,     0,     0,
       0,     0,     0,     0,     0,  1144,  1145,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1146,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1152,
       0,     0,  1153,  1154,  1155,     0,  1156,  1157,  1158,  1159,
    1160,  1161,     0,     0,  1151,     0,     0,  1147,     0,     0,
    1148,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1149,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1151,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1152,     0,     0,  1153,  1154,  1155,
       0,  1156,  1157,  1158,  1159,  1160,  1161,  1151,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1152,     0,     0,  1153,  1154,  1155,     0,  1156,  1157,  1158,
    1159,  1160,  1161,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   873,     0,  1499,  1152,     0,     0,
    1153,  1154,  1155,     0,  1156,  1157,  1158,  1159,  1160,  1161,
      92,    93,    94,    95,    96,    97,    98,    99,   874,   100,
     101,   102,   875,   876,   877,   878,   879,   880,   881,   103,
     104,   882,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   883,   117,   118,   119,   120,   121,
     122,   884,   885,   123,   124,   125,   126,   127,   886,   128,
     129,   130,   131,   132,   887,   133,   888,   889,   134,   135,
     136,   137,   138,   139,   140,   141,   890,   142,   143,   144,
     145,   146,   147,   891,   148,   149,   150,   151,   892,   893,
     894,   152,   895,   896,   897,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   898,   163,   899,   164,   165,
     166,   167,   168,   169,   900,   170,   901,   171,   172,   173,
     174,   902,   903,   175,   176,   177,   178,   179,   904,   905,
     180,   181,   182,   906,   183,   184,   185,   907,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   908,   196,
     909,   197,   198,   199,   200,   910,   201,   911,   202,   203,
     912,   204,   205,   206,   207,   208,   209,   913,   210,   914,
     915,   916,   211,   212,   917,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   918,   224,   225,   226,
     227,   228,   229,   919,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   920,   239,   921,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   922,   923,   250,   251,
     252,   253,   924,   254,   255,   256,   925,   926,   257,   258,
     259,   260,   261,   262,   927,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   928,   285,   929,
     286,   287,   288,   289,   930,   290,   291,   292,   293,   294,
     295,   931,   296,   297,   932,   933,   298,   299,   300,   934,
     935,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   936,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   937,   326,   327,
     328,   329,   330,   938,   939,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   940,   340,   341,   342,   941,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   942,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   943,   370,   371,
     372,   373,   374,   944,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   945,   946,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     947,   399,   400,   948,   401,   402,   403,   404,   405,   406,
     407,   949,   408,   409,   950,   951,   410,   411,   412,   413,
     414,   952,   415,   416,   417,   418,   419,   420,   421,   953,
     954,   422,   423,   424,   425,   426,   955,   956,   427,   428,
     429,   430,   431,   432,   433,   957,   434,   435,   436,   958,
     437,   438,   439,   959,   960,   440,   961,   962,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   873,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
      97,    98,    99,   874,   100,   101,   102,   875,   876,   877,
     878,   879,   880,   881,   103,   104,   882,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   883,
     117,   118,   119,   120,   121,   122,   884,   885,   123,   124,
     125,   126,   127,   886,   128,   129,   130,   131,   132,   887,
     133,   888,   889,   134,   135,   136,   137,   138,   139,   140,
     141,   890,   142,   143,   144,   145,   146,   147,   891,   148,
     149,   150,   151,   892,   893,   894,   152,   895,   896,   897,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     898,   163,   899,   164,   165,   166,   167,   168,   169,   900,
     170,   901,   171,   172,   173,   174,   902,   903,   175,   176,
     177,   178,   179,   904,   905,   180,   181,   182,   906,   183,
     184,   185,   907,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   908,   196,   909,   197,   198,   199,   200,
     910,   201,   911,   202,   203,   912,   204,   205,   206,   207,
     208,   209,   913,   210,   914,   915,   916,   211,   212,   917,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   918,   224,   225,   226,   227,   228,   229,   919,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   920,   239,
     921,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   922,   923,   250,   251,   252,   253,   924,   254,   255,
     256,   925,   926,   257,   258,   259,   260,   261,   262,   927,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   928,   285,   929,   286,   287,   288,   289,   930,
     290,   291,   292,   293,   294,   295,   931,   296,   297,   932,
     933,   298,   299,   300,   934,   935,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   936,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   937,   326,   327,   328,   329,   330,   938,   939,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   940,
     340,   341,   342,   941,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   942,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   943,   370,   371,   372,   373,   374,   944,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   945,
     946,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   947,   399,   400,   948,   401,
     402,   403,   404,   405,   406,   407,   949,   408,   409,   950,
     951,   410,   411,   412,   413,   414,   952,   415,   416,   417,
     418,   419,   420,   421,   953,   954,   422,   423,   424,   425,
     426,   955,   956,   427,   428,   429,   430,   431,   432,   433,
     957,   434,   435,   436,   958,   437,   438,   439,   959,   960,
     440,   961,   962,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   873,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      92,    93,    94,    95,  1642,    97,    98,    99,   874,   100,
     101,   102,   875,   876,   877,   878,   879,   880,   881,   103,
     104,   882,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   883,   117,   118,   119,   120,   121,
     122,   884,   885,   123,   124,   125,   126,   127,   886,   128,
     129,   130,   131,   132,   887,   133,   888,   889,   134,   135,
     136,   137,   138,   139,   140,   141,   890,   142,   143,   144,
     145,   146,   147,   891,   148,   149,   150,   151,   892,   893,
     894,   152,   895,   896,   897,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   898,   163,   899,   164,   165,
     166,   167,   168,   169,   900,   170,   901,   171,   172,   173,
     174,   902,   903,   175,   176,   177,  1643,   179,   904,   905,
     180,   181,   182,   906,   183,   184,   185,   907,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   908,   196,
     909,   197,   198,   199,   200,   910,   201,   911,   202,   203,
     912,   204,   205,   206,   207,   208,   209,   913,   210,   914,
     915,   916,   211,   212,   917,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   918,   224,   225,   226,
     227,   228,   229,   919,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   920,   239,   921,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   922,   923,   250,   251,
     252,   253,   924,   254,   255,   256,   925,   926,   257,   258,
     259,   260,   261,   262,   927,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   928,   285,   929,
     286,   287,   288,   289,   930,   290,   291,   292,   293,   294,
     295,   931,   296,   297,   932,   933,   298,   299,   300,   934,
     935,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   936,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   937,   326,   327,
     328,   329,   330,   938,   939,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   940,   340,   341,   342,   941,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   942,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   943,   370,   371,
     372,   373,   374,   944,  1644,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   945,   946,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     947,   399,   400,   948,   401,   402,   403,   404,   405,   406,
     407,   949,   408,   409,   950,   951,   410,   411,   412,   413,
     414,   952,   415,   416,   417,   418,   419,   420,   421,   953,
     954,   422,   423,   424,   425,   426,   955,   956,   427,   428,
     429,   430,   431,   432,   433,   957,   434,   435,   436,   958,
     437,   438,   439,   959,   960,   440,   961,   962,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,    91,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
      97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
       0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,     0,
     117,   118,   119,   120,   121,   122,     0,   683,   123,   124,
     125,   126,   127,     0,   128,   129,   130,   131,   686,     0,
     687,     0,     0,   134,   135,   136,   137,   138,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,   148,
     149,   150,   151,   688,   689,   690,   691,   692,   693,   694,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   700,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
     231,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,     0,     0,   250,   251,   252,   253,     0,   254,   255,
     256,   706,   707,   257,   258,   259,   260,   261,   262,     0,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,     0,   285,     0,   286,   287,   288,   289,     0,
     712,   291,   292,   293,   294,   295,     0,   296,   297,     0,
       0,   298,   299,   300,     0,     0,   301,   302,   303,   304,
     305,   715,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   716,   320,   321,   322,   323,
     324,   325,     0,   326,   327,   328,   329,   330,     0,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,     0,
     340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
     349,   350,   351,     0,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   719,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,     0,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   721,     0,   399,   400,     0,   401,
     402,   403,   404,   405,   406,   407,     0,   408,   409,     0,
       0,   410,   411,   724,   413,   725,     0,   415,   416,   417,
     418,   419,   420,   421,     0,     0,   422,   423,   424,   425,
     426,   727,     0,   427,   428,   429,   430,   431,   432,   433,
       0,   434,   435,   436,     0,   437,   438,   439,     0,     0,
     440,     0,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   653,     0,   532,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,     0,   117,   118,   119,   120,   121,
     122,     0,     0,   123,   124,   125,   126,   127,     0,   128,
     129,   130,   131,   132,     0,   133,     0,     0,   134,   135,
     136,   137,   138,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,   148,   149,   150,   151,     0,     0,
       0,   152,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,  1011,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,     0,     0,   250,   251,
     252,   253,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,     0,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,     0,   285,     0,
     286,   287,   288,   289,     0,   290,   291,   292,   293,   294,
     295,     0,   296,   297,  1012,     0,   298,   299,   300,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   326,   327,
     328,   329,   330,     0,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,     0,   340,   341,   342,     0,   343,
     344,   345,   346,   347,   348,   349,   350,   351,     0,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,     0,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   401,   402,   403,   404,   405,   406,
     407,     0,   408,   409,     0,     0,   410,   411,   412,   413,
     414,  1013,   415,   416,   417,   418,   419,   420,   421,     0,
       0,   422,   423,   424,   425,   426,     0,     0,   427,   428,
     429,   430,   431,   432,   433,     0,   434,   435,   436,     0,
     437,   438,   439,     0,     0,   440,     0,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   653,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
      97,    98,    99,     0,   100,   101,   102,     3,     4,     0,
       0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,     0,
     117,   118,   119,   120,   121,   122,     0,     0,   123,   124,
     125,   126,   127,     0,   128,   129,   130,   131,   132,     0,
     133,     0,     0,   134,   135,   136,   137,   138,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,   148,
     149,   150,   151,     0,     0,     0,   152,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
     231,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,     0,     0,   250,   251,   252,   253,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,     0,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,     0,   285,     0,   286,   287,   288,   289,     0,
     290,   291,   292,   293,   294,   295,     0,   296,   297,     0,
       0,   298,   299,   300,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
     324,   325,     0,   326,   327,   328,   329,   330,     0,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,     0,
     340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
     349,   350,   351,     0,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,     0,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   401,
     402,   403,   404,   405,   406,   407,     0,   408,   409,     0,
       0,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,   420,   421,     0,     0,   422,   423,   424,   425,
     426,     0,     0,   427,   428,   429,   430,   431,   432,   433,
       0,   434,   435,   436,     0,   437,   438,   439,     0,     0,
     440,     0,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,    91,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,     0,   117,   118,   119,   120,   121,
     122,     0,     0,   123,   124,   125,   126,   127,     0,   128,
     129,   130,   131,   132,     0,   133,     0,     0,   134,   135,
     136,   137,   138,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,   148,   149,   150,   151,     0,     0,
       0,   152,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,     0,     0,   250,   251,
     252,   253,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,     0,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,     0,   285,     0,
     286,   287,   288,   289,     0,   290,   291,   292,   293,   294,
     295,     0,   296,   297,     0,     0,   298,   299,   300,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   326,   327,
     328,   329,   330,     0,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,     0,   340,   341,   342,     0,   343,
     344,   345,   346,   347,   348,   349,   350,   351,     0,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,     0,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   401,   402,   403,   404,   405,   406,
     407,     0,   408,   409,     0,     0,   410,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,   420,   421,     0,
       0,   422,   423,   424,   425,   426,     0,     0,   427,   428,
     429,   430,   431,   432,   433,     0,   434,   435,   436,     0,
     437,   438,   439,     0,     0,   440,     0,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   487,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
      97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
       0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
       0,   109,   110,   111,   112,   113,     0,   115,   116,     0,
     117,   118,   119,   120,   121,   122,     0,     0,   123,   124,
     125,   126,   127,  1246,   128,   129,   130,   131,   132,     0,
       0,  1247,     0,   134,   135,   136,   137,     0,   139,   140,
     141,  1248,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,  1249,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,  1250,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,     0,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   281,   282,
     283,   284,     0,   285,     0,   286,   287,     0,   289,     0,
     290,   291,   292,   293,   294,   295,     0,   296,   297,     0,
       0,   298,   299,   300,     0,     0,   301,   302,     0,   304,
       0,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
     324,   325,  1251,   326,   327,   328,   329,   330,     0,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,     0,
     340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
     349,   350,   351,     0,   352,   353,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,     0,   381,   382,   383,   384,     0,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   401,
       0,   403,   404,   405,   406,   407,     0,   408,   409,     0,
       0,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,   420,   421,     0,  1252,   422,   423,   424,   425,
     426,     0,     0,   427,   428,   429,   430,   431,   432,   433,
       0,   434,     0,   436,     0,   437,   438,   439,     0,     0,
     440,     0,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   487,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,     0,   109,   110,   111,   112,
     113,     0,   115,   116,     0,   117,   118,   119,   120,   121,
     122,     0,     0,   123,   124,   125,   126,   127,  1246,   128,
     129,   130,   131,   132,     0,     0,     0,     0,   134,   135,
     136,   137,     0,   139,   140,   141,  1248,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,  1249,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,  1708,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,     0,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   281,   282,   283,   284,     0,   285,     0,
     286,   287,     0,   289,     0,   290,   291,   292,   293,   294,
     295,     0,   296,   297,     0,     0,   298,   299,   300,     0,
       0,   301,   302,     0,   304,     0,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,   321,   322,   323,   324,   325,  1251,   326,   327,
     328,   329,   330,     0,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,     0,   340,   341,   342,     0,   343,
     344,   345,   346,   347,   348,   349,   350,   351,     0,   352,
     353,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,     0,
     381,   382,   383,   384,     0,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   401,     0,   403,   404,   405,   406,
     407,     0,   408,   409,     0,     0,   410,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,   420,   421,     0,
    1252,   422,   423,   424,   425,   426,     0,     0,   427,   428,
     429,   430,   431,   432,   433,     0,   434,     0,   436,     0,
     437,   438,   439,     0,     0,   440,     0,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   487,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
      97,    98,    99,     0,   100,   101,   102,     3,     4,     0,
       0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
       0,   109,   110,   111,   112,   113,     0,   115,   116,     0,
     117,   118,   119,   120,   121,   122,     0,     0,   123,   124,
     125,   126,   127,     0,   128,   129,   130,   131,   132,     0,
       0,     0,     0,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,     0,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   281,   282,
     283,   284,     0,   285,     0,   286,   287,     0,   289,     0,
     290,   291,   292,   293,   294,   295,     0,   296,   297,     0,
       0,   298,   299,   300,     0,     0,   301,   302,     0,   304,
       0,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
     324,   325,     0,   326,   327,   328,   329,   330,     0,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,     0,
     340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
     349,   350,   351,     0,   352,   353,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,     0,   381,   382,   383,   384,     0,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   401,
       0,   403,   404,   405,   406,   407,     0,   408,   409,     0,
       0,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,   420,   421,     0,     0,   422,   423,   424,   425,
     426,     0,     0,   427,   428,   429,   430,   431,   432,   433,
       0,   434,     0,   436,     0,   437,   438,   439,     0,     0,
     440,     0,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   487,  2477,     0,     0,     0,     0,
    2478,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,     0,   109,   110,   111,   112,
     113,     0,   115,   116,     0,   117,   118,   119,   120,   121,
     122,     0,     0,   123,   124,   125,   126,   127,     0,   128,
     129,   130,   131,   132,     0,     0,     0,     0,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,     0,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   281,   282,   283,   284,     0,   285,     0,
     286,   287,     0,   289,     0,   290,   291,   292,   293,   294,
     295,     0,   296,   297,     0,     0,   298,   299,   300,     0,
       0,   301,   302,     0,   304,     0,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   326,   327,
     328,   329,   330,     0,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,     0,   340,   341,   342,     0,   343,
     344,   345,   346,   347,   348,   349,   350,   351,     0,   352,
     353,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,     0,
     381,   382,   383,   384,     0,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   401,     0,   403,   404,   405,   406,
     407,     0,   408,   409,     0,     0,   410,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,   420,   421,     0,
       0,   422,   423,   424,   425,   426,     0,     0,   427,   428,
     429,   430,   431,   432,   433,     0,   434,     0,   436,     0,
     437,   438,   439,     0,     0,   440,     0,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   487,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
      97,    98,    99,   488,   100,   101,   102,     0,     0,     0,
       0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
       0,   109,   110,   111,   112,   113,     0,   115,   116,     0,
     117,   118,   119,   120,   121,   122,     0,     0,   123,   124,
     125,   126,   127,     0,   128,   129,   130,   131,   132,     0,
       0,     0,     0,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,     0,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   281,   282,
     283,   284,     0,   285,     0,   286,   287,     0,   289,     0,
     290,   291,   292,   293,   294,   295,     0,   296,   297,     0,
       0,   298,   299,   300,     0,     0,   301,   302,     0,   304,
       0,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,   321,   322,   489,
     324,   325,     0,   326,   327,   328,   329,   330,     0,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,     0,
     340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
     349,   350,   351,     0,   352,   353,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,     0,   381,   382,   383,   384,     0,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   401,
       0,   403,   404,   405,   406,   407,     0,   408,   409,     0,
       0,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,   420,   421,     0,     0,   422,   423,   424,   425,
     426,     0,     0,   427,   428,   429,   430,   431,   432,   433,
       0,   434,     0,   436,     0,   437,   438,   439,     0,     0,
     440,     0,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   487,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      92,    93,    94,    95,    96,    97,    98,    99,   537,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,     0,   109,   110,   111,   112,
     113,     0,   115,   116,     0,   117,   118,   119,   120,   121,
     122,     0,     0,   123,   124,   125,   126,   127,     0,   128,
     129,   130,   131,   132,     0,     0,     0,     0,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,     0,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   281,   282,   283,   284,     0,   285,     0,
     286,   287,     0,   289,     0,   290,   291,   292,   293,   294,
     295,     0,   296,   297,     0,     0,   298,   299,   300,     0,
       0,   301,   302,     0,   304,     0,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   326,   327,
     328,   329,   330,     0,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,     0,   340,   341,   342,     0,   343,
     344,   345,   346,   347,   348,   349,   350,   351,     0,   352,
     353,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,     0,
     381,   382,   383,   384,     0,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   401,     0,   403,   404,   405,   406,
     407,     0,   538,   409,     0,     0,   539,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,   420,   421,     0,
       0,   422,   423,   424,   425,   426,     0,     0,   427,   428,
     429,   430,   431,   432,   433,     0,   434,     0,   436,     0,
     437,   438,   439,     0,     0,   440,     0,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   487,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
      97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
       0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
       0,   109,   110,   111,   112,   113,     0,   115,   116,     0,
     117,   118,   119,   120,   121,   122,     0,     0,   123,   124,
     125,   126,   127,     0,   128,   129,   130,   131,   132,     0,
       0,     0,     0,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,     0,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   281,   282,
     283,   284,     0,   285,     0,   286,   287,     0,   289,     0,
     290,   291,   292,   293,   294,   295,     0,   296,   297,     0,
     557,   298,   299,   300,     0,     0,   301,   302,     0,   304,
       0,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
     324,   325,     0,   326,   327,   328,   329,   330,     0,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,     0,
     340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
     349,   350,   351,     0,   352,   353,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,     0,   381,   382,   383,   384,     0,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   401,
       0,   403,   404,   405,   406,   407,     0,   408,   409,     0,
       0,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,   420,   421,     0,     0,   422,   423,   424,   425,
     426,     0,     0,   427,   428,   429,   430,   431,   432,   433,
       0,   434,     0,   436,     0,   437,   438,   439,     0,     0,
     440,     0,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   487,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,     0,   109,   110,   111,   112,
     113,     0,   115,   116,     0,   117,   118,   119,   120,   121,
     122,     0,     0,   123,   124,   125,   126,   127,     0,   128,
     129,   130,   131,   132,     0,     0,     0,     0,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     603,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,     0,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   281,   282,   283,   284,     0,   285,     0,
     286,   287,     0,   289,     0,   290,   291,   292,   293,   294,
     295,     0,   296,   297,     0,   557,   298,   299,   300,     0,
       0,   301,   302,     0,   304,     0,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   326,   327,
     328,   329,   330,     0,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,     0,   340,   341,   342,     0,   343,
     344,   345,   346,   347,   348,   349,   350,   351,     0,   352,
     353,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,     0,
     381,   382,   383,   384,     0,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   401,     0,   403,   404,   405,   406,
     407,     0,   408,   409,     0,     0,   410,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,   420,   421,     0,
       0,   422,   423,   424,   425,   426,     0,     0,   427,   428,
     429,   430,   431,   432,   433,     0,   434,     0,   436,     0,
     437,   438,   439,     0,     0,   440,     0,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   487,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
      97,    98,    99,   632,   100,   101,   102,     0,     0,     0,
       0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
       0,   109,   110,   111,   112,   113,     0,   115,   116,     0,
     117,   118,   119,   120,   121,   122,     0,     0,   123,   124,
     125,   126,   127,     0,   128,   129,   130,   131,   132,     0,
       0,     0,     0,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,     0,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   281,   282,
     283,   284,     0,   285,     0,   286,   287,     0,   289,     0,
     290,   291,   292,   293,   294,   295,     0,   296,   297,     0,
       0,   298,   299,   300,     0,     0,   301,   302,     0,   304,
       0,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
     324,   325,     0,   326,   327,   328,   329,   330,     0,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,     0,
     340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
     349,   350,   351,     0,   352,   353,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,     0,   381,   382,   383,   384,     0,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   401,
       0,   403,   404,   405,   406,   407,     0,   408,   409,     0,
       0,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,   420,   421,     0,     0,   422,   423,   424,   425,
     426,     0,     0,   427,   428,   429,   430,   431,   432,   433,
       0,   434,     0,   436,     0,   437,   438,   439,     0,     0,
     440,     0,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   487,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,     0,   109,   110,   111,   112,
     113,     0,   115,   116,     0,   117,   118,   119,   120,   121,
     122,     0,     0,   123,   124,   125,   126,   127,     0,   128,
     129,   130,   131,   132,     0,     0,     0,     0,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,  1552,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,  1553,     0,     0,   257,   258,
     259,   260,   261,   262,     0,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   281,   282,   283,   284,     0,   285,     0,
     286,   287,     0,   289,     0,   290,   291,   292,   293,   294,
     295,     0,   296,   297,     0,     0,   298,   299,   300,     0,
       0,   301,   302,     0,   304,     0,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   326,   327,
     328,   329,   330,     0,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,     0,   340,   341,   342,     0,   343,
     344,   345,   346,   347,   348,   349,   350,   351,     0,   352,
     353,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,     0,
     381,   382,   383,   384,     0,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,  1554,   401,     0,   403,  1555,   405,  1556,
     407,     0,   408,   409,     0,     0,   410,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,   420,   421,     0,
       0,   422,   423,  1557,   425,   426,     0,     0,   427,   428,
     429,   430,   431,   432,   433,     0,   434,     0,   436,     0,
     437,   438,   439,     0,     0,   440,     0,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   487,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
      97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
       0,     0,  2132,     0,   103,   104,     0,   105,   106,   107,
       0,   109,   110,   111,   112,   113,     0,   115,   116,     0,
     117,   118,   119,   120,   121,   122,     0,     0,   123,   124,
     125,   126,   127,     0,   128,   129,   130,   131,   132,     0,
       0,     0,     0,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,     0,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   281,   282,
     283,   284,     0,   285,     0,   286,   287,     0,   289,     0,
     290,   291,   292,   293,   294,   295,     0,   296,   297,     0,
       0,   298,   299,   300,     0,     0,   301,   302,     0,   304,
       0,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
     324,   325,     0,   326,   327,   328,   329,   330,     0,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,     0,
     340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
     349,   350,   351,     0,   352,   353,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,     0,   381,   382,   383,   384,     0,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   401,
       0,   403,   404,   405,   406,   407,     0,   408,   409,     0,
       0,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,   420,   421,     0,     0,   422,   423,   424,   425,
     426,     0,     0,   427,   428,   429,   430,   431,   432,   433,
       0,   434,     0,   436,     0,   437,   438,   439,     0,     0,
     440,     0,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   487,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,     0,  2146,     0,   103,
     104,     0,   105,   106,   107,     0,   109,   110,   111,   112,
     113,     0,   115,   116,     0,   117,   118,   119,   120,   121,
     122,     0,     0,   123,   124,   125,   126,   127,     0,   128,
     129,   130,   131,   132,     0,     0,     0,     0,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,     0,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   281,   282,   283,   284,     0,   285,     0,
     286,   287,     0,   289,     0,   290,   291,   292,   293,   294,
     295,     0,   296,   297,     0,     0,   298,   299,   300,     0,
       0,   301,   302,     0,   304,     0,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   326,   327,
     328,   329,   330,     0,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,     0,   340,   341,   342,     0,   343,
     344,   345,   346,   347,   348,   349,   350,   351,     0,   352,
     353,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,     0,
     381,   382,   383,   384,     0,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   401,     0,   403,   404,   405,   406,
     407,     0,   408,   409,     0,     0,   410,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,   420,   421,     0,
       0,   422,   423,   424,   425,   426,     0,     0,   427,   428,
     429,   430,   431,   432,   433,     0,   434,     0,   436,     0,
     437,   438,   439,     0,     0,   440,     0,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   487,
       0,  2323,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
      97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
       0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
       0,   109,   110,   111,   112,   113,     0,   115,   116,     0,
     117,   118,   119,   120,   121,   122,     0,     0,   123,   124,
     125,   126,   127,     0,   128,   129,   130,   131,   132,     0,
       0,     0,     0,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,     0,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   281,   282,
     283,   284,     0,   285,     0,   286,   287,     0,   289,     0,
     290,   291,   292,   293,   294,   295,     0,   296,   297,     0,
       0,   298,   299,   300,     0,     0,   301,   302,     0,   304,
       0,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
     324,   325,     0,   326,   327,   328,   329,   330,     0,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,     0,
     340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
     349,   350,   351,     0,   352,   353,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,     0,   381,   382,   383,   384,     0,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   401,
       0,   403,   404,   405,   406,   407,     0,   408,   409,     0,
       0,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,   420,   421,     0,     0,   422,   423,   424,   425,
     426,     0,     0,   427,   428,   429,   430,   431,   432,   433,
       0,   434,     0,   436,     0,   437,   438,   439,     0,     0,
     440,     0,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   487,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,     0,   109,   110,   111,   112,
     113,     0,   115,   116,     0,   117,   118,   119,   120,   121,
     122,     0,     0,   123,   124,   125,   126,   127,     0,   128,
     129,   130,   131,   132,     0,     0,     0,     0,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,     0,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   281,   282,   283,   284,     0,   285,     0,
     286,   287,     0,   289,     0,   290,   291,   292,   293,   294,
     295,     0,   296,   297,     0,     0,   298,   299,   300,     0,
       0,   301,   302,     0,   304,     0,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   326,   327,
     328,   329,   330,     0,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,     0,   340,   341,   342,     0,   343,
     344,   345,   346,   347,   348,   349,   350,   351,     0,   352,
     353,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,     0,
     381,   382,   383,   384,     0,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   401,     0,   403,   404,   405,   406,
     407,     0,   408,   409,     0,     0,   410,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,   420,   421,     0,
       0,   422,   423,   424,   425,   426,     0,     0,   427,   428,
     429,   430,   431,   432,   433,     0,   434,     0,   436,     0,
     437,   438,   439,     0,     0,   440,     0,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   487,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
      97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
       0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
       0,   109,   110,   111,   112,   113,     0,   115,   116,     0,
     117,   118,   119,   120,   121,   122,     0,     0,   123,   124,
     125,   126,   127,     0,   128,   129,   130,   131,   132,     0,
       0,     0,     0,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     549,     0,     0,   257,   258,   259,   260,   261,   262,     0,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   281,   282,
     283,   284,     0,   285,     0,   286,   287,     0,   289,     0,
     290,   291,   292,   293,   294,   295,     0,   296,   297,     0,
       0,   298,   299,   300,     0,     0,   301,   302,     0,   304,
       0,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
     324,   325,     0,   326,   327,   328,   329,   330,     0,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,     0,
     340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
     349,   350,   351,     0,   352,   353,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   550,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   551,     0,   375,
     376,   377,   378,   379,     0,   381,   382,   383,   384,     0,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   401,
       0,   403,   404,   405,   406,   407,     0,   552,   409,     0,
       0,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,   420,   421,     0,     0,   422,   423,   424,   425,
     426,     0,     0,   427,   428,   429,   430,   431,   432,   433,
       0,   434,     0,   436,     0,   437,   438,   439,     0,     0,
     440,     0,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   487,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,     0,   109,   110,   111,   112,
     113,     0,   115,   116,     0,   117,   118,   119,   120,   121,
     122,     0,     0,   123,   124,   125,   126,   127,     0,   128,
     129,   130,   131,   132,     0,     0,     0,     0,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,     0,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   281,   282,   283,   284,     0,   285,     0,
     286,   287,     0,   289,     0,   290,   291,   292,   293,   294,
     295,     0,   296,   297,     0,     0,   298,   299,   300,     0,
       0,   301,   302,     0,   304,     0,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   326,   327,
     328,   329,   330,     0,     0,   331,   332,   333,   334,   335,
     336,   337,   565,   339,     0,   340,   341,   342,     0,   343,
     344,   345,   346,   347,   348,   349,   350,   351,     0,   352,
     353,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,     0,
     381,   382,   383,   384,     0,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   401,     0,   403,   404,   405,   406,
     407,     0,   408,   409,     0,     0,   410,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,   420,   421,     0,
       0,   422,   423,   424,   425,   426,     0,     0,   427,   428,
     429,   430,   431,   432,   433,     0,   434,     0,   436,     0,
     437,   438,   439,     0,     0,   440,     0,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   487,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
      97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
       0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
       0,   109,   110,   111,   112,   113,     0,   115,   116,     0,
     117,   118,   119,   120,   121,   122,     0,     0,   123,   124,
     125,   126,   127,     0,   128,   129,   130,   131,   132,     0,
       0,     0,     0,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   598,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,     0,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   281,   282,
     283,   284,     0,   285,     0,   286,   287,     0,   289,     0,
     290,   291,   292,   293,   294,   295,     0,   296,   297,     0,
       0,   298,   299,   300,     0,     0,   301,   302,     0,   304,
       0,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
     324,   325,     0,   326,   327,   328,   329,   330,     0,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,     0,
     340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
     349,   350,   351,     0,   352,   353,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,     0,   381,   382,   383,   384,     0,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   401,
       0,   403,   404,   405,   406,   407,     0,   408,   409,     0,
       0,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,   420,   421,     0,     0,   422,   423,   424,   425,
     426,     0,     0,   427,   428,   429,   430,   431,   432,   433,
       0,   434,     0,   436,     0,   437,   438,   439,     0,     0,
     440,     0,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   487,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,     0,   109,   110,   111,   112,
     113,     0,   115,   116,     0,   117,   118,   119,   120,   121,
     122,     0,     0,   123,   124,   125,   126,   127,     0,   128,
     129,   130,   131,   132,     0,     0,     0,     0,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     601,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,     0,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   281,   282,   283,   284,     0,   285,     0,
     286,   287,     0,   289,     0,   290,   291,   292,   293,   294,
     295,     0,   296,   297,     0,     0,   298,   299,   300,     0,
       0,   301,   302,     0,   304,     0,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   326,   327,
     328,   329,   330,     0,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,     0,   340,   341,   342,     0,   343,
     344,   345,   346,   347,   348,   349,   350,   351,     0,   352,
     353,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,     0,
     381,   382,   383,   384,     0,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   401,     0,   403,   404,   405,   406,
     407,     0,   408,   409,     0,     0,   410,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,   420,   421,     0,
       0,   422,   423,   424,   425,   426,     0,     0,   427,   428,
     429,   430,   431,   432,   433,     0,   434,     0,   436,     0,
     437,   438,   439,     0,     0,   440,     0,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   487,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
      97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
       0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
       0,   109,   110,   111,   112,   113,     0,   115,   116,     0,
     117,   118,   119,   120,   121,   122,     0,     0,   123,   124,
     125,   126,   127,     0,   128,   129,   130,   131,   132,     0,
       0,     0,     0,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   605,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,     0,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   281,   282,
     283,   284,     0,   285,     0,   286,   287,     0,   289,     0,
     290,   291,   292,   293,   294,   295,     0,   296,   297,     0,
       0,   298,   299,   300,     0,     0,   301,   302,     0,   304,
       0,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
     324,   325,     0,   326,   327,   328,   329,   330,     0,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,     0,
     340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
     349,   350,   351,     0,   352,   353,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,     0,   381,   382,   383,   384,     0,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   401,
       0,   403,   404,   405,   406,   407,     0,   408,   409,     0,
       0,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,   420,   421,     0,     0,   422,   423,   424,   425,
     426,     0,     0,   427,   428,   429,   430,   431,   432,   433,
       0,   434,     0,   436,     0,   437,   438,   439,     0,     0,
     440,     0,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   487,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,     0,   109,   110,   111,   112,
     113,     0,   115,   116,     0,   117,   118,   119,   120,   121,
     122,     0,     0,   123,   124,   125,   126,   127,     0,   128,
     129,   130,   131,   132,     0,     0,     0,     0,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     624,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,     0,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   281,   282,   283,   284,     0,   285,     0,
     286,   287,     0,   289,     0,   290,   291,   292,   293,   294,
     295,     0,   296,   297,     0,     0,   298,   299,   300,     0,
       0,   301,   302,     0,   304,     0,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   326,   327,
     328,   329,   330,     0,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,     0,   340,   341,   342,     0,   343,
     344,   345,   346,   347,   348,   349,   350,   351,     0,   352,
     353,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,     0,
     381,   382,   383,   384,     0,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   401,     0,   403,   404,   405,   406,
     407,     0,   408,   409,     0,     0,   410,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,   420,   421,     0,
       0,   422,   423,   424,   425,   426,     0,     0,   427,   428,
     429,   430,   431,   432,   433,     0,   434,     0,   436,     0,
     437,   438,   439,     0,     0,   440,     0,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   487,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
      97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
       0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
       0,   109,   110,   111,   112,   113,     0,   115,   116,     0,
     117,   118,   119,   120,   121,   122,     0,     0,   123,   124,
     125,   126,   127,     0,   128,   129,   130,   131,   132,     0,
       0,     0,     0,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   640,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,     0,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   281,   282,
     283,   284,     0,   285,     0,   286,   287,     0,   289,     0,
     290,   291,   292,   293,   294,   295,     0,   296,   297,     0,
       0,   298,   299,   300,     0,     0,   301,   302,     0,   304,
       0,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
     324,   325,     0,   326,   327,   328,   329,   330,     0,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,     0,
     340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
     349,   350,   351,     0,   352,   353,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,     0,   381,   382,   383,   384,     0,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   401,
       0,   403,   404,   405,   406,   407,     0,   408,   409,     0,
       0,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,   420,   421,     0,     0,   422,   423,   424,   425,
     426,     0,     0,   427,   428,   429,   430,   431,   432,   433,
       0,   434,     0,   436,     0,   437,   438,   439,     0,     0,
     440,     0,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   487,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,     0,   109,   110,   111,   112,
     113,     0,   115,   116,     0,   117,   118,   119,   120,   121,
     122,     0,     0,   123,   124,   125,   126,   127,     0,   128,
     129,   130,   131,   132,     0,     0,     0,     0,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     644,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,     0,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   281,   282,   283,   284,     0,   285,     0,
     286,   287,     0,   289,     0,   290,   291,   292,   293,   294,
     295,     0,   296,   297,     0,     0,   298,   299,   300,     0,
       0,   301,   302,     0,   304,     0,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   326,   327,
     328,   329,   330,     0,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,     0,   340,   341,   342,     0,   343,
     344,   345,   346,   347,   348,   349,   350,   351,     0,   352,
     353,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,     0,
     381,   382,   383,   384,     0,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   401,     0,   403,   404,   405,   406,
     407,     0,   408,   409,     0,     0,   410,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,   420,   421,     0,
       0,   422,   423,   424,   425,   426,     0,     0,   427,   428,
     429,   430,   431,   432,   433,     0,   434,     0,   436,     0,
     437,   438,   439,     0,     0,   440,     0,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   487,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
      97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
       0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
       0,   109,   110,   111,   112,   113,     0,   115,   116,     0,
     117,   118,   119,   120,   121,   122,     0,     0,   123,   124,
     125,   126,   127,     0,   128,   129,   130,   131,   132,     0,
       0,     0,     0,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   647,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,     0,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   281,   282,
     283,   284,     0,   285,     0,   286,   287,     0,   289,     0,
     290,   291,   292,   293,   294,   295,     0,   296,   297,     0,
       0,   298,   299,   300,     0,     0,   301,   302,     0,   304,
       0,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
     324,   325,     0,   326,   327,   328,   329,   330,     0,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,     0,
     340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
     349,   350,   351,     0,   352,   353,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,     0,   381,   382,   383,   384,     0,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   401,
       0,   403,   404,   405,   406,   407,     0,   408,   409,     0,
       0,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,   420,   421,     0,     0,   422,   423,   424,   425,
     426,     0,     0,   427,   428,   429,   430,   431,   432,   433,
       0,   434,     0,   436,     0,   437,   438,   439,     0,     0,
     440,     0,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   487,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,     0,   109,   110,   111,   112,
     113,     0,   115,   116,     0,   117,   118,   119,   120,   121,
     122,     0,     0,   123,   124,   125,   126,   127,     0,   128,
     129,   130,   131,   132,     0,     0,     0,     0,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,     0,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   281,   282,   283,   284,     0,   285,     0,
     286,   287,     0,   289,     0,   290,   291,   292,   293,   294,
     295,     0,   296,   297,     0,     0,   298,   299,   300,     0,
       0,   301,   302,     0,   304,     0,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   326,   327,
     328,   329,   330,     0,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,     0,   340,   341,   342,     0,   343,
     344,   345,   346,   347,   348,   349,   350,   351,     0,   352,
     353,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     550,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,     0,
     381,   382,   383,   384,     0,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   401,     0,   403,   404,   405,   406,
     407,     0,   552,   409,     0,     0,   410,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,   420,   421,     0,
       0,   422,   423,   424,   425,   426,     0,     0,   427,   428,
     429,   430,   431,   432,   433,     0,   434,     0,   436,     0,
     437,   438,   439,     0,     0,   440,     0,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   487,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
      97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
       0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
       0,   109,   110,   111,   112,   113,     0,   115,   116,     0,
     117,   118,   119,   120,   121,   122,     0,     0,   123,   124,
     125,   126,   127,     0,   128,   129,   130,   131,   132,     0,
       0,     0,     0,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   979,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,     0,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   281,   282,
     283,   284,     0,   285,     0,   286,   287,     0,   289,     0,
     290,   291,   292,   293,   294,   295,     0,   296,   297,     0,
       0,   298,   299,   300,     0,     0,   301,   302,     0,   304,
       0,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
     324,   325,     0,   326,   327,   328,   329,   330,     0,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,     0,
     340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
     349,   350,   351,     0,   352,   353,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,     0,   381,   382,   383,   384,     0,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   401,
       0,   403,   404,   405,   406,   407,     0,   408,   409,     0,
       0,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,   420,   421,     0,     0,   422,   423,   424,   425,
     426,     0,     0,   427,   428,   429,   430,   431,   432,   433,
       0,   434,     0,   436,     0,   437,   438,   439,     0,     0,
     440,     0,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   487,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,     0,   109,   110,   111,   112,
     113,     0,   115,   116,     0,   117,   118,   119,   120,   121,
     122,     0,     0,   123,   124,   125,   126,   127,     0,   128,
     129,   130,   131,   132,     0,     0,     0,     0,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     981,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,     0,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   281,   282,   283,   284,     0,   285,     0,
     286,   287,     0,   289,     0,   290,   291,   292,   293,   294,
     295,     0,   296,   297,     0,     0,   298,   299,   300,     0,
       0,   301,   302,     0,   304,     0,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   326,   327,
     328,   329,   330,     0,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,     0,   340,   341,   342,     0,   343,
     344,   345,   346,   347,   348,   349,   350,   351,     0,   352,
     353,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,     0,
     381,   382,   383,   384,     0,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   401,     0,   403,   404,   405,   406,
     407,     0,   408,   409,     0,     0,   410,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,   420,   421,     0,
       0,   422,   423,   424,   425,   426,     0,     0,   427,   428,
     429,   430,   431,   432,   433,     0,   434,     0,   436,     0,
     437,   438,   439,     0,     0,   440,     0,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   487,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
      97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
       0,     0,  1243,     0,   103,   104,     0,   105,   106,   107,
       0,   109,   110,   111,   112,   113,     0,   115,   116,     0,
     117,   118,   119,   120,   121,   122,     0,     0,   123,   124,
     125,   126,   127,     0,   128,   129,   130,   131,   132,     0,
       0,     0,     0,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,     0,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   281,   282,
     283,   284,     0,   285,     0,   286,   287,     0,   289,     0,
     290,   291,   292,   293,   294,   295,     0,   296,   297,     0,
       0,   298,   299,   300,     0,     0,   301,   302,     0,   304,
       0,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
     324,   325,     0,   326,   327,   328,   329,   330,     0,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,     0,
     340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
     349,   350,   351,     0,   352,   353,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,     0,     0,
     376,   377,   378,   379,     0,   381,   382,   383,   384,     0,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   401,
       0,   403,   404,   405,   406,   407,     0,   408,   409,     0,
       0,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,   420,   421,     0,     0,   422,   423,   424,   425,
     426,     0,     0,   427,   428,   429,   430,   431,   432,   433,
       0,   434,     0,   436,     0,   437,   438,   439,     0,     0,
     440,     0,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   487,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,     0,   109,   110,   111,   112,
     113,     0,   115,   116,     0,   117,   118,   119,   120,   121,
     122,     0,     0,   123,   124,   125,   126,   127,     0,   128,
     129,   130,   131,   132,     0,     0,     0,     0,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
    1337,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,     0,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   281,   282,   283,   284,     0,   285,     0,
     286,   287,     0,   289,     0,   290,   291,   292,   293,   294,
     295,     0,   296,   297,     0,     0,   298,   299,   300,     0,
       0,   301,   302,     0,   304,     0,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   326,   327,
     328,   329,   330,     0,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,     0,   340,   341,   342,     0,   343,
     344,   345,   346,   347,   348,   349,   350,   351,     0,   352,
     353,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,     0,
     381,   382,   383,   384,     0,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   401,     0,   403,   404,   405,   406,
     407,     0,   408,   409,     0,     0,   410,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,   420,   421,     0,
       0,   422,   423,   424,   425,   426,     0,     0,   427,   428,
     429,   430,   431,   432,   433,     0,   434,     0,   436,     0,
     437,   438,   439,     0,     0,   440,     0,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   487,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
      97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
       0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
       0,   109,   110,   111,   112,   113,     0,   115,   116,     0,
     117,   118,   119,   120,   121,   122,     0,     0,   123,   124,
     125,   126,   127,     0,   128,   129,   130,   131,   132,     0,
       0,     0,     0,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,  1353,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,     0,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   281,   282,
     283,   284,     0,   285,     0,   286,   287,     0,   289,     0,
     290,   291,   292,   293,   294,   295,     0,   296,   297,     0,
       0,   298,   299,   300,     0,     0,   301,   302,     0,   304,
       0,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
     324,   325,     0,   326,   327,   328,   329,   330,     0,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,     0,
     340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
     349,   350,   351,     0,   352,   353,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,     0,   381,   382,   383,   384,     0,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   401,
       0,   403,   404,   405,   406,   407,     0,   408,   409,     0,
       0,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,   420,   421,     0,     0,   422,   423,   424,   425,
     426,     0,     0,   427,   428,   429,   430,   431,   432,   433,
       0,   434,     0,   436,     0,   437,   438,   439,     0,     0,
     440,     0,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   487,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,     0,   109,   110,   111,   112,
     113,     0,   115,   116,     0,   117,   118,   119,   120,   121,
     122,     0,     0,   123,   124,   125,   126,   127,     0,   128,
     129,   130,   131,   132,     0,     0,     0,     0,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
    1626,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,     0,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   281,   282,   283,   284,     0,   285,     0,
     286,   287,     0,   289,     0,   290,   291,   292,   293,   294,
     295,     0,   296,   297,     0,     0,   298,   299,   300,     0,
       0,   301,   302,     0,   304,     0,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   326,   327,
     328,   329,   330,     0,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,     0,   340,   341,   342,     0,   343,
     344,   345,   346,   347,   348,   349,   350,   351,     0,   352,
     353,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,     0,
     381,   382,   383,   384,     0,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   401,     0,   403,   404,   405,   406,
     407,     0,   408,   409,     0,     0,   410,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,   420,   421,     0,
       0,   422,   423,   424,   425,   426,     0,     0,   427,   428,
     429,   430,   431,   432,   433,     0,   434,     0,   436,     0,
     437,   438,   439,     0,     0,   440,     0,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   487,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
      97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
       0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
       0,   109,   110,   111,   112,   113,     0,   115,   116,     0,
     117,   118,   119,   120,   121,   122,     0,     0,   123,   124,
     125,   126,   127,     0,   128,   129,   130,   131,   132,     0,
       0,     0,     0,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,  1638,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,     0,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   281,   282,
     283,   284,     0,   285,     0,   286,   287,     0,   289,     0,
     290,   291,   292,   293,   294,   295,     0,   296,   297,     0,
       0,   298,   299,   300,     0,     0,   301,   302,     0,   304,
       0,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
     324,   325,     0,   326,   327,   328,   329,   330,     0,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,     0,
     340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
     349,   350,   351,     0,   352,   353,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,     0,   381,   382,   383,   384,     0,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   401,
       0,   403,   404,   405,   406,   407,     0,   408,   409,     0,
       0,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,   420,   421,     0,     0,   422,   423,   424,   425,
     426,     0,     0,   427,   428,   429,   430,   431,   432,   433,
       0,   434,     0,   436,     0,   437,   438,   439,     0,     0,
     440,     0,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   487,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,     0,   109,   110,   111,   112,
     113,     0,   115,   116,     0,   117,   118,   119,   120,   121,
     122,     0,     0,   123,   124,   125,   126,   127,     0,   128,
     129,   130,   131,   132,     0,     0,     0,     0,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
    1640,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,     0,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   281,   282,   283,   284,     0,   285,     0,
     286,   287,     0,   289,     0,   290,   291,   292,   293,   294,
     295,     0,   296,   297,     0,     0,   298,   299,   300,     0,
       0,   301,   302,     0,   304,     0,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   326,   327,
     328,   329,   330,     0,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,     0,   340,   341,   342,     0,   343,
     344,   345,   346,   347,   348,   349,   350,   351,     0,   352,
     353,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,     0,
     381,   382,   383,   384,     0,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   401,     0,   403,   404,   405,   406,
     407,     0,   408,   409,     0,     0,   410,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,   420,   421,     0,
       0,   422,   423,   424,   425,   426,     0,     0,   427,   428,
     429,   430,   431,   432,   433,     0,   434,     0,   436,     0,
     437,   438,   439,     0,     0,   440,     0,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   487,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
      97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
       0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
       0,   109,   110,   111,   112,   113,     0,   115,   116,     0,
     117,   118,   119,   120,   121,   122,     0,     0,   123,   124,
     125,   126,   127,     0,   128,   129,   130,   131,   132,     0,
       0,     0,     0,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,  2264,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,     0,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   281,   282,
     283,   284,     0,   285,     0,   286,   287,     0,   289,     0,
     290,   291,   292,   293,   294,   295,     0,   296,   297,     0,
       0,   298,   299,   300,     0,     0,   301,   302,     0,   304,
       0,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
     324,   325,     0,   326,   327,   328,   329,   330,     0,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,     0,
     340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
     349,   350,   351,     0,   352,   353,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,     0,   381,   382,   383,   384,     0,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   401,
       0,   403,   404,   405,   406,   407,     0,   408,   409,     0,
       0,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,   420,   421,     0,     0,   422,   423,   424,   425,
     426,     0,     0,   427,   428,   429,   430,   431,   432,   433,
       0,   434,     0,   436,     0,   437,   438,   439,     0,     0,
     440,     0,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,  1033,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,   108,   109,   110,   111,     0,
    1034,   114,  1035,  1036,     0,   117,   118,   119,   120,   121,
     122,     0,     0,   123,   124,  1037,  1038,   127,     0,   128,
     129,   130,   131,     0,     0,   133,     0,     0,   134,   135,
     136,   137,   138,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,   148,   149,   150,   151,     0,     0,
       0,   152,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,  1039,  1040,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   698,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,     0,   191,   192,   193,   194,     0,     0,   196,
       0,   197,   198,  1041,   200,     0,   201,     0,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,   210,     0,
       0,     0,     0,   212,     0,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,   231,     0,   233,   234,   235,
     236,  1042,  1043,     0,  1044,     0,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,     0,     0,   250,   251,
     252,   253,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,     0,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,  1045,   280,  1046,   282,   283,   284,     0,     0,     0,
     286,   287,   288,   289,     0,     0,   291,  1047,   293,   294,
     295,     0,   296,   297,     0,     0,   298,   299,   300,     0,
       0,   301,     0,   303,   304,   305,     0,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
       0,   320,   321,     0,   323,   324,   325,     0,   326,   327,
     328,   329,   330,     0,     0,   331,   332,   333,   334,  1048,
     336,   337,   338,   339,     0,   340,   341,   342,     0,   343,
     344,   345,   346,   347,   348,   349,   350,   351,     0,   352,
     353,   354,   355,   356,   357,  1049,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,     0,   375,  1050,   377,   378,   379,   380,
     381,   382,  1051,   384,     0,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,  1052,   397,     0,
       0,   399,   400,     0,   401,   402,   403,   404,   405,   406,
     407,     0,  1053,  1054,     0,     0,   410,   411,     0,   413,
       0,     0,   415,   416,   417,   418,   419,   420,   421,     0,
       0,   422,   423,   424,   425,   426,     0,     0,   427,   428,
     429,   430,   431,     0,  1055,     0,   434,   435,   436,     0,
     437,   438,   439,     0,     0,   440,     0,     0,   441,   442,
     443,   444,   445,   446,   487,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   458,   459,   460,   461,     0,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,     0,   109,   110,   111,   112,
     113,     0,   115,   116,     0,   117,   118,   119,   120,   121,
     122,     0,     0,   123,   124,   125,   126,   127,     0,   128,
     129,   130,   131,   132,     0,     0,     0,     0,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,     0,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   281,   282,   283,   284,     0,   285,     0,
     286,   287,     0,   289,     0,   290,   291,   292,   293,   294,
     295,     0,   296,   297,     0,     0,   298,   299,   300,     0,
       0,   301,   302,     0,   304,     0,   306,   307,   308,   309,
     310,   311,   312,     0,   314,   315,   316,     0,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   326,   327,
     328,   329,   330,     0,     0,   331,   332,     0,   334,   335,
     336,   337,   338,   339,     0,   340,   341,   342,     0,   343,
     344,   345,   346,   347,   348,   349,   350,   351,     0,   352,
     353,     0,   355,   356,   357,   358,     0,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,     0,
     381,   382,   383,   384,     0,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   401,     0,   403,   404,   405,   406,
     407,     0,   408,   409,     0,     0,   410,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,   420,   421,     0,
       0,   422,   423,   424,   425,   426,     0,     0,   427,   428,
     429,   430,   431,   432,   433,     0,   434,     0,   436,     0,
     437,   438,   439,     0,     0,   440,     0,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,  1033,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
      97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
       0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
     108,   109,   110,   111,     0,  1034,   114,  1035,  1036,     0,
     117,   118,   119,   120,   121,   122,     0,     0,   123,   124,
    1037,  1038,   127,     0,   128,   129,   130,   131,     0,     0,
     133,     0,     0,   134,   135,   136,   137,   138,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,   148,
     149,   150,   151,     0,     0,     0,   152,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,  1039,  1040,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     698,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,     0,   191,   192,
     193,   194,     0,     0,   196,     0,   197,   198,  1041,   200,
       0,   201,     0,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,   210,     0,     0,     0,     0,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
     231,     0,   233,   234,   235,   236,  1042,  1043,     0,  1044,
       0,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,     0,     0,   250,   251,   252,   253,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,     0,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,  1045,   280,  1046,   282,
     283,   284,     0,     0,     0,   286,   287,   288,   289,     0,
       0,   291,  1047,   293,   294,   295,     0,   296,   297,     0,
       0,   298,   299,   300,     0,     0,   301,     0,   303,   304,
     305,     0,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,     0,   320,   321,     0,   323,
     324,   325,     0,   326,   327,   328,   329,   330,     0,     0,
     331,   332,   333,   334,  1048,   336,   337,   338,   339,     0,
     340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
     349,   350,   351,     0,   352,   353,   354,   355,   356,   357,
       0,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,     0,   375,
       0,   377,   378,   379,   380,   381,   382,  1051,   384,     0,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,     0,   397,     0,     0,   399,   400,     0,   401,
     402,   403,   404,   405,   406,   407,     0,  1053,  1054,     0,
       0,   410,   411,     0,   413,     0,     0,   415,   416,   417,
     418,   419,   420,   421,     0,     0,   422,   423,   424,   425,
     426,     0,     0,   427,   428,   429,   430,   431,     0,  1055,
       0,   434,   435,   436,     0,   437,   438,   439,     0,     0,
     440,     0,     0,   441,   442,   443,   444,   445,   446,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     458,   459,   460,   461
};

static const yytype_int16 yycheck[] =
{
       6,    34,   602,   592,   514,    11,     0,    50,   609,    15,
     850,     6,   617,   658,   548,    21,    22,    23,   695,   696,
      26,  1104,   564,    29,   837,     0,    32,    33,   824,   849,
     658,   734,   645,   560,     6,  1564,   713,   515,    44,    16,
    1070,   829,  1636,  1909,     0,   977,   977,  1576,     0,   977,
      44,     0,   723,   519,   977,  1007,  2000,   863,    29,   796,
    1093,  1642,   826,  1644,  1093,  1976,  1093,    16,  1521,  1128,
    1129,     0,  1840,   808,    52,  1093,  1617,  2008,  2012,    85,
      86,    87,    88,    89,    52,   666,   521,   611,  1633,   520,
     854,     3,     0,    33,    58,  1072,   521,    58,     3,   667,
      11,  1132,     9,     5,    15,  1874,    20,   649,  1178,     5,
    2269,    22,   602,   607,   604,  2321,   606,    88,     5,     5,
    1897,    32,    33,  2270,   769,     5,    13,    14,  2274,     5,
       5,   169,    11,    13,    14,    50,  1223,    13,    14,  1221,
       5,    23,    48,    40,     9,  1868,   170,    29,     5,    75,
    2344,   138,    40,     5,     0,  2257,   622,     9,  1703,    85,
     119,   106,    41,   116,    11,   169,  2372,   995,     5,     5,
       5,    27,   666,   667,   609,    86,    27,   214,    34,    27,
      58,     5,    75,    34,    92,   216,    34,     5,   121,  2353,
    2423,   733,    85,   838,    73,   521,   841,   842,     4,  1744,
    1745,   769,   119,     9,   169,  1106,    67,  1810,   735,     3,
       4,     5,   198,     3,   589,     9,   523,     9,  1873,   281,
      15,   289,   283,   658,   119,  1256,   589,   137,  2554,    11,
     665,   662,   266,  1932,     3,   170,   763,  1050,   289,  2219,
     135,   130,   269,   146,   106,   114,    92,  2627,    73,   208,
    2456,   305,   776,   135,  2380,  1892,    82,  1894,  2456,    41,
     161,   116,    31,    32,  2517,    37,     4,   117,   174,   837,
     354,     9,   170,    27,   114,  2401,   818,  2721,   867,    59,
     861,   862,    11,   609,   190,    27,   163,    67,   159,   195,
     331,    73,    11,   453,  2441,  2692,  2693,    11,   117,   453,
    2494,   127,   483,   272,   216,   166,   204,   436,    23,   212,
    1211,   216,   790,   401,   492,   496,    11,    68,   496,   161,
     114,   219,  2266,   224,   230,   345,   367,    41,  1781,    44,
     228,   456,   658,  2101,  2660,   436,   771,   772,   498,   665,
      30,   191,   305,   837,   498,  2789,    41,   435,   188,  1783,
     107,   123,  1946,   373,    73,   480,     5,  2737,  2127,    73,
     231,   402,  1039,  1040,    54,   494,   301,   861,   862,   863,
    1047,  1106,   191,   359,  2771,   283,   130,  1811,    73,   984,
    1411,   367,   346,  1054,  2590,   346,   289,     8,   130,   278,
      11,   240,   355,   494,   995,    16,    17,    18,  1943,   168,
    1945,   170,   107,   265,   273,   287,   987,   434,   449,   413,
     494,   380,  2538,  2136,   448,  2395,   402,  2140,   273,   213,
     315,   105,   264,  2629,  1025,   684,   685,   337,   268,  2755,
     498,    11,   494,   494,   311,   489,  2689,   283,  1521,   347,
     234,   816,   458,     0,   379,   771,   772,   498,   413,  2551,
     709,  1247,   350,   816,   234,   316,  2620,   402,   340,  2062,
     498,   498,   344,   449,   480,   452,   472,  2700,   346,   500,
     494,  2126,   378,   479,   300,   434,  1211,   471,   785,   483,
     486,  2675,  1050,   489,   994,   438,  2031,   413,   521,   999,
    1330,   373,   496,   987,  2193,  1005,   471,  1303,  1581,   294,
    1587,   347,   399,   436,  1586,   391,   392,  1566,   514,   515,
     516,   399,  2423,  2719,  2661,   471,  2662,   434,  1346,   471,
     413,  2719,   471,  1001,   494,   428,   489,   383,  2165,  2297,
     331,     8,   383,  1075,   498,   383,  1137,   498,   571,    16,
      17,    18,  1084,   549,   521,   551,  1088,   483,   456,   592,
    1620,   557,  1076,  2322,  2713,   497,  1050,   439,   494,   565,
     995,   245,  1463,  1464,  1132,  1107,  1108,  1468,   429,   253,
     445,   520,   578,  1379,  1009,  2352,   366,  1008,   489,   494,
     492,   407,   576,   432,  1009,   562,   493,   495,   500,   497,
    1025,   597,   494,  1120,  1175,   500,   574,  1574,   494,  1123,
    1124,   576,  2196,  1504,  1505,   516,   574,   494,  2331,  2553,
     456,   490,   402,  2336,   494,   529,  2339,   531,   494,   494,
     576,   627,   628,   629,   576,   565,   597,   576,  2209,   494,
    1140,  1276,  2566,  2564,   458,   492,   550,   494,  1132,   496,
     458,  1286,   494,   490,  1289,   494,    58,   576,   449,   495,
    2191,   497,   442,  1177,   565,  1561,   480,   494,   494,   494,
     458,   148,   480,  1264,   285,   671,   456,   492,    23,   995,
     494,   496,  1272,   446,    29,   415,   494,   446,  1947,   485,
     486,  1175,   480,  1009,  1715,   251,   252,    75,  1256,   498,
     480,   485,   486,   485,   486,  2463,   494,    85,  1781,  1025,
     733,   494,  1137,  1609,   494,   487,   488,   489,   490,   196,
    1299,  1300,  1301,   662,  2259,    31,    32,  1362,   456,   459,
     342,  1752,  2175,  2667,  1757,  1758,  1759,  1756,  1463,  1464,
    1757,  1344,   178,  1468,  1362,  1348,  1413,  1768,  1351,  1757,
    1758,     4,   480,  2163,   658,  1346,     9,   485,   486,   159,
    2170,   665,  2021,  1705,   164,  1245,   198,  1788,   487,   488,
     489,   490,  1256,    92,   246,   240,  2489,   773,  1827,  1504,
    1505,   326,  1282,   240,    23,   418,    92,  1287,  1037,  1038,
     135,    67,  1272,   789,   790,  1488,  1817,  1046,  2382,  2700,
     485,   486,   487,   488,   489,   490,   449,   363,   364,   240,
     355,  1291,   268,   130,   362,   366,  1296,   273,   285,  1303,
       4,  1137,   494,   819,   820,     9,   822,   823,   824,  1659,
     486,   231,   736,   801,   802,   130,   804,  1262,   114,  1264,
     836,  1568,   746,   801,   802,   494,   804,   503,   220,  1098,
    1099,   402,   477,  1411,  2788,   759,   218,   853,   819,   130,
     240,   857,   157,   265,   175,   769,  1322,   771,   772,   325,
     481,   482,   483,   159,   485,   486,   487,   488,   489,   490,
     280,   496,  2738,  2739,    23,  1417,   157,  1683,   789,  2756,
      29,   442,   853,   265,   359,  1379,   135,   173,  1789,  1790,
    1791,  1792,   359,  1976,  1795,  1796,  1797,  1798,  1799,  1800,
    1801,  1802,  1803,  1804,  1668,   485,   486,   487,   488,   489,
     490,  1346,    75,   234,   240,  1618,   240,  1411,   359,     4,
       4,   283,    85,  2800,     9,     9,  2792,  1362,  1716,  2523,
     477,  1719,   287,   494,   346,   231,  1262,  2814,  1264,   487,
    1482,   268,  1377,  1844,  1845,  1976,  1369,  2528,   489,   168,
    1373,   278,  1375,   494,   458,   496,   494,   432,   496,   159,
    1866,   373,  1868,   268,   164,   432,   972,  1509,   273,   359,
      27,   498,   978,   278,  1563,  1481,   480,  1483,  1484,    85,
     986,    87,   268,    89,   280,   340,   135,   273,   994,   344,
     494,   432,   273,   999,   376,  1001,  1002,   278,  1004,  1005,
     495,  1007,   494,   498,   481,   482,   483,  1549,   485,   486,
     487,   488,   489,   490,   498,   667,   186,   187,   373,   494,
    1346,    78,    64,    65,  1556,  1557,  1639,   494,  1641,    86,
     316,   231,  1009,   359,   495,   359,  1362,   366,   287,   495,
      23,   331,   432,   354,   355,   495,    29,   333,   498,   116,
     366,  1377,   434,   494,  1789,  1790,  1791,  1792,   115,  1008,
    1795,  1796,  1797,  1798,  1799,  1800,  1801,  1802,  1803,  1804,
    2002,  2002,  2024,   402,  2002,    13,    14,   367,  1072,  2002,
     280,   251,   252,   220,   439,   406,   402,   408,   406,   218,
     408,  1002,  2175,  1004,  1699,   344,   345,  1072,  1104,  2628,
     495,    13,    14,   498,   494,  1733,   432,   477,   432,  1844,
    1845,   432,   402,   442,   489,   420,  1072,  1957,    54,   494,
    1072,   496,   169,  1072,   373,   430,   442,   456,   265,   495,
     446,   188,   498,   494,  1140,   202,  1956,  1738,   287,   420,
     456,   214,   199,   429,  1815,  1816,   151,  1715,  1944,   430,
     340,   480,   135,   150,   492,   406,   494,   408,   496,   449,
     495,   354,   355,   498,   480,   494,  1172,  1955,   494,  1957,
     494,  2145,  1463,  1464,  2148,   151,  1996,  1468,   494,  1093,
     495,  2775,   151,   498,  1752,   837,  1192,   495,  1194,  1683,
     327,  2720,   151,   363,   364,   344,  2227,    23,   265,   494,
    1768,   268,   495,    29,   456,   498,   458,  1642,  1643,  1644,
      36,  2740,  2242,  1504,  1505,   494,  1193,   496,  1728,   495,
    1788,  1715,   498,   495,   373,  1928,   498,     3,  1234,    55,
    2136,   406,   268,   408,  2140,   495,  1242,  1243,   498,   376,
     495,  1247,  1248,   498,   406,   495,   408,  1241,   498,  1817,
     354,   355,  1258,  1259,  1260,  1261,  2287,  1263,  1752,   495,
     449,   495,   498,  1269,   498,  1271,   495,    81,  1182,   498,
     667,   494,  1840,  2802,  1768,   460,  1282,  1283,    93,   105,
    1822,  1287,  1288,   586,   151,   588,  1292,  1293,  1294,  1295,
     439,  1297,  1298,   495,  1788,   496,   498,   434,  1733,  2141,
    1824,  2143,     8,  1738,   287,    11,   549,   495,   551,   135,
     498,  1317,   151,   354,   355,  1321,  1642,  1643,  1644,   495,
     255,   256,   498,  1817,  1856,  1857,  1858,  1859,  1334,   495,
     151,  1976,   498,   390,    36,    41,   393,  1248,   495,  1333,
    2423,   498,    48,   363,   364,   495,  1840,  1258,   498,  1260,
     283,  1878,  1263,    55,   114,   170,   494,   340,  1269,    36,
    1271,   344,   495,   771,   772,   498,   472,    73,   402,   366,
     495,   197,  1283,   498,  1975,  1381,  1977,  1288,    55,    36,
     486,  1292,  1293,  1294,  1295,  2225,  1297,  1298,   366,   204,
     373,  2421,  2423,  2294,   229,     5,   495,     5,  1050,   498,
       8,  2197,  1991,   105,   219,   402,    14,  1733,  1976,     5,
    2023,  1935,  1738,   228,   495,  2321,    24,   498,   150,   245,
      28,  2234,   164,   495,   402,  2331,   498,   253,   105,   494,
    2336,   495,  1465,  2339,   498,   494,   494,   312,   144,   265,
     837,   495,   494,   494,   498,   442,   261,   495,  1362,   495,
     498,   557,   498,     5,  1368,   495,   439,   495,   498,   456,
     498,   287,  2493,  1377,   442,  2496,  2372,   495,   174,   494,
     498,   297,   578,     5,   495,   494,  1509,   498,   456,   494,
    1132,     5,  1976,   480,   190,   495,     5,   495,   498,   195,
     498,   495,  2393,   495,   498,   197,   498,   494,  1789,  1790,
    1791,  1792,   480,   494,  1795,  1796,  1797,  1798,  1799,  1800,
    1801,  1802,  1803,  1804,   340,  1521,   494,   296,   344,   345,
     197,   627,   628,   629,   230,   495,    23,   495,   498,   494,
     498,   495,    29,  2101,   498,   350,   296,   494,  1973,   494,
    1975,   367,  1977,   245,   494,    15,   495,   373,  1554,   498,
    2456,   253,   494,  1844,  1845,  1561,   457,   486,   214,  2294,
     494,  2462,   388,   265,   494,   494,  1561,    23,   245,   494,
     494,  2216,   501,    29,   503,   504,   253,   506,   507,   285,
    1574,  1614,   495,  2489,   498,   498,    96,   366,   265,  1561,
     495,   495,    36,   498,   498,   297,   243,   495,   495,  1574,
     498,   498,   229,  1609,  1256,  1611,   366,  2101,  1614,  2429,
     164,  1617,   280,   439,  1609,  2228,  2229,  2700,  1574,   164,
     297,   495,  1574,   402,   498,  1574,   495,  1633,  2152,   498,
     495,   494,   278,   498,   366,   373,    36,  1609,   135,   413,
     494,   498,   402,   345,    23,    85,   413,  1973,  2182,  1975,
      29,  1977,    54,  1050,   667,    55,  2284,    54,  2393,  2227,
     413,  2185,   413,   442,   258,   367,  2234,   773,   345,  2700,
     402,   495,   378,   500,   413,   456,   151,   456,    92,   135,
     268,   268,   442,    36,  2590,   494,   388,  1693,    36,   496,
     367,   445,  1698,   498,   494,   494,   456,  1703,  1704,  1705,
    1706,   480,  1708,   494,    35,   105,   494,   452,   494,     9,
     442,   388,   411,   411,   820,   494,  1722,   823,   498,  2287,
     480,    11,  1728,  2629,   456,   411,   494,  2462,   494,  2297,
     836,   273,  1646,  2227,   494,  1132,   160,  1731,  1744,  1745,
    2234,   413,   180,   169,     8,  2422,   495,    11,   480,     3,
     494,   857,    16,    17,    18,   212,   135,   498,     8,  1411,
     376,    11,   494,   284,   498,   220,    16,    17,    18,   436,
      36,   494,   478,   173,  2209,  1781,   146,  1691,  2423,   485,
     486,   487,   488,   489,   490,   220,   268,   220,   289,   159,
     287,   495,   321,  2287,   164,  1706,   281,   197,   449,   403,
      93,   494,     8,  2297,   151,    11,   151,   175,   456,  1852,
      16,    17,    18,  2719,   268,   283,   283,  1850,   495,  1733,
     268,    36,    36,    35,   837,   495,  1740,    33,  1742,   492,
     198,   287,  1746,  1747,   492,  1868,   413,   413,   413,     6,
     413,   495,   212,   340,   169,   245,   495,   344,  1854,  2284,
     495,   495,   495,   253,   495,  2423,  1862,  1863,  1864,  1256,
    1866,   231,  1868,  1869,   496,   265,   234,  1873,  1874,  2546,
     495,  1866,   978,  1868,   495,   498,   373,   170,   495,   477,
     477,  2391,  2471,  2209,   340,   477,   495,   169,   344,   495,
     495,   413,   495,   494,  1866,  2463,  1868,   297,   293,   494,
     453,  1007,    36,   494,   494,   479,   284,   284,   287,   284,
     280,   204,  1918,   498,  2754,   239,   434,   373,   453,   289,
     288,   283,   442,  2524,   483,  2493,   219,   413,  2496,  2423,
    1936,   195,   268,  1939,  2539,   228,   494,  1943,  1944,  1945,
     151,  1947,   439,   198,   287,   345,   151,   151,   413,   413,
     413,   413,   216,   493,   495,  2497,   495,  1963,  2284,  1965,
     494,   340,   495,   456,   495,   344,   216,   367,   261,  2463,
     498,   281,  1978,  1979,  1980,  1981,  1982,  1983,  1984,  1985,
    1986,  1987,   283,   439,    36,   151,   151,   273,   388,   492,
     283,   495,   142,   169,   373,  2001,    11,  2003,  2476,  2493,
     164,   495,  2496,  2294,   495,   495,   169,  2013,   495,   402,
     216,   494,   453,   494,  1411,  2021,  2494,   169,  2024,   498,
     480,   285,   180,   495,   495,  2031,  2020,  2632,  1939,   495,
      76,     3,   284,  2039,  2544,   285,   494,  1050,   406,    50,
     408,   347,   441,    83,   151,  2587,   173,   494,   494,   423,
      36,   494,  1963,    79,   436,  2700,   498,   350,   428,   493,
     439,   429,  1976,  1715,   432,   493,  1172,  1978,  1979,  1980,
    1981,  1982,  1983,  1984,  1985,  1986,  1987,  2555,   495,   285,
     169,   494,     3,    94,  1998,   495,  1192,   495,  1194,  2524,
     494,   404,   495,  2528,   219,   292,   494,   219,  2699,   290,
    1752,    54,  2393,   494,   183,  2705,   494,     3,  2114,   120,
     495,  2117,  2118,  2119,  2120,  2625,  1768,   486,   502,  1132,
    2126,  2127,   505,  2129,   483,  2603,  2132,   456,  1234,   140,
    2136,   200,  2700,   144,  2140,   189,  1788,   273,   273,   483,
    2146,  2136,   413,   436,   413,  2140,   495,    36,   220,   268,
     106,   456,   494,   283,   165,   494,    36,   168,   493,   169,
     494,   667,   302,   219,  2136,  1817,   494,   494,  2140,  2175,
     455,  2462,     3,   184,   493,   495,    85,   495,   333,   131,
     494,  2187,   494,   220,   114,  2191,    36,   151,  1840,    73,
    2184,  2197,  2186,   121,   221,   494,   151,    36,  2524,   495,
      54,   355,  2528,    36,   355,   494,  2700,   494,   436,   486,
     494,  1317,   441,    73,     0,   498,  2222,   481,   482,   483,
      36,   485,   486,   487,   488,   489,   490,   188,   436,   423,
      16,   481,   482,   483,     3,   485,   486,   487,   488,   489,
     490,   221,  2156,  1256,  2158,    67,   403,   286,    34,    67,
     494,   498,    36,  2259,   357,   373,   483,   273,    44,   188,
     243,   494,   273,  2269,  2699,    36,    52,   423,     3,   494,
     281,   494,   286,  2279,  2268,   481,   482,   483,   286,   485,
     486,   487,   488,   489,   490,   494,   265,   283,   495,   354,
       9,   658,   495,   494,   341,   200,   283,    33,   665,   283,
     495,   494,   119,   434,   384,     9,     3,    22,     5,   495,
     333,   125,   333,   576,   325,  2321,  2322,  1009,  1715,     8,
    2326,  2702,    11,  2329,  1976,  2331,  2321,    16,    17,    18,
    2336,   837,  2778,  2339,  2531,  2341,  2331,  2753,  2344,  2741,
     824,  2336,  2446,  1631,  2339,  1643,  2013,  2353,  2354,  2321,
    2699,  1693,  2751,  1628,   521,  1752,  1975,  2697,   819,  2331,
    1937,  1578,   789,   764,  2336,  1237,  2372,  2339,  2600,  2505,
    2284,  1768,   811,  2699,   810,  2686,  1882,  2372,  1593,   746,
     547,   548,  1211,  2612,  1236,  2391,  2392,  2157,   813,  1609,
    1868,  1788,  2127,  2142,  2400,  2490,  1866,   564,  1411,  2590,
    2372,  2589,   769,  2607,   771,   772,  2608,  1380,  1093,  1093,
    1093,   108,   109,  1093,  2684,  2671,  2350,  2685,  2424,  2425,
    1817,  1169,  1581,  1419,  1527,  1309,  1524,  1173,  2436,  2817,
    2436,  2787,  2438,  2582,  2440,  1865,  1888,  2160,  2432,  2170,
     607,   608,   609,  1840,  1895,  1701,  1193,  2453,  1554,  2101,
    2456,   994,  2005,  2221,  1738,  1697,  2284,  1958,  1998,  1270,
    1973,  2456,  1377,  2457,  2497,  1637,  1194,  2187,  1936,  2368,
    2476,   838,  2629,  2696,   841,   842,    -1,    -1,    -1,    -1,
      -1,  2392,   649,  2489,  2456,    -1,    -1,    -1,  2494,   186,
     187,   658,    -1,    -1,  2489,    -1,    -1,  2503,   665,   666,
     667,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2514,  2423,
      -1,    -1,    -1,  2424,  2425,   682,  2522,  2489,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   216,    -1,  2440,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2544,    -1,
      -1,    -1,    -1,   710,  1050,    -1,    -1,    -1,    -1,  2555,
     247,   248,   249,   250,   251,   252,  2562,    -1,   255,   256,
      -1,    -1,   729,   730,   731,    -1,   733,    -1,    -1,  2563,
      -1,    -1,    -1,    -1,    -1,  2227,    -1,    -1,    -1,  1976,
      -1,    -1,  2234,    -1,  2590,    -1,    -1,   754,    -1,    -1,
      -1,    -1,  1698,  2599,    -1,  2590,   285,  2603,  1704,  1705,
      -1,  2607,  1708,  2514,   771,   772,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2620,    -1,  1722,    -1,  2590,  2625,
    2626,  2627,    -1,  2629,    -1,    -1,  1132,    -1,  2622,    -1,
      -1,    -1,    -1,    -1,  2629,  2287,   803,    -1,  2552,    -1,
     807,   808,    -1,    -1,    -1,  2297,    -1,  1014,  1015,    -1,
      -1,   818,    -1,     8,    -1,    -1,    11,  2629,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   363,   364,    -1,  2675,
     837,    -1,    -1,     8,    -1,    -1,    11,    -1,  2684,    -1,
    2686,    16,    17,    18,    -1,   471,    41,    -1,    -1,    -1,
    2696,    -1,    -1,    48,   861,   862,   863,    -1,    33,    -1,
      -1,    -1,  1715,    -1,  2101,    -1,  2712,  2713,    -1,    -1,
      -1,    -1,    -1,  2719,    -1,  2709,    -1,    -1,    73,  1086,
    1087,    -1,    -1,    -1,  2719,    -1,    -1,  1094,    -1,  1096,
    1097,  2737,    -1,    -1,   520,   521,    -1,    -1,    -1,  1752,
      -1,    -1,    -1,    -1,  1111,    -1,  1113,  2719,    -1,    -1,
    1256,    -1,    -1,    -1,    -1,  1768,  1862,  1863,  1864,  1126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2423,    -1,    -1,    -1,  1788,    -1,   474,   475,    -1,
      -1,  2787,    -1,    -1,    -1,   571,  2700,    -1,   574,   144,
     576,    -1,   481,   482,   483,    -1,   485,   486,   487,   488,
     489,   490,    -1,    -1,  1817,    -1,  2812,    -1,    -1,    -1,
    2816,  2463,  1918,    -1,    -1,    -1,    -1,    -1,    67,   174,
     987,    -1,    -1,    -1,    73,    -1,    -1,  1840,   995,    -1,
    2227,    -1,    -1,    -1,    -1,   190,    85,  2234,   146,    -1,
     195,  2493,  1009,    -1,  2496,    -1,    -1,    -1,    -1,    -1,
      -1,   159,    -1,  1220,  1221,    -1,   164,    -1,  1025,    -1,
      -1,    -1,    -1,    -1,    -1,   114,    -1,   116,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   230,   662,    -1,    -1,    -1,
      -1,   216,    -1,  1050,    -1,    -1,    -1,    -1,    -1,    -1,
    2287,    -1,    -1,    -1,    -1,  2001,     8,  2003,    -1,    11,
    2297,    -1,    -1,    -1,   212,  1411,    -1,    -1,  1075,  1276,
      -1,    -1,    -1,   699,  1081,    -1,    -1,  1084,  2024,  1286,
      -1,  1088,  1289,   231,   173,    -1,    -1,    -1,    -1,    41,
     285,    -1,    -1,    -1,    -1,  1102,    48,    -1,  1105,  1106,
    1107,  1108,    -1,    -1,     0,    -1,    -1,   733,  1115,  1116,
     285,    -1,    -1,   202,    -1,    -1,   667,    -1,    -1,    -1,
    1127,    73,    -1,  1976,    -1,  1132,  1133,  1134,  1135,  1136,
    1137,    -1,   280,    -1,  1141,  1142,    -1,    -1,    -1,  1146,
      -1,   289,    -1,  1150,    -1,    -1,  1153,  1154,  1155,  1156,
    1157,  1158,  1159,  1160,  1161,  1362,    -1,  1164,   667,    -1,
      -1,  1168,    -1,    -1,  1171,    -1,  1173,    -1,  1175,    -1,
    1377,  2117,  2118,  2119,  2120,   801,   802,    -1,   804,   268,
      -1,    -1,    -1,   378,   273,    -1,  2423,    -1,    -1,  1196,
      -1,    -1,   144,  1400,    -1,    -1,    92,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1211,    -1,    -1,     8,  2700,    -1,
      11,    -1,    -1,  1220,  1221,    16,    17,    18,    -1,    -1,
      -1,    -1,   174,    -1,    -1,    -1,  2463,   316,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   190,    -1,
      41,    -1,    -1,   195,   333,    -1,    -1,    48,  2101,  1256,
     146,    -1,    -1,    -1,    -1,  1262,  2493,  1264,    -1,  2496,
      -1,    -1,    -1,   159,    -1,    -1,    -1,    -1,   164,    -1,
      -1,    -1,    73,   169,    -1,    -1,    -1,    -1,   230,    -1,
     428,    -1,    -1,   478,   180,    -1,   837,   183,    -1,    -1,
     485,   486,   487,   488,   489,   490,  1303,    -1,    -1,  1306,
    1307,    -1,  1309,    -1,    -1,    -1,   481,   482,   483,    -1,
     485,   486,   487,   488,   489,   490,   212,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   837,    -1,
      -1,    -1,    -1,   285,    -1,   231,  1343,    -1,    -1,  1346,
     429,    -1,    -1,    -1,   492,    -1,    -1,   495,   496,    -1,
      -1,    -1,    -1,    -1,    -1,  1362,    -1,    -1,  1565,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1715,
    1377,    -1,  1379,   174,  2227,    -1,    -1,    -1,  1585,  1586,
      -1,  2234,  1008,    -1,   280,    -1,    -1,   283,    -1,   190,
      -1,    -1,    -1,   289,   195,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1411,    -1,  1752,  2353,  2354,    -1,
    1417,  1418,    -1,    -1,    -1,    -1,  1423,    -1,    -1,    -1,
      -1,    -1,  1768,    -1,    -1,    -1,   378,    -1,    -1,   230,
      -1,    -1,    -1,    -1,  2287,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1788,    -1,  2297,    -1,  1072,    -1,    -1,    -1,
      -1,   347,    -1,    -1,  2400,    -1,  1463,  1464,  1465,    -1,
      -1,  1468,    -1,  2700,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1817,    -1,    -1,  1481,  1482,  1483,  1484,    -1,    -1,
       8,    -1,  1489,    11,   285,   108,   109,    -1,    -1,    -1,
    2436,    -1,    -1,    -1,  1840,    -1,    -1,  1504,  1505,  1050,
      -1,    -1,  1509,    -1,    -1,    -1,   402,  2453,    -1,    -1,
      -1,    -1,    -1,    41,    -1,    -1,  1523,  1143,    -1,  1526,
      48,  1528,    -1,    -1,    -1,    -1,   478,    -1,    -1,    -1,
      -1,    -1,   428,   485,   486,   487,   488,   489,   490,    -1,
     436,  1050,  1549,    -1,    -1,    73,  1753,  1754,    -1,    -1,
      -1,    -1,    -1,    -1,  1561,     8,    -1,   453,    11,   455,
     456,    -1,    -1,   186,   187,    -1,    -1,    -1,    -1,    -1,
    2423,  1578,   108,   109,    -1,    -1,  2522,   378,    -1,    -1,
      -1,  1132,    -1,    -1,    -1,    -1,  1593,    -1,    41,    -1,
      -1,    -1,    -1,    -1,    -1,    48,   492,    -1,    -1,   495,
     496,   497,  1609,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2463,    -1,    -1,    -1,    -1,  1241,  2562,    -1,  1625,    -1,
      73,    -1,    -1,  1132,   247,   248,   249,   250,   251,   252,
    1976,    -1,   255,   256,    -1,  1642,  1643,  1644,    -1,    -1,
    2493,    -1,    -1,  2496,    -1,    -1,   174,    -1,    -1,    -1,
     186,   187,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   190,    -1,    -1,    -1,    -1,   195,    -1,    -1,
      -1,    -1,    -1,    -1,  2620,    -1,  1683,   478,    -1,    -1,
     481,   482,   483,    -1,   485,   486,   487,   488,   489,   490,
      -1,   144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   230,    -1,    -1,  1256,    -1,  1333,  1715,    -1,
      -1,   247,   248,   249,   250,   251,   252,    -1,    -1,   255,
     256,   174,    -1,    -1,    -1,    -1,  1733,    -1,    -1,    -1,
      -1,  1738,    -1,    -1,    -1,    -1,    -1,   190,    -1,    -1,
     363,   364,   195,    -1,    -1,  1752,    -1,  1256,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2101,    -1,   285,  1765,    -1,
      -1,  1768,    -1,    -1,    -1,    -1,  2712,    -1,  1775,  1976,
      -1,    -1,  1779,    -1,    -1,  1782,    -1,   230,    -1,    -1,
      -1,  1788,  1789,  1790,  1791,  1792,    -1,    -1,  1795,  1796,
    1797,  1798,  1799,  1800,  1801,  1802,  1803,  1804,    -1,    -1,
      -1,  1808,  1809,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1817,    -1,    -1,    -1,    -1,  1822,    -1,    -1,    -1,    -1,
      -1,  1828,    -1,    -1,  1831,    -1,  1833,   363,   364,    -1,
    2037,    -1,   285,  1840,  1841,    -1,    -1,  1844,  1845,  1465,
      -1,  2787,  1849,  1850,    -1,    -1,    -1,  2700,    -1,    -1,
     378,   474,   475,    -1,    -1,    -1,    -1,    -1,    -1,  1866,
    1411,  1868,    -1,    -1,    -1,    -1,  2812,    -1,    -1,    -1,
    2816,   494,  1879,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2227,     8,  1509,    -1,    11,    -1,    -1,  2234,    -1,
      16,    17,    18,   171,    -1,    -1,    -1,   175,    -1,    -1,
      -1,  1527,  1411,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1921,    41,    -1,  1543,    -1,    -1,
     198,    -1,    48,    -1,    -1,   378,    -1,    -1,    -1,    -1,
      -1,  1938,    -1,    -1,    -1,  1561,    -1,    -1,   474,   475,
      -1,  2287,    -1,    -1,    -1,    -1,    -1,    73,  1574,    -1,
     478,  2297,    -1,    -1,    -1,    -1,   234,   485,   486,   487,
     488,   489,   490,   241,     8,    -1,  1973,    11,  1975,  1976,
    1977,    -1,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1609,    -1,    -1,    -1,    -1,  1614,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   547,   548,  2216,
     288,    -1,    -1,    -1,  2221,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   478,    -1,    -1,  2235,  2236,
      -1,     0,   485,   486,   487,   488,   489,   490,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   323,  2053,    -1,   174,    -1,
      19,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      29,    -1,    31,    32,   190,    -1,    -1,   607,   608,   195,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2423,    47,    -1,
      -1,   359,    -1,    -1,    -1,    -1,    -1,    56,  2095,  2096,
     216,   217,    -1,  2100,  2101,    -1,    -1,    -1,  2105,    68,
      -1,  2108,  2109,    -1,   230,  1731,  2113,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    -1,    -1,  2463,    -1,    -1,
      -1,    90,    -1,    92,    -1,    -1,   666,    -1,   406,  2136,
     408,    -1,    -1,  2140,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   682,    -1,    -1,   271,    -1,  2493,    -1,    -1,
    2496,   429,    -1,    -1,   432,   124,    -1,    -1,    -1,   285,
      -1,    -1,    -1,    -1,  1715,    -1,   135,    -1,    -1,    -1,
     710,    -1,   216,   142,    -1,  2182,    -1,    -1,    -1,    -1,
      -1,   150,    -1,   152,   153,    -1,    -1,    -1,    -1,   729,
     730,   731,    -1,   733,    -1,    -1,   165,    -1,    -1,    -1,
      -1,  1752,  2209,    -1,    -1,    -1,  1715,  2414,  2415,    -1,
      -1,  2218,    -1,    -1,   754,    -1,  2423,  1768,    -1,    -1,
    2227,    -1,    -1,    -1,  1850,   194,    -1,  2234,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1788,    -1,    -1,
    1866,   285,  1868,  1752,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   378,    -1,    -1,    -1,    -1,    -1,    -1,  1768,
      -1,    -1,    -1,   803,   233,    -1,  1817,   807,   808,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2284,    -1,  1788,
    2287,    -1,    -1,    -1,    -1,    -1,    -1,  2294,    -1,  1840,
    2297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2305,  2306,
      -1,    -1,  2309,    -1,    -1,    -1,    -1,    -1,  1817,    -1,
      -1,    -1,    -1,    -1,  2321,    -1,    -1,    -1,    -1,    -1,
      -1,   861,   862,   863,  2331,    -1,    -1,    -1,    -1,  2336,
      -1,  1840,  2339,    -1,    -1,    -1,    -1,    -1,    -1,  2346,
    2347,   310,    -1,    -1,   313,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   478,    -1,  2700,   481,   482,   483,    -1,   485,
     486,   487,   488,   489,   490,  2372,    -1,  2374,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   344,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   352,    -1,    -1,  2393,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2020,    -1,    -1,   366,    -1,    -1,
      -1,    -1,    -1,    -1,   373,    -1,    -1,    -1,   377,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2423,    -1,    -1,   388,
     747,    -1,    -1,    -1,    -1,  1976,    -1,    -1,    -1,    36,
      -1,    -1,    -1,   402,    -1,    -1,    -1,   481,   482,   483,
      -1,   485,   486,   487,   488,   489,   490,   987,    55,  2456,
      -1,    -1,    -1,    -1,    -1,  2462,  2463,    -1,    -1,   786,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1976,   437,    -1,
      -1,    -1,    -1,   442,    -1,    -1,    -1,    -1,  2485,    -1,
      -1,    -1,  2489,    -1,    -1,    -1,  2493,   456,    -1,  2496,
    2497,    -1,    -1,  2700,    -1,    -1,    -1,    -1,   105,   106,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,  2515,    -1,
    2136,   480,     8,    -1,  2140,    11,    -1,  2524,    -1,    -1,
      -1,  2528,  2529,    -1,    -1,   494,    -1,    -1,   497,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   866,
      -1,  1081,    -1,    -1,   871,    41,    -1,    -1,    -1,    -1,
    2101,    -1,    48,    -1,    -1,    -1,    -1,    -1,  2184,    -1,
    2186,    -1,  1102,    -1,    -1,  1105,   173,    -1,  1108,    -1,
      -1,    -1,    -1,     0,    -1,  1115,  1116,    73,    -1,    -1,
    2587,    -1,    -1,  2590,    -1,    -1,    -1,  1127,    -1,    -1,
     197,    -1,  2101,  1133,  1134,  1135,  1136,    -1,    -1,    -1,
      -1,  1141,  1142,    -1,    -1,  2612,  1146,    -1,    -1,    -1,
    1150,    -1,    -1,  1153,  1154,  1155,  1156,  1157,  1158,  1159,
    1160,  1161,  2629,    -1,  1164,    -1,    -1,    -1,  1168,    -1,
      -1,  1171,    -1,  1173,    -1,  1175,    -1,    -1,   245,  2646,
      -1,    -1,  2268,    -1,    -1,    -1,   253,    -1,   144,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1196,    -1,   265,    -1,
      -1,   268,    -1,  2670,  2671,    92,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2227,    -1,   174,    -1,
    1220,  1221,    -1,  2234,    -1,    -1,    -1,    -1,    -1,    -1,
     297,    -1,  2699,  2700,   190,    -1,    -1,    -1,    -1,   195,
      -1,    -1,    -1,    -1,    -1,  2331,    -1,    -1,    -1,    -1,
    2336,    -1,  2719,  2339,  2721,    -1,    -1,    -1,  2227,   146,
      -1,    -1,    -1,    -1,    -1,  2234,    -1,    -1,    -1,    -1,
      -1,    -1,   159,    -1,   230,    -1,  2287,   164,   345,    -1,
      -1,    -1,   169,    -1,    -1,    -1,  2297,    -1,    -1,    -1,
      -1,    -1,  1079,   180,    -1,    -1,   183,    -1,    -1,    -1,
     367,    -1,    -1,  1303,    -1,    -1,  1306,  1307,    -1,  1309,
      -1,    -1,    -1,    -1,  1101,    -1,    -1,    -1,  2287,  1106,
      -1,   388,  2789,   390,    -1,   212,   393,    -1,  2297,   285,
    1117,  1118,  1119,    -1,  1121,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1343,   231,    -1,  2432,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2457,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1379,
      -1,     8,    -1,  1170,    11,    -1,    -1,    -1,    -1,    16,
      17,    18,    -1,   280,    -1,    -1,   283,    -1,    -1,    -1,
      -1,    -1,   289,  2489,    -1,    -1,    33,    -1,    -1,    -1,
       8,  2497,  2423,    11,    -1,    -1,     0,    -1,  1418,    -1,
    1207,    -1,   378,  1423,    -1,    -1,    -1,   494,    -1,    -1,
      -1,    -1,  1219,    -1,    -1,    -1,    -1,  1224,    -1,    -1,
      -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,    -1,    -1,
      48,    -1,  2463,     8,  2423,    -1,    11,    -1,    -1,    -1,
     347,    16,    17,    18,    -1,  1465,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    73,    -1,  2563,    33,    -1,
      -1,  1481,  2493,  1483,  1484,  2496,    41,    -1,    -1,  1489,
      -1,    -1,    -1,    48,  2463,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,    -1,
      -1,    -1,    -1,    -1,    -1,   402,    -1,    -1,    73,    -1,
      -1,    -1,   478,  1523,  2493,    -1,  1526,  2496,  1528,   485,
     486,   487,   488,   489,   490,    -1,  2622,    -1,    -1,    -1,
      -1,   428,    -1,    -1,    -1,    -1,   144,    -1,    -1,   436,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   146,    -1,    -1,    -1,   453,    -1,   455,   456,
      -1,    -1,    -1,    -1,    -1,   159,   174,    -1,  1578,    -1,
     164,    -1,    -1,    -1,    -1,   169,    -1,    -1,    -1,   216,
      -1,    -1,   190,  1593,    -1,    -1,   180,   195,    -1,   183,
      -1,    -1,    -1,    -1,     8,   492,    -1,    11,   495,   496,
     497,    -1,    16,    17,    18,    -1,    -1,    -1,    -1,   174,
      -1,    -1,    -1,  2709,    -1,  1625,    -1,    -1,   212,    33,
      -1,    -1,   230,    -1,  1421,   190,    -1,    41,    -1,    -1,
     195,    -1,    -1,    -1,    48,    -1,    -1,   231,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1444,   285,    -1,
      -1,   216,   217,    -1,    -1,    -1,    -1,    -1,    -1,    73,
      -1,    -1,    -1,    -1,  1461,   230,  1463,  1464,    -1,  1466,
      -1,  1468,    -1,  1683,    -1,    -1,  1473,   285,    -1,  2700,
      -1,    -1,    -1,  1480,    -1,    -1,   280,    -1,  1485,   283,
      -1,    -1,    -1,    -1,  1491,   289,    -1,    -1,  1495,  1496,
    1497,  1498,    -1,   268,    -1,    -1,   271,  1504,  1505,    -1,
    1507,  1508,    -1,    23,    -1,    -1,    -1,    -1,    -1,    29,
     285,  2700,  1519,   288,    -1,  1522,    36,    -1,    -1,    -1,
      -1,    -1,    -1,  1530,  1531,  1532,  1533,  1534,  1535,  1536,
    1537,  1538,  1539,    -1,     3,    55,    -1,    -1,    -1,     8,
    1547,    -1,    11,   347,  1551,  1765,    -1,    16,    17,    18,
     174,    -1,    -1,    -1,    -1,  1775,    -1,    -1,    -1,  1779,
     378,    -1,  1782,    -1,    33,  1572,   190,    36,    -1,    -1,
      -1,   195,    41,    -1,    -1,    -1,    -1,    -1,    -1,    48,
      -1,    -1,    -1,    -1,    -1,   105,    -1,    -1,  1808,  1809,
      -1,    -1,   216,   217,    -1,    -1,    -1,    -1,   402,    -1,
      -1,    -1,    -1,   378,    73,    -1,   230,    -1,  1828,    -1,
      -1,  1831,    -1,  1833,    -1,   135,    -1,    -1,    -1,    -1,
      -1,  1841,    -1,    -1,   428,    -1,    -1,    -1,    -1,  1849,
    1850,    -1,   436,    -1,   481,   482,   483,    -1,   485,   486,
     487,   488,   489,   490,   268,    -1,    -1,   271,    -1,   453,
      -1,   455,   456,    -1,    -1,    -1,    -1,    -1,    -1,  1879,
     478,   285,    -1,    -1,   288,    -1,    -1,   485,   486,   487,
     488,   489,   490,    -1,    -1,    -1,    -1,   197,    -1,  1686,
    1687,  1688,    -1,    -1,    -1,    -1,    -1,    -1,   492,    -1,
      -1,   495,   496,   497,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1921,    -1,   478,    -1,   174,   481,   482,   483,    -1,
     485,   486,   487,   488,   489,   490,    -1,  1724,  1938,    -1,
      -1,   190,    -1,   498,    -1,   245,   195,    -1,    -1,    -1,
      -1,    -1,    -1,   253,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   265,    -1,   216,   217,    -1,
      -1,    -1,    -1,    -1,   378,    -1,    -1,  1764,    -1,    -1,
      -1,   230,    -1,  1770,    -1,    -1,    -1,   287,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   297,  1785,  1786,
    1787,    -1,  1789,  1790,  1791,  1792,    -1,    -1,  1795,  1796,
    1797,  1798,  1799,  1800,  1801,  1802,  1803,  1804,  1805,   268,
      -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,  1825,   288,
     340,    -1,  1829,  1830,   344,   345,    21,    -1,    -1,    -1,
      -1,    -1,    -1,  2053,    -1,    -1,  1843,  1844,  1845,  1846,
      -1,  1848,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,
      -1,    -1,    -1,   373,   478,    -1,    -1,   481,   482,   483,
      -1,   485,   486,   487,   488,   489,   490,    -1,   388,    -1,
      -1,   495,    -1,    -1,    -1,  2095,  2096,    -1,    -1,    74,
    2100,    -1,    -1,    -1,    -1,  2105,    -1,    -1,  2108,  2109,
      -1,    -1,    -1,  2113,    89,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   439,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,  1940,    -1,    -1,    16,    17,    18,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     145,    -1,    -1,    33,    -1,    -1,    -1,     8,    -1,   154,
      11,    41,  2182,    -1,    -1,    16,    17,    18,    48,    -1,
      -1,   166,    -1,    -1,    -1,    -1,   171,    -1,    -1,    -1,
      -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      41,    -1,    -1,    73,    -1,    -1,    -1,    48,  2218,    -1,
      -1,    -1,    -1,   198,    -1,    -1,    -1,    -1,    -1,   478,
      -1,    -1,   481,   482,   483,    -1,   485,   486,   487,   488,
     489,   490,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   241,  2054,    -1,   244,
      -1,  2058,  2059,    -1,  2061,    -1,    -1,  2064,  2065,  2066,
    2067,    -1,    -1,    -1,  2071,  2072,  2073,  2074,  2075,  2076,
    2077,  2078,  2079,  2080,  2081,  2082,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2305,  2306,  2094,    -1,  2309,
    2097,    -1,  2099,    -1,   174,    -1,  2103,    -1,    -1,  2106,
    2107,    -1,    -1,  2110,  2111,    -1,    -1,    -1,    -1,    -1,
     190,    -1,    -1,   308,    -1,   195,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   174,    -1,    -1,  2346,  2347,    -1,   324,
      -1,    -1,    -1,    -1,    -1,    -1,   216,   217,    -1,   190,
      -1,    -1,    -1,    -1,   195,    -1,  2153,    -1,    -1,    -1,
     230,    -1,    -1,    -1,  2374,    -1,    -1,    -1,    -1,    -1,
      -1,   356,    -1,    -1,   359,   216,   217,    -1,    -1,    -1,
      -1,    -1,   367,    -1,  2181,   370,    -1,    -1,    -1,   230,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2194,   268,    -1,
      -1,   271,    -1,    -1,    -1,   390,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   285,    -1,   402,   288,    -1,
      -1,    -1,    -1,    -1,   409,    -1,    -1,   268,    -1,    -1,
     271,    -1,    -1,   418,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   449,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2485,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2497,    -1,    -1,
      -1,    -1,    -1,  2290,    -1,    -1,    -1,  2294,    -1,    -1,
      -1,    -1,  2299,  2300,  2301,  2515,    -1,  2304,   378,    -1,
    2307,  2308,    -1,    -1,    -1,  2312,    -1,    -1,    -1,  2529,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2393,    -1,    -1,    -1,
      -1,    -1,  2612,    -1,    -1,    -1,    -1,    -1,   478,    -1,
      -1,   481,   482,   483,  2411,   485,   486,   487,   488,   489,
     490,    -1,    -1,    -1,    -1,   495,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2646,   478,    -1,    -1,
     481,   482,   483,    -1,   485,   486,   487,   488,   489,   490,
      -1,    -1,    -1,    -1,   495,    -1,    -1,    -1,    -1,    -1,
    2670,  2671,    -1,    -1,  2461,  2462,    -1,    -1,    -1,  2466,
    2467,  2468,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2501,  2502,    -1,    -1,    -1,    -1,
      -1,  2721,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2521,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2532,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2789,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2584,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2602,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2624,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2638,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
    2707,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,  2724,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    74,    -1,
      -1,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,    -1,
     126,   127,   128,   129,   130,    -1,   132,   133,   134,   135,
     136,    -1,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
      -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,    -1,
      -1,   227,   228,   229,   230,    -1,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,    -1,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
      -1,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,   400,   401,    -1,   403,   404,   405,
     406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,   435,
      -1,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,    -1,    -1,    -1,    -1,    -1,    -1,   485,
     486,   487,    -1,    -1,    -1,    -1,    -1,    -1,   494,   495,
      -1,    -1,    -1,   499,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    74,    -1,    -1,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
      -1,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,    -1,    -1,   227,   228,
     229,   230,    -1,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,    -1,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    -1,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,   435,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,   446,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
      -1,   480,    -1,    -1,    -1,    -1,   485,   486,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   494,   495,    -1,    -1,    -1,
     499,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    74,    -1,    -1,    77,    78,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
      -1,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,   124,    -1,   126,   127,   128,   129,    -1,    -1,
     132,   133,   134,   135,   136,    -1,    -1,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,    -1,   170,   171,
     172,   173,   174,   175,    -1,   177,    -1,    -1,    -1,   181,
     182,    -1,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,    -1,    -1,   227,   228,   229,   230,    -1,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,    -1,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,    -1,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,    -1,   307,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,   317,   318,   319,   320,   321,
      -1,    -1,   324,   325,   326,   327,   328,   329,   330,   331,
     332,    -1,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,    -1,   411,
     412,    -1,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,   435,    -1,   437,   438,   439,   440,   441,
     442,   443,    -1,   445,   446,   447,    -1,   449,   450,   451,
      -1,    -1,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,    -1,   480,    -1,
      -1,    -1,    -1,   485,   486,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   494,    -1,    -1,    -1,    -1,   499,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    74,
      -1,    -1,    77,    78,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    90,    91,    -1,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
      -1,   126,   127,   128,   129,    -1,    -1,   132,   133,   134,
     135,   136,    -1,    -1,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,   169,   170,   171,   172,   173,   174,
     175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
      -1,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
      -1,   226,   227,   228,   229,   230,    -1,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,    -1,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,    -1,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,   317,   318,   319,   320,   321,    -1,    -1,   324,
     325,   326,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,    -1,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,   400,   401,    -1,   403,   404,
     405,   406,   407,   408,   409,    -1,   411,   412,    -1,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,    -1,    -1,   430,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,    -1,
     445,   446,   447,    -1,   449,   450,   451,    -1,    -1,   454,
      -1,    -1,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,    -1,    -1,    -1,    -1,    -1,    -1,
     485,   486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,
      -1,    -1,    -1,    -1,   499,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    -1,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    -1,
      68,    69,    70,    71,    72,    -1,    74,    -1,    -1,    77,
      78,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    90,    91,    -1,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,   124,    -1,   126,   127,
     128,   129,    -1,    -1,   132,   133,   134,   135,   136,    -1,
      -1,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,    -1,   170,   171,   172,   173,   174,   175,    -1,   177,
      -1,    -1,    -1,   181,   182,    -1,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,    -1,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,    -1,    -1,   227,
     228,   229,   230,    -1,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,    -1,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,    -1,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,   317,
     318,   319,   320,   321,    -1,    -1,   324,   325,   326,   327,
     328,   329,   330,   331,   332,    -1,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,    -1,   400,   401,    -1,   403,   404,   405,   406,   407,
     408,   409,    -1,   411,   412,    -1,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,   432,   433,   434,   435,    -1,   437,
     438,   439,   440,   441,   442,   443,    -1,   445,   446,   447,
      -1,   449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,    -1,    -1,    -1,    -1,    -1,    -1,   485,   486,   487,
      -1,    -1,    -1,    -1,    -1,    -1,   494,    -1,    -1,    -1,
      -1,   499,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    74,    -1,    -1,    77,    78,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,    -1,   126,   127,   128,   129,    -1,
      -1,   132,   133,   134,   135,   136,    -1,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,    -1,   170,
     171,   172,   173,   174,   175,    -1,   177,    -1,    -1,    -1,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,    -1,    -1,   227,   228,   229,   230,
      -1,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,    -1,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,    -1,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,    -1,   403,   404,   405,   406,   407,   408,   409,    -1,
     411,   412,    -1,    -1,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,   440,
     441,   442,   443,    -1,   445,   446,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,    -1,    -1,
      -1,    -1,    -1,    -1,   485,   486,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   494,    -1,    -1,    -1,    -1,   499,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      74,    -1,    -1,    77,    78,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,    -1,   170,   171,   172,   173,
     174,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,    -1,    -1,   227,   228,   229,   230,    -1,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,    -1,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
     404,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,   435,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,   446,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,    -1,    -1,    -1,
      -1,   485,   486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     494,   495,    -1,    -1,    -1,   499,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    74,    -1,    -1,
      77,    78,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    89,    90,    91,    -1,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,    -1,
     117,   118,   119,   120,   121,   122,    -1,   124,    -1,   126,
     127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
      -1,    -1,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,    -1,   170,   171,   172,   173,   174,   175,    -1,
     177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,    -1,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,    -1,    -1,
     227,   228,   229,   230,    -1,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,    -1,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,    -1,
     307,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
     317,   318,   319,   320,   321,    -1,    -1,   324,   325,   326,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
      -1,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,    -1,   403,   404,   405,   406,
     407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,   440,   441,   442,   443,    -1,   445,   446,
     447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,    -1,    -1,    -1,    -1,    -1,    -1,   485,   486,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,   495,    -1,
      -1,    -1,   499,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
      30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    -1,    68,    69,
      70,    71,    72,    -1,    74,    -1,    -1,    77,    78,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      90,    91,    -1,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,   124,    -1,   126,   127,   128,   129,
      -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,    -1,
     170,   171,   172,   173,   174,   175,    -1,   177,    -1,    -1,
      -1,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,    -1,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,    -1,    -1,   227,   228,   229,
     230,    -1,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,    -1,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,    -1,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,    -1,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,   317,   318,   319,
     320,   321,    -1,    -1,   324,   325,   326,   327,   328,   329,
     330,   331,   332,    -1,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,    -1,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,    -1,
     400,   401,    -1,   403,   404,   405,   406,   407,   408,   409,
      -1,   411,   412,    -1,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,    -1,
     430,   431,   432,   433,   434,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,    -1,   449,
     450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,    -1,
      -1,    -1,    -1,    -1,    -1,   485,   486,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   494,    -1,    -1,    -1,    -1,   499,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    74,    -1,    -1,    77,    78,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,    -1,   117,   118,   119,   120,   121,   122,
      -1,   124,    -1,   126,   127,   128,   129,    -1,    -1,   132,
     133,   134,   135,   136,    -1,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,   169,   170,   171,   172,
     173,   174,   175,    -1,   177,    -1,    -1,    -1,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,    -1,    -1,   227,   228,   229,   230,    -1,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
      -1,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,    -1,   307,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,   321,    -1,
      -1,   324,   325,   326,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    -1,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,   400,   401,    -1,
     403,   404,   405,   406,   407,   408,   409,    -1,   411,   412,
      -1,    -1,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,   440,   441,   442,
     443,    -1,   445,   446,   447,    -1,   449,   450,   451,    -1,
      -1,   454,    -1,    -1,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,    -1,    -1,    -1,    -1,
      -1,    -1,   485,   486,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   494,    -1,    -1,    -1,    -1,   499,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    74,    -1,
      -1,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,    -1,
     126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
     136,    -1,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
      -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,    -1,
      -1,   227,   228,   229,   230,    -1,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,    -1,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
      -1,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,   400,   401,    -1,   403,   404,   405,
     406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,   435,
      -1,   437,   438,   439,   440,   441,   442,   443,    -1,   445,
     446,   447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,    -1,    -1,    -1,    -1,    -1,    -1,   485,
     486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,    -1,
      -1,    -1,    -1,   499,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    74,    -1,    -1,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
      -1,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,    -1,    -1,   227,   228,
     229,   230,    -1,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,    -1,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    -1,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,   435,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,   446,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
      -1,    -1,    -1,    -1,    -1,    -1,   485,   486,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   494,    -1,    -1,    -1,    -1,
     499,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    74,    -1,    -1,    77,    78,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
      -1,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,   124,    -1,   126,   127,   128,   129,    -1,    -1,
     132,   133,   134,   135,   136,    -1,    -1,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,    -1,   170,   171,
     172,   173,   174,   175,    -1,   177,    -1,    -1,    -1,   181,
     182,    -1,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,    -1,    -1,   227,   228,   229,   230,    -1,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,    -1,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,    -1,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,    -1,   307,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,   317,   318,   319,   320,   321,
      -1,    -1,   324,   325,   326,   327,   328,   329,   330,   331,
     332,    -1,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
      -1,   403,   404,   405,   406,   407,   408,   409,    -1,   411,
     412,    -1,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,   435,    -1,   437,   438,   439,   440,   441,
     442,   443,    -1,   445,   446,   447,    -1,   449,   450,   451,
      -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,    -1,    -1,    -1,
      -1,    -1,    -1,   485,   486,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   494,    -1,    -1,    -1,    -1,   499,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    74,
      -1,    -1,    77,    78,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    90,    91,    -1,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
      -1,   126,   127,   128,   129,    -1,    -1,   132,   133,   134,
     135,   136,    -1,    -1,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,    -1,   170,   171,   172,   173,   174,
     175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
      -1,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
      -1,    -1,   227,   228,   229,   230,    -1,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,    -1,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,    -1,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,   317,   318,   319,   320,   321,    -1,    -1,   324,
     325,   326,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,    -1,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,   400,   401,    -1,   403,   404,
     405,   406,   407,   408,   409,    -1,   411,   412,    -1,    -1,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,    -1,    -1,   430,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,    -1,
     445,   446,   447,    -1,   449,   450,   451,    -1,    -1,   454,
      -1,    -1,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,    -1,    -1,    -1,    -1,    -1,    -1,
     485,   486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,
      -1,    -1,    -1,    -1,   499,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    -1,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    -1,
      68,    69,    70,    71,    72,    -1,    74,    -1,    -1,    77,
      78,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    90,    91,    -1,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,   124,    -1,   126,   127,
     128,   129,    -1,    -1,   132,   133,   134,   135,   136,    -1,
      -1,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,    -1,   170,   171,   172,   173,   174,   175,    -1,   177,
      -1,    -1,    -1,   181,   182,    -1,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,    -1,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,    -1,    -1,   227,
     228,   229,   230,    -1,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,    -1,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,    -1,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,   317,
     318,   319,   320,   321,    -1,    -1,   324,   325,   326,   327,
     328,   329,   330,   331,   332,    -1,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,    -1,   400,   401,    -1,   403,   404,   405,   406,   407,
     408,   409,    -1,   411,   412,    -1,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,   432,   433,   434,   435,    -1,   437,
     438,   439,   440,   441,   442,   443,    -1,   445,   446,   447,
      -1,   449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,    -1,    -1,    -1,    -1,    -1,    -1,   485,   486,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   494,    -1,    -1,    -1,
      -1,   499,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    74,    -1,    -1,    77,    78,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,    -1,   126,   127,   128,   129,    -1,
      -1,   132,   133,   134,   135,   136,    -1,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,    -1,   170,
     171,   172,   173,   174,   175,    -1,   177,    -1,    -1,    -1,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,    -1,    -1,   227,   228,   229,   230,
      -1,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,    -1,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,    -1,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,    -1,   403,   404,   405,   406,   407,   408,   409,    -1,
     411,   412,    -1,    -1,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,   440,
     441,   442,   443,    -1,   445,   446,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,    -1,    -1,
      -1,    -1,    -1,    -1,   485,   486,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   494,    -1,    -1,    -1,    -1,   499,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      74,    -1,    -1,    77,    78,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,    -1,   170,   171,   172,   173,
     174,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,    -1,    -1,   227,   228,   229,   230,    -1,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,    -1,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
     404,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,   435,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,   446,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   485,   486,    -1,    -1,     3,     4,     5,     6,     7,
     494,     9,    10,    -1,    -1,   499,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    -1,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    -1,
      68,    69,    70,    71,    72,    -1,    74,    -1,    -1,    77,
      78,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    90,    91,    -1,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,    -1,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,   124,    -1,   126,   127,
     128,   129,    -1,    -1,   132,   133,   134,   135,   136,    -1,
      -1,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,    -1,   170,   171,   172,   173,   174,   175,    -1,   177,
      -1,    -1,    -1,   181,   182,    -1,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,    -1,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,    -1,    -1,   227,
     228,   229,   230,    -1,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,    -1,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
      -1,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,    -1,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,   317,
     318,   319,   320,   321,    -1,    -1,   324,   325,   326,   327,
     328,   329,   330,   331,   332,    -1,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,    -1,   400,   401,    -1,   403,   404,   405,   406,   407,
     408,   409,    -1,   411,   412,    -1,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,   432,   433,   434,   435,    -1,   437,
     438,   439,   440,   441,   442,   443,    -1,   445,   446,   447,
      -1,   449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   485,   486,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   494,    -1,    -1,    -1,
      -1,   499,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    74,    -1,    -1,    77,    78,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,    -1,   126,   127,   128,   129,    -1,
      -1,   132,   133,   134,   135,   136,    -1,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,    -1,   170,
     171,   172,   173,   174,   175,    -1,   177,    -1,    -1,    -1,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,    -1,   217,   218,   219,   220,
     221,   222,   223,   224,    -1,    -1,   227,   228,   229,   230,
      -1,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,    -1,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,    -1,   267,    -1,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,    -1,   403,   404,   405,   406,   407,   408,   409,    -1,
     411,   412,    -1,    -1,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,   440,
     441,   442,   443,    -1,   445,   446,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   485,   486,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   494,    -1,    -1,    -1,    -1,   499,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      74,    -1,    -1,    77,    78,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,    -1,   170,   171,   172,   173,
     174,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,   219,   220,   221,   222,   223,
     224,    -1,    -1,   227,   228,   229,   230,    -1,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,    -1,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,    -1,   272,   273,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
     404,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,   435,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,   446,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,    -1,    -1,    -1,
      -1,   485,   486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     494,    -1,    -1,    -1,    -1,   499,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
      47,    -1,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    74,    -1,    -1,
      77,    78,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    89,    90,    91,    -1,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,    -1,
     117,   118,   119,   120,   121,   122,    -1,   124,    -1,   126,
     127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
      -1,    -1,   139,   140,   141,    -1,   143,    -1,   145,    -1,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,    -1,   170,   171,   172,   173,    -1,   175,    -1,
     177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,   186,
     187,   188,   189,    -1,   191,   192,   193,   194,    -1,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,    -1,
      -1,   218,   219,   220,   221,   222,   223,   224,    -1,    -1,
     227,   228,   229,    -1,    -1,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,    -1,
     267,    -1,   269,   270,    -1,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,    -1,
     307,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
     317,   318,   319,   320,   321,    -1,    -1,   324,   325,   326,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
      -1,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,    -1,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,    -1,   403,   404,   405,   406,
     407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,   440,   441,   442,   443,    -1,   445,   446,
     447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,    -1,    -1,    -1,    -1,    -1,     3,   485,   486,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,    -1,    -1,
      -1,    -1,   499,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      36,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
      46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
      -1,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    93,    94,    95,
      96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,    -1,
     126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
     136,    -1,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
      -1,   167,    -1,    -1,   170,   171,   172,   173,    -1,   175,
      -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
      -1,    -1,   218,   219,   220,   221,   222,   223,   224,    -1,
      -1,   227,   228,   229,    -1,    -1,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,   241,   242,    -1,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
      -1,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,    -1,   293,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
     376,   377,    -1,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,   400,   401,    -1,   403,   404,   405,
     406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,   440,   441,   442,   443,    -1,   445,
      -1,   447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   495,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    74,    -1,    -1,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
      -1,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,    -1,   227,   228,
     229,   230,    -1,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,    -1,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,   271,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,   284,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,   435,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,   446,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
       3,   480,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   494,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    74,    -1,    -1,    77,    78,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,    -1,   115,    -1,   117,   118,   119,   120,   121,   122,
      -1,   124,    -1,   126,   127,   128,   129,    -1,    -1,   132,
     133,   134,   135,   136,    -1,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,    -1,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,    -1,   170,   171,   172,
     173,   174,   175,    -1,   177,    -1,   179,    -1,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,    -1,   227,   228,   229,   230,    -1,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
      -1,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,    -1,   269,   270,   271,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,   284,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,    -1,   307,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,   321,    -1,
      -1,   324,   325,   326,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    -1,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,   400,   401,    -1,
     403,   404,   405,   406,   407,   408,   409,    -1,   411,   412,
      -1,    -1,   415,   416,   417,   418,   419,    -1,   421,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,   440,   441,   442,
     443,    -1,   445,   446,   447,    -1,   449,   450,   451,    -1,
      -1,   454,    -1,    -1,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   494,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    74,    -1,    -1,
      77,    78,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    89,    90,    91,    -1,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,    -1,   115,    -1,
     117,   118,   119,   120,   121,   122,    -1,   124,    -1,   126,
     127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
      -1,    -1,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,    -1,   170,   171,   172,   173,   174,   175,    -1,
     177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,    -1,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,    -1,
     227,   228,   229,   230,    -1,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,    -1,
     267,    -1,   269,   270,   271,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,   284,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,    -1,
     307,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
     317,   318,   319,   320,   321,    -1,    -1,   324,   325,   326,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
      -1,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,    -1,   403,   404,   405,   406,
     407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
     417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,   440,   441,   442,   443,    -1,   445,   446,
     447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    74,    -1,    -1,    77,    78,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,    -1,   126,   127,   128,   129,    -1,
      -1,   132,   133,   134,   135,   136,    -1,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,    -1,   170,
     171,   172,   173,   174,   175,    -1,   177,    -1,    -1,    -1,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,    -1,    -1,   227,   228,   229,   230,
      -1,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,    -1,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,    -1,   267,    -1,   269,   270,
     271,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,    -1,   403,   404,   405,   406,   407,   408,   409,    -1,
     411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,   440,
     441,   442,   443,    -1,   445,   446,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   494,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    74,
      -1,    -1,    77,    78,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    90,    91,    -1,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,    -1,
     115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
      -1,   126,   127,   128,   129,    -1,    -1,   132,   133,   134,
     135,   136,    -1,    -1,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,    -1,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,    -1,   170,   171,   172,   173,   174,
     175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
      -1,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
      -1,    -1,   227,   228,   229,   230,    -1,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,    -1,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,    -1,   269,   270,   271,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,    -1,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,   317,   318,   319,   320,   321,    -1,    -1,   324,
     325,   326,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,    -1,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,   400,   401,    -1,   403,   404,
     405,   406,   407,   408,   409,    -1,   411,   412,    -1,    -1,
     415,   416,   417,   418,   419,    -1,   421,   422,   423,   424,
     425,   426,   427,    -1,    -1,   430,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,    -1,
     445,   446,   447,    -1,   449,   450,   451,    -1,    -1,   454,
      -1,    -1,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,    -1,     3,     4,     5,    -1,    -1,    -1,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    74,    -1,    -1,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    93,    94,    95,    96,    -1,    -1,
      -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
      -1,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,    -1,    -1,   227,   228,
     229,   230,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,    -1,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,   271,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,   283,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,   446,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
       3,    -1,    -1,    -1,    -1,    -1,   485,   486,   487,    -1,
      -1,    -1,    -1,    -1,    -1,   494,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    31,    32,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    74,    -1,    -1,    77,    78,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
      93,    94,    95,    96,    -1,    -1,    -1,   100,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,    -1,   115,    -1,   117,   118,   119,   120,   121,   122,
      -1,   124,    -1,   126,   127,   128,   129,    -1,    -1,   132,
     133,   134,   135,   136,    -1,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,    -1,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,    -1,   170,   171,   172,
     173,   174,   175,    -1,   177,    -1,    -1,    -1,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,    -1,    -1,   227,   228,   229,   230,    -1,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,   241,   242,
      -1,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,    -1,   269,   270,   271,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,    -1,   307,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,   321,    -1,
      -1,   324,   325,   326,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    -1,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,    -1,   411,   412,
      -1,    -1,   415,   416,   417,   418,   419,    -1,   421,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,   440,   441,   442,
     443,    -1,   445,   446,   447,    -1,   449,   450,   451,    -1,
      -1,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,    -1,     3,   480,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   494,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
      47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    -1,
      77,    78,    79,    80,    -1,    82,    83,    84,    -1,    86,
      87,    88,    89,    90,    91,    -1,    -1,    94,    95,    96,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,    -1,   115,    -1,
     117,   118,   119,   120,   121,   122,    -1,   124,    -1,   126,
     127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
      -1,    -1,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
     167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,    -1,
     177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,   186,
     187,   188,   189,    -1,   191,   192,   193,   194,    -1,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,    -1,
      -1,   218,    -1,   220,   221,   222,   223,   224,    -1,    -1,
     227,    -1,   229,    -1,    -1,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,   241,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,    -1,   262,   263,   264,   265,    -1,
     267,    -1,   269,   270,    -1,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,    -1,   293,    -1,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,    -1,
     307,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
     317,   318,   319,   320,   321,    -1,    -1,   324,   325,   326,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
      -1,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
     377,    -1,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,   402,   403,    -1,   405,   406,
     407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
     417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,   440,   441,   442,   443,    -1,   445,    -1,
     447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,     3,   480,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    -1,    77,    78,    79,    80,
      -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,    -1,   126,   127,   128,   129,    -1,
      -1,   132,   133,   134,   135,   136,    -1,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
     161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
     171,   172,   173,    -1,   175,    -1,   177,    -1,    -1,    -1,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,    -1,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,
     221,   222,   223,   224,    -1,    -1,   227,    -1,   229,    -1,
      -1,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
     241,   242,    -1,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
      -1,   262,   263,   264,   265,    -1,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,   402,   403,    -1,   405,   406,   407,   408,   409,    -1,
     411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,    -1,   445,    -1,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,    -1,     3,   480,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   494,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,
      45,    46,    47,    48,    49,    -1,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    -1,
      -1,    -1,    77,    78,    79,    80,    -1,    82,    83,    84,
      -1,    86,    87,    88,    89,    90,    91,    -1,    -1,    94,
      95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,    -1,
     115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
      -1,   126,   127,   128,   129,    -1,    -1,   132,   133,   134,
     135,   136,    -1,    -1,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,    -1,   160,   161,   162,   163,    -1,
     165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,
     175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,
     185,   186,   187,   188,   189,    -1,   191,   192,   193,   194,
      -1,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,    -1,    -1,   218,    -1,   220,   221,   222,   223,   224,
      -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,   241,   242,    -1,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,    -1,   262,   263,   264,
     265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,    -1,   293,    -1,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,    -1,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,   317,   318,   319,   320,   321,    -1,    -1,   324,
     325,   326,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,    -1,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,   369,   370,   371,    -1,   373,   374,
     375,   376,   377,    -1,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,   400,   401,    -1,   403,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,    -1,    -1,
     415,   416,   417,   418,   419,    -1,   421,   422,   423,   424,
     425,   426,   427,    -1,    -1,   430,   431,   432,   433,   434,
      -1,    -1,   437,   438,   439,   440,   441,   442,   443,    -1,
     445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,   454,
      -1,    -1,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    -1,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,    -1,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   494,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    -1,    -1,    -1,    77,    78,    79,    80,    -1,    82,
      83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
      -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,    -1,   115,    -1,   117,   118,   119,   120,   121,   122,
      -1,   124,    -1,   126,   127,   128,   129,    -1,    -1,   132,
     133,   134,   135,   136,    -1,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,    -1,   160,   161,   162,
     163,    -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,
     173,    -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,    -1,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,
     223,   224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,   241,   242,
      -1,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,    -1,   262,
     263,   264,   265,    -1,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,
     293,    -1,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,    -1,   307,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,   321,    -1,
      -1,   324,   325,   326,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    -1,   348,   349,    -1,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,   369,   370,   371,    -1,
     373,   374,   375,   376,   377,    -1,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,   400,   401,    -1,
     403,    -1,   405,   406,   407,   408,   409,    -1,   411,   412,
      -1,    -1,   415,   416,   417,   418,   419,    -1,   421,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,   440,   441,   442,
     443,    -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,
      -1,   454,    -1,    -1,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   494,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
      47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    -1,
      77,    78,    79,    80,    -1,    82,    83,    84,    -1,    86,
      87,    88,    89,    90,    91,    -1,    -1,    94,    95,    96,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,    -1,   115,    -1,
     117,   118,   119,   120,   121,   122,    -1,   124,    -1,   126,
     127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
      -1,    -1,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
     167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,    -1,
     177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,   186,
     187,   188,   189,    -1,   191,   192,   193,   194,    -1,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,    -1,
      -1,   218,    -1,   220,   221,   222,   223,   224,    -1,    -1,
     227,    -1,   229,    -1,    -1,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,   241,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,    -1,   262,   263,   264,   265,    -1,
     267,    -1,   269,   270,    -1,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,    -1,   293,    -1,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,    -1,
     307,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
     317,   318,   319,   320,   321,    -1,    -1,   324,   325,   326,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
      -1,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
     377,    -1,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,    -1,   403,    -1,   405,   406,
     407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
     417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,   440,   441,   442,   443,    -1,   445,    -1,
     447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,    -1,    -1,    -1,     3,     4,     5,    -1,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,   494,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      -1,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,    -1,   152,   153,   154,   155,    -1,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,    -1,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,    -1,   292,   293,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,    -1,   310,   311,    -1,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
      -1,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,    -1,
     418,    -1,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,    -1,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   474,   475,   476,   477,
      -1,     3,    -1,   481,   482,   483,     8,   485,   486,   487,
     488,   489,   490,    -1,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    -1,    -1,    -1,    77,    78,    79,    80,    -1,
      82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
      -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,    -1,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,   124,    -1,   126,   127,   128,   129,    -1,    -1,
     132,   133,   134,   135,   136,    -1,    -1,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,    -1,   160,   161,
     162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,   171,
     172,   173,    -1,   175,    -1,   177,    -1,    -1,    -1,   181,
     182,    -1,   184,   185,   186,   187,   188,   189,    -1,   191,
     192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,   221,
     222,   223,   224,    -1,    -1,   227,    -1,   229,    -1,    -1,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,   241,
     242,    -1,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,    -1,
     262,   263,   264,   265,    -1,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
      -1,   293,    -1,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,    -1,   307,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,   317,   318,   319,   320,   321,
      -1,    -1,   324,   325,   326,   327,   328,   329,   330,   331,
     332,    -1,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,    -1,   348,   349,    -1,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
      -1,   373,   374,   375,   376,   377,    -1,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
      -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
     412,    -1,    -1,   415,   416,   417,   418,   419,    -1,   421,
     422,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,    -1,    -1,   437,   438,   439,   440,   441,
     442,   443,    -1,   445,    -1,   447,    -1,   449,   450,   451,
      -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,    -1,    -1,    -1,   481,
     482,   483,    -1,   485,   486,   487,   488,   489,   490,     8,
      -1,    -1,    11,    -1,    -1,    -1,    -1,    16,    17,    18,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    33,    16,    17,    18,    -1,    -1,
      -1,    -1,    41,    -1,    -1,     8,    -1,    -1,    11,    48,
      -1,    -1,    33,    16,    17,    18,    -1,    -1,    -1,    -1,
      41,    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,
      33,    -1,    -1,     8,    73,    -1,    11,    -1,    41,    -1,
      -1,    16,    17,    18,    -1,    48,    -1,    -1,    -1,    -1,
      -1,     8,    73,    -1,    11,    -1,    -1,    -1,    33,    16,
      17,    18,    -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,
      73,    -1,    -1,    48,    -1,    -1,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,    -1,
      -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    -1,    16,
      17,    18,    -1,    -1,    -1,   174,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    33,    16,    17,    18,
      -1,   190,    -1,   174,    41,    -1,   195,    -1,    -1,    -1,
      -1,    48,    -1,    -1,    33,    -1,    -1,    -1,    -1,   190,
      -1,   174,    41,    -1,   195,    -1,    -1,   216,   217,    48,
      -1,    -1,    -1,    -1,    -1,    -1,    73,   190,    -1,    -1,
      -1,   230,   195,    -1,    -1,   216,   217,    -1,    -1,   174,
      -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,   230,
      -1,    -1,    -1,   216,   217,   190,    -1,   174,    -1,    -1,
     195,    -1,    -1,    -1,    -1,    -1,    -1,   230,    -1,   268,
      -1,    -1,   271,   190,    -1,    -1,    -1,    -1,   195,    -1,
      -1,   216,   217,    -1,    -1,    -1,   285,   268,    -1,   288,
     271,    -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,   216,
     217,    -1,    -1,    -1,   285,   268,    -1,   288,   271,    -1,
      -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,    -1,    -1,   288,    -1,   174,    -1,    -1,
      -1,    -1,    -1,   268,    -1,    -1,   271,    -1,    -1,    -1,
      -1,    -1,    -1,   190,    -1,   174,    -1,    -1,   195,    -1,
     285,   268,    -1,   288,   271,    -1,    -1,    -1,    -1,    -1,
      -1,   190,    -1,    -1,    -1,    -1,   195,    -1,   285,   216,
     217,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,
      -1,    -1,    -1,   230,    -1,    -1,    -1,   216,   217,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,    -1,    -1,
      -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   378,    -1,    -1,    -1,    -1,
      -1,   268,    -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,   268,
      -1,   288,   271,   378,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,
      -1,   378,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   478,
      -1,    -1,   481,   482,   483,    -1,   485,   486,   487,   488,
     489,   490,    -1,    -1,    -1,    -1,   495,   478,    -1,    -1,
     481,   482,   483,    -1,   485,   486,   487,   488,   489,   490,
      -1,    -1,    -1,    -1,   495,   478,    -1,    -1,   481,   482,
     483,    -1,   485,   486,   487,   488,   489,   490,    -1,    -1,
      -1,   378,   495,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   478,    -1,    -1,   481,   482,   483,   378,
     485,   486,   487,   488,   489,   490,    -1,    -1,    -1,    -1,
     495,   478,    -1,    -1,   481,   482,   483,    -1,   485,   486,
     487,   488,   489,   490,    -1,    -1,    -1,    -1,   495,     8,
      -1,    -1,    11,    -1,    -1,    -1,    -1,    16,    17,    18,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    41,    -1,    -1,    -1,    -1,    -1,    -1,    48,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   478,    -1,    -1,   481,   482,   483,    -1,   485,   486,
     487,   488,   489,   490,    73,    -1,    -1,    -1,   495,   478,
      -1,    -1,   481,   482,   483,    -1,   485,   486,   487,   488,
     489,   490,    -1,    -1,    -1,    -1,   495,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   174,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   190,    -1,    -1,    -1,    -1,   195,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   216,   217,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,
      -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   478,
       3,    -1,   481,   482,   483,    -1,   485,   486,   487,   488,
     489,   490,    -1,    -1,   493,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   487,    -1,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    -1,    41,    42,    43,    -1,    45,    46,    47,
      48,    49,    -1,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    -1,    -1,    62,    63,    64,    65,    66,    -1,
      68,    69,    70,    71,    72,    -1,    -1,    -1,    -1,    77,
      78,    79,    80,    -1,    82,    83,    84,    -1,    86,    87,
      88,    89,    90,    91,    -1,    -1,    94,    95,    96,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,    -1,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,   124,    -1,   126,   127,
     128,   129,    -1,    -1,   132,   133,   134,   135,   136,    -1,
      -1,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,    -1,   160,   161,   162,   163,    -1,   165,    -1,   167,
      -1,    -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,
      -1,    -1,    -1,   181,   182,    -1,   184,   185,   186,   187,
     188,   189,    -1,   191,   192,   193,   194,    -1,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,
     218,    -1,   220,   221,   222,   223,   224,    -1,    -1,   227,
      -1,   229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,   241,   242,    -1,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,    -1,   262,   263,   264,   265,    -1,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,    -1,   293,    -1,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,    -1,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,   317,
     318,   319,   320,   321,    -1,    -1,   324,   325,   326,   327,
     328,   329,   330,   331,   332,    -1,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
     348,   349,    -1,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,   369,   370,   371,    -1,   373,   374,   375,   376,   377,
      -1,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,    -1,   400,   401,    -1,   403,    -1,   405,   406,   407,
     408,   409,    -1,   411,   412,    -1,    -1,   415,   416,   417,
     418,   419,    -1,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,   432,   433,   434,    -1,    -1,   437,
     438,   439,   440,   441,   442,   443,    -1,   445,    -1,   447,
      -1,   449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
       3,     4,     5,    -1,    -1,    -1,     9,    -1,    -1,   487,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    74,    -1,    -1,    77,    78,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
      93,    94,    95,    96,    -1,    -1,    -1,   100,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,    -1,   117,   118,   119,   120,   121,   122,
      -1,   124,    -1,   126,   127,   128,   129,    -1,    -1,   132,
     133,   134,   135,   136,    -1,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,    -1,   170,   171,   172,
     173,   174,   175,    -1,   177,    -1,    -1,    -1,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,    -1,    -1,   227,   228,   229,   230,    -1,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,   241,   242,
      -1,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,    -1,   269,   270,   271,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
     283,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,    -1,   307,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,   321,    -1,
      -1,   324,   325,   326,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    -1,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,   369,   370,   371,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,   400,   401,    -1,
     403,   404,   405,   406,   407,   408,   409,    -1,   411,   412,
      -1,    -1,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,   440,   441,   442,
     443,    -1,   445,   446,   447,    -1,   449,   450,   451,    -1,
      -1,   454,    -1,    -1,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,     3,     4,     5,    -1,    -1,
      -1,     9,   485,   486,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    -1,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    -1,    -1,    62,    63,    64,    65,    66,    -1,
      68,    69,    70,    71,    72,    -1,    74,    -1,    -1,    77,
      78,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    90,    91,    -1,    93,    94,    95,    96,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,   124,    -1,   126,   127,
     128,   129,    -1,    -1,   132,   133,   134,   135,   136,    -1,
      -1,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,    -1,   170,   171,   172,   173,   174,   175,    -1,   177,
      -1,    -1,    -1,   181,   182,    -1,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,    -1,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,    -1,    -1,   227,
     228,   229,   230,    -1,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,   241,   242,    -1,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
      -1,   269,   270,   271,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,   283,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,    -1,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,   317,
     318,   319,   320,   321,    -1,    -1,   324,   325,   326,   327,
     328,   329,   330,   331,   332,    -1,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,   369,   370,   371,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,    -1,   400,   401,    -1,   403,   404,   405,   406,   407,
     408,   409,    -1,   411,   412,    -1,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,   432,   433,   434,    -1,    -1,   437,
     438,   439,   440,   441,   442,   443,    -1,   445,   446,   447,
      -1,   449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
       3,     4,     5,    -1,    -1,    -1,     9,   485,   486,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    74,    -1,    -1,    77,    78,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
      93,    94,    95,    96,    -1,    -1,    -1,   100,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,    -1,   115,    -1,   117,   118,   119,   120,   121,   122,
      -1,   124,    -1,   126,   127,   128,   129,    -1,    -1,   132,
     133,   134,   135,   136,    -1,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,    -1,   170,   171,   172,
     173,   174,   175,    -1,   177,    -1,    -1,    -1,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,    -1,    -1,   227,   228,   229,   230,    -1,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,   241,   242,
      -1,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,    -1,   269,   270,   271,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
     283,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,    -1,   307,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,   321,    -1,
      -1,   324,   325,   326,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    -1,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,   369,   370,   371,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,   400,   401,    -1,
     403,   404,   405,   406,   407,   408,   409,    -1,   411,   412,
      -1,    -1,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,   440,   441,   442,
     443,    -1,   445,   446,   447,    -1,   449,   450,   451,    -1,
      -1,   454,    -1,    -1,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,    -1,     8,    -1,    -1,    11,
      -1,    -1,   485,   486,    16,    17,    18,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    33,    16,    17,    18,    37,    -1,    -1,    -1,    41,
      -1,    -1,     8,    -1,    -1,    11,    48,    -1,    -1,    33,
      16,    17,    18,    -1,    -1,    -1,    -1,    41,    -1,    -1,
      -1,    -1,    -1,    -1,    48,    -1,    -1,    33,    -1,    -1,
       8,    73,    -1,    11,    -1,    41,    -1,    -1,    16,    17,
      18,    -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,    73,
      -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,    36,    -1,
      -1,    -1,    -1,    41,    -1,    -1,    -1,    73,    -1,    -1,
      48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    73,    -1,    -1,    16,    17,
      18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,    -1,    -1,
      48,    -1,   174,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     164,    -1,    -1,    -1,    -1,   169,    -1,    -1,   190,    -1,
     174,    -1,    -1,   195,    -1,    73,    -1,   163,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   190,    -1,   174,    -1,
      -1,   195,    -1,    -1,   216,   217,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   190,    -1,    -1,    -1,   230,   195,
      -1,    -1,   216,   217,    -1,    -1,   174,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,
     216,   217,   190,    -1,    -1,    -1,    -1,   195,    -1,    -1,
      -1,    -1,    -1,    -1,   230,    -1,   268,    -1,    -1,   271,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   216,   217,
      -1,    -1,    -1,   285,   268,    -1,   288,   271,    -1,    -1,
      -1,    -1,   230,    -1,    -1,    -1,   174,    -1,    -1,    -1,
      -1,   285,   268,    -1,   288,   271,    -1,    -1,    -1,    -1,
      -1,    -1,   190,    -1,    -1,    -1,    -1,   195,    -1,   285,
      -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     268,    -1,    -1,   271,    -1,    -1,    -1,    -1,   216,   217,
      -1,    -1,    -1,    -1,    -1,   311,    -1,   285,    -1,    -1,
     288,    -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    -1,    16,    17,    18,
      -1,    -1,    -1,    -1,    -1,    -1,   378,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    33,    -1,    -1,    36,    -1,    -1,
     268,    -1,    41,   271,   378,    -1,    -1,    -1,    -1,    48,
      -1,    -1,    -1,    -1,    -1,     8,    -1,   285,    11,    -1,
     288,    -1,   378,    16,    17,    18,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,   306,    -1,
      33,    -1,    -1,    -1,   436,    -1,    -1,    -1,    41,    -1,
     378,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      73,    -1,    -1,    -1,    -1,    -1,   478,    -1,    -1,   481,
     482,   483,    -1,   485,   486,   487,   488,   489,   490,    -1,
      -1,    -1,    -1,    -1,   478,    -1,    -1,   481,   482,   483,
     378,   485,   486,   487,   488,   489,   490,    -1,    -1,    -1,
      -1,    -1,   478,    -1,    -1,   481,   482,   483,    -1,   485,
     486,   487,   488,   489,   490,   174,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    -1,    16,    17,    18,
     478,   190,    -1,   481,   482,   483,   195,   485,   486,   487,
     488,   489,   490,    -1,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    41,    -1,    -1,    -1,   169,   216,   217,    48,
      -1,   174,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   230,    -1,    -1,    -1,    -1,    -1,   190,    -1,    -1,
      -1,    -1,   195,    -1,    73,    -1,    -1,    -1,    -1,    -1,
     478,    -1,    -1,   481,   482,   483,    -1,   485,   486,   487,
     488,   489,   490,   216,   217,    -1,    -1,    -1,    -1,   268,
      -1,    -1,   271,    -1,    -1,    -1,    -1,   230,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    -1,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   268,    -1,    -1,   271,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,
       8,    -1,   285,    11,    48,   288,    -1,    -1,    16,    17,
      18,    -1,    -1,    -1,    -1,   174,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,    73,
      -1,   190,    -1,    41,    -1,    -1,   195,    -1,    -1,    -1,
      48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   216,   217,    -1,
      -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,
      -1,   230,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    -1,    16,    17,    18,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   378,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,
      41,    -1,   271,    -1,    -1,    -1,    -1,    48,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,
     174,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    73,    -1,    -1,    -1,   190,    -1,    -1,   478,
      -1,   195,   481,   482,   483,    -1,   485,   486,   487,   488,
     489,   490,    -1,    -1,    -1,    -1,   174,    -1,    -1,    -1,
      -1,    -1,   216,   217,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   190,    -1,    -1,    -1,   230,   195,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   478,    -1,    -1,   481,   482,
     483,    -1,   485,   486,   487,   488,   489,   490,   216,   217,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,
      -1,    -1,   230,    -1,   268,    -1,    -1,   271,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,   174,   288,    -1,    -1,    -1,    -1,    -1,
      -1,   410,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   190,
     268,    -1,    -1,   271,   195,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   230,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   478,
      -1,    -1,   481,   482,   483,    -1,   485,   486,   487,   488,
     489,   490,    -1,    -1,   378,    -1,    -1,   268,    -1,    -1,
     271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     378,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   478,    -1,    -1,   481,   482,   483,
      -1,   485,   486,   487,   488,   489,   490,   378,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     478,    -1,    -1,   481,   482,   483,    -1,   485,   486,   487,
     488,   489,   490,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,    -1,     5,   478,    -1,    -1,
     481,   482,   483,    -1,   485,   486,   487,   488,   489,   490,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      74,    -1,    -1,    77,    78,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,    -1,   170,   171,   172,   173,
     174,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,    -1,    -1,   227,   228,   229,   230,    -1,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,    -1,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,   271,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
     404,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,   435,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,   446,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    74,    -1,    -1,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    93,    94,    95,    96,    -1,    -1,
      -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
      -1,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,    -1,    -1,   227,   228,
     229,   230,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,    -1,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,   271,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,   283,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,   446,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      74,    -1,    -1,    77,    78,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    93,
      94,    95,    96,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,    -1,   170,   171,   172,   173,
     174,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,    -1,    -1,   227,   228,   229,   230,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,    -1,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,   271,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
     404,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,   446,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    74,    -1,    -1,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    93,    94,    95,    96,    -1,    -1,
      -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
      -1,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,    -1,    -1,   227,   228,
     229,   230,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,    -1,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,   271,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,   446,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    -1,
      -1,    75,    -1,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,   166,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,    -1,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,   429,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    -1,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,   166,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,   230,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,    -1,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
     429,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    -1,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,    -1,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,     4,    -1,    -1,    -1,    -1,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    -1,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,    -1,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    -1,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,    -1,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    -1,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,    -1,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    -1,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,    -1,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
     284,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    -1,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,    -1,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,   284,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    -1,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,    -1,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    -1,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,    -1,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,   402,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    36,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    -1,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,    -1,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    36,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    -1,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,    -1,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    -1,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,    -1,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    -1,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,    -1,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    -1,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,    -1,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    -1,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,    -1,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    -1,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,    -1,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    -1,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,    -1,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    -1,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,    -1,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    -1,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,    -1,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    -1,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,    -1,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    -1,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,    -1,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    -1,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,    -1,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    -1,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,    -1,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    -1,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,    -1,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    -1,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,    -1,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    36,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    -1,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,    -1,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    -1,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,    -1,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    -1,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,    -1,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    -1,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,    -1,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    -1,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,    -1,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    -1,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,    -1,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    -1,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,    -1,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    44,    45,    46,    47,    -1,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    -1,    -1,    74,    -1,    -1,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    93,    94,    95,    96,    -1,    -1,
      -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,    -1,   152,   153,   154,   155,    -1,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
      -1,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
      -1,    -1,    -1,   182,    -1,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,    -1,    -1,   227,   228,
     229,   230,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,    -1,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    -1,    -1,    -1,
     269,   270,   271,   272,    -1,    -1,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,    -1,   292,   293,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
      -1,   310,   311,    -1,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,    -1,
      -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,    -1,   418,
      -1,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,    -1,   443,    -1,   445,   446,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   474,   475,   476,   477,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    -1,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,    -1,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,    -1,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      44,    45,    46,    47,    -1,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    -1,    -1,
      74,    -1,    -1,    77,    78,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    93,
      94,    95,    96,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,    -1,   152,   153,
     154,   155,    -1,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,    -1,   170,   171,   172,   173,
     174,   175,    -1,   177,    -1,    -1,    -1,    -1,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,    -1,    -1,   227,   228,   229,   230,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,    -1,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,    -1,    -1,   269,   270,   271,   272,    -1,
      -1,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,    -1,   292,   293,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,    -1,   310,   311,    -1,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,   350,   351,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,   397,    -1,    -1,   400,   401,    -1,   403,
     404,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,    -1,   418,    -1,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,    -1,   443,
      -1,   445,   446,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     474,   475,   476,   477
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    19,    29,    31,    32,    47,    56,    68,    79,    90,
      92,   110,   124,   135,   142,   150,   152,   153,   165,   194,
     233,   310,   313,   344,   352,   366,   373,   377,   388,   402,
     437,   442,   456,   480,   494,   509,   510,   511,   512,   513,
     520,   524,   570,   573,   574,   576,   578,   582,   583,   584,
     585,   586,   587,   631,   758,   768,   770,   771,   772,   773,
     780,   798,   801,   806,   809,   812,   813,   815,   816,   822,
     829,   831,   848,   851,   862,   868,   869,   870,   872,   874,
     875,   879,   415,   459,   871,   198,   359,   367,   402,   449,
     871,     3,    19,    20,    21,    22,    23,    24,    25,    26,
      28,    29,    30,    38,    39,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    54,    55,    56,
      57,    58,    59,    62,    63,    64,    65,    66,    68,    69,
      70,    71,    72,    74,    77,    78,    79,    80,    81,    82,
      83,    84,    86,    87,    88,    89,    90,    91,    93,    94,
      95,    96,   100,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   115,   117,   118,   119,   120,   121,   122,
     124,   126,   127,   128,   129,   132,   133,   134,   135,   136,
     139,   140,   141,   143,   144,   145,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   158,   160,   161,   162,
     163,   165,   167,   168,   170,   171,   172,   173,   174,   175,
     177,   181,   182,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   196,   197,   198,   199,   200,   201,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   213,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     227,   228,   229,   230,   232,   233,   234,   237,   238,   239,
     240,   241,   242,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   267,   269,   270,   271,   272,
     274,   275,   276,   277,   278,   279,   281,   282,   285,   286,
     287,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   317,   318,   319,   320,
     321,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     334,   335,   336,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     367,   368,   369,   370,   371,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   400,
     401,   403,   404,   405,   406,   407,   408,   409,   411,   412,
     415,   416,   417,   418,   419,   421,   422,   423,   424,   425,
     426,   427,   430,   431,   432,   433,   434,   437,   438,   439,
     440,   441,   442,   443,   445,   446,   447,   449,   450,   451,
     454,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   687,   745,   749,   751,   893,   894,   895,   871,
      50,   494,   843,   171,   175,   234,   241,   288,   323,   359,
     406,   408,   429,   432,   568,   779,   849,     3,    27,   313,
     743,   749,   893,    21,    74,    89,   145,   154,   166,   171,
     198,   241,   244,   308,   324,   356,   359,   367,   370,   390,
     402,   409,   418,   449,   817,   818,   821,   871,   743,    92,
     446,   494,   516,   520,   570,   578,   582,   869,   875,   107,
      68,   107,     5,   748,   769,   749,   743,    27,   411,   415,
     575,   749,   810,   811,   871,    27,   130,   594,   595,   234,
     359,   371,   411,   575,   863,   864,   871,   284,   642,   741,
     749,   170,   494,   803,   494,   331,   588,   589,   743,   588,
       3,   494,   583,   584,   587,     0,   497,   446,   514,    27,
     411,   415,   442,   575,   582,   146,   212,   289,   428,   596,
     597,   583,   585,   586,   498,   119,   208,   434,   189,   741,
     743,   189,   741,   189,   642,   189,   741,   494,   492,   496,
     732,   734,   578,   582,   808,   869,   875,   741,   406,   408,
     406,   408,   342,   178,   189,   749,   331,   367,   402,   449,
     198,   741,    27,   743,   246,   418,   106,   402,   449,   362,
     189,   749,   752,   819,   189,   742,   743,   189,   743,   494,
     873,   568,   516,     3,   517,   519,   520,   522,   523,   893,
     894,   895,   514,   748,   748,   483,   494,   494,   807,   477,
     218,   496,   283,     4,     6,     7,     8,     9,    10,    49,
      51,    52,    60,    61,    64,    65,    72,    74,    97,    98,
      99,   100,   101,   102,   103,   111,   112,   114,   134,   151,
     156,   157,   162,   210,   211,   213,   235,   236,   260,   262,
     268,   273,   274,   276,   285,   295,   309,   328,   354,   372,
     381,   398,   411,   412,   417,   419,   420,   435,   443,   478,
     485,   486,   487,   494,   499,   583,   657,   660,   663,   664,
     665,   667,   668,   669,   670,   672,   673,   684,   686,   687,
     688,   690,   703,   704,   708,   726,   731,   738,   739,   745,
     746,   747,   748,   749,   737,   738,   863,   748,   863,   477,
     169,   413,   483,   494,   741,   487,   734,     3,   168,   170,
     446,   520,   802,   804,   168,   805,   684,   712,   588,   498,
     494,   754,   498,   495,   495,   511,   741,   477,   218,    27,
     130,   593,   593,    54,   593,   159,   164,   231,   280,   602,
     604,   605,   624,   626,   627,   628,   596,   597,   494,   169,
     214,   579,   642,   151,    23,    29,   135,   287,   340,   344,
     373,   439,   856,   859,   860,   340,   151,    36,    55,   105,
     197,   245,   253,   265,   297,   340,   345,   367,   373,   388,
     823,   826,   859,   151,   340,   373,   859,   151,   340,   373,
     859,    27,   130,   444,   487,   495,   684,   713,   714,   751,
     755,   684,   733,     3,    27,    31,    32,    33,    34,    35,
      36,    37,    40,    53,    60,    61,    67,    73,    75,    76,
      85,    92,    97,    98,    99,   101,   102,   103,   114,   116,
     123,   125,   130,   131,   137,   138,   142,   146,   157,   159,
     164,   166,   169,   176,   178,   179,   180,   183,   195,   202,
     212,   214,   225,   226,   231,   235,   236,   243,   266,   268,
     273,   280,   283,   284,   288,   289,   306,   316,   322,   323,
     333,   337,   347,   366,   372,   383,   384,   399,   402,   410,
     413,   414,   420,   428,   429,   435,   436,   444,   448,   452,
     453,   455,   456,   487,   744,   756,   893,   894,   895,   896,
     732,   495,   494,   558,   568,     3,   268,   799,   449,   189,
     741,   189,   572,   741,   741,    81,   776,   494,   850,   460,
      82,   127,   300,   407,   151,   496,   753,    58,   346,   498,
     820,   151,   498,   820,   151,   283,   712,   402,   495,   498,
       4,   157,   283,   420,   485,   486,   515,   517,   518,   521,
     747,   748,   825,   828,   516,   494,   838,   842,   521,   825,
     865,   867,   713,     3,    49,    51,    52,    64,    65,   111,
     112,   162,   210,   211,   213,   260,   262,   276,   328,   354,
     374,   381,   396,   411,   412,   443,   653,   654,   656,   658,
     660,   662,   664,   665,   666,   668,   669,   672,   673,   715,
     751,   893,    36,   229,   749,   494,   735,   445,   671,   684,
     730,   494,   671,   671,   494,   164,   494,   494,   494,   659,
     659,   312,   583,   494,   494,   661,   494,   494,    64,    65,
     671,   684,   494,   659,   494,   494,   494,   494,   494,   458,
     480,   494,   674,   494,   674,   494,   494,   684,   684,   684,
     583,   684,   712,   735,   734,   748,   494,   494,   747,   748,
       3,     8,    11,    16,    17,    18,    33,    36,    41,    48,
      73,   174,   190,   195,   216,   217,   230,   268,   271,   285,
     288,   378,   478,   481,   482,   483,   485,   486,   487,   488,
     489,   490,   706,   707,   708,   710,   457,   691,    15,   294,
     684,    15,   214,   498,   590,   494,   748,   734,   590,     3,
     114,   234,   673,   748,   825,   866,    96,   114,   867,   114,
     867,   741,   495,   498,   514,   495,   498,   589,   742,    36,
     243,   754,   229,   585,   585,   598,   599,   684,   585,   161,
     264,   618,   220,   265,   327,   376,   434,    27,   613,   684,
     485,   486,   614,   615,   684,   686,   624,   625,   605,   604,
     602,   603,   164,   627,   278,   629,   602,   624,   712,   579,
     741,   877,   373,    36,   749,   741,    67,    75,    85,   166,
     189,   316,   429,   539,   549,   564,   749,    75,    85,   814,
      85,   814,   494,   413,   494,   537,   240,   432,   537,    85,
     498,   413,   741,   656,   825,    54,   827,   825,   825,   105,
     245,   253,    54,   413,   456,   480,   824,   258,   359,   824,
     826,   642,    85,   413,   814,   359,   741,   413,   359,   713,
     713,   714,   495,   498,   596,   597,    13,    14,   493,   500,
     413,   557,   562,   749,   456,   841,   331,   449,   266,   448,
     759,   151,    92,   524,   576,   773,   800,   829,   741,   268,
     823,   830,   268,    36,   494,   558,   558,   189,   552,   749,
     777,   495,   713,    36,   819,   744,   496,   752,   742,   743,
     743,   752,   495,   189,   572,   741,   516,   522,     4,   747,
       4,   747,   756,   840,   847,    50,    94,   120,   140,   144,
     165,   168,   184,   273,   281,   325,   844,   498,   495,   498,
     656,   494,    35,   655,   108,   109,   186,   187,   247,   248,
     249,   250,   251,   252,   255,   256,   363,   364,   474,   475,
     494,   675,   676,   677,   678,   679,   680,   681,   682,   683,
     495,   498,   659,   753,   808,   712,   732,   494,   452,   727,
     728,   684,   712,   494,   747,   747,   712,     3,   675,   676,
     677,   678,   679,   680,   681,   682,   716,   717,   748,   747,
     747,   747,   671,   671,   684,     8,    16,    17,    18,   481,
     482,   483,   485,   486,   487,   488,   489,   490,   706,   711,
     749,   684,   718,   485,   486,   494,   685,   686,   708,   720,
     731,   495,   712,   684,   712,   721,   411,   411,   747,   747,
     684,    53,   169,   226,   414,   684,   712,   724,   495,   498,
     747,   684,   683,   683,   654,   684,   684,   684,   684,     5,
     756,   757,   411,    40,   399,   736,   752,   684,   684,   494,
     583,   725,   130,   157,   268,   273,   278,   420,   430,   684,
     273,   494,   684,   413,    48,   174,   190,   195,   230,   378,
     684,   684,   684,   684,   684,   684,   684,   684,   684,   684,
      27,    34,   383,   705,   180,   160,   692,   684,   354,   494,
     704,   684,   175,   234,   402,   406,   408,   432,   591,   741,
     739,   169,   632,   713,   632,   494,   748,   495,   741,   802,
     741,   868,   684,   495,   494,     3,   783,   784,   498,    37,
     123,   436,   600,   354,   355,   485,   486,   615,   617,   686,
     376,   220,   284,   498,     4,   616,   747,   616,   354,   355,
     617,   740,   741,   272,   380,   630,   625,   603,   495,   436,
     581,    36,   114,   296,   494,   582,   876,   494,   749,   881,
     890,   892,   749,   340,   859,   494,   189,   549,   743,   220,
     268,   220,   436,   494,   542,   654,   743,   749,   189,   743,
     189,   749,    23,   135,   373,   532,   547,   756,   855,   858,
     743,   541,   561,   756,   743,   856,   743,   340,   373,   823,
     859,   825,   752,   743,   825,   752,   743,   825,   340,   373,
     859,   743,   743,   743,   743,   340,   373,   859,   743,   743,
     596,   596,   596,   444,   714,   495,   684,   684,   684,   733,
     321,   837,   495,   498,   281,   169,   413,   832,   449,   741,
     403,   749,   568,   494,   151,   151,   150,   582,   230,   539,
     549,   553,   556,   565,   567,   749,   456,   458,   544,   456,
     778,   268,   283,   495,   684,   820,   744,   820,   283,   820,
     268,    36,   487,   494,   521,   825,   839,   495,   498,    36,
     836,   748,   836,   268,   273,   325,   836,   836,   865,    35,
     655,   652,   749,   492,   492,   747,   413,   413,   413,   413,
     654,   659,   495,   712,   684,   138,   728,   729,    36,   495,
     684,   495,   495,   495,   495,   169,   495,   495,   495,   498,
     495,   496,   306,   719,   495,   685,   685,   684,    11,    16,
      17,    18,   195,   216,   285,   481,   482,   483,   485,   486,
     487,   488,   489,   490,   708,   685,   495,   495,   164,   169,
     722,   723,   495,   477,   477,   495,   495,    36,   724,   712,
     724,   724,   169,   495,   735,   684,   495,   495,   477,   685,
     685,   144,   712,   169,   130,   157,   273,   278,   420,   430,
     494,   144,   711,   684,   399,   736,   684,   725,   684,   413,
     494,   583,   494,   494,   293,   696,   406,   408,   406,   408,
     741,   402,   592,   592,   592,   179,   225,   355,   494,   583,
     633,   634,   635,   642,   643,   687,   689,   690,   749,   453,
     648,   596,   648,   747,   683,   754,   808,    36,   498,   648,
     486,   494,   501,   503,   504,   506,   507,   785,   786,   787,
     792,   793,   794,   795,   796,   797,   599,   285,   706,   709,
     479,   601,     4,   747,   617,   284,   434,   614,   498,   239,
     633,   453,   580,   749,   442,   401,   435,   885,   749,   880,
     889,   283,   882,   886,   892,   735,   498,   632,   483,   413,
     684,   268,   564,   494,   151,   494,   542,   198,   562,   525,
     287,   535,   525,    23,   135,   344,   345,   373,   852,   853,
     854,   860,   861,   151,   820,   151,   820,   532,   547,   532,
     528,   748,   495,   498,   495,   498,   483,   496,   413,   359,
      85,   413,   814,   359,   413,   413,   413,   359,   495,   495,
     495,   714,   493,   391,   392,   748,   846,   557,   837,   741,
     558,   494,   799,   402,   562,   741,   572,   741,   743,   456,
     571,   741,   495,   498,   281,   537,   281,   283,   536,   537,
      36,   151,   741,   752,   151,   521,   834,   845,   840,   748,
     748,   273,   562,   487,   562,   748,   748,   492,   495,   498,
     654,   747,   493,   747,   495,   676,   678,   679,   680,   679,
     680,   680,   495,   410,   684,   142,   654,   495,   684,   684,
     711,   684,   722,   654,   685,   685,   685,   685,   130,   268,
     278,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   684,   684,   723,   722,   674,   674,   654,   495,   495,
     495,   712,   495,   683,   684,    33,    33,   684,   495,   684,
     169,   494,   715,   684,   495,   144,   685,   685,   144,   144,
     684,   684,   597,   453,   494,   697,   749,   592,   592,   592,
     592,   741,   741,   741,   494,   780,   583,   643,   169,   583,
     634,   635,    36,   636,   637,   749,   498,    93,   170,   204,
     219,   228,   261,   350,   639,   637,    36,   636,   638,   749,
     480,   647,   734,   684,   180,   619,   495,   619,   495,   495,
     784,    76,   781,     3,   216,   492,   500,   790,   791,     3,
     788,   788,   788,   791,   786,   494,   601,   161,   224,   284,
     741,   684,   347,   884,   441,   735,   495,   498,    83,   884,
     495,   498,   881,   580,   684,   743,   495,   151,   562,   549,
     562,   525,   552,   495,   116,   202,   265,   268,   548,   494,
     559,   173,   114,   188,   268,   537,   824,   106,   114,   173,
     268,   390,   393,   537,   826,   373,   854,   423,   743,   749,
     858,   561,   267,   285,   374,   485,   486,   526,   563,   654,
     709,   748,   751,   825,   896,   756,   743,   743,   743,   743,
     743,   743,   743,   743,   743,   743,   596,   824,   846,   494,
     778,   741,   761,   762,   189,   741,   495,   830,    36,   494,
     873,   106,   265,   546,   544,   553,    79,   582,   552,   436,
     775,   820,   572,   495,   498,   562,   747,   749,   493,   493,
     684,   495,   495,   723,   169,   130,   278,   494,   495,   684,
     684,   684,   715,   495,   684,    33,    33,   684,   684,   144,
     495,   495,   684,   698,   749,   741,   741,   741,   741,   637,
     638,   494,   495,     5,   749,   750,   404,   610,   611,   494,
     634,   219,   292,   640,   634,   640,   219,   639,   640,   219,
     611,   494,   749,   611,   494,   290,    54,   183,   623,   748,
     623,   748,   785,   494,   495,   789,   790,   788,     3,   486,
     503,   789,   502,   505,   486,   711,   738,   582,   296,   582,
     880,   283,   494,   878,   483,   892,   884,   525,   549,   495,
     495,   456,   555,   117,   191,   200,   116,   438,   532,   550,
      67,    73,    85,   114,   116,   173,   202,   268,   273,   316,
     333,   429,   530,   531,   543,    30,    54,   569,   189,   273,
     825,   684,   569,   273,   485,   486,   828,   749,   654,   820,
     820,   751,   753,   483,   413,   413,   495,   838,   436,   833,
     835,   562,    36,   220,   763,   495,   498,   268,   494,   778,
     150,   582,   556,   571,   106,   148,   196,   536,   119,   135,
     315,   456,   577,   283,   749,   774,   494,    36,   845,   493,
     654,   685,   169,   494,   715,   495,   684,   684,   684,   495,
     302,   699,   644,   645,   689,   636,   494,     4,     9,   606,
     608,   609,   749,   742,   634,   283,   436,   641,   634,   219,
     634,   649,   650,   749,   494,   649,   749,   494,   620,   621,
     622,   684,   684,   455,   693,   693,   782,   877,   741,     3,
     493,   495,   495,   885,    85,   494,   689,   749,   883,   891,
     131,   684,   333,   555,   494,   545,   525,   495,   498,   494,
     752,   743,   685,   569,   117,   191,   116,   273,   220,   741,
     555,   114,    36,   151,    73,   651,   753,   489,   526,   743,
     743,   824,   121,   495,   582,   494,   221,   764,   137,   337,
     760,   762,   151,    36,   743,   571,   495,    27,    78,    86,
     115,   188,   199,   390,   393,   540,   540,   355,   355,    59,
      67,   234,   741,   891,   685,   715,   495,    54,   596,   495,
     498,    36,   646,   742,   305,   489,   305,   355,   489,   494,
     494,   495,   684,   494,   634,   641,   495,   498,   654,   649,
     495,   495,   498,   694,   695,   749,   436,   607,   607,   495,
     498,   486,   441,   743,   684,    73,   887,   887,   495,   498,
     269,   434,   741,   525,   551,   554,   756,   532,   684,   268,
     531,    36,   555,   558,   188,   752,   436,   857,   489,   423,
     838,   748,   778,   577,   742,     3,   765,   221,   403,   741,
     582,   873,   544,    67,   286,    67,   775,   495,   495,   712,
     326,   355,   700,   647,   644,   494,   495,   749,   606,   742,
     650,   651,   495,   621,   498,    36,   357,   877,   582,   495,
     752,   752,   888,   888,   648,   883,   373,   558,   495,   498,
     483,   495,   188,   243,   566,   494,   527,   684,   423,    36,
     495,     3,   494,   494,   577,   571,   536,   286,   286,   494,
     778,    48,    96,   425,   684,   701,   702,   701,   495,   649,
     495,   498,   495,   495,   695,   697,   609,   887,   600,   600,
     890,   566,   554,   526,   265,   538,   527,   170,   301,   379,
     283,   533,   534,   560,   823,   582,   741,   766,   767,   891,
     648,   702,   354,   163,   311,   163,   311,   495,     9,   341,
     612,   888,   601,   601,   648,   534,   200,   119,   434,   283,
     560,   283,   533,   495,   577,   763,   495,   498,   495,    33,
     495,   494,   600,   525,    58,   265,   346,   373,   529,   529,
     384,   767,   778,   702,     9,   601,    22,   114,   273,   763,
     648,   495,   333,   741,   125,   763,   333,   741,   764
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   508,   509,   510,   510,   511,   511,   511,   511,   511,
     511,   511,   511,   511,   511,   511,   511,   511,   511,   511,
     511,   511,   511,   511,   511,   511,   511,   511,   511,   511,
     511,   511,   511,   511,   511,   511,   511,   511,   511,   511,
     511,   512,   513,   513,   513,   513,   514,   514,   515,   515,
     515,   516,   516,   516,   516,   516,   517,   517,   517,   517,
     518,   518,   519,   519,   520,   520,   521,   521,   521,   521,
     522,   523,   523,   524,   524,   525,   525,   526,   526,   526,
     526,   526,   526,   527,   527,   528,   529,   529,   529,   529,
     529,   530,   530,   530,   530,   531,   531,   531,   531,   531,
     531,   531,   531,   532,   533,   534,   534,   534,   534,   534,
     535,   535,   536,   536,   536,   536,   537,   538,   538,   539,
     539,   540,   540,   540,   540,   540,   540,   540,   540,   541,
     541,   542,   543,   543,   543,   543,   544,   544,   544,   544,
     545,   546,   546,   546,   547,   548,   548,   548,   548,   548,
     548,   549,   550,   550,   551,   551,   552,   553,   553,   553,
     554,   554,   555,   555,   556,   556,   557,   558,   558,   559,
     559,   560,   561,   561,   561,   561,   562,   562,   563,   563,
     563,   564,   564,   564,   564,   564,   564,   565,   565,   566,
     566,   566,   566,   567,   568,   568,   568,   568,   568,   568,
     568,   568,   569,   569,   570,   570,   571,   571,   571,   572,
     573,   573,   573,   573,   573,   574,   574,   575,   575,   576,
     576,   576,   576,   577,   577,   577,   577,   578,   579,   579,
     579,   580,   580,   581,   581,   582,   582,   583,   583,   584,
     584,   584,   584,   584,   584,   584,   584,   585,   585,   586,
     586,   586,   586,   586,   586,   586,   587,   587,   587,   588,
     588,   589,   590,   590,   591,   591,   591,   591,   591,   591,
     591,   591,   591,   592,   592,   593,   593,   593,   594,   594,
     595,   595,   596,   596,   597,   598,   598,   599,   599,   600,
     600,   600,   601,   601,   601,   602,   602,   602,   602,   603,
     603,   604,   604,   604,   604,   605,   605,   606,   606,   606,
     606,   606,   606,   607,   607,   608,   608,   609,   609,   609,
     609,   610,   611,   611,   612,   612,   613,   613,   614,   615,
     615,   615,   616,   616,   617,   617,   618,   618,   619,   619,
     620,   620,   621,   621,   622,   623,   623,   624,   624,   625,
     625,   626,   626,   627,   628,   628,   628,   628,   629,   629,
     630,   630,   630,   631,   631,   632,   632,   632,   633,   633,
     634,   634,   634,   634,   634,   634,   634,   635,   635,   635,
     635,   635,   635,   636,   636,   636,   636,   637,   637,   638,
     638,   638,   638,   638,   639,   639,   639,   639,   640,   640,
     641,   641,   642,   642,   642,   642,   643,   643,   644,   645,
     645,   646,   646,   647,   647,   648,   648,   649,   649,   650,
     651,   651,   652,   652,   653,   653,   654,   654,   654,   654,
     654,   654,   654,   655,   655,   655,   656,   656,   656,   656,
     656,   656,   656,   657,   657,   657,   657,   658,   658,   659,
     659,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   661,   661,   662,   662,   663,   663,   664,   665,
     666,   666,   667,   667,   668,   669,   670,   670,   670,   670,
     670,   670,   671,   671,   672,   672,   672,   672,   673,   674,
     674,   674,   675,   675,   676,   676,   677,   677,   678,   678,
     679,   679,   680,   680,   681,   681,   682,   682,   683,   683,
     683,   683,   683,   683,   683,   683,   683,   683,   683,   683,
     683,   683,   683,   683,   684,   684,   684,   684,   684,   684,
     684,   684,   684,   684,   684,   684,   684,   684,   684,   684,
     684,   684,   684,   684,   684,   684,   684,   684,   684,   684,
     684,   684,   684,   684,   684,   684,   684,   684,   684,   684,
     684,   684,   684,   684,   684,   684,   684,   684,   684,   684,
     684,   684,   684,   684,   684,   684,   684,   684,   684,   684,
     684,   684,   684,   684,   684,   684,   684,   684,   684,   684,
     685,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   687,   687,   687,   687,   687,   687,   687,
     688,   688,   689,   689,   690,   690,   690,   690,   690,   690,
     690,   690,   690,   690,   690,   690,   690,   690,   690,   690,
     690,   690,   690,   690,   690,   690,   690,   690,   690,   690,
     690,   690,   691,   691,   692,   692,   693,   693,   694,   694,
     695,   696,   696,   696,   697,   698,   698,   699,   699,   700,
     700,   700,   701,   701,   702,   702,   702,   702,   702,   703,
     703,   704,   704,   705,   705,   705,   706,   706,   707,   707,
     707,   707,   707,   707,   707,   707,   707,   707,   707,   707,
     708,   708,   709,   709,   710,   710,   710,   710,   710,   710,
     710,   710,   711,   711,   712,   712,   713,   713,   714,   714,
     714,   715,   715,   716,   716,   717,   717,   717,   717,   717,
     717,   717,   717,   717,   717,   718,   718,   719,   720,   720,
     721,   721,   721,   721,   721,   721,   722,   723,   724,   724,
     724,   725,   725,   726,   727,   727,   728,   729,   729,   730,
     730,   731,   731,   732,   732,   732,   732,   733,   733,   734,
     734,   735,   735,   736,   736,   737,   737,   738,   738,   739,
     739,   739,   739,   740,   740,   741,   741,   742,   742,   743,
     744,   745,   745,   746,   746,   746,   746,   746,   746,   746,
     746,   746,   746,   746,   746,   746,   746,   747,   748,   749,
     749,   749,   750,   750,   751,   751,   751,   752,   752,   753,
     753,   754,   754,   755,   756,   756,   756,   756,   756,   757,
     757,   758,   758,   759,   759,   760,   760,   761,   761,   762,
     763,   764,   764,   765,   766,   766,   767,   768,   769,   770,
     771,   772,   772,   772,   772,   773,   773,   774,   775,   775,
     776,   776,   777,   777,   778,   778,   779,   779,   780,   781,
     781,   782,   782,   783,   783,   784,   784,   785,   785,   786,
     786,   787,   788,   788,   789,   789,   790,   790,   791,   791,
     792,   792,   793,   793,   793,   794,   794,   795,   795,   796,
     796,   797,   797,   797,   798,   798,   799,   799,   800,   800,
     800,   800,   801,   801,   801,   801,   801,   802,   802,   802,
     802,   802,   803,   803,   804,   804,   805,   805,   806,   807,
     807,   808,   808,   808,   808,   809,   810,   810,   811,   811,
     811,   812,   812,   813,   813,   813,   813,   813,   813,   813,
     813,   813,   813,   813,   813,   813,   814,   814,   815,   815,
     815,   816,   816,   816,   816,   816,   816,   817,   817,   817,
     817,   817,   817,   817,   817,   817,   817,   817,   817,   817,
     817,   817,   818,   818,   818,   818,   818,   818,   818,   819,
     819,   820,   820,   820,   821,   821,   821,   822,   822,   823,
     823,   824,   824,   824,   825,   825,   825,   825,   826,   826,
     826,   826,   826,   826,   826,   826,   826,   826,   826,   826,
     826,   826,   827,   827,   828,   828,   828,   829,   829,   830,
     830,   831,   831,   832,   832,   833,   833,   834,   834,   835,
     835,   836,   836,   837,   837,   838,   838,   839,   839,   839,
     839,   839,   840,   841,   841,   842,   842,   843,   843,   844,
     844,   844,   844,   844,   844,   844,   844,   844,   844,   844,
     844,   844,   844,   845,   846,   846,   846,   847,   847,   848,
     849,   849,   850,   850,   851,   851,   851,   851,   851,   851,
     851,   851,   852,   852,   853,   853,   854,   854,   854,   854,
     855,   855,   856,   856,   856,   856,   856,   856,   856,   856,
     856,   856,   856,   856,   856,   856,   856,   856,   856,   856,
     856,   856,   856,   856,   856,   856,   856,   856,   856,   856,
     856,   857,   857,   858,   858,   858,   858,   859,   859,   860,
     861,   861,   862,   862,   862,   863,   863,   863,   863,   864,
     864,   864,   864,   865,   865,   866,   866,   866,   866,   866,
     866,   866,   867,   867,   868,   868,   869,   870,   870,   870,
     870,   870,   870,   871,   871,   871,   872,   872,   872,   873,
     873,   874,   874,   874,   874,   874,   874,   875,   876,   876,
     876,   876,   876,   877,   877,   878,   878,   878,   879,   879,
     880,   881,   881,   882,   882,   882,   883,   883,   883,   884,
     884,   885,   885,   886,   886,   887,   887,   888,   888,   889,
     889,   890,   890,   891,   891,   892,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   894,   894,   894,   894,   894,   894,   894,
     894,   894,   894,   894,   894,   894,   894,   894,   894,   894,
     894,   894,   894,   894,   894,   894,   894,   894,   894,   894,
     894,   894,   894,   894,   894,   894,   894,   894,   894,   894,
     894,   894,   894,   894,   894,   894,   894,   894,   894,   894,
     894,   894,   895,   895,   895,   895,   895,   895,   895,   895,
     895,   895,   895,   895,   895,   895,   895,   895,   895,   895,
     895,   895,   895,   895,   895,   895,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     2,     2,     4,     3,     5,     1,     0,     1,     1,
       0,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     1,     1,     1,     1,     1,     1,
       2,     1,     1,     9,    12,     0,     2,     1,     1,     1,
       1,     1,     1,     3,     0,     1,     2,     1,     1,     2,
       2,     3,     1,     1,     2,     2,     1,     2,     3,     5,
       2,     5,     5,     2,     3,     1,     1,     2,     2,     0,
       4,     0,     3,     4,     4,     0,     3,     2,     0,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     3,     1,     2,     2,     2,     2,     2,     2,     0,
       3,     3,     3,     0,     1,     2,     1,     2,     2,     2,
       2,     4,     1,     3,     1,     3,     1,     1,     1,     1,
       3,     1,     2,     0,     1,     0,     1,     3,     0,     2,
       0,     3,     3,     1,     5,     3,     1,     3,     1,     4,
       5,     5,     6,     3,     7,     4,    11,     1,     3,     2,
       2,     2,     0,     3,     1,     1,     2,     2,     2,     2,
       1,     0,     1,     2,     7,    10,     2,     3,     0,     4,
       2,     2,     3,     4,     2,     1,     1,     1,     3,     9,
      11,    12,    14,     3,     4,     4,     0,     7,     1,     2,
       3,     2,     0,     2,     0,     1,     1,     3,     3,     1,
       2,     4,     4,     2,     3,     5,     5,     1,     1,    10,
      10,     1,     2,     4,     4,     4,     2,     2,     3,     1,
       3,     6,     2,     0,     3,     3,     4,     4,     4,     4,
       3,     2,     1,     1,     0,     1,     1,     0,     1,     5,
       1,     0,     1,     0,     3,     1,     3,     4,     3,     1,
       1,     0,     2,     2,     0,     2,     2,     1,     1,     1,
       0,     2,     4,     5,     4,     2,     3,     2,     2,     2,
       2,     1,     2,     3,     0,     1,     0,     5,     1,     4,
       6,     2,     1,     0,     4,     0,     1,     1,     1,     1,
       2,     2,     1,     1,     1,     1,     1,     1,     3,     0,
       1,     3,     1,     1,     2,     2,     0,     1,     3,     1,
       0,     1,     2,     3,     2,     4,     2,     3,     2,     0,
       1,     2,     0,     4,     5,     2,     3,     0,     1,     3,
       3,     3,     3,     3,     3,     1,     4,     3,     4,     5,
       4,     5,     4,     5,     2,     4,     1,     1,     0,     1,
       4,     5,     4,     0,     2,     2,     2,     1,     1,     0,
       4,     2,     1,     2,     2,     4,     2,     6,     2,     1,
       3,     4,     0,     2,     0,     2,     0,     1,     3,     3,
       2,     0,     2,     4,     1,     1,     2,     3,     5,     6,
       2,     3,     4,     3,     4,     0,     1,     1,     1,     1,
       1,     2,     4,     1,     1,     1,     1,     2,     3,     3,
       0,     1,     1,     1,     1,     1,     2,     2,     2,     2,
       2,     1,     3,     0,     1,     1,     1,     1,     5,     2,
       1,     1,     1,     1,     4,     1,     2,     2,     1,     3,
       3,     2,     1,     0,     5,     2,     5,     2,     1,     3,
       3,     0,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     3,     3,     3,
       3,     3,     3,     0,     1,     3,     3,     5,     2,     2,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     2,     2,     3,     3,     2,     2,     3,
       3,     5,     4,     6,     3,     5,     4,     6,     4,     6,
       5,     7,     3,     2,     4,     3,     2,     1,     3,     3,
       3,     3,     4,     3,     4,     3,     4,     5,     6,     6,
       7,     6,     7,     6,     7,     3,     4,     4,     6,     1,
       1,     3,     2,     2,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     2,     2,     5,
       6,     6,     7,     1,     1,     2,     2,     4,     1,     1,
       1,     2,     2,     3,     5,     6,     8,     6,     6,     4,
       4,     1,     1,     1,     5,     1,     1,     4,     1,     4,
       1,     4,     1,     4,     1,     1,     1,     1,     1,     1,
       6,     4,     4,     4,     4,     6,     5,     5,     5,     4,
       6,     4,     5,     0,     5,     0,     2,     0,     1,     3,
       3,     2,     2,     0,     6,     1,     0,     3,     0,     2,
       2,     0,     1,     4,     2,     2,     2,     2,     2,     4,
       3,     1,     5,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     4,     1,     4,     1,     4,     1,     2,     1,     2,
       1,     2,     1,     3,     1,     3,     1,     3,     1,     3,
       3,     1,     3,     3,     0,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     4,     3,     2,     3,     0,
       3,     3,     2,     2,     1,     0,     2,     2,     3,     2,
       1,     1,     3,     5,     1,     2,     4,     2,     0,     1,
       0,     1,     2,     2,     2,     3,     5,     1,     0,     1,
       2,     0,     2,     1,     0,     1,     0,     1,     3,     3,
       2,     1,     1,     1,     3,     1,     2,     1,     3,     1,
       1,     1,     2,     1,     1,     1,     1,     1,     2,     6,
       2,     5,     3,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       3,     3,     0,     1,     1,     1,     1,     1,     1,     1,
       1,    14,     4,     1,     1,     1,     1,     1,     3,     3,
       4,     2,     3,     1,     1,     3,    11,     2,     1,     4,
       3,     2,     3,     2,     3,    13,    16,     1,     2,     0,
       1,     0,     1,     0,     2,     0,     1,     0,     9,     4,
       0,     1,     3,     2,     4,     2,     0,     1,     2,     1,
       1,     4,     1,     0,     2,     0,     1,     1,     2,     2,
       1,     1,     1,     1,     1,     3,     3,     3,     3,     5,
       3,     1,     1,     1,     4,     7,     2,     0,     1,     1,
       1,     1,     4,     5,     5,     4,     6,     1,     1,     1,
       1,     1,     1,     0,     1,     3,     1,     0,     5,     3,
       0,     1,     1,     1,     1,     2,     1,     1,     1,     2,
       3,     2,     1,     6,     6,     8,     6,     8,     6,     8,
       6,     8,     8,    10,     8,    10,     1,     0,     2,     4,
       5,     6,     4,     6,     4,     6,     8,     1,     1,     1,
       1,     1,     2,     1,     2,     1,     1,     1,     3,     3,
       3,     3,     2,     2,     1,     3,     1,     1,     1,     1,
       3,     1,     1,     0,     1,     1,     1,     4,     6,     1,
       2,     1,     1,     0,     1,     2,     2,     1,     2,     2,
       1,     2,     3,     2,     2,     2,     2,     3,     3,     3,
       1,     3,     1,     0,     1,     2,     2,     5,     8,     1,
       0,    11,     9,     1,     1,     3,     0,     1,     3,     1,
       0,     1,     0,     1,     0,     1,     3,     1,     1,     1,
       3,     0,     2,     2,     0,     2,     0,     1,     0,     1,
       1,     1,     3,     3,     1,     1,     3,     3,     3,     3,
       4,     3,     2,     1,     1,     1,     1,     1,     3,     6,
       1,     1,     2,     3,     4,     6,     4,     6,     4,     6,
       4,     6,     1,     2,     3,     2,     1,     3,     2,     3,
       1,     3,     2,     5,     3,     6,     4,     6,     6,     6,
       5,     5,     6,     9,     4,     5,     7,     6,     4,     8,
       4,     2,     4,     3,     6,     4,     2,     2,     2,     2,
       1,     2,     0,     1,     2,     2,     2,     1,     3,     4,
       2,     0,     2,     3,     3,     1,     3,     3,     2,     3,
       3,     3,     3,     1,     1,     1,     1,     3,     5,     1,
       1,     1,     1,     3,     2,     4,     8,     2,     2,     2,
       2,     2,     2,     1,     1,     0,     3,     9,    12,     3,
       0,     6,     8,     6,     8,     6,     8,     7,     1,     4,
       4,     7,     2,     1,     3,     4,     3,     0,     1,     0,
       2,     3,     5,     8,     5,     0,     5,     5,     7,     2,
       0,     1,     1,     1,     3,     2,     0,     1,     0,     1,
       3,     1,     3,     1,     3,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
      YYERROR;                                                  \
    }                                                           \
while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static unsigned
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  unsigned res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`----------------------------------------*/

static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  YYUSE (yylocationp);
  YYUSE (yyscanner);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyoutput, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule, core_yyscan_t yyscanner)
{
  unsigned long int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &(yyvsp[(yyi + 1) - (yynrhs)])
                       , &(yylsp[(yyi + 1) - (yynrhs)])                       , yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
yystrlen (const char *yystr)
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            /* Fall through.  */
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);
  YYUSE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.
       'yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yyls1, yysize * sizeof (*yylsp),
                    &yystacksize);

        yyls = yyls1;
        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 480 "third_party/libpg_query/grammar/grammar.y" /* yacc.c:1646  */
    {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 13567 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 3:
#line 496 "third_party/libpg_query/grammar/grammar.y" /* yacc.c:1646  */
    {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 13583 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 4:
#line 508 "third_party/libpg_query/grammar/grammar.y" /* yacc.c:1646  */
    {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 13594 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 40:
#line 552 "third_party/libpg_query/grammar/grammar.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 13600 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 41:
#line 7 "third_party/libpg_query/grammar/statements/call.y" /* yacc.c:1646  */
    {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 13610 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 42:
#line 10 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 13621 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 43:
#line 17 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 13635 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 44:
#line 27 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 13646 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 45:
#line 34 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 13657 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 46:
#line 44 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 13663 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 47:
#line 45 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 13669 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 48:
#line 50 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 13675 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 49:
#line 51 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 13681 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 50:
#line 52 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 13687 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 56:
#line 65 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 13693 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 57:
#line 66 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 13699 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 58:
#line 67 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 13705 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 59:
#line 68 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 13711 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 60:
#line 73 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 13717 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 61:
#line 74 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 13723 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 62:
#line 80 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 13731 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 63:
#line 84 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 13739 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 64:
#line 91 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    {}
#line 13745 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 65:
#line 92 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    {}
#line 13751 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 66:
#line 97 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) "true"; }
#line 13757 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 67:
#line 98 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) "false"; }
#line 13763 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 68:
#line 99 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) "on"; }
#line 13769 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 69:
#line 105 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 13775 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 70:
#line 111 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 13783 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 71:
#line 118 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 13789 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 72:
#line 119 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) "analyze"; }
#line 13795 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 73:
#line 9 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->if_not_exists = false;
					(yyval.node) = (PGNode *)n;
				}
#line 13812 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 74:
#line 24 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->if_not_exists = true;
					(yyval.node) = (PGNode *)n;
				}
#line 13829 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 75:
#line 41 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = 0; }
#line 13835 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 76:
#line 43 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 13863 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 77:
#line 69 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 13869 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 78:
#line 70 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 13875 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 79:
#line 71 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 13881 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 80:
#line 72 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 13887 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 81:
#line 73 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 13893 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 82:
#line 74 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 13899 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 83:
#line 78 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 13905 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 84:
#line 79 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 13911 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 85:
#line 84 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 13917 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 86:
#line 89 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 13923 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 87:
#line 90 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 13929 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 88:
#line 91 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 13935 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 89:
#line 92 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 13941 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 90:
#line 93 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 13947 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 91:
#line 99 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 13958 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 92:
#line 105 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 13964 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 93:
#line 106 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 13970 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 94:
#line 108 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 13987 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 95:
#line 125 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 13998 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 96:
#line 132 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 14009 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 97:
#line 139 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 14023 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 98:
#line 149 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 14037 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 99:
#line 159 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 14053 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 100:
#line 171 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 14066 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 101:
#line 180 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 14079 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 102:
#line 189 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 14098 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 103:
#line 208 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 14106 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 104:
#line 214 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = (yyvsp[0].ival); }
#line 14112 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 105:
#line 220 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 14118 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 106:
#line 222 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 14124 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 107:
#line 224 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 14130 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 108:
#line 226 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 14136 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 109:
#line 228 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 14142 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 110:
#line 233 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 14148 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 111:
#line 234 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 14154 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 112:
#line 238 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 14160 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 113:
#line 239 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 14166 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 114:
#line 240 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 14172 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 115:
#line 241 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 14178 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 116:
#line 246 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 14184 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 117:
#line 250 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {  (yyval.boolean) = true; }
#line 14190 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 118:
#line 251 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {  (yyval.boolean) = false; }
#line 14196 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 119:
#line 257 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 14207 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 120:
#line 263 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 14213 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 121:
#line 268 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 14219 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 122:
#line 269 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 14225 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 123:
#line 270 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 14231 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 124:
#line 271 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 14237 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 125:
#line 272 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 14243 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 126:
#line 273 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 14249 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 127:
#line 274 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 14255 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 128:
#line 275 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 14261 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 129:
#line 281 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 14267 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 130:
#line 282 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 14273 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 131:
#line 286 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 14279 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 132:
#line 292 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 14290 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 133:
#line 299 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 14301 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 134:
#line 306 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 14312 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 135:
#line 313 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 14323 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 136:
#line 324 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 14329 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 137:
#line 325 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 14335 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 138:
#line 326 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 14341 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 139:
#line 327 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 14347 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 140:
#line 331 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 14353 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 141:
#line 336 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 14359 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 142:
#line 337 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 14365 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 143:
#line 338 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = 0; }
#line 14371 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 144:
#line 343 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 14377 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 145:
#line 348 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 14383 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 146:
#line 349 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = CAS_DEFERRABLE; }
#line 14389 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 147:
#line 350 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 14395 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 148:
#line 351 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 14401 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 149:
#line 352 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = CAS_NOT_VALID; }
#line 14407 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 150:
#line 353 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = CAS_NO_INHERIT; }
#line 14413 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 151:
#line 359 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					n->fdwoptions = (yyvsp[-1].list);
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
				}
#line 14436 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 152:
#line 382 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 14444 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 153:
#line 386 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 14452 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 154:
#line 392 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 14458 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 155:
#line 393 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 14464 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 156:
#line 397 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 14470 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 157:
#line 401 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 14476 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 158:
#line 402 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 14482 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 159:
#line 403 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 14488 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 160:
#line 408 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 14496 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 161:
#line 412 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 14504 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 162:
#line 419 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 14510 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 163:
#line 420 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 14516 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 164:
#line 425 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 14522 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 165:
#line 426 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 14528 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 166:
#line 431 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 14536 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 167:
#line 438 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 14542 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 168:
#line 439 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 14548 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 169:
#line 444 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 14554 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 170:
#line 445 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 14560 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 171:
#line 449 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = (yyvsp[0].ival); }
#line 14566 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 172:
#line 455 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 14574 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 173:
#line 459 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 14582 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 174:
#line 463 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 14591 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 175:
#line 468 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 14599 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 176:
#line 475 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 14605 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 177:
#line 476 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 14611 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 178:
#line 480 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.typnam) = (yyvsp[0].typnam); }
#line 14617 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 179:
#line 482 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 14627 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 180:
#line 488 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 14638 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 181:
#line 499 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 14655 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 182:
#line 513 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 14672 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 183:
#line 526 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 14690 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 184:
#line 541 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 14707 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 185:
#line 554 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 14725 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 186:
#line 569 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 14747 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 187:
#line 591 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 14755 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 188:
#line 595 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 14763 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 189:
#line 602 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 14771 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 190:
#line 606 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 14783 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 191:
#line 614 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 14791 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 192:
#line 618 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 14799 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 193:
#line 626 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 14810 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 194:
#line 635 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 14816 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 195:
#line 636 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 14822 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 196:
#line 637 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 14828 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 197:
#line 638 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 14834 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 198:
#line 640 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 14845 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 199:
#line 647 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 14856 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 200:
#line 653 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 14862 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 201:
#line 654 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 14868 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 202:
#line 659 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 14874 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 203:
#line 660 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 14880 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 204:
#line 12 "third_party/libpg_query/grammar/statements/create_as.y" /* yacc.c:1646  */
    {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->if_not_exists = false;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 14897 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 205:
#line 25 "third_party/libpg_query/grammar/statements/create_as.y" /* yacc.c:1646  */
    {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->if_not_exists = true;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 14914 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 206:
#line 41 "third_party/libpg_query/grammar/statements/create_as.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 14920 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 207:
#line 42 "third_party/libpg_query/grammar/statements/create_as.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 14926 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 208:
#line 43 "third_party/libpg_query/grammar/statements/create_as.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 14932 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 209:
#line 49 "third_party/libpg_query/grammar/statements/create_as.y" /* yacc.c:1646  */
    {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 14946 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 210:
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y" /* yacc.c:1646  */
    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				(yyval.node) = (PGNode *) n;
			}
#line 14957 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 211:
#line 11 "third_party/libpg_query/grammar/statements/variable_show.y" /* yacc.c:1646  */
    {
					PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *) n;
				}
#line 14967 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 212:
#line 17 "third_party/libpg_query/grammar/statements/variable_show.y" /* yacc.c:1646  */
    {
					PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
					n->name = (char*) "timezone";
					(yyval.node) = (PGNode *) n;
				}
#line 14977 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 213:
#line 23 "third_party/libpg_query/grammar/statements/variable_show.y" /* yacc.c:1646  */
    {
					PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
					n->name = (char*) "transaction_isolation";
					(yyval.node) = (PGNode *) n;
				}
#line 14987 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 214:
#line 29 "third_party/libpg_query/grammar/statements/variable_show.y" /* yacc.c:1646  */
    {
					PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
					n->name = (char*) "all";
					(yyval.node) = (PGNode *) n;
				}
#line 14997 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 217:
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 15003 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 218:
#line 41 "third_party/libpg_query/grammar/statements/variable_show.y" /* yacc.c:1646  */
    { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 15009 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 219:
#line 10 "third_party/libpg_query/grammar/statements/view.y" /* yacc.c:1646  */
    {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->replace = false;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 15025 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 220:
#line 23 "third_party/libpg_query/grammar/statements/view.y" /* yacc.c:1646  */
    {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->replace = true;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 15041 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 221:
#line 36 "third_party/libpg_query/grammar/statements/view.y" /* yacc.c:1646  */
    {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->replace = false;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 15062 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 222:
#line 54 "third_party/libpg_query/grammar/statements/view.y" /* yacc.c:1646  */
    {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->replace = true;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 15083 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 223:
#line 74 "third_party/libpg_query/grammar/statements/view.y" /* yacc.c:1646  */
    { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 15089 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 224:
#line 75 "third_party/libpg_query/grammar/statements/view.y" /* yacc.c:1646  */
    { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 15095 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 225:
#line 76 "third_party/libpg_query/grammar/statements/view.y" /* yacc.c:1646  */
    { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 15101 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 226:
#line 77 "third_party/libpg_query/grammar/statements/view.y" /* yacc.c:1646  */
    { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 15107 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 227:
#line 9 "third_party/libpg_query/grammar/statements/delete.y" /* yacc.c:1646  */
    {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 15121 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 228:
#line 22 "third_party/libpg_query/grammar/statements/delete.y" /* yacc.c:1646  */
    {
					(yyval.range) = (yyvsp[0].range);
				}
#line 15129 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 229:
#line 26 "third_party/libpg_query/grammar/statements/delete.y" /* yacc.c:1646  */
    {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 15140 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 230:
#line 33 "third_party/libpg_query/grammar/statements/delete.y" /* yacc.c:1646  */
    {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 15151 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 231:
#line 43 "third_party/libpg_query/grammar/statements/delete.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 15157 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 232:
#line 44 "third_party/libpg_query/grammar/statements/delete.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 15163 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 233:
#line 50 "third_party/libpg_query/grammar/statements/delete.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 15169 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 234:
#line 51 "third_party/libpg_query/grammar/statements/delete.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 15175 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 237:
#line 52 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[-1].node); }
#line 15181 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 238:
#line 53 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[-1].node); }
#line 15187 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 239:
#line 68 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 15193 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 240:
#line 70 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 15204 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 241:
#line 77 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 15216 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 242:
#line 85 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 15228 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 243:
#line 93 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 15240 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 244:
#line 101 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 15252 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 245:
#line 109 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 15264 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 246:
#line 117 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 15276 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 247:
#line 127 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 15282 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 248:
#line 128 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 15288 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 249:
#line 158 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->intoClause = (yyvsp[-6].into);
					n->fromClause = (yyvsp[-5].list);
					n->whereClause = (yyvsp[-4].node);
					n->groupClause = (yyvsp[-3].list);
					n->havingClause = (yyvsp[-2].node);
					n->windowClause = (yyvsp[-1].list);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 15305 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 250:
#line 173 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-8].list);
					n->targetList = (yyvsp[-7].list);
					n->intoClause = (yyvsp[-6].into);
					n->fromClause = (yyvsp[-5].list);
					n->whereClause = (yyvsp[-4].node);
					n->groupClause = (yyvsp[-3].list);
					n->havingClause = (yyvsp[-2].node);
					n->windowClause = (yyvsp[-1].list);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 15323 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 251:
#line 186 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 15329 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 252:
#line 188 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 15352 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 253:
#line 207 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 15360 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 254:
#line 211 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 15368 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 255:
#line 215 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 15376 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 256:
#line 236 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 15387 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 257:
#line 243 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 15398 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 258:
#line 250 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 15409 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 259:
#line 259 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 15415 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 260:
#line 260 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 15421 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 261:
#line 264 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-5].str);
				n->aliascolnames = (yyvsp[-4].list);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-5]);
				(yyval.node) = (PGNode *) n;
			}
#line 15434 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 262:
#line 276 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 15448 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 263:
#line 286 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.into) = NULL; }
#line 15454 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 264:
#line 295 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 15463 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 265:
#line 300 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 15472 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 266:
#line 305 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 15481 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 267:
#line 310 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 15490 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 268:
#line 315 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 15502 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 269:
#line 323 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 15514 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 270:
#line 331 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 15523 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 271:
#line 336 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 15532 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 272:
#line 341 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 15541 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 273:
#line 347 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {}
#line 15547 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 274:
#line 348 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {}
#line 15553 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 275:
#line 352 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 15559 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 276:
#line 353 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 15565 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 277:
#line 354 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 15571 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 278:
#line 361 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(NIL); }
#line 15577 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 279:
#line 362 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 15583 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 280:
#line 366 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL;}
#line 15589 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 281:
#line 367 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 15595 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 282:
#line 371 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list);}
#line 15601 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 283:
#line 372 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 15607 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 284:
#line 376 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 15613 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 285:
#line 380 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 15619 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 286:
#line 381 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 15625 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 287:
#line 385 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 15638 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 288:
#line 394 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 15651 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 289:
#line 404 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 15657 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 290:
#line 405 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 15663 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 291:
#line 406 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 15669 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 292:
#line 409 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 15675 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 293:
#line 410 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 15681 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 294:
#line 411 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 15687 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 295:
#line 415 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 15693 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 296:
#line 416 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 15699 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 297:
#line 417 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 15705 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 298:
#line 418 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 15711 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 299:
#line 422 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 15717 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 300:
#line 423 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make2(NULL,NULL); }
#line 15723 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 301:
#line 428 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 15729 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 302:
#line 430 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 15742 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 303:
#line 446 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[-2].node); }
#line 15748 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 304:
#line 448 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = makeIntConst(1, -1); }
#line 15754 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 305:
#line 453 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 15760 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 306:
#line 456 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[-1].node); }
#line 15766 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 307:
#line 464 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 15774 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 308:
#line 468 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 15782 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 309:
#line 472 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 15790 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 310:
#line 476 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 15798 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 311:
#line 480 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 15806 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 312:
#line 484 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 15814 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 313:
#line 491 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (yyvsp[0].node);
				}
#line 15822 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 314:
#line 495 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 15828 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 315:
#line 502 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 15834 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 316:
#line 503 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = NULL; }
#line 15840 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 317:
#line 508 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), (yyvsp[0].ival), (yylsp[-4]));
				}
#line 15848 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 318:
#line 512 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, -1, (yylsp[0]));
		}
#line 15856 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 319:
#line 516 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), -1, (yylsp[-3]));
		}
#line 15864 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 320:
#line 520 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), (yyvsp[-1].ival), (yylsp[-5]));
		}
#line 15872 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 321:
#line 527 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (yyvsp[0].node);
				}
#line 15880 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 322:
#line 533 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 15886 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 323:
#line 534 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 15892 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 324:
#line 539 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.ival) = (yyvsp[-1].ival); }
#line 15898 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 325:
#line 540 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.ival) = -1; }
#line 15904 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 326:
#line 544 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 15910 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 327:
#line 546 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 15919 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 328:
#line 553 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 15925 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 329:
#line 573 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 15931 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 330:
#line 575 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 15937 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 331:
#line 577 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 15943 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 332:
#line 581 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 15949 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 333:
#line 582 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 15955 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 334:
#line 586 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.ival) = 0; }
#line 15961 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 335:
#line 587 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.ival) = 0; }
#line 15967 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 336:
#line 590 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.ival) = 0; }
#line 15973 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 337:
#line 591 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.ival) = 0; }
#line 15979 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 338:
#line 616 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 15985 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 339:
#line 617 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 15991 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 340:
#line 621 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 15997 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 341:
#line 622 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 16003 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 342:
#line 626 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 16009 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 343:
#line 627 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 16015 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 344:
#line 632 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 16023 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 345:
#line 644 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 16029 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 346:
#line 645 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 16035 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 347:
#line 649 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 16041 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 348:
#line 650 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 16047 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 349:
#line 654 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 16053 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 350:
#line 655 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 16059 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 351:
#line 659 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 16065 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 352:
#line 660 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 16071 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 353:
#line 665 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 16083 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 354:
#line 675 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 16089 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 355:
#line 676 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 16095 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 356:
#line 677 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 16101 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 357:
#line 678 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 16107 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 358:
#line 682 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 16113 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 359:
#line 683 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 16119 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 360:
#line 688 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.lockwaitpolicy) = LockWaitError; }
#line 16125 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 361:
#line 689 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 16131 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 362:
#line 690 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 16137 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 363:
#line 700 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 16147 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 364:
#line 706 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 16157 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 365:
#line 723 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 16163 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 366:
#line 724 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 16169 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 367:
#line 725 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 16175 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 368:
#line 729 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 16181 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 369:
#line 730 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 16187 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 370:
#line 737 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 16197 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 371:
#line 743 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 16209 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 372:
#line 751 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 16221 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 373:
#line 759 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					/*
					 * The SQL spec does not permit a subselect
					 * (<derived_table>) without an alias clause,
					 * so we don't either.  This avoids the problem
					 * of needing to invent a unique refname for it.
					 * That could be surmounted if there's sufficient
					 * popular demand, but for now let's just implement
					 * the spec and see if anyone complains.
					 * However, it does seem like a good idea to emit
					 * an error message that's better than "syntax error".
					 */
					if ((yyvsp[-1].alias) == NULL)
					{
						if (IsA((yyvsp[-2].node), PGSelectStmt) &&
							((PGSelectStmt *) (yyvsp[-2].node))->valuesLists)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("VALUES in FROM must have an alias"),
									 errhint("For example, FROM (VALUES ...) [AS] foo."),
									 parser_errposition((yylsp[-2]))));
						else
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("subquery in FROM must have an alias"),
									 errhint("For example, FROM (SELECT ...) [AS] foo."),
									 parser_errposition((yylsp[-2]))));
					}
					(yyval.node) = (PGNode *) n;
				}
#line 16261 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 374:
#line 795 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					/* same comment as above */
					if ((yyvsp[0].alias) == NULL)
					{
						if (IsA((yyvsp[-1].node), PGSelectStmt) &&
							((PGSelectStmt *) (yyvsp[-1].node))->valuesLists)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("VALUES in FROM must have an alias"),
									 errhint("For example, FROM (VALUES ...) [AS] foo."),
									 parser_errposition((yylsp[-1]))));
						else
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("subquery in FROM must have an alias"),
									 errhint("For example, FROM (SELECT ...) [AS] foo."),
									 parser_errposition((yylsp[-1]))));
					}
					(yyval.node) = (PGNode *) n;
				}
#line 16291 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 375:
#line 821 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 16299 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 376:
#line 825 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 16308 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 377:
#line 851 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 16316 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 378:
#line 855 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 16333 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 379:
#line 868 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->isNatural = false;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 16351 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 380:
#line 882 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 16370 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 381:
#line 897 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->isNatural = true;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 16386 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 382:
#line 909 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = true;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 16403 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 383:
#line 925 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 16413 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 384:
#line 931 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 16422 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 385:
#line 936 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 16432 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 386:
#line 942 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 16441 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 387:
#line 948 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.alias) = (yyvsp[0].alias); }
#line 16447 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 388:
#line 949 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.alias) = NULL; }
#line 16453 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 389:
#line 958 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 16461 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 390:
#line 962 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 16469 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 391:
#line 966 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 16479 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 392:
#line 972 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 16489 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 393:
#line 978 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 16497 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 394:
#line 983 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.jtype) = PG_JOIN_FULL; }
#line 16503 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 395:
#line 984 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.jtype) = PG_JOIN_LEFT; }
#line 16509 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 396:
#line 985 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 16515 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 397:
#line 986 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.jtype) = PG_JOIN_INNER; }
#line 16521 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 398:
#line 990 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 16527 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 399:
#line 991 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 16533 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 400:
#line 1003 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 16539 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 401:
#line 1004 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 16545 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 402:
#line 1010 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 16556 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 403:
#line 1017 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 16567 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 404:
#line 1024 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 16578 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 405:
#line 1031 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 16589 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 406:
#line 1063 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 16604 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 407:
#line 1074 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 16619 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 408:
#line 1087 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 16625 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 409:
#line 1091 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 16631 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 410:
#line 1092 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 16637 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 411:
#line 1095 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 16643 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 412:
#line 1096 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 16649 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 413:
#line 1099 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 16655 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 414:
#line 1100 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 16661 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 415:
#line 1105 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 16667 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 416:
#line 1106 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 16673 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 417:
#line 1112 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 16681 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 418:
#line 1116 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 16689 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 419:
#line 1122 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 16711 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 420:
#line 1143 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 16723 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 421:
#line 1150 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 16729 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 422:
#line 1163 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 16737 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 423:
#line 1166 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 16745 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 426:
#line 1173 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 16754 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 427:
#line 1178 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 16764 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 428:
#line 1185 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 16773 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 429:
#line 1190 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 16783 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 430:
#line 1196 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 16792 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 431:
#line 1201 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 16802 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 432:
#line 1206 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
               (yyval.typnam) = SystemTypeName("struct");
               (yyval.typnam)->typmods = (yyvsp[-1].list);
               (yyval.typnam)->location = (yylsp[-3]);
			}
#line 16812 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 433:
#line 1215 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 16818 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 434:
#line 1217 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 16824 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 435:
#line 1219 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {  (yyval.list) = NIL; }
#line 16830 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 436:
#line 1223 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16836 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 437:
#line 1224 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16842 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 438:
#line 1225 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16848 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 439:
#line 1226 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16854 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 440:
#line 1227 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16860 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 441:
#line 1229 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 16869 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 442:
#line 1234 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 16879 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 443:
#line 1253 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16885 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 444:
#line 1254 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16891 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 445:
#line 1255 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16897 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 446:
#line 1256 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16903 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 447:
#line 1268 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 16913 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 448:
#line 1274 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-2].str)), (yyvsp[-1].list)));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-2]);
				}
#line 16923 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 449:
#line 1281 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 16929 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 450:
#line 1282 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 16935 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 451:
#line 1289 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 16944 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 452:
#line 1294 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 16953 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 453:
#line 1299 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 16962 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 454:
#line 1304 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 16971 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 455:
#line 1309 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 16980 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 456:
#line 1314 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 16989 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 457:
#line 1319 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 16998 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 458:
#line 1324 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17008 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 459:
#line 1330 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17018 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 460:
#line 1336 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17028 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 461:
#line 1342 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 17037 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 462:
#line 1349 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 17062 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 463:
#line 1370 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 17070 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 464:
#line 1380 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 17078 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 465:
#line 1384 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 17086 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 466:
#line 1392 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 17094 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 467:
#line 1396 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 17103 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 468:
#line 1404 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 17116 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 469:
#line 1416 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17134 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 470:
#line 1437 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 17142 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 471:
#line 1441 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 17150 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 472:
#line 1447 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 17158 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 473:
#line 1451 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 17173 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 474:
#line 1464 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 17183 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 475:
#line 1472 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 17195 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 476:
#line 1482 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 17201 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 477:
#line 1484 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 17207 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 478:
#line 1486 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = "varchar"; }
#line 17213 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 479:
#line 1488 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 17219 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 480:
#line 1490 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 17225 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 481:
#line 1492 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 17231 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 482:
#line 1496 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 17237 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 483:
#line 1497 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 17243 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 484:
#line 1505 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 17256 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 485:
#line 1514 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17268 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 486:
#line 1522 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 17281 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 487:
#line 1531 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17293 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 488:
#line 1542 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 17302 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 489:
#line 1549 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 17308 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 490:
#line 1550 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 17314 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 491:
#line 1551 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 17320 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 508:
#line 1580 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 17326 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 509:
#line 1582 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 17332 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 510:
#line 1584 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 17338 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 511:
#line 1586 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 17344 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 512:
#line 1588 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 17350 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 513:
#line 1590 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 17356 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 514:
#line 1592 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 17362 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 515:
#line 1594 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 17368 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 516:
#line 1596 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 17377 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 517:
#line 1601 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 17386 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 518:
#line 1606 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 17396 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 519:
#line 1612 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 17407 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 520:
#line 1619 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 17416 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 521:
#line 1624 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 17426 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 522:
#line 1630 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 17435 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 523:
#line 1635 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 17441 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 524:
#line 1666 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 17447 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 525:
#line 1669 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), (yylsp[-1])); }
#line 17453 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 526:
#line 1671 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 17465 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 527:
#line 1679 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 17475 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 528:
#line 1694 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 17481 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 529:
#line 1696 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 17487 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 530:
#line 1698 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17493 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 531:
#line 1700 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17499 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 532:
#line 1702 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17505 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 533:
#line 1704 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17511 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 534:
#line 1706 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17517 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 535:
#line 1708 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17523 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 536:
#line 1710 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17529 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 537:
#line 1712 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17535 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 538:
#line 1714 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17541 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 539:
#line 1716 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17547 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 540:
#line 1718 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17553 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 541:
#line 1720 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17559 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 542:
#line 1723 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17565 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 543:
#line 1725 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 17571 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 544:
#line 1727 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 17577 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 545:
#line 1730 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17583 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 546:
#line 1732 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17589 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 547:
#line 1734 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 17595 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 548:
#line 1736 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 17601 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 549:
#line 1739 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 17610 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 550:
#line 1744 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 17619 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 551:
#line 1749 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 17630 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 552:
#line 1756 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 17639 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 553:
#line 1761 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 17650 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 554:
#line 1768 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 17659 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 555:
#line 1773 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 17671 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 556:
#line 1781 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 17680 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 557:
#line 1786 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 17692 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 558:
#line 1795 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 17704 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 559:
#line 1803 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 17716 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 560:
#line 1811 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 17728 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 561:
#line 1819 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 17740 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 562:
#line 1837 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 17752 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 563:
#line 1845 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 17764 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 564:
#line 1853 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 17776 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 565:
#line 1861 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 17788 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 566:
#line 1869 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 17800 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 567:
#line 1876 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 17809 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 568:
#line 1881 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->parameters = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 17821 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 569:
#line 1889 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->parameters = list_make1((yyvsp[-2].node));
				n->function = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 17833 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 570:
#line 1897 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 17853 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 571:
#line 1913 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 17865 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 572:
#line 1921 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 17877 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 573:
#line 1929 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 17889 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 574:
#line 1937 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 17901 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 575:
#line 1945 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 17913 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 576:
#line 1953 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 17925 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 577:
#line 1961 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 17933 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 578:
#line 1965 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 17941 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 579:
#line 1969 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 17949 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 580:
#line 1973 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 17957 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 581:
#line 1977 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 17969 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 582:
#line 1985 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 17981 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 583:
#line 1993 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 17993 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 584:
#line 2001 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 18005 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 585:
#line 2009 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 18029 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 586:
#line 2029 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 18055 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 587:
#line 2051 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 18070 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 588:
#line 2062 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 18081 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 589:
#line 2069 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 18099 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 590:
#line 2094 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 18105 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 591:
#line 2096 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), (yylsp[-1])); }
#line 18111 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 592:
#line 2098 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 18117 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 593:
#line 2100 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 18123 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 594:
#line 2102 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18129 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 595:
#line 2104 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18135 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 596:
#line 2106 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18141 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 597:
#line 2108 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18147 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 598:
#line 2110 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18153 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 599:
#line 2112 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18159 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 600:
#line 2114 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18165 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 601:
#line 2116 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18171 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 602:
#line 2118 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18177 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 603:
#line 2120 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18183 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 604:
#line 2122 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18189 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 605:
#line 2124 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18195 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 606:
#line 2126 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18201 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 607:
#line 2128 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 18207 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 608:
#line 2130 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 18213 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 609:
#line 2132 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 18221 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 610:
#line 2136 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 18229 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 611:
#line 2140 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 18237 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 612:
#line 2144 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 18245 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 613:
#line 2157 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 18251 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 614:
#line 2158 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 18257 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 615:
#line 2160 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeParamRef(0, (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeParamRef(0, (yylsp[-1]));
				}
#line 18273 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 616:
#line 2172 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[-1].ival);
					p->location = (yylsp[-1]);
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) p;
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) p;
				}
#line 18292 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 617:
#line 2187 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (yyvsp[-2].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *)n;
					}
					else
						(yyval.node) = (yyvsp[-2].node);
				}
#line 18308 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 618:
#line 2199 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 18314 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 619:
#line 2201 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 18320 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 620:
#line 2203 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 18335 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 621:
#line 2214 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 18363 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 622:
#line 2238 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 18378 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 623:
#line 2251 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 18386 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 624:
#line 2255 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall((yyvsp[-4].list), (yyvsp[-2].list), (yylsp[-4]));
					n->agg_order = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18396 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 625:
#line 2261 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), list_make1((yyvsp[-2].node)), (yylsp[-5]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18407 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 626:
#line 2268 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall((yyvsp[-7].list), lappend((yyvsp[-5].list), (yyvsp[-2].node)), (yylsp[-7]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18418 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 627:
#line 2275 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-2].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-1].list);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 18432 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 628:
#line 2285 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-2].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-1].list);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18443 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 629:
#line 2292 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/*
					 * We consider AGGREGATE(*) to invoke a parameterless
					 * aggregate.  This does the right thing for COUNT(*),
					 * and there are no other aggregates in SQL that accept
					 * '*' as parameter.
					 *
					 * The PGFuncCall node is also marked agg_star = true,
					 * so that later processing can detect what the argument
					 * really was.
					 */
					PGFuncCall *n = makeFuncCall((yyvsp[-3].list), NIL, (yylsp[-3]));
					n->agg_star = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18463 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 630:
#line 2320 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-3].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-2].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-2]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-2]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-2]))));
						n->agg_order = (yyvsp[-2].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-1].node);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 18502 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 631:
#line 2355 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 18508 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 632:
#line 2365 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 18514 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 633:
#line 2366 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 18520 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 634:
#line 2374 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 18530 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 635:
#line 2380 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_DATE, -1, (yylsp[0]));
				}
#line 18538 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 636:
#line 2384 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME, -1, (yylsp[0]));
				}
#line 18546 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 637:
#line 2388 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 18554 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 638:
#line 2392 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP, -1, (yylsp[0]));
				}
#line 18562 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 639:
#line 2396 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 18570 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 640:
#line 2400 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME, -1, (yylsp[0]));
				}
#line 18578 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 641:
#line 2404 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 18586 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 642:
#line 2408 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP, -1, (yylsp[0]));
				}
#line 18594 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 643:
#line 2412 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 18602 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 644:
#line 2416 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_ROLE, -1, (yylsp[0]));
				}
#line 18610 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 645:
#line 2420 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_USER, -1, (yylsp[0]));
				}
#line 18618 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 646:
#line 2424 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_SESSION_USER, -1, (yylsp[0]));
				}
#line 18626 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 647:
#line 2428 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_USER, -1, (yylsp[0]));
				}
#line 18634 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 648:
#line 2432 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_CATALOG, -1, (yylsp[0]));
				}
#line 18642 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 649:
#line 2436 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_SCHEMA, -1, (yylsp[0]));
				}
#line 18650 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 650:
#line 2440 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), (yylsp[-5])); }
#line 18656 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 651:
#line 2442 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 18664 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 652:
#line 2446 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 18677 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 653:
#line 2455 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* position(A in B) is converted to position(B, A) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 18686 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 654:
#line 2460 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 18697 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 655:
#line 2467 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 18716 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 656:
#line 2482 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 18727 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 657:
#line 2489 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 18735 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 658:
#line 2493 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 18743 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 659:
#line 2497 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 18751 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 660:
#line 2501 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 18759 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 661:
#line 2505 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 18770 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 662:
#line 2518 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 18776 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 663:
#line 2519 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 18782 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 664:
#line 2523 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[-1].node); }
#line 18788 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 665:
#line 2524 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 18794 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 666:
#line 2532 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 18800 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 667:
#line 2533 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 18806 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 668:
#line 2537 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 18812 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 669:
#line 2539 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 18818 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 670:
#line 2544 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 18828 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 671:
#line 2552 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.windef) = (yyvsp[0].windef); }
#line 18834 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 672:
#line 2554 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 18851 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 673:
#line 2567 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.windef) = NULL; }
#line 18857 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 674:
#line 2572 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 18875 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 675:
#line 2597 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 18881 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 676:
#line 2598 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = NULL; }
#line 18887 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 677:
#line 2601 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 18893 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 678:
#line 2602 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 18899 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 679:
#line 2614 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					if (n->frameOptions & (FRAMEOPTION_START_VALUE_PRECEDING |
										   FRAMEOPTION_END_VALUE_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("RANGE PRECEDING is only supported with UNBOUNDED"),
								 parser_errposition((yylsp[-1]))));
					if (n->frameOptions & (FRAMEOPTION_START_VALUE_FOLLOWING |
										   FRAMEOPTION_END_VALUE_FOLLOWING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("RANGE FOLLOWING is only supported with UNBOUNDED"),
								 parser_errposition((yylsp[-1]))));
					(yyval.windef) = n;
				}
#line 18921 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 680:
#line 2632 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					(yyval.windef) = n;
				}
#line 18931 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 681:
#line 2638 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 18943 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 682:
#line 2648 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n = (yyvsp[0].windef);
					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 18964 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 683:
#line 2665 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);
					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_VALUE_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_VALUE_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 19005 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 684:
#line 2710 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 19017 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 685:
#line 2718 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 19029 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 686:
#line 2726 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 19041 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 687:
#line 2734 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 19053 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 688:
#line 2742 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 19065 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 689:
#line 2762 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 19071 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 690:
#line 2763 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 19077 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 691:
#line 2766 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list);}
#line 19083 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 692:
#line 2767 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 19089 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 693:
#line 2770 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 19095 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 694:
#line 2771 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 19101 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 695:
#line 2772 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 19107 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 696:
#line 2775 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 19113 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 697:
#line 2776 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 19119 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 698:
#line 2779 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = "+"; }
#line 19125 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 699:
#line 2780 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = "-"; }
#line 19131 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 700:
#line 2781 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = "*"; }
#line 19137 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 701:
#line 2782 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = "/"; }
#line 19143 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 702:
#line 2783 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = "%"; }
#line 19149 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 703:
#line 2784 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = "^"; }
#line 19155 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 704:
#line 2785 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = "<"; }
#line 19161 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 705:
#line 2786 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = ">"; }
#line 19167 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 706:
#line 2787 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = "="; }
#line 19173 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 707:
#line 2788 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = "<="; }
#line 19179 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 708:
#line 2789 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = ">="; }
#line 19185 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 709:
#line 2790 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = "<>"; }
#line 19191 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 710:
#line 2794 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 19197 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 711:
#line 2796 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 19203 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 712:
#line 2801 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 19209 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 713:
#line 2803 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 19215 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 714:
#line 2808 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 19221 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 715:
#line 2810 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 19227 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 716:
#line 2812 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString("~~")); }
#line 19233 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 717:
#line 2814 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString("!~~")); }
#line 19239 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 718:
#line 2816 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString("~~~")); }
#line 19245 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 719:
#line 2818 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString("!~~~")); }
#line 19251 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 720:
#line 2820 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString("~~*")); }
#line 19257 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 721:
#line 2822 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString("!~~*")); }
#line 19263 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 722:
#line 2836 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 19269 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 723:
#line 2838 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 19275 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 724:
#line 2842 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 19283 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 725:
#line 2846 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 19291 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 726:
#line 2853 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 19299 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 727:
#line 2857 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 19307 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 728:
#line 2863 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (yyvsp[0].node);
				}
#line 19315 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 729:
#line 2867 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 19328 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 730:
#line 2876 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 19341 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 731:
#line 2886 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 19347 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 732:
#line 2887 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 19353 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 733:
#line 2892 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 19361 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 734:
#line 2895 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 19367 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 735:
#line 2902 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 19373 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 736:
#line 2903 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) "year"; }
#line 19379 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 737:
#line 2904 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) "month"; }
#line 19385 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 738:
#line 2905 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) "day"; }
#line 19391 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 739:
#line 2906 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) "hour"; }
#line 19397 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 740:
#line 2907 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) "minute"; }
#line 19403 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 741:
#line 2908 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) "second"; }
#line 19409 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 742:
#line 2909 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) "millisecond"; }
#line 19415 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 743:
#line 2910 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) "microsecond"; }
#line 19421 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 744:
#line 2911 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 19427 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 745:
#line 2922 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 19435 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 746:
#line 2926 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 19443 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 747:
#line 2933 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 19449 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 748:
#line 2939 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-2].node)); }
#line 19455 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 749:
#line 2940 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 19461 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 750:
#line 2957 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 19469 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 751:
#line 2961 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 19478 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 752:
#line 2966 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 19486 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 753:
#line 2970 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), -1));
				}
#line 19505 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 754:
#line 2985 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = (yyvsp[0].list);
				}
#line 19513 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 755:
#line 2989 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 19519 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 756:
#line 2993 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 19525 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 757:
#line 2996 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 19531 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 758:
#line 2999 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 19537 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 759:
#line 3000 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 19543 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 760:
#line 3001 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 19549 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 761:
#line 3005 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 19560 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 762:
#line 3011 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 19566 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 763:
#line 3022 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 19580 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 764:
#line 3035 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19586 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 765:
#line 3036 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 19592 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 766:
#line 3041 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 19604 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 767:
#line 3051 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 19610 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 768:
#line 3052 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 19616 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 769:
#line 3055 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 19622 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 770:
#line 3056 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 19628 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 771:
#line 3060 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 19636 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 772:
#line 3064 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 19644 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 773:
#line 3071 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 19652 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 774:
#line 3075 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeNode(PGAStar);
				}
#line 19660 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 775:
#line 3079 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 19672 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 776:
#line 3087 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 19684 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 777:
#line 3097 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 19690 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 778:
#line 3098 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 19696 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 779:
#line 3102 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19702 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 780:
#line 3103 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 19708 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 781:
#line 3107 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 19714 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 782:
#line 3108 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 19720 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 785:
#line 3122 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 19726 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 786:
#line 3123 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 19732 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 787:
#line 3127 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 19738 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 788:
#line 3128 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 19744 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 789:
#line 3132 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 19756 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 790:
#line 3148 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 19768 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 791:
#line 3156 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 19780 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 792:
#line 3164 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGColumnRef *n = makeNode(PGColumnRef);
					n->fields = list_make1(makeNode(PGAStar));
					n->location = (yylsp[0]);

					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)n;
					(yyval.target)->location = (yylsp[0]);
				}
#line 19796 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 793:
#line 3185 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 19802 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 794:
#line 3186 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 19808 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 795:
#line 3198 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 19816 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 796:
#line 3202 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 19845 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 797:
#line 3229 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 19851 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 798:
#line 3231 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 19857 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 799:
#line 3235 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 19863 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 800:
#line 3237 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 19869 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 801:
#line 3248 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 19875 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 802:
#line 3250 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 19884 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 803:
#line 3261 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 19892 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 804:
#line 3265 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 19900 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 805:
#line 3269 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 19908 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 806:
#line 3273 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 19916 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 807:
#line 3277 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 19929 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 808:
#line 3286 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 19940 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 809:
#line 3293 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-5].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, nor ORDER BY.
					 */
					foreach(lc, (yyvsp[-3].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-2].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-2]))));

					t->typmods = (yyvsp[-3].list);
					t->location = (yylsp[-5]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 19976 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 810:
#line 3325 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 19984 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 811:
#line 3329 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 19992 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 812:
#line 3333 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 20000 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 813:
#line 3337 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 20008 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 814:
#line 3341 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 20016 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 815:
#line 3345 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 20024 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 816:
#line 3349 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 20032 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 817:
#line 3354 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.ival) = (yyvsp[0].ival); }
#line 20038 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 818:
#line 3355 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 20044 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 819:
#line 3371 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 20050 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 820:
#line 3372 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20056 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 821:
#line 3373 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20062 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 822:
#line 3376 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 20068 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 823:
#line 3377 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 20074 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 824:
#line 3382 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 20080 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 825:
#line 3383 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20086 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 826:
#line 3384 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20092 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 827:
#line 3387 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 20098 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 828:
#line 3388 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 20104 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 829:
#line 3392 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 20110 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 830:
#line 3394 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 20116 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 831:
#line 3398 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 20122 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 832:
#line 3399 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 20128 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 834:
#line 3410 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 20134 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 835:
#line 3411 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20140 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 836:
#line 3412 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20146 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 837:
#line 3413 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20152 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 838:
#line 3414 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20158 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 839:
#line 3417 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 20164 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 840:
#line 3418 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 20170 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 841:
#line 15 "third_party/libpg_query/grammar/statements/create_property_graph.y" /* yacc.c:1646  */
    {
					PGCreatePropertyGraphStmt *n = makeNode(PGCreatePropertyGraphStmt);
					n->name = (yyvsp[-10].str);
					n->vertex_tables = 	(yyvsp[-6].list);
					n->edge_tables = (yyvsp[-1].list);
					// n->property_graph_content = $5;
					(yyval.node) = (PGNode *)n;
					// n = $5;
				}
#line 20184 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 842:
#line 25 "third_party/libpg_query/grammar/statements/create_property_graph.y" /* yacc.c:1646  */
    {
					PGCreatePropertyGraphStmt *n = makeNode(PGCreatePropertyGraphStmt);
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20194 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 847:
#line 47 "third_party/libpg_query/grammar/statements/create_property_graph.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 20200 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 848:
#line 48 "third_party/libpg_query/grammar/statements/create_property_graph.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 20206 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 849:
#line 54 "third_party/libpg_query/grammar/statements/create_property_graph.y" /* yacc.c:1646  */
    {
					PGPropertyGraphTable *n = makeNode(PGPropertyGraphTable);
					n->name = (yyvsp[-2].range);
					n->labels = (yyvsp[0].list);
					n->keys = (yyvsp[-1].list);
					n->is_vertex_table = true;
					(yyval.node) = (PGNode *) n;
				}
#line 20219 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 850:
#line 66 "third_party/libpg_query/grammar/statements/create_property_graph.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 20225 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 851:
#line 70 "third_party/libpg_query/grammar/statements/create_property_graph.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].str)); }
#line 20231 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 852:
#line 71 "third_party/libpg_query/grammar/statements/create_property_graph.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].str)); }
#line 20237 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 853:
#line 75 "third_party/libpg_query/grammar/statements/create_property_graph.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 20243 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 854:
#line 81 "third_party/libpg_query/grammar/statements/create_property_graph.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 20249 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 855:
#line 82 "third_party/libpg_query/grammar/statements/create_property_graph.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 20255 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 856:
#line 89 "third_party/libpg_query/grammar/statements/create_property_graph.y" /* yacc.c:1646  */
    {
					PGPropertyGraphTable *n = makeNode(PGPropertyGraphTable);
					n->name = (yyvsp[-10].range);
					n->keys = (yyvsp[-9].list);
					n->is_vertex_table = false;
					n->source_key = (yyvsp[-7].list);
					n->source_key_reference = (yyvsp[-5].range);
					n->destination_key = (yyvsp[-3].list);
					n->destination_key_reference = (yyvsp[-1].range);
					n->labels = (yyvsp[0].list); 
					(yyval.node) = (PGNode *) n;
				}
#line 20272 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 857:
#line 8 "third_party/libpg_query/grammar/statements/load.y" /* yacc.c:1646  */
    {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20282 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 858:
#line 16 "third_party/libpg_query/grammar/statements/load.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 20288 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 859:
#line 8 "third_party/libpg_query/grammar/statements/export.y" /* yacc.c:1646  */
    {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 20302 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 860:
#line 21 "third_party/libpg_query/grammar/statements/export.y" /* yacc.c:1646  */
    {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20312 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 861:
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y" /* yacc.c:1646  */
    {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 20322 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 862:
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y" /* yacc.c:1646  */
    {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 20332 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 863:
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y" /* yacc.c:1646  */
    {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 20342 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 864:
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y" /* yacc.c:1646  */
    {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 20352 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 865:
#line 11 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->if_not_exists = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20379 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 866:
#line 36 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->if_not_exists = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20406 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 867:
#line 62 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 20412 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 868:
#line 66 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 20418 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 869:
#line 67 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 20424 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 870:
#line 72 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 20430 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 871:
#line 73 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 20436 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 872:
#line 78 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 20442 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 873:
#line 79 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    { (yyval.str) = NULL; }
#line 20448 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 874:
#line 83 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 20454 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 875:
#line 84 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 20460 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 876:
#line 89 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 20466 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 877:
#line 90 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 20472 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 878:
#line 12 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y" /* yacc.c:1646  */
    {
        PGMatchPattern *n = makeNode(PGMatchPattern);
        n->pg_name = (yyvsp[-7].str);
        n->pattern = (yyvsp[-4].list);
        n->where_clause = (yyvsp[-3].node);
        n->columns = (yyvsp[-2].list);
        
        n->name = (yyvsp[0].range);
        // n->pg_name = $6;
        // n->pattern = $9;
        // n->where_clause = $10;
        // n->columns = $11;
        
        // n->name = $13;
        (yyval.node) = (PGNode *) n;
    }
#line 20493 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 879:
#line 53 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 20499 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 880:
#line 54 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 20505 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 881:
#line 59 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y" /* yacc.c:1646  */
    { 
                    (yyval.list) = list_make1((yyvsp[0].range)); 
                }
#line 20513 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 882:
#line 63 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y" /* yacc.c:1646  */
    {
                     (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); 
                }
#line 20521 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 883:
#line 83 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y" /* yacc.c:1646  */
    { 
        (yyval.list) = list_make1(list_make2((yyvsp[-1].str),(yyvsp[0].list))); 
    }
#line 20529 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 884:
#line 87 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y" /* yacc.c:1646  */
    { 
        (yyval.list) = lappend((yyvsp[-3].list), list_make1(list_make2((yyvsp[-1].str),(yyvsp[0].list))));
    }
#line 20537 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 885:
#line 94 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y" /* yacc.c:1646  */
    {(yyval.str) = (yyvsp[-1].str); }
#line 20543 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 886:
#line 95 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y" /* yacc.c:1646  */
    {(yyval.str) = NULL;}
#line 20549 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 887:
#line 99 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y" /* yacc.c:1646  */
    {(yyval.list) = list_make1((yyvsp[0].node));}
#line 20555 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 888:
#line 100 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));}
#line 20561 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 889:
#line 104 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 20567 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 890:
#line 105 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 20573 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 891:
#line 110 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y" /* yacc.c:1646  */
    { 
        PGVertexPattern *n = makeNode(PGVertexPattern);
        n->variable_name = (yyvsp[-2].str);
        n->alias = (yyvsp[-1].str);
        (yyval.node) = (PGNode *) n;
        // $2->alias = makeAlias($3, NIL);
		// 	$$ = $2;
        }
#line 20586 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 892:
#line 122 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 20592 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 893:
#line 123 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y" /* yacc.c:1646  */
    { (yyval.str) = NULL; }
#line 20598 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 894:
#line 128 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 20604 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 895:
#line 129 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y" /* yacc.c:1646  */
    { (yyval.str) = NULL; }
#line 20610 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 898:
#line 140 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y" /* yacc.c:1646  */
    { 
        PGVertexPattern *n = makeNode(PGVertexPattern);
        n->variable_name = (yyvsp[-1].str);
        n->alias = (yyvsp[0].str);
        (yyval.node) = (PGNode *) n;
        // // $$ = $1;
        // $$ = makeNode(PGAlias);
		// $$->aliasname = $2;
            // $1->alias = makeAlias($2, NIL);
			// $$ = $1;
    }
#line 20626 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 899:
#line 153 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y" /* yacc.c:1646  */
    { 
        PGVertexPattern *n = makeNode(PGVertexPattern);
        n->variable_name = (yyvsp[0].str);
        // // n->alias = $2;
        (yyval.node) = (PGNode *) n;
        // $$ = $2; 
        // $$ = makeNode(PGAlias);
		// $$->aliasname = $2;
    }
#line 20640 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 900:
#line 165 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y" /* yacc.c:1646  */
    {(yyval.node) = (yyvsp[0].node);}
#line 20646 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 901:
#line 167 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y" /* yacc.c:1646  */
    {(yyval.node) = (PGNode *) makeString((yyvsp[0].str));}
#line 20652 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 902:
#line 171 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y" /* yacc.c:1646  */
    {(yyval.node) = (yyvsp[0].node);}
#line 20658 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 903:
#line 172 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y" /* yacc.c:1646  */
    {(yyval.node) = (yyvsp[0].node);}
#line 20664 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 904:
#line 173 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y" /* yacc.c:1646  */
    {(yyval.node) = (yyvsp[0].node);}
#line 20670 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 905:
#line 177 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeString((yyvsp[-1].str));}
#line 20676 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 906:
#line 178 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[-1].node);}
#line 20682 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 907:
#line 182 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeString((yyvsp[-1].str));}
#line 20688 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 908:
#line 183 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[-1].node);}
#line 20694 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 909:
#line 187 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeString((yyvsp[-2].str));}
#line 20700 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 910:
#line 188 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[-1].node);}
#line 20706 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 911:
#line 192 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y" /* yacc.c:1646  */
    { (yyval.str) = "-"; }
#line 20712 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 912:
#line 193 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y" /* yacc.c:1646  */
    { (yyval.str) = "->"; }
#line 20718 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 913:
#line 194 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y" /* yacc.c:1646  */
    { (yyval.str) = "<-"; }
#line 20724 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 914:
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y" /* yacc.c:1646  */
    {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					/* ...but not both */
					n->schemaname = (yyvsp[-1].str);
					n->schemaElts = (yyvsp[0].list);
					n->if_not_exists = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20737 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 915:
#line 17 "third_party/libpg_query/grammar/statements/create_schema.y" /* yacc.c:1646  */
    {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					/* ...but not here */
					n->schemaname = (yyvsp[-1].str);
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->if_not_exists = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20755 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 916:
#line 35 "third_party/libpg_query/grammar/statements/create_schema.y" /* yacc.c:1646  */
    {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 20765 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 917:
#line 41 "third_party/libpg_query/grammar/statements/create_schema.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 20771 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 922:
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20789 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 923:
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[0].range);
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20807 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 924:
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 20823 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 925:
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 20835 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 926:
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 20849 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 927:
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 20855 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 928:
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 20861 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 929:
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 20867 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 930:
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_VACOPT_FULL; }
#line 20873 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 931:
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 20887 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 932:
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 20893 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 933:
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 20899 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 934:
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    { (yyval.ival) = (yyvsp[0].ival); }
#line 20905 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 935:
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 20911 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 936:
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 20917 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 937:
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 20923 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 938:
#line 8 "third_party/libpg_query/grammar/statements/prepare.y" /* yacc.c:1646  */
    {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 20935 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 939:
#line 18 "third_party/libpg_query/grammar/statements/prepare.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 20941 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 940:
#line 19 "third_party/libpg_query/grammar/statements/prepare.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 20947 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 945:
#line 2 "third_party/libpg_query/grammar/statements/variable_reset.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) (yyvsp[0].vsetstmt); }
#line 20953 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 946:
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 20964 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 947:
#line 15 "third_party/libpg_query/grammar/statements/variable_reset.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					(yyval.vsetstmt) = n;
				}
#line 20974 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 948:
#line 24 "third_party/libpg_query/grammar/statements/variable_reset.y" /* yacc.c:1646  */
    { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 20980 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 949:
#line 26 "third_party/libpg_query/grammar/statements/variable_reset.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 20991 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 950:
#line 33 "third_party/libpg_query/grammar/statements/variable_reset.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 21002 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 951:
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y" /* yacc.c:1646  */
    {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21012 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 952:
#line 12 "third_party/libpg_query/grammar/statements/checkpoint.y" /* yacc.c:1646  */
    {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21022 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 953:
#line 7 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21035 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 954:
#line 16 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21049 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 955:
#line 26 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21063 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 956:
#line 36 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21077 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 957:
#line 46 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21091 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 958:
#line 56 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21105 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 959:
#line 66 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21119 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 960:
#line 76 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21133 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 961:
#line 86 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21147 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 962:
#line 96 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21162 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 963:
#line 107 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21177 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 964:
#line 118 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21191 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 965:
#line 128 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21205 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 966:
#line 140 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    { (yyval.ival) = COLUMN; }
#line 21211 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 967:
#line 141 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    { (yyval.ival) = 0; }
#line 21217 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 968:
#line 8 "third_party/libpg_query/grammar/statements/pragma.y" /* yacc.c:1646  */
    {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21228 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 969:
#line 15 "third_party/libpg_query/grammar/statements/pragma.y" /* yacc.c:1646  */
    {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21240 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 970:
#line 23 "third_party/libpg_query/grammar/statements/pragma.y" /* yacc.c:1646  */
    {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21252 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 971:
#line 10 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21266 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 972:
#line 20 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21280 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 973:
#line 30 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21294 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 974:
#line 40 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21308 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 975:
#line 50 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 21322 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 976:
#line 60 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 21336 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 977:
#line 73 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 21342 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 978:
#line 74 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 21348 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 979:
#line 75 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 21354 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 980:
#line 76 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 21360 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 981:
#line 77 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 21366 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 982:
#line 78 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 21372 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 983:
#line 79 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 21378 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 984:
#line 80 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 21384 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 985:
#line 81 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 21390 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 986:
#line 82 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 21396 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 987:
#line 83 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 21402 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 988:
#line 84 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 21408 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 989:
#line 85 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 21414 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 990:
#line 86 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 21420 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 991:
#line 87 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 21426 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 992:
#line 92 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 21432 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 993:
#line 93 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 21438 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 994:
#line 94 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 21444 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 995:
#line 95 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_FDW; }
#line 21450 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 996:
#line 96 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 21456 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 997:
#line 97 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 21462 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 998:
#line 98 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 21468 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 999:
#line 103 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 21474 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1000:
#line 104 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 21480 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1001:
#line 109 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 21486 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1002:
#line 110 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 21492 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1003:
#line 111 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 21498 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1004:
#line 116 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 21504 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1005:
#line 117 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_RULE; }
#line 21510 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1006:
#line 118 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 21516 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1007:
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21528 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1008:
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21540 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1009:
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 21546 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1010:
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 21552 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1011:
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {}
#line 21558 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1012:
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {}
#line 21564 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1013:
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {}
#line 21570 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1014:
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 21576 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1015:
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 21582 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1016:
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 21591 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1017:
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 21597 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1018:
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 21605 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1019:
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21613 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1020:
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 21621 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1021:
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 21629 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1022:
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21637 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1023:
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21645 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1024:
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21653 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1025:
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 21661 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1026:
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 21669 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1027:
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 21677 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1028:
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 21686 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1029:
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21694 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1030:
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 21702 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1031:
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21710 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1032:
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {}
#line 21716 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1033:
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {}
#line 21722 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1034:
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    { (yyval.ival) = (yyvsp[0].ival); }
#line 21728 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1035:
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    { (yyval.ival) = + (yyvsp[0].ival); }
#line 21734 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1036:
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    { (yyval.ival) = - (yyvsp[0].ival); }
#line 21740 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1037:
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y" /* yacc.c:1646  */
    {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->if_not_exists = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21754 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1038:
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y" /* yacc.c:1646  */
    {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->if_not_exists = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21768 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1039:
#line 32 "third_party/libpg_query/grammar/statements/create_sequence.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 21774 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1040:
#line 33 "third_party/libpg_query/grammar/statements/create_sequence.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 21780 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1041:
#line 3 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 21812 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1042:
#line 31 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 21835 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1043:
#line 53 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 21841 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1044:
#line 54 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 21847 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1045:
#line 60 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 21855 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1046:
#line 63 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.defelt) = NULL; }
#line 21861 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1047:
#line 69 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 21869 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1048:
#line 73 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 21877 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1049:
#line 80 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {}
#line 21883 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1050:
#line 81 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {}
#line 21889 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1051:
#line 85 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {}
#line 21895 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1052:
#line 86 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {}
#line 21901 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1053:
#line 91 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 21907 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1054:
#line 92 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 21913 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1055:
#line 96 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 21919 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1056:
#line 97 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 21925 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1057:
#line 102 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 21931 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1058:
#line 103 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 21937 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1059:
#line 104 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 21943 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1060:
#line 105 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 21949 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1061:
#line 106 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 21955 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1062:
#line 112 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 21963 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1063:
#line 120 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 21971 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1064:
#line 123 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.defelt) = NULL; }
#line 21977 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1065:
#line 128 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 21983 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1066:
#line 129 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 21989 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1067:
#line 135 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 21997 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1068:
#line 138 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.defelt) = NULL; }
#line 22003 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1069:
#line 144 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 22011 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1070:
#line 148 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 22019 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1071:
#line 152 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 22027 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1072:
#line 156 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22035 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1073:
#line 160 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22043 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1074:
#line 164 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 22051 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1075:
#line 168 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 22059 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1076:
#line 172 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22067 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1077:
#line 176 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22075 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1078:
#line 180 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 22083 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1079:
#line 184 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 22091 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1080:
#line 188 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 22099 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1081:
#line 192 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 22107 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1082:
#line 196 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 22115 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1083:
#line 203 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 22121 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1084:
#line 209 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 22127 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1085:
#line 210 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.str) = NULL; }
#line 22133 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1086:
#line 211 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.str) = NULL; }
#line 22139 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1087:
#line 217 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 22147 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1088:
#line 221 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 22155 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1089:
#line 8 "third_party/libpg_query/grammar/statements/create_function.y" /* yacc.c:1646  */
    {
					PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
					n->name = (yyvsp[-3].range);
					n->params = (yyvsp[-2].list);
					n->function = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22167 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1092:
#line 24 "third_party/libpg_query/grammar/statements/create_function.y" /* yacc.c:1646  */
    {
				(yyval.list) = NIL;
			}
#line 22175 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1093:
#line 28 "third_party/libpg_query/grammar/statements/create_function.y" /* yacc.c:1646  */
    {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 22183 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1094:
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22196 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1095:
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22209 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1096:
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22222 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1097:
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22235 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1098:
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22248 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1099:
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22261 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1100:
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22274 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1101:
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22287 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1102:
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 22293 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1103:
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 22299 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1104:
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 22305 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1105:
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 22311 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1106:
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 22319 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1107:
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 22327 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1108:
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 22342 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1109:
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 22350 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1110:
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 22358 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1111:
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 22366 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1112:
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22378 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1113:
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22390 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1114:
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22402 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1115:
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22414 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1116:
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22426 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1117:
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 22437 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1118:
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 22448 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1119:
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 22460 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1120:
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22472 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1121:
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22484 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1122:
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 22496 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1123:
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 22516 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1124:
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22528 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1125:
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22540 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1126:
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22552 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1127:
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22565 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1128:
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22578 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1129:
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 22596 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1130:
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22608 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1131:
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22619 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1132:
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22637 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1133:
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 22648 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1134:
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22661 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1135:
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22674 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1136:
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 22684 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1137:
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 22694 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1138:
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22705 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1139:
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22716 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1140:
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 22727 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1141:
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 22733 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1142:
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 22739 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1143:
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 22747 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1144:
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 22756 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1145:
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 22765 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1146:
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 22773 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1147:
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 22779 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1148:
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 22785 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1149:
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 22791 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1150:
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    { (yyval.ival) = 1; }
#line 22797 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1151:
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    { (yyval.ival) = 0; }
#line 22803 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1152:
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->is_local = false;
					(yyval.node) = (PGNode *) n;
				}
#line 22813 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1153:
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->is_local = true;
					(yyval.node) = (PGNode *) n;
				}
#line 22823 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1154:
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->is_local = false;
					(yyval.node) = (PGNode *) n;
				}
#line 22833 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1155:
#line 32 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 22839 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1156:
#line 34 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 22850 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1157:
#line 42 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 22865 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1158:
#line 53 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 22877 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1159:
#line 65 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 22889 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1160:
#line 73 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 22901 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1161:
#line 81 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 22912 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1162:
#line 88 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 22923 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1163:
#line 98 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 22929 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1164:
#line 100 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 22935 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1165:
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 22943 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1166:
#line 110 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 22951 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1167:
#line 114 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 22970 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1168:
#line 129 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 22981 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1169:
#line 135 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 22987 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1170:
#line 136 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 22993 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1171:
#line 137 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 22999 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1172:
#line 141 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23005 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1173:
#line 142 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 23011 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1174:
#line 10 "third_party/libpg_query/grammar/statements/analyze.y" /* yacc.c:1646  */
    {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 23025 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1175:
#line 20 "third_party/libpg_query/grammar/statements/analyze.y" /* yacc.c:1646  */
    {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 23039 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1176:
#line 12 "third_party/libpg_query/grammar/statements/update.y" /* yacc.c:1646  */
    {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 23054 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1177:
#line 3 "third_party/libpg_query/grammar/statements/transaction.y" /* yacc.c:1646  */
    {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 23065 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1178:
#line 10 "third_party/libpg_query/grammar/statements/transaction.y" /* yacc.c:1646  */
    {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 23075 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1179:
#line 16 "third_party/libpg_query/grammar/statements/transaction.y" /* yacc.c:1646  */
    {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 23085 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1180:
#line 22 "third_party/libpg_query/grammar/statements/transaction.y" /* yacc.c:1646  */
    {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 23096 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1181:
#line 29 "third_party/libpg_query/grammar/statements/transaction.y" /* yacc.c:1646  */
    {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 23107 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1182:
#line 36 "third_party/libpg_query/grammar/statements/transaction.y" /* yacc.c:1646  */
    {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 23118 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1183:
#line 45 "third_party/libpg_query/grammar/statements/transaction.y" /* yacc.c:1646  */
    {}
#line 23124 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1184:
#line 46 "third_party/libpg_query/grammar/statements/transaction.y" /* yacc.c:1646  */
    {}
#line 23130 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1185:
#line 47 "third_party/libpg_query/grammar/statements/transaction.y" /* yacc.c:1646  */
    {}
#line 23136 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1186:
#line 8 "third_party/libpg_query/grammar/statements/execute.y" /* yacc.c:1646  */
    {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 23147 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1187:
#line 16 "third_party/libpg_query/grammar/statements/execute.y" /* yacc.c:1646  */
    {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->if_not_exists = false;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 23167 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1188:
#line 33 "third_party/libpg_query/grammar/statements/execute.y" /* yacc.c:1646  */
    {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->if_not_exists = true;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 23187 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1189:
#line 51 "third_party/libpg_query/grammar/statements/execute.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 23193 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1190:
#line 52 "third_party/libpg_query/grammar/statements/execute.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 23199 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1191:
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y" /* yacc.c:1646  */
    {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23212 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1192:
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y" /* yacc.c:1646  */
    {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23225 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1193:
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y" /* yacc.c:1646  */
    {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23238 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1194:
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y" /* yacc.c:1646  */
    {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23251 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1195:
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y" /* yacc.c:1646  */
    {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23264 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1196:
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y" /* yacc.c:1646  */
    {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23277 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1197:
#line 10 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyvsp[-2].istmt)->relation = (yyvsp[-3].range);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 23289 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1198:
#line 22 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 23299 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1199:
#line 29 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 23310 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1200:
#line 36 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 23320 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1201:
#line 42 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 23331 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1202:
#line 49 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 23341 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1203:
#line 59 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.range) = (yyvsp[0].range);
				}
#line 23349 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1204:
#line 63 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 23358 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1205:
#line 72 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 23370 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1206:
#line 81 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 23382 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1207:
#line 89 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.infer) = NULL;
				}
#line 23390 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1208:
#line 96 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.with) = (yyvsp[0].with); }
#line 23396 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1209:
#line 97 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.with) = NULL; }
#line 23402 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1210:
#line 103 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 23414 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1211:
#line 115 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 23423 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1212:
#line 120 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 23448 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1213:
#line 145 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 23461 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1214:
#line 155 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 23474 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1215:
#line 164 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.onconflict) = NULL;
				}
#line 23482 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1216:
#line 171 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 23497 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1217:
#line 182 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 23512 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1218:
#line 193 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 23527 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1219:
#line 207 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 23533 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1220:
#line 208 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 23539 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1221:
#line 214 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 23545 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1222:
#line 215 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 23551 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1223:
#line 220 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 23557 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1224:
#line 221 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 23563 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1225:
#line 227 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 23569 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1226:
#line 228 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 23575 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1227:
#line 232 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 23581 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1228:
#line 233 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 23587 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1229:
#line 239 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 23593 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1230:
#line 241 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 23599 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1231:
#line 246 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 23605 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1232:
#line 247 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 23611 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1233:
#line 251 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 23617 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1234:
#line 252 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 23623 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1235:
#line 258 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 23635 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;


#line 23639 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (&yylloc, yyscanner, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[1] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[*yyssp], yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
#line 274 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1906  */


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	n->seed = seed;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	return (PGNode *) p;
}

static PGNode *
makeParamRefCast(int number, int location, PGTypeName *tpname)
{
	PGNode *p = makeParamRef(number, location);
	return makeTypeCast(p, tpname, -1);
}

/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make2(makeString(DEFAULT_SCHEMA),
											   makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

static PGNode *
makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod, int location)
{
	PGSQLValueFunction *svf = makeNode(PGSQLValueFunction);

	svf->op = op;
	/* svf->type will be filled during parse analysis */
	svf->typmod = typmod;
	svf->location = location;
	return (PGNode *) svf;
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
