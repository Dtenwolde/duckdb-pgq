/* A Bison parser, made by GNU Bison 3.5.1.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2020 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Undocumented macros, especially those whose name start with YY_,
   are private implementation details.  Do not rely on them.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.5.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static PGNode *makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod,
								  int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);


#line 241 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Use api.header.include to #include this header
   instead of duplicating it here.  */
#ifndef YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED
# define YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int base_yydebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    IDENT = 258,
    FCONST = 259,
    SCONST = 260,
    BCONST = 261,
    XCONST = 262,
    Op = 263,
    ICONST = 264,
    PARAM = 265,
    TYPECAST = 266,
    DOT_DOT = 267,
    COLON_EQUALS = 268,
    EQUALS_GREATER = 269,
    LAMBDA_ARROW = 270,
    LESS_EQUALS = 271,
    GREATER_EQUALS = 272,
    NOT_EQUALS = 273,
    ABORT_P = 274,
    ABSOLUTE_P = 275,
    ACCESS = 276,
    ACTION = 277,
    ADD_P = 278,
    ADMIN = 279,
    AFTER = 280,
    AGGREGATE = 281,
    ALL = 282,
    ALSO = 283,
    ALTER = 284,
    ALWAYS = 285,
    ANALYSE = 286,
    ANALYZE = 287,
    AND = 288,
    ANY = 289,
    ARRAY = 290,
    AS = 291,
    ASC_P = 292,
    ASSERTION = 293,
    ASSIGNMENT = 294,
    ASYMMETRIC = 295,
    AT = 296,
    ATTACH = 297,
    ATTRIBUTE = 298,
    AUTHORIZATION = 299,
    BACKWARD = 300,
    BEFORE = 301,
    BEGIN_P = 302,
    BETWEEN = 303,
    BIGINT = 304,
    BINARY = 305,
    BIT = 306,
    BOOLEAN_P = 307,
    BOTH = 308,
    BY = 309,
    CACHE = 310,
    CALL_P = 311,
    CALLED = 312,
    CASCADE = 313,
    CASCADED = 314,
    CASE = 315,
    CAST = 316,
    CATALOG_P = 317,
    CHAIN = 318,
    CHAR_P = 319,
    CHARACTER = 320,
    CHARACTERISTICS = 321,
    CHECK_P = 322,
    CHECKPOINT = 323,
    CLASS = 324,
    CLOSE = 325,
    CLUSTER = 326,
    COALESCE = 327,
    COLLATE = 328,
    COLLATION = 329,
    COLUMN = 330,
    COLUMNS = 331,
    COMMENT = 332,
    COMMENTS = 333,
    COMMIT = 334,
    COMMITTED = 335,
    COMPRESSION = 336,
    CONCURRENTLY = 337,
    CONFIGURATION = 338,
    CONFLICT = 339,
    CONNECTION = 340,
    CONSTRAINT = 341,
    CONSTRAINTS = 342,
    CONTENT_P = 343,
    CONTINUE_P = 344,
    CONVERSION_P = 345,
    COPY = 346,
    COST = 347,
    CREATE_P = 348,
    CROSS = 349,
    CSV = 350,
    CUBE = 351,
    CURRENT_P = 352,
    CURRENT_CATALOG = 353,
    CURRENT_DATE = 354,
    CURRENT_ROLE = 355,
    CURRENT_SCHEMA = 356,
    CURRENT_TIME = 357,
    CURRENT_TIMESTAMP = 358,
    CURRENT_USER = 359,
    CURSOR = 360,
    CYCLE = 361,
    DATA_P = 362,
    DATABASE = 363,
    DAY_P = 364,
    DAYS_P = 365,
    DEALLOCATE = 366,
    DEC = 367,
    DECIMAL_P = 368,
    DECLARE = 369,
    DEFAULT = 370,
    DEFAULTS = 371,
    DEFERRABLE = 372,
    DEFERRED = 373,
    DEFINER = 374,
    DELETE_P = 375,
    DELIMITER = 376,
    DELIMITERS = 377,
    DEPENDS = 378,
    DESC_P = 379,
    DESCRIBE = 380,
    DESTINATION = 381,
    DETACH = 382,
    DICTIONARY = 383,
    DISABLE_P = 384,
    DISCARD = 385,
    DISCRIMINATOR = 386,
    DISTINCT = 387,
    DO = 388,
    DOCUMENT_P = 389,
    DOMAIN_P = 390,
    DOUBLE_P = 391,
    DROP = 392,
    EACH = 393,
    EDGE = 394,
    ELSE = 395,
    ENABLE_P = 396,
    ENCODING = 397,
    ENCRYPTED = 398,
    END_P = 399,
    ENUM_P = 400,
    ESCAPE = 401,
    EVENT = 402,
    EXCEPT = 403,
    EXCLUDE = 404,
    EXCLUDING = 405,
    EXCLUSIVE = 406,
    EXECUTE = 407,
    EXISTS = 408,
    EXPLAIN = 409,
    EXPORT_P = 410,
    EXTENSION = 411,
    EXTERNAL = 412,
    EXTRACT = 413,
    FALSE_P = 414,
    FAMILY = 415,
    FETCH = 416,
    FILTER = 417,
    FIRST_P = 418,
    FLOAT_P = 419,
    FOLLOWING = 420,
    FOR = 421,
    FORCE = 422,
    FOREIGN = 423,
    FORWARD = 424,
    FREEZE = 425,
    FROM = 426,
    FULL = 427,
    FUNCTION = 428,
    FUNCTIONS = 429,
    GENERATED = 430,
    GLOB = 431,
    GLOBAL = 432,
    GRANT = 433,
    GRANTED = 434,
    GRAPH = 435,
    GRAPH_TABLE = 436,
    GROUP_P = 437,
    GROUPING = 438,
    GROUPING_ID = 439,
    HANDLER = 440,
    HAVING = 441,
    HEADER_P = 442,
    HOLD = 443,
    HOUR_P = 444,
    HOURS_P = 445,
    IDENTITY_P = 446,
    IF_P = 447,
    IGNORE_P = 448,
    ILIKE = 449,
    IMMEDIATE = 450,
    IMMUTABLE = 451,
    IMPLICIT_P = 452,
    IMPORT_P = 453,
    IN_P = 454,
    INCLUDING = 455,
    INCREMENT = 456,
    INDEX = 457,
    INDEXES = 458,
    INHERIT = 459,
    INHERITS = 460,
    INITIALLY = 461,
    INLINE_P = 462,
    INNER_P = 463,
    INOUT = 464,
    INPUT_P = 465,
    INSENSITIVE = 466,
    INSERT = 467,
    INSTALL = 468,
    INSTEAD = 469,
    INT_P = 470,
    INTEGER = 471,
    INTERSECT = 472,
    INTERVAL = 473,
    INTO = 474,
    INVOKER = 475,
    IS = 476,
    ISNULL = 477,
    ISOLATION = 478,
    JOIN = 479,
    KEY = 480,
    LABEL = 481,
    LANGUAGE = 482,
    LARGE_P = 483,
    LAST_P = 484,
    LATERAL_P = 485,
    LEADING = 486,
    LEAKPROOF = 487,
    LEFT = 488,
    LEVEL = 489,
    LIKE = 490,
    LIMIT = 491,
    LISTEN = 492,
    LOAD = 493,
    LOCAL = 494,
    LOCALTIME = 495,
    LOCALTIMESTAMP = 496,
    LOCATION = 497,
    LOCK_P = 498,
    LOCKED = 499,
    LOGGED = 500,
    MACRO = 501,
    MAP = 502,
    MAPPING = 503,
    MATCH = 504,
    MATERIALIZED = 505,
    MAXVALUE = 506,
    METHOD = 507,
    MICROSECOND_P = 508,
    MICROSECONDS_P = 509,
    MILLISECOND_P = 510,
    MILLISECONDS_P = 511,
    MINUTE_P = 512,
    MINUTES_P = 513,
    MINVALUE = 514,
    MODE = 515,
    MONTH_P = 516,
    MONTHS_P = 517,
    MOVE = 518,
    NAME_P = 519,
    NAMES = 520,
    NATIONAL = 521,
    NATURAL = 522,
    NCHAR = 523,
    NEW = 524,
    NEXT = 525,
    NO = 526,
    NODE = 527,
    NONE = 528,
    NOT = 529,
    NOTHING = 530,
    NOTIFY = 531,
    NOTNULL = 532,
    NOWAIT = 533,
    NULL_P = 534,
    NULLIF = 535,
    NULLS_P = 536,
    NUMERIC = 537,
    OBJECT_P = 538,
    OF = 539,
    OFF = 540,
    OFFSET = 541,
    OIDS = 542,
    OLD = 543,
    ON = 544,
    ONLY = 545,
    OPERATOR = 546,
    OPTION = 547,
    OPTIONS = 548,
    OR = 549,
    ORDER = 550,
    ORDINALITY = 551,
    OUT_P = 552,
    OUTER_P = 553,
    OVER = 554,
    OVERLAPS = 555,
    OVERLAY = 556,
    OVERRIDING = 557,
    OWNED = 558,
    OWNER = 559,
    PARALLEL = 560,
    PARSER = 561,
    PARTIAL = 562,
    PARTITION = 563,
    PASSING = 564,
    PASSWORD = 565,
    PERCENT = 566,
    PLACING = 567,
    PLANS = 568,
    POLICY = 569,
    POSITION = 570,
    PRAGMA_P = 571,
    PRECEDING = 572,
    PRECISION = 573,
    PREPARE = 574,
    PREPARED = 575,
    PRESERVE = 576,
    PRIMARY = 577,
    PRIOR = 578,
    PRIVILEGES = 579,
    PROCEDURAL = 580,
    PROCEDURE = 581,
    PROGRAM = 582,
    PROPERTIES = 583,
    PROPERTY = 584,
    PUBLICATION = 585,
    QUOTE = 586,
    RANGE = 587,
    READ_P = 588,
    REAL = 589,
    REASSIGN = 590,
    RECHECK = 591,
    RECURSIVE = 592,
    REF = 593,
    REFERENCES = 594,
    REFERENCING = 595,
    REFRESH = 596,
    REINDEX = 597,
    RELATIONSHIP = 598,
    RELATIVE_P = 599,
    RELEASE = 600,
    RENAME = 601,
    REPEATABLE = 602,
    REPLACE = 603,
    REPLICA = 604,
    RESET = 605,
    RESPECT_P = 606,
    RESTART = 607,
    RESTRICT = 608,
    RETURNING = 609,
    RETURNS = 610,
    REVOKE = 611,
    RIGHT = 612,
    ROLE = 613,
    ROLLBACK = 614,
    ROLLUP = 615,
    ROW = 616,
    ROWS = 617,
    RULE = 618,
    SAMPLE = 619,
    SAVEPOINT = 620,
    SCHEMA = 621,
    SCHEMAS = 622,
    SCROLL = 623,
    SEARCH = 624,
    SECOND_P = 625,
    SECONDS_P = 626,
    SECURITY = 627,
    SELECT = 628,
    SEQUENCE = 629,
    SEQUENCES = 630,
    SERIALIZABLE = 631,
    SERVER = 632,
    SESSION = 633,
    SESSION_USER = 634,
    SET = 635,
    SETOF = 636,
    SETS = 637,
    SHARE = 638,
    SHOW = 639,
    SIMILAR = 640,
    SIMPLE = 641,
    SKIP = 642,
    SMALLINT = 643,
    SNAPSHOT = 644,
    SOME = 645,
    SOURCE = 646,
    SQL_P = 647,
    STABLE = 648,
    STANDALONE_P = 649,
    START = 650,
    STATEMENT = 651,
    STATISTICS = 652,
    STDIN = 653,
    STDOUT = 654,
    STORAGE = 655,
    STRICT_P = 656,
    STRIP_P = 657,
    STRUCT = 658,
    SUBSCRIPTION = 659,
    SUBSTRING = 660,
    SUMMARIZE = 661,
    SYMMETRIC = 662,
    SYSID = 663,
    SYSTEM_P = 664,
    TABLE = 665,
    TABLES = 666,
    TABLESAMPLE = 667,
    TABLESPACE = 668,
    TEMP = 669,
    TEMPLATE = 670,
    TEMPORARY = 671,
    TEXT_P = 672,
    THEN = 673,
    TIME = 674,
    TIMESTAMP = 675,
    TO = 676,
    TRAILING = 677,
    TRANSACTION = 678,
    TRANSFORM = 679,
    TREAT = 680,
    TRIGGER = 681,
    TRIM = 682,
    TRUE_P = 683,
    TRUNCATE = 684,
    TRUSTED = 685,
    TRY_CAST = 686,
    TYPE_P = 687,
    TYPES_P = 688,
    UNBOUNDED = 689,
    UNCOMMITTED = 690,
    UNENCRYPTED = 691,
    UNION = 692,
    UNIQUE = 693,
    UNKNOWN = 694,
    UNLISTEN = 695,
    UNLOGGED = 696,
    UNTIL = 697,
    UPDATE = 698,
    USER = 699,
    USING = 700,
    VACUUM = 701,
    VALID = 702,
    VALIDATE = 703,
    VALIDATOR = 704,
    VALUE_P = 705,
    VALUES = 706,
    VARCHAR = 707,
    VARIADIC = 708,
    VARYING = 709,
    VERBOSE = 710,
    VERSION_P = 711,
    VERTEX = 712,
    VIEW = 713,
    VIEWS = 714,
    VOLATILE = 715,
    WHEN = 716,
    WHERE = 717,
    WHITESPACE_P = 718,
    WINDOW = 719,
    WITH = 720,
    WITHIN = 721,
    WITHOUT = 722,
    WORK = 723,
    WRAPPER = 724,
    WRITE_P = 725,
    XML_P = 726,
    XMLATTRIBUTES = 727,
    XMLCONCAT = 728,
    XMLELEMENT = 729,
    XMLEXISTS = 730,
    XMLFOREST = 731,
    XMLNAMESPACES = 732,
    XMLPARSE = 733,
    XMLPI = 734,
    XMLROOT = 735,
    XMLSERIALIZE = 736,
    XMLTABLE = 737,
    YEAR_P = 738,
    YEARS_P = 739,
    YES_P = 740,
    ZONE = 741,
    NOT_LA = 742,
    NULLS_LA = 743,
    WITH_LA = 744,
    POSTFIXOP = 745,
    UMINUS = 746
  };
#endif

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
union YYSTYPE
{
#line 14 "third_party/libpg_query/grammar/grammar.y"

	core_YYSTYPE		core_yystype;
	/* these fields must match core_YYSTYPE: */
	int					ival;
	char				*str;
	const char			*keyword;
	const char          *conststr;

	char				chr;
	bool				boolean;
	PGJoinType			jtype;
	PGDropBehavior		dbehavior;
	PGOnCommitAction		oncommit;
	PGOnCreateConflict		oncreateconflict;
	PGList				*list;
	PGNode				*node;
	PGValue				*value;
	PGObjectType			objtype;
	PGTypeName			*typnam;
	PGObjectWithArgs		*objwithargs;
	PGDefElem				*defelt;
	PGSortBy				*sortby;
	PGWindowDef			*windef;
	PGJoinExpr			*jexpr;
	PGIndexElem			*ielem;
	PGAlias				*alias;
	PGRangeVar			*range;
	PGIntoClause			*into;
	PGWithClause			*with;
	PGInferClause			*infer;
	PGOnConflictClause	*onconflict;
	PGAIndices			*aind;
	PGResTarget			*target;
	PGInsertStmt			*istmt;
	PGVariableSetStmt		*vsetstmt;
	PGOverridingKind       override;
	PGSortByDir            sortorder;
	PGSortByNulls          nullorder;
	PGLockClauseStrength lockstrength;
	PGLockWaitPolicy lockwaitpolicy;
	PGSubLinkType subquerytype;
	PGViewCheckOption viewcheckoption;

#line 829 "third_party/libpg_query/grammar/grammar_out.cpp"

};
typedef union YYSTYPE YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif

/* Location type.  */
#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE YYLTYPE;
struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
};
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif



int base_yyparse (core_yyscan_t yyscanner);

#endif /* !YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED  */



#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))

/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && ! defined __ICC && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                            \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  610
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   53318

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  513
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  413
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1874
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  3125

#define YYUNDEFTOK  2
#define YYMAXUTOK   746


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,   510,     2,   498,     2,     2,
     503,   504,   496,   494,   507,   495,   505,   497,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   512,   506,
     490,   492,   491,   511,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   501,     2,   502,   499,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   508,     2,   509,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   493,   500
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   491,   491,   507,   519,   528,   529,   530,   531,   532,
     533,   534,   535,   536,   537,   538,   539,   540,   541,   542,
     543,   544,   545,   546,   547,   548,   549,   550,   551,   552,
     553,   554,   555,   556,   557,   558,   559,   560,   561,   562,
     563,   565,     6,     9,    16,    26,    33,    44,    45,    50,
      51,    52,    57,    58,    59,    60,    61,    65,    66,    67,
      72,    73,    78,    82,    90,    91,    96,    97,    98,   104,
     109,   117,   118,     7,    21,    36,    56,    57,    84,    85,
      86,    87,    88,    89,    93,    94,    99,   104,   105,   106,
     107,   108,   113,   120,   121,   122,   139,   146,   153,   163,
     173,   185,   193,   202,   211,   230,   237,   242,   244,   246,
     248,   251,   256,   257,   261,   262,   263,   264,   269,   273,
     274,   279,   286,   291,   292,   293,   294,   295,   296,   297,
     298,   304,   305,   309,   314,   321,   328,   335,   347,   348,
     349,   350,   354,   359,   360,   361,   366,   371,   372,   373,
     374,   375,   376,   381,   404,   408,   415,   416,   420,   424,
     425,   426,   430,   434,   442,   443,   448,   449,   453,   461,
     462,   467,   468,   472,   477,   481,   485,   490,   498,   499,
     503,   504,   510,   521,   534,   548,   562,   576,   590,   613,
     617,   624,   628,   636,   641,   648,   658,   659,   660,   661,
     662,   669,   676,   677,   682,   683,    11,    24,    41,    42,
      43,    48,     3,    10,    17,    24,    31,    38,    45,    55,
      55,    57,    58,     8,    21,    34,    52,    74,    75,    76,
      77,     7,    21,    25,    32,    43,    44,    50,    51,    47,
      48,    52,    53,    68,    69,    76,    84,    92,   100,   108,
     116,   127,   128,   155,   170,   186,   187,   206,   210,   214,
     231,   238,   245,   255,   256,   259,   271,   282,   290,   295,
     300,   305,   310,   318,   326,   331,   336,   343,   344,   348,
     349,   350,   357,   358,   362,   363,   367,   368,   369,   373,
     374,   378,   382,   383,   386,   395,   406,   407,   408,   411,
     412,   413,   417,   418,   419,   420,   424,   425,   429,   431,
     447,   449,   454,   457,   465,   469,   473,   477,   481,   485,
     492,   497,   504,   505,   509,   513,   517,   521,   528,   535,
     536,   541,   542,   546,   547,   552,   554,   556,   561,   581,
     582,   584,   589,   590,   594,   595,   598,   599,   624,   625,
     629,   630,   634,   635,   636,   637,   638,   642,   655,   662,
     669,   676,   677,   681,   682,   686,   687,   691,   692,   696,
     697,   701,   712,   713,   714,   715,   719,   720,   725,   726,
     727,   736,   742,   760,   761,   765,   766,   772,   778,   786,
     794,   803,   812,   816,   821,   846,   850,   863,   877,   892,
     904,   920,   926,   931,   937,   944,   945,   953,   957,   961,
     967,   974,   979,   980,   981,   982,   986,   987,   999,  1000,
    1005,  1012,  1019,  1026,  1058,  1069,  1082,  1087,  1088,  1091,
    1092,  1095,  1096,  1101,  1102,  1107,  1111,  1117,  1138,  1146,
    1159,  1162,  1166,  1166,  1168,  1173,  1180,  1185,  1191,  1196,
    1202,  1208,  1217,  1219,  1222,  1226,  1227,  1228,  1229,  1230,
    1231,  1236,  1256,  1257,  1258,  1259,  1270,  1284,  1285,  1291,
    1296,  1301,  1306,  1311,  1316,  1321,  1326,  1332,  1338,  1344,
    1351,  1373,  1382,  1386,  1394,  1398,  1406,  1418,  1439,  1443,
    1449,  1453,  1466,  1474,  1484,  1486,  1488,  1490,  1492,  1494,
    1499,  1500,  1507,  1516,  1524,  1533,  1544,  1552,  1553,  1554,
    1558,  1558,  1561,  1561,  1564,  1564,  1567,  1567,  1570,  1570,
    1573,  1573,  1576,  1576,  1579,  1579,  1582,  1584,  1586,  1588,
    1590,  1592,  1594,  1596,  1598,  1603,  1608,  1614,  1621,  1626,
    1632,  1638,  1669,  1671,  1673,  1681,  1696,  1698,  1700,  1702,
    1704,  1706,  1708,  1710,  1712,  1714,  1716,  1718,  1720,  1722,
    1725,  1727,  1729,  1732,  1734,  1736,  1738,  1741,  1746,  1751,
    1758,  1763,  1770,  1775,  1783,  1788,  1797,  1805,  1813,  1821,
    1839,  1847,  1855,  1863,  1871,  1879,  1883,  1887,  1891,  1899,
    1907,  1923,  1931,  1939,  1947,  1955,  1963,  1971,  1975,  1979,
    1983,  1987,  1995,  2003,  2011,  2019,  2039,  2061,  2072,  2079,
    2093,  2109,  2111,  2113,  2115,  2117,  2119,  2121,  2123,  2125,
    2127,  2129,  2131,  2133,  2135,  2137,  2139,  2141,  2143,  2145,
    2147,  2151,  2155,  2159,  2173,  2174,  2175,  2182,  2194,  2209,
    2221,  2223,  2235,  2246,  2270,  2281,  2290,  2294,  2301,  2309,
    2317,  2328,  2336,  2364,  2399,  2410,  2411,  2418,  2424,  2428,
    2432,  2436,  2440,  2444,  2448,  2452,  2456,  2460,  2464,  2468,
    2472,  2476,  2480,  2484,  2486,  2488,  2492,  2501,  2506,  2513,
    2528,  2535,  2539,  2543,  2547,  2551,  2565,  2566,  2570,  2571,
    2579,  2580,  2584,  2585,  2590,  2598,  2600,  2614,  2617,  2644,
    2645,  2648,  2649,  2660,  2666,  2673,  2682,  2699,  2744,  2752,
    2760,  2768,  2776,  2797,  2798,  2801,  2802,  2806,  2816,  2817,
    2819,  2820,  2821,  2824,  2825,  2828,  2829,  2830,  2831,  2832,
    2833,  2834,  2835,  2836,  2837,  2838,  2839,  2842,  2844,  2849,
    2851,  2856,  2858,  2860,  2862,  2864,  2866,  2868,  2870,  2884,
    2886,  2890,  2894,  2901,  2906,  2913,  2917,  2923,  2927,  2936,
    2947,  2948,  2952,  2956,  2963,  2964,  2965,  2966,  2967,  2968,
    2969,  2970,  2971,  2972,  2982,  2986,  2993,  3000,  3001,  3017,
    3021,  3026,  3030,  3045,  3050,  3054,  3057,  3060,  3061,  3062,
    3065,  3072,  3082,  3096,  3097,  3101,  3112,  3113,  3116,  3117,
    3120,  3124,  3131,  3135,  3143,  3154,  3155,  3159,  3160,  3164,
    3165,  3168,  3169,  3179,  3180,  3184,  3185,  3188,  3204,  3212,
    3220,  3235,  3253,  3254,  3257,  3258,  3261,  3265,  3266,  3269,
    3270,  3271,  3281,  3282,  3293,  3297,  3324,  3326,  3331,  3333,
    3343,  3346,  3357,  3361,  3365,  3377,  3381,  3390,  3397,  3435,
    3439,  3443,  3447,  3451,  3455,  3459,  3465,  3466,  3482,  3483,
    3484,  3487,  3488,  3494,  3495,  3496,  3499,  3500,  3501,  3504,
    3505,  3506,  3509,  3510,  3513,  3515,  3520,  3521,  3524,  3532,
    3533,  3534,  3535,  3538,  3539,     7,    17,    18,    21,    23,
      11,    24,    35,    36,    41,    42,    46,    47,    51,    63,
      78,    82,    83,    87,    89,    93,    94,    98,     7,    14,
      20,    28,    29,     7,    20,     7,    13,    19,    25,     8,
      33,    62,    66,    67,    72,    73,    78,    79,    83,    84,
      89,    90,     7,    32,    33,    37,    41,    48,    52,    60,
      61,    65,    66,    70,    71,    76,    85,    93,   105,   106,
     110,   114,   115,   119,   120,   126,   133,   142,   152,   153,
     154,   160,   169,   179,   190,   202,   212,   222,   233,   246,
     255,   264,   276,   395,   404,   422,   429,   434,   435,   436,
     437,     8,    22,    36,    48,    56,    70,    71,    72,    73,
      74,    87,    88,    93,    94,    98,    99,     7,    18,    19,
      23,    24,    25,    26,     2,     7,    14,    24,    25,    32,
       5,    11,     6,    15,    25,    35,    45,    55,    65,    75,
      85,    95,   106,   117,   127,   140,   141,     7,    14,    22,
       9,    19,    29,    39,    49,    59,    69,    79,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   112,   113,   114,   115,   116,   117,   118,
     123,   124,   129,   130,   131,   136,   137,   138,   141,   142,
       9,    17,    29,    30,    34,    35,    36,    41,    42,    43,
      48,    52,    56,    60,    64,    68,    72,    76,    80,    84,
      88,    92,    97,   101,   105,   112,   113,   117,   118,   119,
       9,    19,    32,    33,     1,    30,    53,    54,    59,    63,
      68,    72,    80,    81,    85,    86,    91,    92,    96,    97,
     102,   103,   104,   105,   106,   111,   119,   123,   128,   129,
     134,   138,   143,   147,   151,   155,   159,   163,   167,   171,
     175,   179,   183,   187,   191,   195,   203,   209,   210,   211,
     216,   220,     7,    18,    19,    23,    27,     9,    18,    27,
      36,    45,    54,    63,    72,    85,    87,    93,    94,    99,
     103,   107,   118,   126,   130,   139,   148,   157,   166,   175,
     184,   192,   200,   209,   218,   227,   236,   253,   262,   271,
     280,   290,   303,   318,   327,   335,   350,   358,   368,   378,
     385,   392,   400,   407,   418,   419,   424,   428,   433,   438,
     446,   447,   452,   456,   457,   458,    10,    16,    22,    28,
      38,    39,    47,    58,    70,    78,    86,    93,   103,   105,
     111,   115,   119,   134,   141,   142,   143,   147,   148,     9,
      19,     7,     2,     9,    15,    21,    28,    35,    45,    46,
      47,     7,    14,    31,    51,    52,     7,    16,    25,    34,
      43,    52,     8,    21,    27,    34,    40,    47,    57,    61,
      70,    79,    88,    95,    96,   101,   113,   118,   143,   153,
     163,   169,   180,   191,   206,   207,   213,   214,   219,   220,
     226,   227,   231,   232,   237,   239,   245,   246,   250,   251,
     256,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   269,   269,   269,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   270,   270,   271,   271,   271,
     271,   271,   271,   271,   271,   271,   271,   271,   271,   271,
     271,   271,   271,   271,   271,   271,   271,   271,   271,   271,
     271,   271,   271,   271,   271,   271,   271,   271,   271,   271,
     271,   271,   271,   271,   271,   271,   271,   271,   271,   271,
     271,   271,   271,   271,   271,   271,   271,   271,   271,   272,
     272,   272,   272,   272,   272,   272,   272,   272,   272,   272,
     272,   272,   272,   272,   272,   272,   272,   272,   272,   272,
     272,   272,   272,   272,   272,   272,   273,   273,   273,   273,
     273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
     273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
     273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
     273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
     273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
     273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
     273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
     273,   273,   273,   273,   273
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "IDENT", "FCONST", "SCONST", "BCONST",
  "XCONST", "Op", "ICONST", "PARAM", "TYPECAST", "DOT_DOT", "COLON_EQUALS",
  "EQUALS_GREATER", "LAMBDA_ARROW", "LESS_EQUALS", "GREATER_EQUALS",
  "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS", "ACTION", "ADD_P",
  "ADMIN", "AFTER", "AGGREGATE", "ALL", "ALSO", "ALTER", "ALWAYS",
  "ANALYSE", "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC_P", "ASSERTION",
  "ASSIGNMENT", "ASYMMETRIC", "AT", "ATTACH", "ATTRIBUTE", "AUTHORIZATION",
  "BACKWARD", "BEFORE", "BEGIN_P", "BETWEEN", "BIGINT", "BINARY", "BIT",
  "BOOLEAN_P", "BOTH", "BY", "CACHE", "CALL_P", "CALLED", "CASCADE",
  "CASCADED", "CASE", "CAST", "CATALOG_P", "CHAIN", "CHAR_P", "CHARACTER",
  "CHARACTERISTICS", "CHECK_P", "CHECKPOINT", "CLASS", "CLOSE", "CLUSTER",
  "COALESCE", "COLLATE", "COLLATION", "COLUMN", "COLUMNS", "COMMENT",
  "COMMENTS", "COMMIT", "COMMITTED", "COMPRESSION", "CONCURRENTLY",
  "CONFIGURATION", "CONFLICT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS",
  "CONTENT_P", "CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CREATE_P",
  "CROSS", "CSV", "CUBE", "CURRENT_P", "CURRENT_CATALOG", "CURRENT_DATE",
  "CURRENT_ROLE", "CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP",
  "CURRENT_USER", "CURSOR", "CYCLE", "DATA_P", "DATABASE", "DAY_P",
  "DAYS_P", "DEALLOCATE", "DEC", "DECIMAL_P", "DECLARE", "DEFAULT",
  "DEFAULTS", "DEFERRABLE", "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER",
  "DELIMITERS", "DEPENDS", "DESC_P", "DESCRIBE", "DESTINATION", "DETACH",
  "DICTIONARY", "DISABLE_P", "DISCARD", "DISCRIMINATOR", "DISTINCT", "DO",
  "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH", "EDGE", "ELSE",
  "ENABLE_P", "ENCODING", "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE",
  "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE",
  "EXISTS", "EXPLAIN", "EXPORT_P", "EXTENSION", "EXTERNAL", "EXTRACT",
  "FALSE_P", "FAMILY", "FETCH", "FILTER", "FIRST_P", "FLOAT_P",
  "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE", "FROM",
  "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOB", "GLOBAL", "GRANT",
  "GRANTED", "GRAPH", "GRAPH_TABLE", "GROUP_P", "GROUPING", "GROUPING_ID",
  "HANDLER", "HAVING", "HEADER_P", "HOLD", "HOUR_P", "HOURS_P",
  "IDENTITY_P", "IF_P", "IGNORE_P", "ILIKE", "IMMEDIATE", "IMMUTABLE",
  "IMPLICIT_P", "IMPORT_P", "IN_P", "INCLUDING", "INCREMENT", "INDEX",
  "INDEXES", "INHERIT", "INHERITS", "INITIALLY", "INLINE_P", "INNER_P",
  "INOUT", "INPUT_P", "INSENSITIVE", "INSERT", "INSTALL", "INSTEAD",
  "INT_P", "INTEGER", "INTERSECT", "INTERVAL", "INTO", "INVOKER", "IS",
  "ISNULL", "ISOLATION", "JOIN", "KEY", "LABEL", "LANGUAGE", "LARGE_P",
  "LAST_P", "LATERAL_P", "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE",
  "LIMIT", "LISTEN", "LOAD", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP",
  "LOCATION", "LOCK_P", "LOCKED", "LOGGED", "MACRO", "MAP", "MAPPING",
  "MATCH", "MATERIALIZED", "MAXVALUE", "METHOD", "MICROSECOND_P",
  "MICROSECONDS_P", "MILLISECOND_P", "MILLISECONDS_P", "MINUTE_P",
  "MINUTES_P", "MINVALUE", "MODE", "MONTH_P", "MONTHS_P", "MOVE", "NAME_P",
  "NAMES", "NATIONAL", "NATURAL", "NCHAR", "NEW", "NEXT", "NO", "NODE",
  "NONE", "NOT", "NOTHING", "NOTIFY", "NOTNULL", "NOWAIT", "NULL_P",
  "NULLIF", "NULLS_P", "NUMERIC", "OBJECT_P", "OF", "OFF", "OFFSET",
  "OIDS", "OLD", "ON", "ONLY", "OPERATOR", "OPTION", "OPTIONS", "OR",
  "ORDER", "ORDINALITY", "OUT_P", "OUTER_P", "OVER", "OVERLAPS", "OVERLAY",
  "OVERRIDING", "OWNED", "OWNER", "PARALLEL", "PARSER", "PARTIAL",
  "PARTITION", "PASSING", "PASSWORD", "PERCENT", "PLACING", "PLANS",
  "POLICY", "POSITION", "PRAGMA_P", "PRECEDING", "PRECISION", "PREPARE",
  "PREPARED", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES", "PROCEDURAL",
  "PROCEDURE", "PROGRAM", "PROPERTIES", "PROPERTY", "PUBLICATION", "QUOTE",
  "RANGE", "READ_P", "REAL", "REASSIGN", "RECHECK", "RECURSIVE", "REF",
  "REFERENCES", "REFERENCING", "REFRESH", "REINDEX", "RELATIONSHIP",
  "RELATIVE_P", "RELEASE", "RENAME", "REPEATABLE", "REPLACE", "REPLICA",
  "RESET", "RESPECT_P", "RESTART", "RESTRICT", "RETURNING", "RETURNS",
  "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", "ROW", "ROWS", "RULE",
  "SAMPLE", "SAVEPOINT", "SCHEMA", "SCHEMAS", "SCROLL", "SEARCH",
  "SECOND_P", "SECONDS_P", "SECURITY", "SELECT", "SEQUENCE", "SEQUENCES",
  "SERIALIZABLE", "SERVER", "SESSION", "SESSION_USER", "SET", "SETOF",
  "SETS", "SHARE", "SHOW", "SIMILAR", "SIMPLE", "SKIP", "SMALLINT",
  "SNAPSHOT", "SOME", "SOURCE", "SQL_P", "STABLE", "STANDALONE_P", "START",
  "STATEMENT", "STATISTICS", "STDIN", "STDOUT", "STORAGE", "STRICT_P",
  "STRIP_P", "STRUCT", "SUBSCRIPTION", "SUBSTRING", "SUMMARIZE",
  "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE", "TABLES", "TABLESAMPLE",
  "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P", "THEN", "TIME",
  "TIMESTAMP", "TO", "TRAILING", "TRANSACTION", "TRANSFORM", "TREAT",
  "TRIGGER", "TRIM", "TRUE_P", "TRUNCATE", "TRUSTED", "TRY_CAST", "TYPE_P",
  "TYPES_P", "UNBOUNDED", "UNCOMMITTED", "UNENCRYPTED", "UNION", "UNIQUE",
  "UNKNOWN", "UNLISTEN", "UNLOGGED", "UNTIL", "UPDATE", "USER", "USING",
  "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES",
  "VARCHAR", "VARIADIC", "VARYING", "VERBOSE", "VERSION_P", "VERTEX",
  "VIEW", "VIEWS", "VOLATILE", "WHEN", "WHERE", "WHITESPACE_P", "WINDOW",
  "WITH", "WITHIN", "WITHOUT", "WORK", "WRAPPER", "WRITE_P", "XML_P",
  "XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT", "XMLEXISTS", "XMLFOREST",
  "XMLNAMESPACES", "XMLPARSE", "XMLPI", "XMLROOT", "XMLSERIALIZE",
  "XMLTABLE", "YEAR_P", "YEARS_P", "YES_P", "ZONE", "NOT_LA", "NULLS_LA",
  "WITH_LA", "'<'", "'>'", "'='", "POSTFIXOP", "'+'", "'-'", "'*'", "'/'",
  "'%'", "'^'", "UMINUS", "'['", "']'", "'('", "')'", "'.'", "';'", "','",
  "'{'", "'}'", "'#'", "'?'", "':'", "$accept", "stmtblock", "stmtmulti",
  "stmt", "CallStmt", "ExplainStmt", "opt_verbose", "explain_option_arg",
  "ExplainableStmt", "NonReservedWord", "NonReservedWord_or_Sconst",
  "explain_option_list", "analyze_keyword", "opt_boolean_or_string",
  "explain_option_elem", "explain_option_name", "CreateStmt",
  "ConstraintAttributeSpec", "def_arg", "OptParenthesizedSeqOptList",
  "generic_option_arg", "key_action", "ColConstraint", "ColConstraintElem",
  "generic_option_elem", "key_update", "key_actions",
  "create_generic_options", "OnCommitOption", "reloptions",
  "opt_no_inherit", "TableConstraint", "TableLikeOption", "reloption_list",
  "ExistingIndex", "ConstraintAttr", "OptWith", "definition",
  "TableLikeOptionList", "generic_option_name", "ConstraintAttributeElem",
  "columnDef", "generic_option_list", "def_list", "index_name",
  "TableElement", "def_elem", "opt_definition", "OptTableElementList",
  "columnElem", "opt_column_list", "ColQualList", "key_delete",
  "reloption_elem", "columnList", "func_type", "ConstraintElem",
  "TableElementList", "key_match", "TableLikeClause", "OptTemp",
  "generated_when", "CreateAsStmt", "opt_with_data", "create_as_target",
  "VariableShowStmt", "show_or_describe", "var_name", "ViewStmt",
  "opt_check_option", "DeleteStmt", "relation_expr_opt_alias",
  "where_or_current_clause", "using_clause", "SelectStmt",
  "select_with_parens", "select_no_parens", "select_clause",
  "simple_select", "with_clause", "cte_list", "common_table_expr",
  "into_clause", "OptTempTableName", "opt_table", "all_or_distinct",
  "distinct_clause", "opt_all_clause", "opt_ignore_nulls",
  "opt_sort_clause", "sort_clause", "sortby_list", "sortby",
  "opt_asc_desc", "opt_nulls_order", "select_limit", "opt_select_limit",
  "limit_clause", "offset_clause", "sample_count", "sample_clause",
  "opt_sample_func", "tablesample_entry", "tablesample_clause",
  "opt_tablesample_clause", "opt_repeatable_clause", "select_limit_value",
  "select_offset_value", "select_fetch_first_value", "I_or_F_const",
  "row_or_rows", "first_or_next", "group_clause", "group_by_list",
  "group_by_item", "empty_grouping_set", "rollup_clause", "cube_clause",
  "grouping_sets_clause", "grouping_or_grouping_id", "having_clause",
  "for_locking_clause", "opt_for_locking_clause", "for_locking_items",
  "for_locking_item", "for_locking_strength", "locked_rels_list",
  "opt_nowait_or_skip", "values_clause", "from_clause", "from_list",
  "table_ref", "joined_table", "alias_clause", "opt_alias_clause",
  "func_alias_clause", "join_type", "join_outer", "join_qual",
  "relation_expr", "func_table", "rowsfrom_item", "rowsfrom_list",
  "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "Typename", "opt_array_bounds",
  "SimpleTypename", "ConstTypename", "GenericType", "opt_type_modifiers",
  "Numeric", "opt_float", "Bit", "ConstBit", "BitWithLength",
  "BitWithoutLength", "Character", "ConstCharacter", "CharacterWithLength",
  "CharacterWithoutLength", "character", "opt_varying", "ConstDatetime",
  "ConstInterval", "opt_timezone", "year_keyword", "month_keyword",
  "day_keyword", "hour_keyword", "minute_keyword", "second_keyword",
  "millisecond_keyword", "microsecond_keyword", "opt_interval", "a_expr",
  "b_expr", "c_expr", "func_application", "func_expr",
  "func_expr_windowless", "func_expr_common_subexpr",
  "within_group_clause", "filter_clause", "window_clause",
  "window_definition_list", "window_definition", "over_clause",
  "window_specification", "opt_existing_window_name",
  "opt_partition_clause", "opt_frame_clause", "frame_extent",
  "frame_bound", "qualified_row", "row", "dict_arg", "dict_arguments",
  "sub_type", "all_Op", "MathOp", "qual_Op", "qual_all_Op", "subquery_Op",
  "any_operator", "expr_list", "opt_expr_list", "func_arg_list",
  "func_arg_expr", "type_list", "extract_list", "extract_arg",
  "overlay_list", "overlay_placing", "position_list", "substr_list",
  "substr_from", "substr_for", "trim_list", "in_expr", "case_expr",
  "when_clause_list", "when_clause", "case_default", "case_arg",
  "columnref", "indirection_el", "opt_slice_bound", "indirection",
  "opt_indirection", "opt_asymmetric", "opt_target_list", "target_list",
  "target_el", "except_list", "opt_except_list", "replace_list_el",
  "replace_list", "opt_replace_list", "qualified_name_list",
  "qualified_name", "name_list", "name", "attr_name", "func_name",
  "AexprConst", "Iconst", "Sconst", "ColId", "ColIdOrString",
  "type_function_name", "function_name_token", "type_name_token",
  "any_name", "attrs", "opt_name_list", "param_name", "ColLabel",
  "ColLabelOrString", "CreateEnumStmt", "opt_enum_val_list",
  "enum_val_list", "CreatePropertyGraphStmt", "vertex_alias", "edge_alias",
  "VertexTableDefinitionList", "VertexTableDefinition",
  "GraphTableKeyClause", "LabelList", "LabelEnd",
  "EdgeTableDefinitionList", "EdgeTableDefinition", "LoadStmt",
  "file_name", "ExportStmt", "ImportStmt", "DeallocateStmt", "IndexStmt",
  "access_method", "access_method_clause", "opt_concurrently",
  "opt_index_name", "opt_reloptions", "opt_unique", "GraphTableStmt",
  "ColumnsClauseOptional", "ColumnList", "PathPatternList",
  "PathPatternNameOptional", "PathConcatenation", "ElementPattern",
  "ElementPatternFillerOptional", "VertexPatternFiller", "VertexPattern",
  "GraphPatternVariableDeclarationOptional", "IsLabelExpression",
  "IsLabelExpressionOptional", "IsOrColon", "MandatoryEdgePatternFiller",
  "EdgePattern", "FullEdgePattern", "FullEdgePointingRight",
  "FullEdgePointingLeft", "FullEdgeAnyDirection", "CreateSchemaStmt",
  "OptSchemaEltList", "schema_stmt", "VacuumStmt", "vacuum_option_elem",
  "opt_full", "vacuum_option_list", "opt_freeze", "PrepareStmt",
  "prep_type_clause", "PreparableStmt", "VariableResetStmt",
  "generic_reset", "reset_rest", "CheckPointStmt", "RenameStmt",
  "opt_column", "PragmaStmt", "DropStmt", "drop_type_any_name",
  "drop_type_name", "any_name_list", "opt_drop_behavior",
  "drop_type_name_on_any_name", "type_name_list", "AlterSeqStmt",
  "SeqOptList", "opt_with", "NumericOnly", "SeqOptElem", "opt_by",
  "SignedIconst", "CreateSeqStmt", "OptSeqOptList", "CopyStmt",
  "copy_from", "copy_delimiter", "copy_generic_opt_arg_list", "opt_using",
  "opt_as", "opt_program", "copy_options", "copy_generic_opt_arg",
  "copy_generic_opt_elem", "opt_oids", "copy_opt_list", "opt_binary",
  "copy_opt_item", "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CreateFunctionStmt", "macro_alias",
  "param_list", "AlterTableStmt", "alter_identity_column_option_list",
  "alter_column_default", "alter_identity_column_option",
  "alter_generic_option_list", "alter_table_cmd", "alter_using",
  "alter_generic_option_elem", "alter_table_cmds", "alter_generic_options",
  "opt_set_data", "VariableSetStmt", "set_rest", "generic_set",
  "var_value", "zone_value", "var_list", "AnalyzeStmt", "UpdateStmt",
  "TransactionStmt", "opt_transaction", "ExecuteStmt",
  "execute_param_clause", "AlterObjectSchemaStmt", "InsertStmt",
  "insert_rest", "insert_target", "opt_conf_expr", "opt_with_clause",
  "insert_column_item", "set_clause", "opt_on_conflict", "index_elem",
  "returning_clause", "override_kind", "set_target_list", "opt_collate",
  "opt_class", "insert_column_list", "set_clause_list", "index_params",
  "set_target", "unreserved_keyword", "col_name_keyword",
  "func_name_keyword", "type_name_keyword", "other_keyword",
  "type_func_name_keyword", "reserved_keyword", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_int16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
      60,    62,    61,   745,    43,    45,    42,    47,    37,    94,
     746,    91,    93,    40,    41,    46,    59,    44,   123,   125,
      35,    63,    58
};
# endif

#define YYPACT_NINF (-2735)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-1796)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const int yypact[] =
{
    3538,  -100,    32, -2735, -2735,  -100, 33033, -2735,  -100,    86,
    3671, 37873, -2735,  5510,  -100, 44649,   904,   242,   222,   280,
   38357, 38357, 44649, 44649, 38841,  -100,   730, 45133, -2735,  -100,
   22568, 35453,    25,   -98, 45617, 44649,   167,   418,   243, -2735,
   -2735, -2735,   246, -2735, -2735, -2735, 22083, -2735, -2735, -2735,
     127, -2735,   584,   132,   424,   260, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735,    48, -2735, -2735, -2735, 39325, 44649,
   39809, 35937, 40293, -2735,   161, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735,   162, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735,   170, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735,   283,   410, -2735,   171, -2735,
   -2735, -2735, -2735,  1196, 40777, -2735,   575,   803, -2735,   497,
     696, 46101, -2735, -2735, 44649, -2735, -2735,   592,   700, 40777,
   -2735, -2735, -2735, 41261, -2735, -2735, -2735, -2735,   688, -2735,
   -2735,   518, -2735,   151, -2735, -2735, -2735,   492, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735,   590, -2735, 51425, -2735,
   46585, 47069, 47553, -2735,   468,   669,   439, 21598, -2735,   246,
   -2735, -2735, -2735, -2735, -2735,   974, -2735, 38357,   974, -2735,
   -2735, -2735, -2735, -2735,   365,   502, -2735,   536,   817,   555,
   -2735, -2735, -2735, -2735, -2735,   786,  9046,  9046, 48037, 48037,
     974, 48037,   600,   348, -2735, -2735, -2735,   -98,  1196,   555,
   -2735,   424, -2735, 23053, -2735,   613,   410, -2735, -2735,   224,
     967, 12100, 44649,   637, -2735,   647,   637,   650,   675,   685,
   -2735,  3538, -2735, 40777, -2735,   709,  1000,   555, -2735,   775,
     775,  1174,   775,   726,  1059, -2735,  1845, -2735,   731,  1093,
    1055, 35453,  1125,   996,   939,  1140,  3860,  1147,  1050,  1154,
    1258,  6501, 12100, 31581, -2735,   410, -2735, -2735,   818, -2735,
   -2735,   827, -2735, -2735, -2735, -2735,   669,  1341,  1104, -2735,
     852,  1346,   927, 41745, 42229, 40777,  1315,   898, -2735, -2735,
   -2735, -2735,   940, -2735, -2735,   122, -2735, -2735, -2735, -2735,
     971, -2735,   971,   971, -2735, -2735, -2735, -2735,   924,   924,
    1127,   928, -2735, -2735, -2735,  1314, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735,   969,   867, -2735,   971,
   -2735,   924, -2735, -2735, -2735, -2735, -2735, 52832, -2735, -2735,
   -2735, -2735,   546,   626, -2735, -2735, -2735,   975, -2735,  1439,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,   977, -2735,
    3257,   924,   196, -2735, -2735,  1331, -2735,   233,  1337,   238,
   -2735,  1342,  1219, 12100, -2735,  1115, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735,   -98, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735,   562, -2735, -2735, 29050, -2735, -2735,   439,  1026, -2735,
   -2735, 29050, 12609, 51894,  1495, -2735,  1305, 44649,  1041, -2735,
   -2735, -2735, -2735, -2735, -2735,  1045,  1551,   113,  1579, 12100,
    1098,   113,   113,  1102,  1420, -2735, -2735, -2735,   174,  1110,
    1143, -2735,   175,   175, -2735,  1165,  1178, -2735,   177,  1205,
    1211,  1587,  1594,   168,  1217,  1234,   867,   113, 12100, -2735,
    1249,   175,  1251,  1256,  1277,  1602,  1281, -2735,  1613,  1294,
     180,   187,  1328,  1334, -2735,  1344, -2735,   182, 12100, 12100,
   12100,  1479, 12100,  7519, 40777,  1641, -2735,   410,  1351,   974,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,   169,  4654,
   -2735,  1192, -2735, -2735, -2735,   290, 12100, -2735,  1788,   -15,
   -2735,   185, -2735, -2735, -2735,   627,  1599,  1333, -2735, -2735,
   -2735, -2735,   248,  1752, 28082, 28566, 40777, -2735, -2735,   410,
   -2735, -2735, -2735, -2735, -2735, -2735,   634, -2735,   246, 30460,
     692,   410,   637, 44649, 44649,  1826,  1609, -2735, -2735, -2735,
     647, -2735,  1626, -2735, -2735,   424,   424, 12100,   424,   130,
     738,  9555, 13118,  1700,  1601,   211,   121,  1726, -2735,  1611,
     726,  1059, 12100, 35453, 40777,  1520, 48521, 40777, 33517,   871,
     932,  1406,  1489,  1410,   -29,  1829, -2735,  1409, -2735,  1502,
   40777, 52832,   220, -2735,  1868,   220,   220,   642,  1871,  1508,
     235,  1671,   520,   318,  2313, -2735,  1409, 35453,   155,   633,
    1409, 40777,  1509,   728,  1409,   116, 12609,  1106,  1148,   892,
    1437,  1488,   120, 12609,  1510,  1547,  1558,  1610,  1653,  1661,
    1666,  1689,  1734,  1750,   140,  1773,  1775,  1781,  1787,  1792,
    1795,   142,  1798,   109, 12609,  1803,  1432, -2735, 30460,   -22,
   -2735, -2735,  1822,   147, -2735, 26629,  1427, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735,  1519, 44649,  1476,   535,   158,  1789,
    1851, 31581,  1440,  1802, 40777,  1675,  2313,  1677,  1916,  1452,
     827, -2735, 49005, 10064,  1920, -2735, -2735, -2735, -2735, -2735,
   -2735,  1454, -2735, -2735, 12100, -2735, -2735, -2735,  1950, -2735,
   51894, 51894,   971,   971, -2735, -2735,  1930,  1549,  1550,  1950,
   -2735,  1950, -2735, 44649,  1469,  1470,  1950, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735,  1950,  1554, -2735,  1556,  1559,  1560, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, 51894, -2735, 44649, 44649,
   -2735, 44649, 44649, -2735, 44649, 44649,   743, 42713,   439, 36421,
   -2735, -2735, -2735, -2735,   949,  1080, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, 31581, -2735,  1791, -2735, -2735,
   -2735,  1465,   745, -2735,   753,  1196, -2735, -2735, 12100,   410,
   12100, 30460,  1518, 12100, 12100,  1481,  1950,  1950, -2735,  2304,
    1950,  1950, 30616, 12100, 25966, 12100, 16681, 10573, 12100, 12100,
    8028, 12100, 30616,  1972,  1972, 24023, -2735,  1637,  1484,  1485,
    2519,  5241,  1492, -2735,   766, -2735,  1474, -2735,   410,   410,
   12100, -2735, 12100,  4610,  4610, -2735,   179, 51894, 12100, 12100,
   12100, 12100, 31097,  1569,    98, 44649, 12100, 12100,  1497,   851,
   -2735, 12100,  1713, -2735,  1500, 12100,  1577,   146, 12100, 12100,
   12100, 12100, 12100, 12100, 12100, 12100, 12100, -2735, -2735, 18194,
     209,  1819,  1842,   410, 12100,   -89,   427, 12100, 36905,  9046,
    1834,  6501, -2735,   410, 27114,   108,  1834, -2735, -2735, -2735,
     190, -2735, -2735, -2735, -2735, -2735,  1465, -2735,  1465,  1503,
   40777,   224, 34969, -2735, 12100, -2735,   779,  1506,  2007, -2735,
   -2735,  1796, -2735,  1512, -2735, 29530,  1796, -2735, -2735, 17176,
    1632,  1793,  1727, -2735, -2735,  1705,  1709, -2735,  1514, 30553,
   13627, 13627, -2735,  1491, 30460,  1513, -2735, -2735, -2735, -2735,
   -2735, -2735,   506, -2735, 40777,    22,  1700,   121,   805,  1578,
    1986,  1473, 24508, 44649, -2735,  1348,  1521, 49489, 44649,  1800,
    1755,  1806,  -116, -2735, -2735, -2735, 51894, -2735, 44649, 44649,
   49973, 50457, 32065, 44649, 31581, -2735, -2735, -2735, -2735, 44649,
    1498, 44649,  5981, -2735, -2735, -2735,   220, -2735, -2735, -2735,
   -2735, -2735, 44649, 44649, -2735, -2735,   220, 44649, 44649,   220,
   -2735,  1505, 44649, 44649, 44649, 44649,  1534, 44649, 44649,   -10,
     -10,  1746, -2735, 11082,    88, -2735, 12100, 12100, -2735, 12100,
    1715, -2735,   813, -2735,  1756,    43,  1586, 40777, 40777, -2735,
   -2735,  1634, 44649,  1480, -2735, -2735, -2735, -2735, -2735, -2735,
   31581,  1543,  1545,  1896,  2313, -2735,  1897,   909, 34001,   846,
    1588,  1778, -2735, -2735,  1765, -2735,   824, 12100, 12100,   828,
    1552,   196,   830, -2735, -2735,  1563,  1470,  1571,  1573,  1557,
    1562,   845, 51894,  1950,   153,  1567,  1568,  1615,  1307,   513,
    1511, -2735,   233, -2735,   238, -2735,  1771,   249, -2735,  1808,
    2040,   827, -2735, -2735, -2735, -2735, -2735, -2735, 21113, -2735,
     854, -2735, -2735,  2050,   974,  2050,   511, -2735, -2735,  2050,
   -2735,  2050, -2735, 29050, -2735, 12609, -2735, 51894, -2735,   861,
   -2735,  1585, 12100,    53, -2735, 29654,   895, 12100,  1584,  1589,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,  1592,
    1919, -2735,  1593,  1595,  3945, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,  1596,
    1597, 29888,  1603, 16681, 16681,  7519,   771, -2735, 16681,  1604,
   -2735, -2735,   899, 29564,  1484,  1605, 29935, 11591, 12100, 11591,
   11591, 30059,  1484,  1606, 30175, 44649, -2735, 14136, -2735, -2735,
   -2735, 12100, 40777, -2735, 12100,   907,  5279, -2735, -2735, -2735,
    5340,  5340,  5340, 30616, -2735, -2735, -2735,  1612, -2735, 16681,
   16681, -2735,  3857,  1157,  7519, -2735, -2735,  1921, -2735,   659,
   -2735,  1600, -2735, -2735,  1541, -2735, 25966, 30587, 12100,   104,
   -2735, 12100,  1497, 12100,  1684,  5340,  5340,  5340,   421,   421,
     221,   221,   221,   305,   427, -2735, -2735, -2735,  1614,  1616,
    1617,  1813, 30460,  1281, 12100, -2735, 30460,   950,   959, 40777,
    2810,  3209,  3267, -2735, -2735, -2735, 19658,  1654,   -22,  1479,
    1654,  1950,  4610, -2735,   647, -2735, -2735, -2735, 30460, -2735,
    1196,  2079,   -92,   690, 12100, -2735, -2735,  1373,  1630,  1831,
    1833,  1107,  1107,  1491,  1836, -2735, -2735,  1681, -2735, -2735,
   -2735, 12100,  8537,  1528, -2735,  1537, -2735, -2735, -2735, -2735,
    1620, -2735, -2735,  1884, -2735, -2735, -2735, -2735, 19658,  1667,
   44649,  1679,   -90, 22568, -2735,  1843, 44649, -2735, -2735,    15,
    1643, -2735,  1712,  1409, 12100,  1863, -2735,   652,  1636,  1988,
     289,  1940, 44649, -2735,  1854, -2735,   446,  1991,   249,  1996,
     249, 31581, 31581, 31581, -2735,   974, -2735,   915, -2735, -2735,
     916, -2735,  -125, -2735, -2735, -2735,  1732,   751,  2313,  1409,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735,   173,   788,  1409,
    1735, -2735,  1737, -2735,  1738,   812,  1409, -2735, -2735,    88,
      88,    88, 12609, -2735,  1874,  1879,  1657, 30460, 30460, 30460,
    1663, -2735,   154, -2735, 44649, -2735, -2735, -2735,  1715, 40777,
    1664,   827,  1672, -2735,   760, -2735,   974, 44649, 40777, 40777,
   44649,  1698, 40777, -2735, -2735, -2735,  1662,  1669, -2735, 51894,
     -20,  1887,  1888,  1410,  2142,  2026, 40777, -2735, 30460,   917,
   -2735, -2735, -2735, -2735,  1950, -2735, -2735,   314,   314, -2735,
   44649, -2735,  1678, -2735,  1680, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, 44649, -2735,  2028,  1196,
   -2735, 34485, -2735, -2735, -2735, -2735, 31581, -2735,   974, -2735,
     974,  1904, 44649, 27598,   974,   974, -2735, -2735, -2735, -2735,
   30229, 12100, -2735,  2051, 51894, -2735,  5773, -2735, -2735, -2735,
   12100, -2735, -2735, 12100, -2735, 25966, 12100,  2013, -2735,  2185,
    2185,  5241, 51894, 16681, 16681, 16681, 16681,   701,  1251, 16681,
   16681, 16681, 16681, 16681, 16681, 16681, 16681, 16681, 17685,   557,
   -2735, -2735, 12100, 12100,  2032,  2013, -2735, 51894,  1695,  1484,
    1696,  1699, 12100, -2735, 51894,   936,  7519, 30308, -2735,   410,
    5898, -2735, 30460, -2735,  4610, 12100,  2909,  3301, 12100,   952,
   12100,  2033, -2735, -2735,  1703, -2735, -2735, 51894, 12100,  1707,
    2763, 16681, 16681,  3677, -2735,  4462, 12100,  7519, -2735,  1746,
    1753, 24993, -2735,  1809,  1809,  1809,  1809, -2735, -2735, 40777,
   40777, 40777,  1718, 20143,  2045, 19173, 43197,  1721,  1146, -2735,
   43197, 43681, -2735,  1733, -2735,   410, 12100,  2047,    88,  1637,
    2047,  1728, -2735, -2735,  1729, -2735,  2007,  2158,  1741,   123,
    2235,   690, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
    1739, -2735,  1630,   188, -2735, -2735, -2735,  1953, -2735, -2735,
   -2735, 40777, -2735,  1721, 12100,  1886, -2735, -2735, -2735, -2735,
    1794, -2735, -2735,   962,  2162,  1886,   964, -2735,   410, 24508,
    1667, 12100, 44649,  5965,  2095, -2735, 44649, 44649, 44649, -2735,
   44649,  1013,   693,  1754, -2735,   693,  2074,   150,  1410,   235,
    3022,   -14, -2735, -2735, -2735,  1823, 44649, -2735, 44649, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, 32065, -2735, 31581, 25481,
   31581, 44649, 44649, 44649, 44649, 44649, 44649, 44649, 44649, 44649,
   44649,  1758,  1760,  1761,  1746, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735,   318, -2735,   154,  1757, 34001,  1588, 40777,  1851,
   44165, -2735,  1762,  1749,  1033,  2313,  2222,  1764,   468,   199,
   -2735, -2735,   846, 34001, -2735, -2735, -2735,  2180, -2735, -2735,
    1196, 44649,  1825, -2735,  1470,  1767, -2735, -2735,  1470, 51894,
   -2735, -2735,   249, 40777, -2735,  1034, -2735, -2735, -2735, -2735,
   44649,  1766, -2735,  1766, -2735, -2735, 12100, 30460, -2735,  1770,
   -2735, 30460, 26458, -2735, 30460,  2032, -2735,  1135,  1135,  1135,
     547,  2105,   580,  1790,  1135,  1135,  1135,   264,   264,   138,
     138,   138,  2185,   557, 30460, 30460, -2735, -2735,  1777, -2735,
   -2735, -2735,  1484,  1797, -2735,  4903, -2735,  1051, 44649, -2735,
   -2735,   304, 12100, 12100,  3857, -2735,  4097, 12100, 51894,  1074,
    3857,   297, 12100,  4058,  4636, 12100, 12100,  5025, 26477,  1799,
   12100, 50941, -2735, -2735, 40777, 40777, 40777, 40777, -2735, -2735,
   -2735,  2291, -2735, 43197, 43681,  1801, 18687,  1146,  1804, 40777,
   -2735,  1883,  1807, 19658,  2073,  2001, -2735, 19658,  2001,  1072,
    2001,  2081,  1883, 23538, -2735,  1883,  1811,  2010, -2735,   681,
   30460,  2257,  2129,  1814, -2735,  2129,   974, -2735,   690,  1818,
    1820,   139,   -23, -2735,  2314, -2735, -2735,  2320,   194,   -23,
    1828, -2735, 25966, -2735, -2735, -2735, -2735, -2735, 30460,  9046,
   -2735,  1196,   410,   -62, 44649,   -44, -2735,  1835, 44649, -2735,
    1886, 30460, -2735, -2735, 44649,  1076, -2735,  1083,   693, -2735,
    1861, -2735,   195,  2135,    79, -2735, 31581,  3024,   754, -2735,
    2141,  2062, -2735,   220, -2735, 12100,   754,  2063,   214, 44649,
   -2735, -2735,  2497, -2735, 51894,   249,   249, -2735, -2735,  1839,
    1840,  1847,  1848,  1849,  1850,  1853,  1856,  1860,  1862,  1864,
    1865,  1867,  1872,  1875,  1876,  1877,   969,  1878, -2735,  1880,
    1739,  1882,  1889,  1890, 52363,  1891,  1892,  1894,  1898,  1899,
     949,  1080, -2735, -2735, -2735, -2735, -2735,   852, -2735,  1900,
   -2735,  1858, -2735, -2735,  1927, -2735,  1935, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735,    88,  1026,    93, 44649,  1869,
    2330,  2151,  1089, -2735,  2110,  1885, -2735,   974,  1588, -2735,
     943, 34001,  1698, -2735,  2272,   183,  1888, -2735,   282,  1924,
    2102, 44649,  1903, -2735, -2735, -2735,  2356, -2735, 34485,  1766,
   30460, -2735, -2735, -2735, 16681,  2236,  1906, 51894, -2735, -2735,
   -2735, 12100, -2735,  3857,  3857,  4097,  1090, -2735,  3857, 12100,
   12100,  3857,  3857, 12100, -2735, -2735, 26496,  2103, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, 32549, 43197,  1907, -2735, 37389,
   -2735, -2735, 44649,  1146, 19658, -2735, -2735,  1286, -2735, 19658,
    2192, -2735, 19658, -2735, 44649,  1914, -2735, 44649, -2735, 14645,
   12100,  1954,   974,  1954, -2735,   690,  9046, 40777,  2314,  1925,
   -2735, -2735, -2735,   323,   -23, -2735, -2735, -2735, -2735, -2735,
    1917,  1333, -2735,   -90, -2735, -2735,  2336, 20628,  2290, 12100,
   -2735, -2735,   693, -2735,  2085,  1861,  1923, -2735, -2735, -2735,
   -2735, -2735, -2735, -2735,  1096,  1928, 44649, 44649, 16681, -2735,
     754,   216,   558, -2735,  2202, 40777,  1861,  2347, -2735, -2735,
   -2735, -2735,  2315,  2396,  2281, -2735, -2735, 30460, -2735, -2735,
    1950,  1950, -2735, -2735,  2362, -2735, -2735, -2735, -2735,   852,
     343, 25481, 44649, 44649,  1932, -2735, -2735,   318,  2316,  1108,
     846,  1196,  1934,  2215,   124, 40777,  2294, 34001, -2735,  2407,
   44649,  1698,  1944, -2735, -2735,   201,   201, -2735,  2082, -2735,
    2087,   269, -2735, 40777, -2735, -2735, 20628,  1196, -2735,  4838,
   16681, 51894,  1112, -2735, -2735,  3857,  3857,  3857, -2735,  2397,
    1746, -2735,  1113,  2414, -2735, 44649,   -65,   -27,  1949,  1961,
   -2735, -2735,  1133, -2735, 12100,  1965, -2735, -2735, 19658,  1286,
    1141, -2735, 51894, 44649,  1155, 51894,  1966,   392,  1968,  7010,
    1946, -2735, -2735, -2735, -2735, -2735, 30460, 30460, 44649,  2027,
   -2735,  2027, -2735,  1156, -2735,   375, -2735,   192,   202, -2735,
   -2735,  2023, 44649, 12100,  2402,    55, -2735,  1182,    29, 30460,
   40777, -2735, 31581, -2735,   693, -2735, 31581, 12100, -2735,  1300,
     547,  2441, -2735, -2735, -2735, -2735,  1861,   827, -2735, 44649,
   -2735,  2287, -2735, 44649,  2034,   567,  2048, -2735, -2735, -2735,
   -2735,  1026,   974,  1588,  1888,  1924, 44649,   286,   597, -2735,
   -2735,  2071, -2735, 40777,  1196,   468, -2735,   846, -2735, -2735,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735, -2735,
    2416,  2195,  2417,  1825,  1184,  4838,  1186, -2735, 12100,     0,
    1733, 32549,  1987, -2735,  1188, -2735, -2735, -2735, -2735, -2735,
   44649,  1109, -2735, 30460, 44649, -2735, -2735, -2735, 44649,  2362,
    1193, -2735, 12100,  1992, 12100, -2735, 14645,  1982, -2735,  2455,
    2132, -2735, -2735, -2735,  9046,   193,  2002,  2486,   204, -2735,
   -2735,  1196, -2735, 26525, 44649, 44649, 44649,  1654, 20628, -2735,
    2119,   827,   693,  1200, -2735,  2008, -2735, 26544,  2224, -2735,
    2310, -2735,  2255, -2735,  2003, -2735, 12100, -2735,  2075, -2735,
   -2735, -2735,  2469, -2735, -2735,  1209, -2735, -2735, -2735, 44649,
    2506,  2016,  2018,  1924,  1698,  1888,  2218, -2735,  2219,  2019,
    1588, -2735,  1484, 15154, 15154,  2009, -2735, -2735, 44649, -2735,
    1218,  2012,  1220, -2735, -2735, -2735,  1229, 14645,  1235, -2735,
   44649,  2021, 37389, -2735,  2514,  2035, -2735,  2509, -2735, -2735,
   -2735,  2402, -2735, -2735,   255,   255, -2735, -2735, 24508,  2255,
   -2735, 31581, 25481,  2256,  2003,    92,  2239,  2313, -2735, 30460,
   -2735,  1196, -2735, -2735, -2735, 40777, 34001, -2735, -2735, -2735,
   -2735, -2735, 20628,  1654, 16172,  2168,   552, 29607, -2735, -2735,
   -2735, -2735,  1264, -2735,  2522,  2187, -2735, -2735,  1266, -2735,
   -2735, -2735, -2735,  2523, -2735,  2037, 44649,  1630,  1630,   337,
    2239, -2735, -2735,  2331, -2735, -2735, -2735, -2735, -2735,    87,
    2248, -2735,  2251,  1660,  1924,  2151,  1274, -2735,  1278, -2735,
    2510, -2735, -2735, -2735, -2735, -2735, -2735,  2038,  2041, -2735,
   -2735,  2043,   232,   255, -2735, -2735, -2735, -2735, -2735,   683,
     683,  2426, -2735,  2104, -2735, -2735, -2735,  2159, -2735, 40777,
    1588, 15663, -2735,  2540,  2056, -2735, -2735,  1630,   693, -2735,
    2532, -2735,   205, -2735, -2735,  2151, -2735,  1654, -2735,  2059,
   -2735, -2735, -2735, -2735, -2735,  2228, -2735, -2735, 40777,  2442,
    2151,  2240, 40777,  2215,  2348
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_int16 yydefact[] =
{
    1274,  1250,     0,    65,    64,  1250,     0,  1011,  1250,  1131,
     203,     0,   220,     0,  1250,     0,  1274,     0,     0,     0,
       0,     0,     0,     0,     0,  1250,   285,     0,   219,  1250,
       0,     0,   992,     0,     0,     0,     0,     0,     2,     4,
       9,    23,    48,    18,    12,    39,     0,    40,    20,    33,
     252,   239,   290,   251,  1273,   255,    13,    15,    29,    24,
      26,    19,    27,    25,    16,    36,    31,    37,    10,    32,
      30,    21,     6,    17,    11,    14,     7,    38,     8,    35,
      34,    22,     5,    28,     0,  1249,  1248,  1242,     0,     0,
       0,     0,     0,  1243,   858,  1301,  1302,  1303,  1304,  1305,
    1306,  1307,  1308,  1309,  1310,  1311,  1312,  1313,  1314,  1315,
    1316,  1666,  1317,  1318,  1319,  1614,  1615,  1667,  1616,  1617,
    1320,  1321,  1322,  1323,  1324,  1325,  1326,  1327,  1618,  1619,
    1328,  1329,  1330,  1331,  1332,  1620,  1668,  1333,  1334,  1335,
    1336,  1337,  1338,  1669,  1339,  1340,  1341,  1342,  1343,  1344,
    1345,  1346,  1347,  1670,  1348,  1349,  1350,  1671,  1351,  1352,
    1353,  1354,  1355,  1356,  1357,  1621,  1622,  1358,  1359,  1360,
    1361,  1362,  1363,  1364,  1365,  1366,  1367,  1368,  1369,  1370,
    1371,  1372,  1373,  1374,  1375,  1376,  1377,  1378,  1379,  1380,
    1381,  1382,  1383,  1384,  1385,  1386,  1387,  1388,  1623,  1389,
    1390,  1391,  1392,  1624,  1393,  1394,  1395,  1625,  1396,  1397,
    1398,  1672,  1673,  1399,  1400,  1401,  1674,  1402,  1403,  1626,
    1627,  1404,  1405,  1406,  1407,  1408,  1409,  1410,  1411,  1675,
    1412,  1413,  1414,  1415,  1416,  1417,  1418,  1419,  1420,  1421,
    1422,  1676,  1628,  1423,  1424,  1425,  1426,  1427,  1629,  1630,
    1631,  1428,  1677,  1678,  1429,  1679,  1430,  1431,  1432,  1433,
    1434,  1435,  1680,  1436,  1681,  1437,  1438,  1439,  1440,  1441,
    1442,  1443,  1444,  1632,  1445,  1446,  1447,  1448,  1449,  1450,
    1451,  1452,  1453,  1454,  1455,  1456,  1457,  1458,  1459,  1460,
    1461,  1462,  1633,  1683,  1634,  1463,  1464,  1465,  1466,  1635,
    1467,  1468,  1684,  1469,  1636,  1470,  1637,  1471,  1472,  1473,
    1474,  1475,  1476,  1477,  1478,  1479,  1638,  1685,  1480,  1686,
    1639,  1481,  1482,  1483,  1484,  1485,  1486,  1487,  1488,  1489,
    1490,  1491,  1492,  1640,  1493,  1494,  1641,  1495,  1496,  1497,
    1498,  1499,  1500,  1501,  1502,  1503,  1504,  1505,  1506,  1507,
    1508,  1642,  1509,  1510,  1511,  1512,  1513,  1514,  1515,  1516,
    1517,  1518,  1519,  1520,  1521,  1522,  1523,  1524,  1525,  1526,
    1527,  1528,  1687,  1529,  1530,  1531,  1643,  1532,  1533,  1534,
    1535,  1536,  1537,  1538,  1539,  1540,  1541,  1542,  1543,  1544,
    1545,  1546,  1547,  1548,  1644,  1549,  1550,  1551,  1688,  1552,
    1553,  1645,  1554,  1555,  1556,  1557,  1558,  1559,  1560,  1561,
    1562,  1563,  1564,  1565,  1566,  1646,  1567,  1647,  1568,  1569,
    1570,  1571,  1690,  1572,  1573,  1574,  1575,  1576,  1648,  1649,
    1577,  1578,  1650,  1579,  1651,  1580,  1581,  1652,  1582,  1583,
    1584,  1585,  1586,  1587,  1588,  1589,  1590,  1591,  1592,  1593,
    1594,  1595,  1596,  1653,  1654,  1597,  1691,  1598,  1599,  1600,
    1601,  1602,  1603,  1604,  1605,  1606,  1607,  1608,  1609,  1655,
    1656,  1657,  1658,  1659,  1660,  1661,  1662,  1663,  1664,  1665,
    1610,  1611,  1612,  1613,    42,     0,     0,   840,   859,   860,
     868,  1245,  1130,  1274,     0,  1153,     0,     0,  1154,     0,
       0,     0,   197,   196,     0,   930,   202,     0,     0,     0,
     858,   917,  1632,  1495,  1646,   915,   838,   859,     0,  1046,
    1047,     0,  1055,     0,  1040,  1044,  1041,     0,  1065,  1057,
    1066,  1058,  1039,  1059,  1048,  1038,     0,  1067,     0,  1042,
       0,     0,     0,  1246,  1255,   203,  1274,     0,    43,    48,
      56,    55,    52,    54,    53,     0,  1010,     0,     0,   857,
     911,   912,   909,   908,  1027,   999,  1006,  1648,  1577,  1005,
     221,  1007,  1004,  1247,   284,   282,     0,   814,  1402,  1439,
    1536,  1547,  1648,     0,  1216,  1220,  1244,  1653,     0,   214,
     213,     0,   862,     0,   256,   420,   861,   834,   991,     0,
     996,     0,  1511,   260,   263,   877,   261,     0,   252,     0,
       1,  1274,    47,  1239,   218,  1648,  1577,   215,   212,   281,
     281,     0,   281,     0,   244,   252,   247,   251,     0,     0,
       0,     0,  1410,     0,     0,  1410,     0,  1410,     0,  1410,
       0,     0,   806,     0,   807,   841,  1003,  1000,     0,  1002,
    1001,   170,   201,   200,   199,   198,   203,     0,  1410,   976,
     872,     0,     0,     0,     0,     0,   925,     0,   918,   916,
    1053,  1054,     0,  1045,  1043,     0,   869,  1692,   472,  1693,
     501,   479,   501,   501,  1694,  1695,  1696,  1697,   468,   468,
    1375,   481,  1698,  1699,  1700,  1410,  1701,  1702,   469,   470,
     506,  1703,  1704,  1705,  1706,  1707,     0,     0,  1708,   501,
    1709,   468,  1710,  1711,   473,  1712,   442,     0,  1713,   471,
     443,  1714,   509,   509,  1715,   496,  1716,     0,  1068,   454,
     455,   456,   457,   482,   483,   458,   488,   489,   493,   459,
     541,   468,  1064,   870,   871,  1410,  1060,  1064,  1410,  1064,
     836,  1410,     0,     0,  1251,     0,    45,    57,  1717,  1718,
    1719,  1720,  1722,  1721,  1723,  1724,  1725,  1726,  1727,  1728,
    1729,  1730,  1731,  1734,  1732,  1733,  1735,  1736,  1737,  1738,
    1739,  1740,  1741,  1742,  1743,  1744,  1745,  1746,  1747,  1748,
    1749,  1750,  1751,  1752,  1753,  1754,  1755,  1756,  1757,  1758,
    1759,  1760,  1761,  1762,  1763,  1764,  1765,  1766,  1767,  1768,
      71,     0,    72,    62,    51,    58,    59,  1274,  1129,   910,
     914,     0,     0,     0,     0,  1008,     0,     0,     0,   843,
     845,   846,   737,   856,   809,     0,  1615,  1616,  1617,   799,
       0,  1618,  1619,  1620,  1668,   671,   658,   667,   672,   659,
     661,   668,  1621,  1622,   609,  1623,  1624,   854,  1625,  1626,
    1627,  1629,  1630,  1631,   663,   665,  1633,  1634,     0,   855,
    1636,  1637,  1476,  1639,  1640,  1642,  1643,   669,  1645,  1647,
    1648,  1649,  1650,  1651,   853,  1652,   670,  1654,     0,     0,
       0,   825,   754,     0,     0,     0,   809,   642,     0,     0,
     462,   463,   484,   485,   464,   490,   491,   465,     0,   819,
     542,   687,   809,   654,   715,   585,     0,   640,   634,   267,
     815,     0,   635,   842,   809,   800,   267,   813,  1219,  1217,
    1223,  1218,     0,     0,     0,     0,     0,   422,   421,   835,
     990,   988,   989,   987,   986,   993,     0,   995,    48,   751,
       0,   800,   262,     0,     0,     0,     0,   242,   241,     3,
     877,   216,     0,   279,   280,     0,     0,     0,     0,     0,
       0,     0,     0,   368,   304,   305,   307,   365,   369,   377,
       0,   248,     0,     0,     0,     0,   232,     0,     0,  1026,
    1026,     0,     0,     0,     0,     0,  1210,  1159,  1203,     0,
       0,     0,     0,  1083,  1096,     0,     0,     0,     0,     0,
    1093,     0,     0,  1076,  1070,  1072,  1161,     0,  1026,     0,
    1157,     0,     0,     0,  1163,   858,     0,  1666,  1667,  1668,
    1669,  1670,   672,     0,  1672,  1673,  1674,  1675,  1676,  1677,
    1678,  1679,  1680,  1681,  1632,  1683,  1684,  1685,  1686,  1687,
    1688,  1646,  1690,  1652,     0,  1691,     0,   646,   757,   290,
     755,   878,     0,   859,   865,   805,     0,   879,  1796,  1797,
    1798,  1799,  1800,  1801,  1802,  1803,  1804,  1805,  1806,  1807,
    1808,  1809,  1810,  1811,  1812,  1813,  1814,  1815,  1816,  1817,
    1818,  1819,  1820,  1821,  1822,  1823,  1824,  1825,  1826,  1827,
    1828,  1829,  1830,  1831,  1832,  1833,  1834,  1835,  1836,  1837,
    1838,  1839,  1840,  1841,  1842,  1843,  1844,  1845,  1846,  1847,
    1848,  1849,  1850,  1851,  1852,  1853,  1854,  1855,  1856,  1857,
    1858,  1859,  1860,  1861,  1862,  1863,  1864,  1865,  1866,  1867,
    1868,  1869,  1756,  1870,  1871,  1872,  1873,  1874,   802,   839,
     881,   880,   882,   808,     0,     0,  1127,     0,   891,     0,
     973,     0,   873,     0,     0,  1410,  1103,  1410,     0,   170,
     170,   924,   927,     0,     0,  1056,  1052,  1050,  1049,  1051,
     500,   487,   495,   494,     0,   477,   476,   475,     0,   474,
       0,     0,   501,   501,   499,   478,   454,     0,     0,     0,
     505,     0,   503,     0,   448,   444,     0,   514,   515,   516,
     517,   524,   525,   522,   523,   518,   519,   512,   513,   520,
     521,   510,   511,     0,   526,   527,   528,   529,   530,   531,
     532,   533,   460,   466,  1062,  1063,     0,  1036,     0,     0,
    1031,     0,     0,  1033,     0,     0,     0,     0,  1274,     0,
    1077,    67,    68,    66,     0,     0,    70,    60,    69,    49,
    1097,    61,    50,  1080,    44,     0,   913,  1118,  1228,  1229,
    1237,  1028,     0,   760,     0,  1274,  1009,   222,     0,   638,
     754,   798,     0,     0,     0,     0,     0,     0,   644,   763,
       0,     0,   565,     0,     0,     0,   778,     0,   784,     0,
       0,     0,   566,   546,   547,     0,   824,   831,   753,     0,
     642,   751,     0,   718,     0,   861,     0,   636,   637,   643,
       0,   849,     0,   541,   541,   818,   737,     0,   734,   735,
     736,     0,     0,     0,   812,     0,   745,   747,     0,     0,
     581,   743,     0,   584,     0,     0,     0,     0,   731,   732,
     733,   725,   726,   727,   728,   729,   730,   741,   724,   562,
       0,     0,   689,   641,     0,     0,   561,     0,     0,     0,
     384,     0,   847,   844,     0,   801,   384,  1231,  1235,  1236,
       0,  1230,  1234,  1222,  1221,  1226,  1224,  1227,  1225,     0,
     984,     0,   981,   381,     0,   264,     0,     0,   940,  1240,
     217,   259,   258,   291,   292,   298,   257,   346,   347,     0,
       0,     0,     0,   374,   372,   843,   856,   334,   308,   333,
       0,     0,   312,     0,   338,   542,   367,   246,   302,   303,
     306,   245,     0,   370,     0,   380,   368,   307,     0,   238,
    1268,     0,     0,     0,   233,     0,     0,     0,     0,     0,
    1410,     0,     0,  1194,  1175,   122,     0,  1025,     0,     0,
       0,     0,     0,     0,     0,  1202,  1199,  1200,  1201,     0,
       0,     0,     0,  1081,  1082,  1095,     0,  1086,  1087,  1084,
    1088,  1089,     0,     0,  1074,  1075,     0,     0,     0,     0,
    1073,     0,     0,     0,     0,     0,     0,     0,     0,   290,
     290,   290,   652,     0,   288,   289,     0,     0,   803,   806,
    1117,   178,     0,   168,     0,     0,     0,     0,     0,   893,
     892,     0,     0,   203,   977,   980,   978,   975,   979,   874,
       0,     0,     0,     0,  1102,  1100,     0,     0,   167,   141,
     929,  1410,   926,   158,     0,  1155,     0,     0,     0,     0,
       0,  1064,     0,   498,   497,   449,   445,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1069,  1064,  1061,  1064,   837,     0,  1064,  1254,  1410,
       0,   170,    46,    63,  1078,  1098,  1079,  1099,  1124,  1150,
       0,  1132,  1137,  1115,     0,  1115,     0,  1134,  1138,  1115,
    1133,  1115,  1128,     0,  1029,     0,   998,     0,   997,     0,
     810,     0,     0,   797,   793,     0,     0,     0,     0,     0,
     764,   765,   766,   767,   768,   769,   770,   771,   772,     0,
       0,   773,     0,     0,     0,   723,   734,   735,   736,   731,
     732,   733,   725,   726,   727,   728,   729,   730,   749,     0,
       0,     0,     0,     0,     0,     0,     0,   611,     0,     0,
     634,   714,     0,   751,   783,     0,     0,     0,     0,     0,
       0,   751,   789,     0,     0,     0,   823,     0,   820,   587,
     809,     0,     0,   586,     0,     0,     0,   851,   852,   543,
     557,   558,   559,   563,   884,   883,   817,     0,   811,     0,
       0,   544,   567,   572,     0,   790,   605,     0,   593,     0,
     580,     0,   591,   595,   568,   583,     0,   564,     0,   812,
     746,   748,     0,   744,     0,   554,   555,   556,   548,   549,
     550,   551,   552,   553,   560,   722,   720,   721,     0,     0,
       0,   697,   588,     0,     0,   590,   589,  1402,  1439,     0,
     278,   278,   278,   266,   276,   816,     0,   434,   290,   825,
     434,     0,   541,   423,   877,   994,   982,   983,   752,   876,
    1274,     0,   434,     0,     0,   296,   297,     0,   301,  1643,
    1532,     0,     0,     0,     0,   339,   375,     0,   366,   336,
     337,     0,   335,   843,   340,   842,   341,   344,   345,   313,
     376,   832,   378,     0,   371,   250,   249,   382,     0,   236,
       0,     0,     0,     0,  1263,  1280,     0,   809,  1296,   384,
       0,   234,     0,  1160,     0,  1410,  1177,     0,     0,     0,
       0,     0,     0,    76,   113,    76,  1215,  1410,  1064,  1410,
    1064,  1305,  1376,  1548,  1206,     0,   146,     0,  1173,  1019,
       0,   131,   175,  1196,  1211,  1012,     0,     0,  1071,  1162,
    1085,  1090,  1015,  1094,  1091,  1258,  1092,  1026,     0,  1158,
       0,  1013,     0,  1256,     0,     0,  1164,  1017,  1260,   288,
     288,   288,     0,   756,     0,     0,     0,   758,   759,   805,
       0,  1116,     0,   169,     0,  1126,  1106,  1107,  1117,     0,
       0,   170,     0,   976,     0,   875,   887,     0,     0,     0,
       0,   210,     0,   161,   159,   189,     0,   166,   160,   168,
       0,     0,   117,     0,     0,     0,     0,  1156,  1152,     0,
     467,   480,  1037,   454,     0,   508,   507,   509,   509,   454,
       0,   440,     0,   452,     0,   492,   461,   534,   535,   536,
     537,   538,   539,   540,  1030,  1032,     0,  1034,     0,     0,
    1122,     0,  1120,  1121,  1125,  1119,     0,  1114,     0,  1145,
       0,     0,     0,     0,     0,     0,  1238,   761,   283,   610,
       0,     0,   794,     0,     0,   685,     0,   660,   662,   675,
       0,   664,   666,     0,   738,     0,     0,     0,   676,   613,
     614,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   629,   628,
     677,   713,     0,     0,   781,   782,   678,     0,     0,   788,
       0,     0,     0,   683,     0,     0,     0,     0,   830,   639,
     752,   719,   717,   645,   541,     0,     0,     0,     0,     0,
       0,     0,   594,   582,     0,   592,   596,     0,     0,     0,
     576,     0,     0,   574,   606,   570,     0,     0,   607,     0,
       0,     0,   653,   278,   278,   278,   278,   275,   277,     0,
       0,     0,     0,     0,  1532,     0,   406,   383,   385,   392,
     406,   411,   655,   432,   656,   861,     0,   349,   288,   831,
     349,     0,  1232,   985,     0,   939,   940,   934,     0,     0,
       0,   937,   941,   943,   944,   957,   958,   959,   960,   293,
       0,   739,   301,     0,   295,   343,   342,     0,   311,   373,
     309,     0,   379,   237,     0,  1285,  1269,  1267,  1287,  1286,
       0,   809,  1294,     0,     0,  1285,     0,  1288,  1300,     0,
     236,     0,     0,     0,     0,   121,     0,     0,     0,    76,
       0,     0,   185,     0,   172,  1195,     0,     0,     0,  1169,
    1214,  1187,  1179,  1165,  1193,     0,     0,  1198,     0,  1191,
    1208,  1209,  1207,   105,    86,  1212,     0,   118,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   290,   286,   287,   647,   804,  1148,
    1149,  1147,  1076,   179,     0,     0,   167,   929,     0,   974,
       0,   888,     0,   886,     0,  1103,     0,   170,  1255,     0,
     206,   145,   141,     0,   139,   138,   140,     0,   211,   928,
       0,     0,   923,   486,   451,     0,   504,   502,   450,     0,
     446,   453,  1064,     0,  1146,     0,  1110,  1151,  1135,  1140,
       0,  1144,  1142,  1141,  1136,  1139,     0,   796,   792,     0,
     657,   762,     0,   750,   776,   775,   612,   624,   625,   626,
     777,     0,     0,     0,   621,   622,   623,   615,   616,   617,
     618,   619,   620,   627,   786,   785,   779,   780,     0,   680,
     681,   682,   787,     0,   822,   751,   827,     0,     0,   716,
     850,   545,     0,     0,   573,   791,   597,     0,     0,     0,
     569,   738,     0,     0,     0,     0,     0,   578,     0,     0,
       0,   700,   695,   696,     0,     0,     0,     0,   269,   268,
     274,     0,   394,   406,   411,     0,   252,     0,   392,     0,
     405,   330,   404,     0,     0,   417,   415,     0,   417,     0,
     417,     0,   330,     0,   407,   330,   404,     0,   424,   835,
     433,     0,   364,     0,   821,   364,     0,   265,     0,     0,
       0,     0,   952,   953,   949,   954,   956,     0,     0,   952,
       0,   942,     0,   294,   299,   300,   310,   833,   235,     0,
     231,     0,  1275,     0,     0,  1272,  1262,     0,     0,  1297,
    1285,  1276,  1020,    76,     0,     0,  1176,     0,   187,   133,
     165,   148,     0,     0,     0,    77,     0,   153,     0,  1168,
    1188,     0,  1184,     0,  1213,     0,     0,     0,     0,     0,
    1183,  1171,     0,  1166,     0,  1064,  1064,  1174,   132,   869,
    1692,  1693,  1694,  1695,  1696,  1697,  1698,  1699,  1700,  1701,
    1702,  1703,  1704,  1705,  1706,  1707,  1785,  1708,    83,  1709,
    1476,  1710,  1711,  1712,     0,  1713,   443,  1714,  1715,  1716,
     725,   726,   174,    78,   180,    80,    82,     0,    81,   870,
      79,   177,  1016,  1259,     0,  1014,     0,  1257,  1023,  1021,
    1018,  1261,   650,   651,   648,   288,  1129,  1109,     0,     0,
       0,     0,     0,   896,  1410,     0,   885,     0,   929,  1101,
       0,   167,   210,   208,     0,   195,   117,   190,     0,   230,
       0,     0,     0,   447,   441,  1035,     0,  1123,     0,  1143,
     795,   673,   684,   774,     0,     0,     0,     0,   679,   674,
     829,     0,   826,   603,   601,   598,     0,   599,   577,     0,
       0,   575,   571,     0,   608,   686,     0,   702,   699,   273,
     272,   271,   270,   391,   389,     0,   395,   861,   402,   323,
     329,   390,     0,   386,     0,   416,   412,     0,   413,     0,
       0,   414,     0,   387,     0,   861,   388,     0,   431,     0,
       0,   691,   647,   691,  1233,   938,     0,     0,   949,     0,
     951,   955,   948,     0,   952,   950,   964,   972,   946,   947,
       0,  1284,  1264,     0,  1265,  1295,     0,     0,     0,     0,
    1289,  1241,   183,  1178,     0,   165,     0,    76,   150,   149,
     152,   147,   151,   154,     0,     0,     0,     0,     0,   134,
       0,     0,     0,    97,     0,     0,   165,     0,   171,    93,
      94,   204,     0,     0,     0,  1180,  1170,  1167,  1172,  1181,
       0,     0,  1182,  1185,   439,  1197,  1190,  1785,  1792,     0,
       0,     0,     0,     0,     0,  1105,  1112,  1076,     0,     0,
     141,     0,     0,     0,     0,     0,     0,   167,   889,     0,
       0,   210,     0,  1252,   209,     0,     0,    73,     0,   114,
       0,     0,   223,     0,   921,   922,     0,     0,  1111,   630,
       0,     0,     0,   828,   600,   604,   602,   579,   688,     0,
     290,   427,     0,   430,   393,     0,     0,   318,   325,     0,
     328,   322,     0,   396,     0,     0,   398,   400,     0,     0,
       0,   435,     0,     0,     0,   838,  1349,  1626,  1531,     0,
     348,   350,   353,   355,   354,   356,   352,   363,     0,   321,
     848,   321,   935,     0,   932,     0,   968,     0,     0,   945,
     740,     0,     0,     0,  1291,  1291,  1298,     0,     0,  1277,
       0,    76,     0,   164,   184,   112,     0,     0,    95,     0,
     102,     0,   136,   137,   135,    96,   165,   170,    98,     0,
     205,     0,  1189,     0,  1205,     0,     0,   176,  1024,  1022,
     649,  1129,     0,   929,   117,   230,     0,     0,   899,   894,
     895,     0,   897,     0,     0,  1255,   207,   141,   130,   123,
     124,   125,   126,   127,   128,   129,   144,   143,   115,   116,
       0,     0,     0,   923,     0,   631,     0,   632,     0,   705,
     432,     0,     0,   426,     0,   316,   314,   317,   319,   315,
       0,     0,   403,   419,     0,   399,   397,   408,     0,   439,
       0,   410,     0,     0,     0,   357,     0,   690,   692,     0,
       0,   254,   253,   933,     0,     0,     0,     0,     0,   961,
     969,     0,  1271,     0,     0,  1293,  1293,   434,     0,  1279,
       0,   170,   186,     0,   156,   163,   155,     0,     0,    92,
       0,    99,   194,   101,    85,   438,     0,  1192,     0,   181,
    1104,  1108,     0,    75,   224,     0,   903,   904,   901,     0,
       0,     0,     0,   230,   210,   117,     0,   227,     0,     0,
     929,   633,   701,     0,     0,     0,   425,   428,     0,   401,
       0,     0,     0,   436,   437,   409,     0,     0,     0,   351,
       0,     0,   323,   936,     0,     0,   965,     0,   962,   970,
    1266,  1291,  1290,  1292,   298,   298,  1270,  1299,     0,   194,
     142,     0,     0,   120,    85,     0,   111,     0,  1186,  1204,
     182,     0,   900,   898,   902,     0,   167,   225,  1253,    74,
     228,   229,     0,   434,  1614,  1350,  1584,     0,   703,   706,
     704,   698,     0,   326,     0,   332,   418,   359,     0,   358,
     693,   694,   320,     0,   966,     0,  1293,   301,   301,   434,
     111,   157,   162,     0,   100,   103,   191,   192,   193,     0,
     107,   104,   108,     0,   230,     0,     0,   905,     0,   919,
       0,   710,   709,   708,   712,   711,   429,     0,     0,   324,
     360,     0,     0,   298,  1282,  1281,  1278,    76,   119,     0,
       0,     0,   109,     0,   110,    84,   226,     0,   890,     0,
     929,     0,   327,     0,     0,   963,   971,   301,   188,    89,
       0,    88,     0,   173,   106,     0,   906,   434,   707,     0,
     967,  1283,    87,    91,    90,     0,   920,   331,     0,     0,
       0,     0,     0,     0,   907
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -2735, -2735, -2735,  1964, -2735, -2735,  -425, -2735,  -470,  -469,
   -2735, -2735,    27,  -794,  1338, -2735, -1138, -1783, -2446,  -414,
   -2735,  -498, -2735,  -210, -1782,  -460,  -446, -2735, -2395,  -925,
   -2735,  1618,  -109, -2735,   769, -2735, -2112, -2735, -2735,   762,
   -2735,  -935, -2735, -2735, -1833,   369,  -384, -2369, -2139,   714,
    -650, -2735,  -441,   426, -1761, -2735,   785, -2735,  -374, -2735,
    -499, -2175,    80, -2359, -1205, -2735, -2735,   329, -1123, -2594,
      23,  1635,   467, -2735,    73,   135,   -34,    38,    61,    49,
      65,  1670,  1693, -2735,  -735,   840, -2735, -2735, -1784,  -619,
     -42, -2735,   848, -1917, -2050,  -439,  1183,  1649,  1651,  -245,
    -144, -2735,  -344, -2735, -1263, -2735, -2735,   839,  1222, -1249,
   -1259, -2735,   534,  -332,  -250, -2735, -2735, -2735, -2735, -2735,
     262,  -435,  1203, -2735,  1665, -2735, -2735, -2735, -2735, -1226,
     835, -1984,   559, -1908, -1882,   306,   292, -1037,   -97,    17,
     570,  -207, -2735, -2735,  -204, -1703, -2454,  -221,  -220, -2735,
   -2735,  -436, -1109,  -691, -2735, -2735,  -440,  -480, -2735, -2735,
   -2735,  -235,   111, -2735, -2735,   878,  1725, -2735,  -572,  2015,
    -484,  -682,  1371,  -963,  1372, -1021, -1089,  -538,  1375,  1377,
   -1235,  3393, -1560,  -803,     6, -2735, -2102, -1444, -2735, -2735,
      59, -2735,  -302, -2735,  -301, -2735, -2735, -2735,  -285, -2706,
   -2735,  1306,   991, -2735, -2735, -1220, -2735,  3577,   901, -2735,
   -1637,  -562,  1399,  -708,  -988, -1159, -2735, -2735, -2735, -2735,
   -2735, -2735, -1641, -1798,  -443,   960, -2735, -2735,  1068, -2735,
   -2735,   274,  -546,  1175,  -560,  -849,   976, -2735,  -566, -1335,
   -2735,   929, -1924, -2735,   587, -2735,   -84,  -528,   263, -1020,
      21, -2735,  3319,   256,    -6,  -850, -2119, -2735, -2735,  -423,
   -2245,  -904, -2735,  -579, -2735, -2735, -2735, -2735, -2735, -2735,
   -2735, -2735,   -12, -2734,  -433, -2735, -2735,  -396, -2735,    85,
   -2735, -2735, -2735, -1115, -2735,  -157, -2735, -2735, -2157, -2735,
     615, -2735, -2735, -2735,   593,   322, -1995,    94, -2735, -2735,
   -2735, -1735, -2151, -2735,   320, -2735, -2735, -2735, -2735, -2735,
   -2735,   800, -2735, -2735,  1313, -2735, -2735, -2735, -2735, -2735,
   -1117, -2735, -2735, -2735, -2735, -2735,  -928, -2735, -2735, -2735,
   -2735,  1467,  -716, -2735,  1525, -2735,  -633,  -975,  -784,  -995,
   -2735,   271, -1105,   486, -2735, -2735, -2735, -2735, -2735,  -353,
     820, -2303, -2735,   755, -2735, -2735, -2735, -2735,   197,   509,
   -2735, -2735, -2735, -2735, -2735, -2735, -2735,   549, -2735,  1260,
   -2735,   542,  -531,   897, -2735, -2735,   595, -2735,  1128, -2735,
     973,  1347,    50, -2735,  1501, -2735, -2137, -2735,    51, -2735,
   -2735, -2735, -2735,   330,   589, -2735,  -167, -1862,   128, -2735,
   -2505, -2162, -2735,  -244, -2506, -1712,  1824, -2735, -2735, -2735,
    -512, -2735, -2122
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    37,    38,    39,    40,    41,   613,  1256,   548,  1257,
    1258,   811,    42,  1268,   813,   814,    43,  2162,  2482,  2998,
    2183,  3103,  2658,  2659,  1844,  3050,  3051,  2164,  2238,  1468,
    3044,  1913,  2846,  1850,  1833,  2660,  1922,  2793,  2525,  1845,
    2425,  1914,  2644,  2913,  1542,  1915,  2914,  2637,  1916,  1511,
    1539,  2427,  3052,  1851,  1512,  2483,  1455,  1917,  2996,  1918,
     507,  2663,   550,  2230,  1168,    45,    46,   583,    47,  2712,
     551,   985,  2135,  1809,   552,   897,    51,    52,    53,   591,
     603,   604,  1370,  1753,  2079,   965,   576,   577,  1886,   623,
    1505,  1403,  1404,  1778,  2124,  1430,  1431,   974,   975,  2738,
    2891,  2739,  2740,  2580,  2581,  3069,  1418,  1422,  1423,  1794,
    1784,  1409,  2372,  2760,  2761,  2762,  2763,  2764,  2765,   898,
    2601,  1426,  1427,   977,   978,   979,  1435,  1804,    55,  1757,
    2087,  2088,  2089,  2350,  2351,  2365,  2361,  2586,  2746,  2090,
    2091,  2731,  2732,  2863,  2368,  2097,  2750,  2751,  2814,  1561,
     727,  1273,  1205,   729,   899,   730,  1185,   900,  1189,   732,
     901,   902,   903,   735,   904,   905,   906,   738,  1181,   907,
     908,  1200,  1224,  1225,  1226,  1227,  1228,  1229,  1230,  1231,
    1232,   949,  1656,   910,   911,   912,  2093,   913,  1362,  1741,
    2769,  2887,  2888,  2072,  2332,  2567,  2730,  2955,  3018,  3019,
     914,   915,  1313,  1314,  1738,  1357,  1358,   916,  2485,  1360,
    1649,  1312,  1309,  1059,  1060,  1274,  1629,  1630,  1652,  1997,
    1659,  1665,  2024,  2025,  1673,  1706,   917,  1613,  1614,  1983,
    1282,   918,   644,  1066,   645,  1279,  1700,   926,   919,   920,
    1306,  1307,  2038,  2307,  1678,  1800,   595,  2742,   750,  1148,
     921,   922,   923,   924,   951,   597,  1061,   487,   741,  2983,
    1162,   955,  1062,  1846,  1696,    56,  2222,  2223,    57,  1521,
    2831,  2512,  2513,  2693,  2828,  2938,  3056,  3057,    58,   562,
      59,    60,    61,    62,  2715,  2532,  1172,  1544,  1924,   508,
      63,  2380,  2773,  1772,  1773,  2111,  2112,  2613,  2390,  2113,
    2614,  2610,  2611,  2387,  2388,  2114,  2115,  2116,  2117,  2118,
      64,  1160,  1527,    65,   945,   600,   946,   948,    66,   824,
     648,    67,   571,   572,    68,    69,  1459,    70,    71,   540,
     541,   747,  1237,   542,   742,    72,  1534,  1486,  1269,  1015,
    1476,  1263,    73,  1535,    74,  1898,  2687,  2255,  2688,  1968,
    1892,  1266,  1964,  1589,  1515,  1267,   494,  1602,  2256,  2212,
    1590,    75,   509,  1174,    76,  2171,  2172,  2173,  1847,   996,
    2927,  1848,   997,   998,  2175,    77,   584,   585,  1270,  1383,
    1271,    78,   553,    80,    87,    81,   754,    82,   554,  1815,
    1441,  2628,    84,  2142,  1818,  2145,  2786,  2400,  2140,  2146,
    2905,  2984,  2143,  1819,  2787,  1820,   517,   489,   490,   744,
    1151,  1064,  1152
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     486,  1156,   609,  1014,   633,   516,   636,   980,   640,   516,
     624,   927,   484,   749,   561,   561,   564,   516,   570,  1490,
    1259,   570,  1524,    48,   570,   596,  1196,   485,   516,   516,
    1262,  1240,  1552,  1243,  1755,   816,   939,  1525,  1489,   950,
     570,  1202,  1580,   549,  1316,  1526,   755,  1318,   594,    54,
      79,    83,  2165,  1454,   740,  1528,  1399,  2100,   731,  2180,
    2510,  2182,  1461,  1363,  1149,    54,  1501,  2490,  1465,  2107,
    2487,  2161,  2393,    49,  1648,  1373,   756,  2509,   810,  2059,
      44,   661,   596,   516,   596,   596,   596,  1556,  1687,  1688,
    1494,  2522,   626,  1999,  2000,  2201,  2202,  2203,  2019,  1153,
     606,  2347,   728,   590,  2147,  1016,   563,  1020,   638,  1024,
    1182,  1183,  2306,  -841,  1272,   627,  2391,   746,  -501,   618,
    2526,  -866, -1794, -1794,   817, -1671,  2382,  -240,  2904,  -863,
    -863,  2707,  -243, -1774, -1774,    50,   492,  1194,  1698,  2046,
    2047,  1529,  2382,  2754,  1698, -1682,  2224, -1689,  1382,  2002,
    1760,    50,  -867, -1785, -1785, -1792, -1792,  1157,  1608,   559,
    -864,  -864,   833,  2703,  1799,    50,  -866, -1682,   629,  1425,
     607,   608,  1796,  -506,   559, -1689,  -867,  -506,   833, -1671,
    -468,    50,  -481,  2364,   973,  -509,  1756,  -496,   976,   625,
     559,  1246,  -509,  1981,  1719,   559,  2641,   598,  2383,  1202,
    1625,  2897,  2974,  2685,  1368,  1176,  -723,  3079,  2362,  2616,
    2854,  2261,  2263,  -723,  1896, -1113,  1466,  2899,  1474,  2978,
    -240,  1477,  1478,   833,  1250,  -243,  2296,   940,  2838,   833,
    1457,  2934,  1327,   740,    88,  2817,  1735,   731,  2618, -1076,
    2623,  1492,  2680,  1736, -1076,  2626,  2865,  3095,  1457,  1186,
    1177,  1377,  1250,   559,  1234,     3,     4,   833,   672,  2193,
     630,  2668,  1333,  2829,  3046,  2429,  2791,  2234,  1624,  1182,
    1183,  1195,  1743,   621,   515,  2002,   560,   560,   544,  2839,
    2906,  1884,   969,  2406,  2867,   621,   565,  2808,  2840,  2936,
     556,  1234,  1775,  1407,  1335,  1194,  1234,   605,   605,  2880,
    1802,  1233,   816,   733,  2909,  1364,  2523,  1234,  3060,   816,
    1473,    26,  2094,  2638,  2373,  1327,  1327,  2841,  1499,  2138,
    3113,  3087,  1720,    85,  -742,  1500,  1622,  2419,  2850,  1831,
    1308,  -742,  2953,  2705,  2802,  2868,  2851,  1319,  2169,   740,
    1721,  2430,  2836,   731,  2383,  1722,  1333,  1264,    31,  3007,
     555,  2394,   634,   569,  2139,  2679,  2275,   971,  2273,   589,
    2383,  2699,  2954,  1378,  2094,  1375,  2442,  2189,    86,  2583,
    2096,  3115,   969,  2587,  2386,   617,  2418,  1335,  1335,  1776,
    2190,  1723,  2702,  2706,  2297,  3108,  3121,  1832,   558,    33,
    2639,  1375,  2842,  1153,   941,  2415,   942,  2417,    89,  3047,
    1408,  2937,  2708,    34,  2843,   601,    90,   972,  2530,  1803,
     651,  2803,  1467,  1186,  1744,  2106,  -240,  2395,   610,  2709,
    1438,  -243,   816,   816,  2431,   667,  1396,    35,  1178,  2933,
    1519,  1195,  1327,  2866,  2815,   557,  2364,  2921,  1327,  1885,
    1504,   588,    91,  2277,  2278,  2279,  2280,   971,  1380,  2284,
    2285,  2286,  2287,  2288,  2289,  2290,  2291,  2292,  2293,  2627,
    3086,  2573,  1333,  2779,  1897,  1546,   700,  2830,  1333,  2166,
    2524,  2869,  2910,  2733,  1464,  2801,  3036,  2543,  3048,  1949,
    1951,  -240,   733,  1464,  3114,  1503,  -243,  1379,   596,  2385,
      92,   631,  1369,  1657,  1335,   659,  1648,  1605,   660,  2539,
    1335,  2323,  2324,   596,  3022,  1699,  3058,   516,  2852,   937,
    1905,  2061,  1826,   609,  1612,  1883,   646,   740,  2930,   933,
    1540,   731,  2149,  1392,  2127,  2784,  2642,  2102,   599,   960,
    3080,  1724,   545,  1796,   660,   516,   516,  1179,  2686,  1490,
      26,  1436,    54,   649,   650,  1437,  3042,  1948,  2631,  1235,
    3009,   561,  2209,  2210,   609,   832,   642,  2121,  2002,  2490,
     643,   673,  2487,  2003,  2004,  2005,   647,  1180,  2002,  -723,
     925,   925,   570,   570,   812,   570,  1493,    31,  2824,  1166,
    1169,  1170,  1149,  2167,   981,  3008,  1235,   596,   733,   493,
    1365,  1235,  -240,  2150,  2194,    54,   516,  -243,  2844,  1737,
    2743,  2845,  1235,  2710,  1947,  2747,  1785,   596,  2749,   642,
    2391,  -841,  1301,   643,  2784,  1520,  -501,  1883,    33,  -866,
    1553,  1554,  1549, -1671,  2384,   596,   944,  2723,    50,   626,
    2632,  -240,    34,  -240,    48,  2385,  -243,  2017,  -243,  2094,
    2608,  2094,   819, -1682,  2643, -1689,  2386,  1197,   986,   734,
    -867,  2385,   627,  2104,  1197,  1943,    35,   596,   596,   596,
      54,    79,    83,  1758,  -866, -1682,  2932,   952,  2734,  1198,
     588,  -506,  1322, -1689,  -867,  2804,  1198, -1671,  1184,   943,
    1188,    50,   608,  1199,    49,  -496,  1588,  -742,  1371,  2617,
    1201,    44,  1860,  1761,  2898,  2975,  2630,  2900,  2944,  2979,
    1484,   612,  1863,  1236,  2226,  1866,   740,   740,  2670,  2671,
     731,   731,  2545,  1574,  1254,  1255,  1609,  3062,  1308,  1446,
    1356,  2684,  1616,   608,  1485,  2945,   625,  3096,  2939, -1076,
   -1076,  1410,   619,  1610,  1831,  1662,  1664,   816,  1672,   991,
    1239,  3099,  1254,  1255,  2985,  1242,    50,  2689,  1479,   611,
    1319,  1626,   740,  1695,   728,  2620,   731,   574,  1685,  2733,
    2014,  2015,  2016,  2017,  2875,  1466,   733,   628,  2007,   934,
    1215,  1216,  1610,  1153,  2883,  1648,   669,  1411,  1582,   832,
     810,  1197,  2002,  1484,  2661,  1971,   641,  2003,  2004,  2005,
    1972,  2051,  2158,  3013,  1962,  1149,  2168,    26,  2169,  2096,
    1571,   620,   963,  1198,  1963,   752,  2784,  1485,  2662,  2310,
    2421,   818,    26,   560,   820,   746,  1573,  1610,  2052,  2777,
    1449,  1277,  1577,  2940,  2244,  2778,  2170,  1610,   734,  1153,
    2248,  2039,  1316,  2281,    31,  1932,   930,  2805,  2008,  1858,
     935,  2816,  1973,   740,  2149,   656,   496,   731,  1530,    31,
    1657,  1657,  1389,   827,  2794,  1657,  1954,   821,  1955,   609,
    2103,  1957,   575,  1490,  2546,   605,    54,  2702,   822,  3063,
    2490,  2895,  1516,  2487,  3073,    33,   657,  2896,  1466,   621,
    1879,  1880,  1881,  1219,  1220,  1852,  1488,   969,  1315,  1413,
      33,  1689,   970,  1480,  2204,  -361,  1657,  1657,  2319,  2422,
    1440,  1481,   666,  1445,    34, -1771, -1771,   964,   497,  2094,
    2784,   642,  1701,  2094,  1823,   643,  1472,  1353,  1354,  1355,
    1356,  1351,  1352,  1353,  1354,  1355,  1356,   588,    35,   662,
     596,  1192,  1193,  3107,   734,     3,     4,  1496,  2053,  2195,
     670,  1859,   588,  2054,   671,  1517,  1457,   516,   516,  1414,
     674,  1149,    50,  1584,  3100,   733,   733,  1458,   833,   675,
    1869,  1467,   971,  1410,  2423,  1876,   663,  2424,  2148,  2121,
    2006,   753,   740,  1466,  1451,  2282,   731,   596,   596,   559,
    1444,   596,  1456,  1707,  2719,  2283,  1929,  3074,  3075,   652,
    1288,   653,  2007,  1518,   596,  2235,  1466,   545,  2239,  1495,
     986,   733,   664,  1401,  1402,   823,  1406,  1457,  2912,  1411,
    1708,   596,   972,  1197,  2916,   596,  2080,  2081,  1460,   988,
    1834,   622,   825,  1464,  1904,   989,   627,   627,  1310,   627,
    1950,  1952,  1953,  1466,  1491,  1198,  3101,  2009,  2010,  2011,
     826,  2012,  2013,  2014,  2015,  2016,  2017,  3111,  2536,  1199,
     665,  2012,  2013,  2014,  2015,  2016,  2017,  1466,  1285,  1861,
     827,  1910,  2008,  3102,  1864,  2928,  1248,  3037,  3038,  1249,
    1261,  1412,  1530,   988,  1467,   828,   816,  1261,   740,   989,
    1532,  1524,   731,   502,  1586,   503,   932,  2055,  2800,   833,
    1452,   816,   733,  1197,  1498,  2700,  1525,   662,  2056,  2593,
     625,   625,  2596,   625,  1526,  1672,  2029,  1672,  1672,   938,
     506,  2125,   734,  2736,  1528,  1198,   833,  2192,  2737, -1769,
   -1769,  1413,  2177,   740,  2179,  1709,  1941,   731,   642,  1201,
    1710,  2094,  1374,   990,   663,  1711,  1464,   947,  1390,  2098,
    2094,  1391,  2049,   832,   953,  2094,  2002,  2035,  2094,  1513,
     954, -1796, -1796, -1796,  2196,  1321,  3097,   956,   596,  2556,
    2855, -1770, -1770,  1581,  1324,  1326,  1543,  2254,  1327,  1467,
    2220,  1977,  1648,   928,   929,  2441,   931,  1372,  2200,   957,
    2108,  1414,   642,  2094,  -841,  2109,   643,   990,  1381,   958,
    1261,  1261,  1467,  2110,  2433,   961,  1393,  1562,  1333,  1394,
    1657,  1657,  1657,  1657,  2986, -1796,  1657,  1657,  1657,  1657,
    1657,  1657,  1657,  1657,  1657,  1657,   605,   654,   665,   655,
    -289,   733,  2416,   962,  2028,  -289,  2030,  2031,   967,  1467,
    1335,  1464,   660,   660,   982,   516,   516,  2506,   516,   660,
    2354,   596,  1970,  2432,  2355,  2440,  1974,  1578,  1975,  1604,
    1394,  2217,  1605,  1467,  1464,  2246,  2247,  1606,  1657,  1657,
    1607,  2009,  2010,  2011,   983,  2012,  2013,  2014,  2015,  2016,
    2017,  2772,  2094,  1682,   984,  1683,   812,    26,   987,  1712,
    2356,   988,    26,  1769,  1754,   999,  1242,   989,  1650,   991,
    1713,  1464,  2402,  1000,  3098,  -289,  2589,    54,   646,  1676,
    1017,   734,   734,  2048,  2094,  2358,  1764,  1021,  1766,  1807,
    3059,  1920,  1394,  1921,    31,  1464,    26,  1893,  2355,    31,
    1894,  2588,  1154,  2591,    54,   649,   650,   733,  1927,   660,
    1155,  1605,  1930, -1796,  1933,  1394,  3076,  1607,  2334,  2335,
    2336,  2337,   992,   991,  1158,  -289,   993,   734,   647,  1939,
    1801, -1796,  1940,    31,  2356,    33, -1796,  1161,  1965,   546,
      33,  1966,   596,   925,  2073,  1978,  2074,  2645,  1394,    34,
    2357,   988,   733,  2075,    34,  2076,   994,   989,  1159,  2358,
    2354,  1635,  1163,    50,   596,  1164,   596,  1588,  2722,  1636,
    1637,  1638, -1796,    35,    33,   990,  1018,  1171,    35,  1985,
     993,  1173,  1394,  2021,  3116,  2488,  1394,   547,    34,  1175,
      50,  2043,   588,  2359,  1394,  2648,   736,  2094,   944,  2185,
    2187,  2243,  2186,  2188,  1394,  1180,  2008,  1184,   596,  2360,
    1019,  1188,    35,  1900,  1901,   740,  1817,  1821,   734,   731,
    2304,  1456,   516,  1242,   995,  1187,   588,  2441,  1344,   816,
   -1772, -1772,   516,  1836,   516,  1840,  2315,   516,  2355,  1394,
     966,  2121,   968,   516,  2094,   516,  2403,  1190,  2407,  2404,
    2302,  2408,  1191,  1705,  1204,  2650,   660,   516,  1203,  2633,
    1206,   660,   516,  1834,  1238,   990,   516,   516,   516,   516,
    1241,   516,   516,  1610,  2356,  1244,  1209,  1210,   995,  2578,
     740, -1773, -1773,  2360,   731,  1575,    93,  1576,  1245,   491,
    2357,   596,   596,  2578,  1814,   543,  1903,  2420,   740,  2358,
    1894,   988,   731, -1775, -1775,  1247,   573,   989,   988,  1265,
     586,  1275,  1919,  2252,   989,  2369,  2535,  2518,  2537,  1276,
    1894,  2538, -1796,   740,  1278,  1631,  1280,   731,  2269,  1326,
     740,   991,  1327,  2359,   731,  2550,  -472,   988,  2551,  2973,
   -1776, -1776,  2856,   989,  1215,  1216,  2276,   734,  2094,    26,
    1660, -1777, -1777,   740,  2918,  2744,    50,   731,  2557,  2653,
    2634,  1607,  1333,  1894,  -479,  2505,  1285,  2635,  1811, -1796,
    1894,  2298,  -469,  2694,  2724,   736,  2695,  1607,  2303,  -470,
    2795,  1283,  1610,  2796,  1022,  1284,    31,  -473,   993,  1852,
    1911,  2491,  2823,  1286,  1335,  1894,  2857,  2860,  -471,  1607,
    2861,   609,  2654, -1778, -1778, -1796, -1796, -1796,  1305,  2012,
    2013,  2014,  2015,  2016,  2017,   990,  1762,  2872,  1023,  2655,
    1242,   991,   990,  2360, -1796,  2877,  1287,    33,  2878,  2666,
    1317,  1351,  1352,  1353,  1354,  1355,  1356,   496,  1361,  2881,
    2893,    34,  2878,  2894,  2120,  2077, -1779, -1779,   588,   516,
     609,   990,    50,   734, -1780, -1780,  1315,  1219,  1220, -1781,
   -1781,  1289,  -931,  1660,   733,    35,  2907,  2058,  2950,  2908,
    2951,  2908,  2959,  1607,  1822,  1242,  1001,  2965,   993,   588,
    2878,   736, -1782, -1782,  2990,   740,   995,  2991,  -361,   731,
    1650,  1827,  2821,  3002,  -362,  1002,  1242, -1796,   734,   497,
    1290,  1835,  3023,  1838,  3026,  3024,  1849,  1242,   994,  2675,
    2676,  2745,  1853,  3027,  1855, -1796,  1394,  1291,  2656,  3029,
   -1796,  1657,  1394,   596,  2254,  2657,  1862, -1783, -1783,   733,
    2095,  1865,  1293,  2484,  1294,  1870,  1871,  1872,  1873,  1295,
    1877,  1878,  2092, -1784, -1784,   740,  1003,   733,  3066,   731,
    3070,  2878,  2121,  2886,   499,  1812, -1796,   485,  3088,   609,
    1296,  3089,  3090,  1196,  1297,  2908, -1786, -1786, -1787, -1787,
    1310,   991,   733,   646, -1788, -1788,   995,  1298,   991,   733,
   -1789, -1789,  2095,  1367,  2136, -1790, -1790,  2141, -1791, -1791,
    1817, -1793, -1793,  2534,  2092,  2215, -1795, -1795,  1368,    54,
     649,   650,   733,  1153,  2225,  2227,  1513,   991,  2231,   485,
     488,  1299,  1344,  2621,   740,  1506,  1507,  1300,   731,  1310,
    1369,  1591,  2242,   647,  1261,  1657,    26,  1301,   993,  1384,
    1969,  1867,  1797,  1798,  1320,   993,  1610,  1705,  1398,  1261,
    1400,  1004,  1397,  1639,  1640,  1641,   970,  1642,  1643,  1644,
    1645,  1646,  1647,  2068,  -339,  -339,  1217,  1218,   994,   736,
    1874,  1219,  1220,    31,   993,  1868,  1592,   972,  1513,  -343,
    -343,  2086,  1432,   596,   502,  1434,   503,  2488,  -342,  -342,
    1442,  1513,   596,   596,   516,    50,   596,  1386,  1388,  1462,
    1463,  1005,  1593,  1464,  1875,  1469,  1470,  1657,   505,  1006,
     596,   506,  1475,  1471,    33,  1482, -1796,  1660,  1660,  1483,
    1497,  1007,  1660,  1594,  2249,  1487,  1502,  1595,    34,  1509,
    1510,  1514,  1522,  2086,  1523,  1530,   995,  1531,   608,  1533,
     660,  1536,  1537,   995,   733,  1538,  1547,  1548,  1596,   833,
     740,  1597,    35,  1008,   731,  1555,  1513,  1513,  1557,  1558,
    1563,  1564,  1603,  1660,  1660,  1567,  1813,  1568,  1598,  1612,
    1569,  1570,   995,  1327,  1617,  1677,  1684,  1679,  1697,  1650,
     740,  1394,  1715,   619,   731,  2338,  2339,  2340,  1718,  1681,
    1704,  1739,   609,  1716,  1740,  1756,  -290,  1763,  2674,  1770,
    1771,  -290,  1010,   620,   733,  1786,  1789,  1788,  1787,  1774,
    1790,  1791,  1810,  1808,  1824,  1828,   816,  2329, -1796,  1829,
     734,  1830,  1911,   609,  1011,  1351,  1352,  1353,  1354,  1355,
    1356,   621,  1891,  1895,  1899,  1902,  1906,  2397,  1907,  1908,
    1909,   609,  1925,  1923,  1926,  1013,  1931,  1935,  1490,  1936,
    1956,  1937,   620,   740,  1934,  2333,  1938,   731,   736,   736,
    1599,  1945,  1946,   596,   596,   596,  1959,   486,  1600,  2095,
    2352,  -290,  1958,   733,  2352,  2366,  1967,  1979,  1987,  2092,
    1990,  2092,  2050,  1988,    50,   734,  1989,  1991,  2045,  1992,
    1994,  2184,  1995,  2057,   485,  2066,   485,  1998,  2020,  2026,
    2033,  2859,  2071,   734,   736,  2105,  2096,  2067,  2123,  2069,
    2070,  -344,  1601,  -345,  2129,   596,  2128,  2131,  2132,  2134,
    2137,  -290,  2144,  2152,  2511,  2151,  2515,  2154,   734,  2156,
     621,  2157,  2160,  1817,  2176,   734,   516,  2163,  2211,  2178,
    1513,  1456,  1513,  2191,  1543,  2205,  2197,  2922,  2198,  2199,
    2206,  2207,  2221,  2229,  3085,  2208,  2232,  2216,   734,  1581,
     516,  1310,  2446,  2228,  2236,  2218,  2233,  2237,  2240,  2241,
    2250,  2253,  2251,  2260,  2023,   516,   516,   516,   516,   516,
     516,   516,   516,   516,   516,  2268,  2002,   740,  2022,  2299,
    2300,   731,  1310,  2301,  2317,   736,  2318,  2864,  2488,   733,
    1456,  2321,   596,  2915,   596,  2330,  2345,  1261,  2343,  2078,
    2346,  2341,  2367,  2798,  2258,  2864,  2259,  1456,  2353,  2371,
    2264,  2265,  2376,  2377,  2379,  1543,  2381,   740,  2389,   733,
    2399,   731,  2392,  2396,  2401,  2484,  2405,   596,  2414,  2428,
    2569,  2570,  2571,  2572,  1513,  2444,  2517,  2426,  2520,  2528,
    2508,  2989,  2502,   737,  2503,  2504,  2516,  2521,   740,  2533,
    2531,   740,   731,  1894,  2541,   731,  2544,  1660,  1660,  1660,
    1660,  2548,   622,  1660,  1660,  1660,  1660,  1660,  1660,  1660,
    1660,  1660,  1660,  2547,   607,  2579,  2952,  2584,  2935,  2585,
     734,  2549,  2552,  2565,  2575,  2592,  2598,  1620,  2576,   559,
    2582,  2599,   733,  2529,  2597,  2600,  2879,  2612,  2602,  2879,
    2966,  2606,  2968,  2615,  2607,  2568,  2636,  2629,   596,   596,
     596,   596,  2619,  2664,   736,  1660,  1660,  2352,  2366,  2640,
    2352,  2665,  2669,  2577,  -863, -1769,  2962,  2095,  2682,  1001,
    2681,  2095, -1770, -1771, -1772, -1773,  2683,  2595, -1774,  2092,
     734, -1775,   743,  2092,  3053, -1776,  2691, -1777,  1002, -1778,
   -1779,   815, -1780,  2690,   485,    50,  2692, -1781,   485,  2704,
   -1782, -1783, -1784, -1786,  2696, -1787,  1650, -1788,  2697,  2711,
    2925,  2713,  2717,   925, -1789, -1790, -1791, -1792,  2141, -1793,
     488,   488,  1817, -1794, -1795,  -864,  2716,  2720,  1456,  2721,
    2735,  2729,  2915,  1207,  1208,  2412,  2748,  2753,  2768,  1003,
    2776,  2780,  2782,  2788,  2790,   488,  2792,  2806,  2809,   734,
    2810,  2797,  2811,  2673,  2812,  2813,  2820,  2826,  2822,  2445,
     736,  2827,   737,  2834,  2848,  2486,   733,  2833,  2837,  2849,
    2862,  2858,  2870,  2886,  2492,  2493,  2494,  2495,  2496,  2497,
    2498,  2499,  2500,  2501,  2871,  1063,   488,  1150,  2874,  2882,
    2211,  2884,  2890,  2901,  2622,  2904,  2624,  2920,  2924,  2926,
    2929,  2982,  2941,  2946,  2948,   736,   733,  2947,  2086,  2970,
    2958,  2971,  2086,  1209,  1210,  2967,  2972,  2976,  2977,  2988,
    2992,  2994,  1513,  2805,  2995,  3001,  2997,  3000,   740,  3004,
    3010,  3011,   731,  3021,  1004,  1919,  3025,   733,  3035,  3005,
     733,  3006,  3012,  2774,  2331,  2714,  3033,  3043,  3049,  3061,
    3034,  3067,  3071,  1001,  3068,  3078,    50,  3081,    50,  3072,
    3083,   743,  3092,  3091,  3093,  3094,  3079,  3080,   737,  3109,
    3105,  3110,  1002,   739,  3112,   734,  2484,  1211,  1212,  1213,
    1214,  1215,  1216,  3117,  1005,  1217,  1218,  3118,  3120,   486,
    2352,  2807,  1006,  2741,  2940,   959,   516,   488,  2095,  3122,
    3045,  2092,  3104,  2095,  1007,   734,  2095,  1583,  2752,  2919,
    2092,  2755,  3084,  2701,  3077,  2092,   485,  2847,  2092,  2159,
     925,   596,  2527,  1003,  2181,   485,  1453,  3041,  2213,  3082,
     485,  2511,  2155,   485,  2448,  3040,  1008,  2410,  1439,  1376,
    1806,  2785,  2119,  1395,  1429,  1428,  2961,  2892,  3032,  2853,
    2130,  1783,  2604,  2092,  2375,  3028,  2969,  2603,   815,  1805,
     660,   516,  1433,  2133,  2348,   815,  1063,   743,   485,   596,
    2574,  2590,  2876,  2344,  2957,    50,  2956,  2963,   734,  2964,
    1621,  1623,  2771,   488,  1627,  1010,  1628,  -252,  3030,  3020,
    3031,  1745,  2436,  2041,  1219,  1220,   516,   516,  2122,  1611,
    -252,  1982,  2064,  2832,  1890,  -252,  2374,  1011,  2099,   596,
    3124,  1456,   488,  3106,   516,  2062,  2949,  2342,  1004,  2378,
    2605,  2609,  2775,  2219,  1765,  1572,  2911,   596,  1013,  2672,
    2785,  2519,   488,   488,   488,  1551,   488,   488,  2214,  2086,
    2443,  2257,  2092,  2507,  2086,   609,   737,  2086,  2447,   516,
    1854,  1976,   739,  2174,  2625,  2718,  -252,   485,  2409,  1767,
     488,  2987,  2095,     0,  3039,     0,     0,  2755,  1005,  2942,
       0,  2781,     0,     0,  2092,  -252,  1006,   733,   815,   815,
       0,     0,  2889,     0,  2825,     0,     0,     0,  1007,   485,
       0,  1326,     0,  2698,  1327,     0,   516,     0,     0,     0,
       0,     0,     0,     0,   596,     0,     0,  1221,  1222,     0,
    2701,   488,   734,     0,  1261,   488,   488,   736,     0,     0,
    1008,     0,     0,   516,  1333,  -252,   488,   660,     0,     0,
   -1573, -1796,     0,     0,  -252,     0,     0,     0,  1660,     0,
     516,     0,     0,     0,     0,   743,    50,   596,     0,     0,
       0,     0,   734,     0,     0,     0,  1335,     0,   739,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1010,
    1063,     0,    50,     0,     0,   486,     0,  1063,  2770,     0,
       0,     0,   736,   734,  2960,     0,   734,  2092,   516,     0,
       0,  1011,  2752,     0,     0,     0,     0,     0,  1063,     0,
     736,     0,   485,  2086,     0,     0,     0,     0,   925,     0,
       0,     0,  1013,     0,  1310,     0,     0,     0,   660,   660,
     660,     0,  2785, -1573,     0,   736,     0,  2943,     0,  2322,
    2799,     0,   736,     0,  2092,   737,   737,   832,     0,     0,
    2002,  3055,  1660,     0,     0,  2003,  2004,  2005,     0,   485,
       0,     0,     0,  3003,     0,   736,     0,  2486,     0, -1796,
       0,     0,  2312,     0,     0,  2818,  2819,     0,     0,     0,
       0,     0,  2752,     0,     0,     0,  -252, -1796, -1573,     0,
       0,   737, -1796,  2835,  2889,     0,  2741,     0,     0,    50,
       0, -1573,     0,     0,  2980,     0, -1573,     0,     0,     0,
       0, -1573,  1817,     0,     0,  1150,     0,     0,     0,     0,
       0,     0, -1573,     0,  1660,     0, -1573,  1063, -1796,   596,
    1456,     0,     0,     0,     0,  3055,  2785,     0,   488,     0,
       0,     0,     0,     0,   743,   743,   739,     0,  2092,     0,
     642,     0,     0,   957,   643,     0,     0, -1573,     0,     0,
     660,     0,     0,   485,  3119,     0,    50,     0,  3123,     0,
       0,     0,     0,     0,     0,  2902, -1573,     0,     0,     0,
       0,     0,   737,     0,  1344,     0,     0,     0,  1001,     0,
     743,     0,     0,     0,     0,     0,     0,   736,     0,     0,
       0,     0,  2923,   815,  3054,     0,     0,  1002,  2931,     0,
       0,     0,     0,   596,     0,     0,     0,     0,     0,  1150,
       0,  2645,     0,     0,     0,     0, -1573,  2646,     0, -1573,
       0,     0,   488,   734,   488, -1573,     0,   488,   488,     0,
    2647,     0,   596,     0,     0,     0,   596,   488,     0,   488,
     488,   488,   488,   488,   488,   488,     0,   736,  1003,  2434,
    2007,     0,     0,     0,     0,     0,    50,  2435,     0,  2648,
       0,  2649,     0,     0,   488,     0,   488,     0, -1796,     0,
       0,   743,   488,   488,   488,   488,  1150,     0,     0,     0,
     488,   488,     0,     0, -1573,   488,     0,     0,     0,   488,
       0,     0,   488,   488,   488,   488,   488,   488,   488,   488,
     488,   737,     0,   488,     0,     0,     0,     0,   488,     0,
       0,   488,     0,   488,     0,  1063,   736,  2436,  1150,  2650,
    2008,     0,     0,     0,     0,   739,   739,     0,     0, -1575,
       0,     0,     0,     0,     0,     0,     0,     0,   488,     0,
    2078,     0,     0,  1004,     0,     0,     0,     0,     0,     0,
    2651,     0,     0,   488,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   488,   488,     0, -1573,  2486,     0,
   -1796,   739,     0,     0,     0, -1573,     0,  1351,  1352,  1353,
    1354,  1355,  1356,     0,     0,     0,     0, -1589,     0,     0,
       0,     0, -1573,  1005, -1573, -1573,     0,     0,     0,     0,
     743,  1006,     0,     0,     0,     0,  1150,   737,  1150,     0,
       0,     0,     0,  1007,     0,     0,  2437,     0,  2652,     0,
       0,     0, -1575,  2653,     0,     0,     0,     0,     0,   832,
       0, -1573,  2002,     0, -1573, -1573, -1573,  2003,  2004,  2005,
       0,     0,   736,     0,     0,  1008,     0,  1063,     0,     0,
     488,   488,   737,   488,  2313,     0,     0,     0,     0,     0,
       0,     0,   739,     0,     0,     0,  2654,     0,     0,     0,
       0,     0,   736,     0,  1150,     0,     0, -1575,     0,     0,
   -1589,     0,     0,  2655,     0,     0,  1207,  1208,     0,     0,
   -1575,   488,   488,     0,  1010, -1575,     0,     0,     0,     0,
   -1575,     0,     0,     0,     0,     0,   743,     0,     0,     0,
       0, -1575,     0,     0,     0, -1575,  1011,     0,     0,  2009,
    2010,  2011,     0,  2012,  2013,  2014,  2015,  2016,  2017,     0,
       0,     0,   815,     0,     0, -1589,     0,  1013,     0,  2438,
       0,     0,  2439,     0,     0,   736, -1575,   815, -1589,  1063,
       0,   743,     0, -1589,     0,     0,   488,     0, -1589,     0,
       0,   488,     0,     0,     0, -1575,  1209,  1210,     0, -1589,
       0,     0,     0, -1589,     0,     0,     0,     0,     0,     0,
       0,     0,  2656,     0,     0,     0,     0,     0,     0,  2657,
       0,   739,     0,     0,     0,     0,     0,   488,   488,   488,
       0,     0,   488,     0, -1589,     0,     0,     0,     0,     0,
       0,   488,   488,   488,   488, -1575,     0,     0, -1575,     0,
       0,   488,     0, -1589, -1575,   488,     0,     0,   488,     0,
    1211,  1212,  1213,  1214,  1215,  1216,     0,     0,  1217,  1218,
       0,     0,  2007,   488,   488,  1464,     0,     0,   488,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   -41,     0,
       0,     0,   488,     0,     0,   488,     0,   488,     0,     0,
       0,     0,     0, -1589,     0,     0, -1589,     1,     0,   736,
       0,     0, -1589, -1575,     0,     0,     0,     2,   488,     3,
       4,     0,     0,     0,     0,     0,     0,   739,     0,     0,
     488,     0,     0,     0,     0,     5,     0,     0,     0,     0,
       0,     0,  2008,     0,     6,     0,     0,     0,   488,   736,
       0,     0,     0,     0,     0,     0,     7,     0,     0,     0,
       0,     0,     0,     0,     0,   488,   488,     8,     0,  2078,
       0, -1589,   739,     0,     0,     0,     0,  1219,  1220,     9,
     736,    10,   488,   736,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   737,     0, -1575,     0,   488,    11,
       0,     0,     0,     0, -1575,     0,     0,     0,     0,     0,
       0,     0,     0,    12,     0,  1150,  1150,  1150,     0,     0,
       0, -1575,     0, -1575, -1575,    13,     0,  2078,     0,     0,
       0,     0,    14,     0,     0,  1326,     0,     0,  1327,     0,
      15,     0,    16,    17,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1589,    18,  1063,     0,     0,   737,
   -1575,     0, -1589, -1575, -1575, -1575,     0,     0,  1333,     0,
       0,     0,     0,     0,     0, -1796,     0,   737,     0, -1589,
       0, -1589, -1589,     0,     0,     0,    19,     0,     0,     0,
    1221,  1222,     0,   743,     0,     0,     0,     0,     0,     0,
    1335,    20,   737,     0,     0,     0,     0,     0,     0,   737,
    1223,     0,     0,     0,     0,     0,     0,     0, -1589,     0,
       0, -1589, -1589, -1589,     0,     0,    21,     0,     0,     0,
       0,     0,   737,     0,     0,   815,     0,     0,     0,     0,
    1150,  2009,  2010,  2011,     0,  2012,  2013,  2014,  2015,  2016,
    2017,     0,     0,     0,     0,   488,     0,     0,   743,     0,
       0,     0,     0,     0,   488,     0,     0,   488,     0,     0,
     488,     0,     0,  2325,     0,     0,   743,   488,   488,   488,
     488,     0,     0,   488,   488,   488,   488,   488,   488,   488,
     488,   488,   488,     0,   495,     0,   488,   488,   496,     0,
       0,   743,     0, -1796,    22,     0,   488,    23,   743,     0,
     488,     0,     0,     0,     0,  1326,     0,     0,  1327,   488,
     736, -1796,   488,  -931,   488,     0, -1796,     0,     0,     0,
       0,   743,   488,   988,     0,   488,   488,     0,    24,   989,
     488,   488,     0,     0,     0,     0,  1001,    25,  1333,     0,
       0,     0,     0,     0,     0, -1796,     0,   488,     0,   488,
     497,    26, -1796,     0,   737,  1002,     0,   498,    27,     0,
     488,     0,    28,     0,     0,     0,     0,     0,     0,     0,
    1335,     0,     0,    29,   739,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    30,     0,     0,     0,    31,     0,
       0,     0,     0,  1326,     0,     0,  1327,     0,   488,     0,
       0,  1328,  1329,  1330,     0,   499,  1003,     0,  1344,   909,
     909,     0,     0,     0,   737,   488,     0,     0,  1331,     0,
       0,     0,     0,     0,    32,     0,  1333,     0,     0,    33,
       0,     0,     0,  1334,     0,     0,     0,   990,     0,   739,
     500,     0,     0,    34,     0,     0,     0,     0,     0,     0,
    1150,     0,  1150,  2489,  1150,     0,     0,   739,  1335,     0,
       0,     0,     0,     0,     0,     0,     0,    35,     0,     0,
       0,     0,     0, -1796,  1058,  1065,     0,   501,     0,     0,
       0,    36,   739,   737,   -41,     0,     0,     0,     0,   739,
       0, -1796,     0,     0,     0,     0, -1796,     0,     0,     0,
       0,  1004, -1796,     0,     0,     0,   832,     0,     0,  2002,
       0,     0,   739,   743,  2003,  2004,  2005,     0,     0,     0,
       0,     0,     0,     0,     0,   502,     0,   503,     0,     0,
     488,  2559, -1796,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   504,     0,  1326,     0,     0,  1327,   505,
       0,  1005,   506,  1328,  1329,  1330,     0,     0,     0,  1006,
       0,  1336,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1007,     0,  1260,     0,     0,   488,   488,  1333,  1337,
    1260,   488,   743,     0,  1338,  1334,   488,     0,  1344,   488,
     488,     0,     0,   991,   488,     0,     0,     0,     0,     0,
       0,     0,     0,  1008, -1796,     0,  1339,  1340,     0,   737,
    1335,  1351,  1352,  1353,  1354,  1355,  1356,   488,     0,     0,
    1341,   488,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   737,
       0,     0,     0,     0,   739,     0,  1009,     0,     0,     0,
     993,     0,  1010,     0,     0,  1058,     0,     0,     0,  1342,
       0,     0,  1343,   488,     0,     0,     0,  1323,     0,     0,
       0,     0,  1281,     0,  1011,     0,  1344,     0,     0,  1345,
    1012,     0, -1796,     0,     0,     0,     0,     0,     0,     0,
    1150,  1260,     0,  1260,  1260,  1013,     0,     0,     0,   488,
       0,  1292,     0,     0,   739,     0,     0,     0,   743,     0,
       0,     0,   737,  1336,     0,     0,     0,     0,     0,  2007,
       0,  1302,  1303,  1304,     0,     0,  1311,     0,     0,     0,
       0,  1337,     0,     0,     0,     0,  1338,     0,  2489,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   995,  1366,
       0,     0,     0,     0,     0,     0,     0,     0, -1796, -1796,
       0,  1260,     0,     0,  1260,  1260,     0,     0,     0,     0,
    1346,     0,  1341,   739,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1796,     0,     0,     0,     0,  2008,
       0,  1351,  1352,  1353,  1354,  1355,  1356,     0,     0,     0,
    1405,     0,   815,     0,  1419,  1424,     0,     0,   488,     0,
       0,   743,     0,     0, -1796,   488,     0,     0,     0,     0,
       0,     0,     0,   488,   488,     0,     0,   488,  1344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   488,
       0,     0,     0,     0,     0,     0,   737,     0,   488,     0,
       0,     0,     0,   488,     0,     0,   488,     0,     0,  1058,
       0,     0,     0,   488,   488,     0,  1058,     0,     0,     0,
     488,     0,  1347,     0,     0,  1348,  1349,  1350,     0,  1351,
    1352,  1353,  1354,  1355,  1356,     0,   737,  1058,     0,     0,
       0,   488,  1993,   488,     0,     0,     0,     0,     0,   739,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1326,     0,   488,  1327,     0,     0,     0,   737,     0,     0,
     737,     0,  1346,     0,     0,     0,  1359,     0,     0,   739,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1333,     0,  2489,     0,  1550,     0,     0,
   -1796,     0,     0,     0,     0,     0,     0,     0,  1559,     0,
    1560,     0,     0,     0,     0,  1565,  1359,     0,     0,     0,
       0,     0,     0,     0,     0,  1335,     0,     0,     0,     0,
     488,     0,  1566,     0,   488,   743,     0,     0,  2009,  2010,
    2011,     0,  2012,  2013,  2014,  2015,  2016,  2017,     0,     0,
       0,     0,   739,     0,     0,     0,  1058,     0,   488,     0,
       0,     0,   488,  1585,  1587,     0,   743,     0,     0,   743,
       0,     0,     0,   488,  1347,     0,     0,  1348,  1349,  1350,
       0,  1351,  1352,  1353,  1354,  1355,  1356,     0,     0,     0,
       0,     0,     0,     0,     0,  1618,  1619,   488,  2326,  1632,
    1633,     0,     0,     0,     0,     0,  1150,     0,     0,     0,
    1150,   488,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1359,     0,     0, -1796,     0,
       0,     0,  1359,     0,   832,     0,     0,  2002,     0,     0,
       0,     0,  2003,  2004,  2005,     0, -1796,  1325,     0,     0,
       0, -1796,  1326,     0,     0,  1327,     0,     0,     0,  2560,
    1328,  1329,  1330,     0,     0,     0,  1615,     0,     0,     0,
       0,     0,   488,     0,     0,   488,  1634,  1331,  1651,     0,
    1332,  1663,  1666,  1671,  1674,  1333,   739, -1796,     0,     0,
       0,     0,  1334,     0,     0,     0,   488,     0,   488,     0,
     488,     0,     0,     0,     0,  1686,     0,   737,   488,  1207,
    1208,  1690,  1691,  1692,  1693,     0,     0,  1335,     0,  1702,
    1703,     0,   488,     0,  1714,     0,   739,     0,  1717,  1795,
    1795,  1725,  1726,  1727,  1728,  1729,  1730,  1731,  1732,  1733,
     488,     0,  1734,  1344,     0,     0,     0,  1742,     0,     0,
    1746,     0,   909,     0,  1058,     0,     0,   739,     0,     0,
     739,     0,     0,     0,     0,     0,     0,   488,   488,     0,
       0,     0,     0,     0,     0,     0,     0,  1768,     0,     0,
       0,   488,     0,     0,     0,  1260,     0,     0,     0,  1209,
    1210,     0,     0,     0,     0,  1260,     0,     0,  1260,     0,
       0,     0,     0,  1303,  1304,  1150,  2489,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1336,     0,     0,     0,     0,     0,   488,     0,   488,     0,
       0,     0,     0,     0,     0,     0,   832, -1796,  1337,  2002,
       0,     0,     0,  1338,  2003,  2004,  2005,  2007,  1359,     0,
       0,     0,     0,  1211,  1212,  1213,  1214,  1215,  1216,  1359,
       0,  1217,  1218,  1658,     0,  1339,  1340,     0,     0,  1359,
    1359,  1359,  1942,  1944,     0,     0,     0,     0,  1359,  1341,
       0,     0,     0,     0,     0,     0,  1058,     0,     0,  1887,
    1888,     0,  1889,     0,     0,     0,     0,  1260,     0,     0,
       0,  1326,     0,     0,  1327,   488,     0,     0,     0,  1328,
    1329,  1330,  1260,     0,     0,     0,     0,  2008,  1342,     0,
       0,  1343,     0,     0,     0,     0,  1331,     0,     0,  2308,
    1928,     0,     0,  1359,  1333,  1344,     0,     0,  1345, -1796,
       0,  1334,     0,     0,     0,     0,  1351,  1352,  1353,  1354,
    1355,  1356,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1335,     0,     0,     0,
    1219,  1220,  1359,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1359,     0,  1058,     0,
       0,  1359,     0,     0,     0,  1980,     0,   739,     0,     0,
    1986,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1326,     0,     0,  1327,     0,     0,  1346,
       0,     0,     0,     0,     0,     0,     0,     0,  2001,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1796,
    1671,     0,  1671,  1671,     0,     0,  1333,     0,     0,     0,
    2037,     0,     0, -1796,  2040,     0,     0,  2042,     0,  1336,
    2101,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1221,  1222,     0,     0,  1337,  1335,     0,
    2126,  2126,  1338,     0,     0,     0,     0,     0,     0,     0,
       0,  2060,     0,     0,  2063,     0,  2065,     0,     0,     0,
       0,     0,     0,     0,  1339,  1340,  2009,  2010,  2011,  2008,
    2012,  2013,  2014,  2015,  2016,  2017,     0,     0,  1341,     0,
       0,  1347,     0,     0,  1348,  1349,  1350,     0,  1351,  1352,
    1353,  1354,  1355,  1356,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1405,     0,     0,
       0,  2563,     0,     0,     0,     0,     0,  1342,     0,     0,
    1343,     0,     0,     0,  1424,  1732,     0,     0,     0,     0,
       0,     0,  1359,     0,  1344,     0,     0,  1345,     0,     0,
       0, -1796,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1359,     0,     0,     0,     0,     0,  2153,     0, -1796,
       0,     0,     0,     0, -1796,     0,     0,     0,  1359,     0,
    1658,  1658,     0,  2018,     0,  1658,     0,     0,     0,     0,
    1359,     0,     0,  1359,     0,     0,     0,     0,  1359,  1326,
       0,  1359,  1327,  2245,     0,     0,     0,  1328,  1329,  1330,
   -1796,     0,     0,  1359,     0,     0,     0,  1359,  1359,  1359,
    1359,     0,     0,     0,  1331,  1058,  1658,  1658,     0,  1359,
    1359,     0,  1333,     0,     0,     0,     0,  1326,  1346,  1334,
    1327,  1359,     0,     0,  1359,  1328,  1329,  1330,     0,     0,
       0,     0,  1359,  1359,  1359,  1359,  1359,  1359,  1359,  1359,
    1359,  1359,  1331,     0,  1335,     0,  1344,     0,     0,  1359,
    1333,     0,     0,  1359,     0,     0,     0,  1334,  2009,  2010,
    2011,     0,  2012,  2013,  2014,  2015,  2016,  2017,     0,     0,
       0,     0,     0,     0,     0,  1359,     0,     0,  1326,     0,
       0,  1327,  1335,     0,     0,     0, -1796, -1796, -1796,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2267,     0,     0,     0,     0,     0,
       0,  1333,     0,  2271,     0,     0,  2272,     0,  1334,  2274,
    1347,     0,     0,  1348,  1349,  1350,     0,  1351,  1352,  1353,
    1354,  1355,  1356,     0,     0,     0,     0,  1680,     0,     0,
   -1796,     0,     0,  1335,     0,  2294,  2295,  1336,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2305,
       0,     0,     0,     0,     0,  1337,     0,     0,  2311,     0,
    1338,  2314,     0,  2316,     0,     0,     0,     0,     0,     0,
       0,  2320,     0,     0,     0,  1336,     0,     0,     0,  2327,
    2328,     0,  1339,  1340,  1359,  1359,  1359,     0,     0,     0,
       0,     0,     0,  1337,     0,     0,  1341,     0,  1338,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2370,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1339,  1340,     0,     0,     0,  1359,     0,     0,  1260,     0,
       0,     0, -1796,     0,  1341,  1342,  1336,     0,  1343,  1351,
    1352,  1353,  1354,  1355,  1356,     0,     0,  2398,     0,     0,
       0,   518,  1344,     0,  1337,  1345,     0,     0,     0,  1338,
       0,     0,     0,     0,  2411,     0,     0,     0,     0,     0,
       0,     0,     0,  1342,     0,     0,  1343,  1359,     0,     0,
       0,     0,     0,  1359,     0,     0,     0,     0,     0,     0,
    1344,     0,     0,  1345,     0,  1341,  2018,  2018,  1359,     0,
    1658,  1658,  1658,  1658,   519,     0,  1658,  1658,  1658,  1658,
    1658,  1658,  1658,  1658,  1658,  1658,  2018,     0,     0,     0,
     520,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1359,     0,     0,  1359,     0,  1359,
       0,     0,     0,  2018,  2018,     0,  1346,     0,     0,     0,
       0,  1344,     0,     0,     0,     0,     0,  1359,  1658,  1658,
    1359,     0,  1359,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   521,     0,  2540,
       0,     0,     0,     0,  1346,     0,   522,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   523,     0,
       0,     0,     0,   524,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2553,  2554,     0,     0,     0,
    2555,     0,   525,     0,     0,  2558,     0,     0,  2561,  2562,
       0,     0,     0,  2566,     0,  1346,     0,     0,  1347,     0,
    1359,  1348,  1349,  1350,     0,  1351,  1352,  1353,  1354,  1355,
    1356,     0,     0,     0,     0,  1680,     0,     0,     0,     0,
       0,     0,  1260,     0,     0,     0,   526,  1260,     0,     0,
     527,     0,     0,     0,     0,     0,  1347,     0,     0,  1348,
    1349,  1350,     0,  1351,  1352,  1353,  1354,  1355,  1356,     0,
       0,  1326,     0,  2044,  1327,     0,     0,     0,     0,  1328,
    1329,  1330,   909,     0,     0,     0,     0,     0,     0,  1585,
    1587,     0,     0,     0,     0,     0,  1331,     0,     0,     0,
       0,     0,     0,     0,  1333,     0,     0,     0,     0,     0,
       0,  1334,     0,     0,   528,     0,     0,  1347,  2667,     0,
   -1796, -1796, -1796,     0,  1351,  1352,  1353,  1354,  1355,  1356,
     529,     0,     0,     0,  1359,     0,  1335,     0,  1359,  1359,
       0,  1359,     0,     0,  2018,  2018,  2018,  2018,     0,     0,
       0,  2018,  2018,  2018,  2018,  2018,  2018,  2018,  2018,  2018,
    2018,  1359,  1359,   530,     0,     0,   531,     0,     0,     0,
       0,     0,  1359,     0,   532,     0,     0,   533,  1359,     0,
       0,  1359,     0,  1359,     0,     0,     0,  1359,     0,     0,
    2018,  2018,     0,     0,  1359,  1359,  1326,   534,     0,  1327,
       0,     0,     0,     0,  1328,  1329,  1330,     0,     0,     0,
     535,     0,     0,     0,     0,     0,     0,   536,     0,     0,
       0,  1331,     0,     0,     0,     0,   537,     0,     0,  1333,
       0,     0,   538,     0,  2037,     0,  1334,  1359,     0,  1336,
       0,     0,  2725,  2726,     0,     0,  2727,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1337,   539,     0,
       0,  1335,  1338,  1326,     0,  1359,  1327,     0,     0,     0,
       0,  1328,  1329,  1330,     0,     0,     0,     0,  1359,  1585,
    1587,     0,  2766,  2767,  1339,  1340,     0,     0,  1331,   909,
    1260,     0,     0,     0,   988,     0,  1333,     0,  1341,     0,
     989,     0,     0,  1334,     0,     0,     0,  1001,     0,     0,
       0,     0,  2789,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1002,     0,  1335,     0,
       0,     0,     0,     0,     0,     0,     0,  1342,     0,     0,
    1343,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1344,     0,     0,  1345,     0,     0,
       0,     0,     0,     0,  1336,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1003,     0,     0,
       0,     0,  1337,     0,     0,     0,     0,  1338,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1359,   990,  1339,
    1340,  1658,     0,     0,     0,     0,     0,     0,     0,     0,
    1359,  1359,  1359,  1341,     0,  1359,     0,  2873,  1359,  1359,
       0,  1336,     0,  1359,     0,     0,     0,     0,     0,     0,
       0,     0,  1311,     0,     0,     0,     0,     0,  1346,  1337,
       0,     0,     0,     0,  1338,     0,     0,     0,     0,     0,
       0,     0,  1342,     0,     0,  1343,  2903,     0,     0,     0,
       0,     0,  1004,     0,     0,     0,  1339,  1340,     0,  1344,
    2917,     0,  1345,     0,     0,     0,     0,     0,     0,     0,
    1341,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1658,     0,     0,     0,     0,
       0,     0,  1005,     0,     0,     0,     0,     0,     0,  1342,
    1006,     0,  1343,     0,  1359,     0,     0,     0,     0,     0,
       0,     0,  1007,     0,     0,     0,  1344,     0,     0,  1345,
    1347,     0,     0,  1348,  1349,  1350,     0,  1351,  1352,  1353,
    1354,  1355,  1356,     0,   991,     0,     0,  2270,     0,  2766,
       0,     0,     0,  1346,  1008,     0,     0,   909,     0,     0,
       0,     0,     0,     0,     0,     0,  2018,  1658,     0,     0,
       0,     0,  1359,  1359,  1359,     0,     0,     0,     0,     0,
       0,  1260,     0,     0,     0,     0,     0,     0,     0,  2999,
       0,     0,     0,     0,     0,     0,     0,  1856,     0,     0,
       0,   993,     0,  1010,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1359,  1359,     0,  3017,  3017,     0,     0,
    1346,     0,     0,     0,     0,  1011,     0,     0,     0,     0,
    2766,  1857,     0,     0,     0,     0,  1359,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1013,  2018,     0,     0,
       0,     0,     0,     0,     0,  1347,     0,     0,  1348,  1349,
    1350,     0,  1351,  1352,  1353,  1354,  1355,  1356,     0,     0,
       0,     0,  2309,     0,     0,     0,     0,  3017,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   995,
       0,     0,  2018,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1359,     0,  1347,     0,     0,  1348,  1349,  1350,     0,  1351,
    1352,  1353,  1354,  1355,  1356,     0,     0,     0,     0,  2413,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1359,     0,     0,     0,  3017,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1359,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1025,   829,   559,   830,   831,   832,
     833,   834,     0,     0,     0,     0,     0,     0,     0,     0,
      95,    96,    97,    98,    99,   100,   101,   102,  1026,   103,
     104,   105,     0,     0,     0,     0,   835,     0,     0,   106,
     107,     0,   108,   109,   110,  1027,   112,   113,   114,   115,
     836,  1028,   837,   838,     0,   120,   121,   122,   123,   124,
     125,   839,   840,   126,   127,   841,   842,   130,     0,   131,
     132,   133,   134,   843,     0,  1029,  1359,   137,   138,   139,
     140,   141,   142,  1030,   144,   145,   146,     0,   147,   148,
     149,   150,   151,   152,  1359,  1031,   154,   155,   156,   845,
     846,   847,  1032,   849,   850,   851,   158,   159,   160,   161,
     162,   163,   164,   852,   853,   167,   854,   168,     0,   169,
     170,   171,   172,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,  1033,     0,   182,   183,   690,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   855,   199,   200,   201,   202,   856,
     857,   204,     0,   205,   206,   858,   208,     0,   209,     0,
     210,  1034,     0,  1035,   213,   214,   215,  1036,   217,     0,
     218,     0,     0,     0,   859,   860,   221,     0,   222,   223,
     224,   225,   226,   227,   228,  1037,   230,   231,   232,   233,
       0,   234,   235,   236,   237,   238,   239,     0,   240,  1038,
     242,   243,   244,   245,   246,   247,   861,   862,     0,   863,
       0,   251,  1039,  1040,   254,  1041,   256,   257,   258,   259,
     260,     0,     0,   261,  1042,   263,  1043,     0,   265,   266,
     267,   864,   865,   268,   269,   270,   271,   272,  1044,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   866,  1045,   867,
     295,   296,   297,   298,   299,   868,   300,   301,  1046,   303,
     869,   870,   305,   871,   307,   308,   309,     0,   310,   311,
       0,     0,   872,   313,   314,     0,     0,   315,   316,  1047,
     318,  1048,   873,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,   331,   332,   874,   334,   335,   336,
     337,   338,   339,     0,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   875,   352,   353,   354,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,  1049,   373,
     374,   375,   876,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     877,   393,   394,   395,   396,   397,  1050,   399,   400,   878,
     402,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,  1051,   416,   879,   418,     0,   419,
     420,     0,   421,  1052,   423,   424,   425,   426,   427,     0,
     880,   881,     0,     0,   430,   431,   882,   433,   883,   884,
     435,   436,  1053,   438,   439,   440,   441,   442,     0,     0,
     443,   444,   445,   446,   447,   886,     0,   448,   449,   450,
     451,   452,   453,   887,  1054,   455,  1055,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   888,     0,
       0,     0,     0,     0,     0,   889,   890,  1056,     0,     0,
       0,     0,   892,     0,   893,  1057,     0,     0,     0,   894,
       0,   895,   896,    94,   829,   559,   830,   831,   832,   833,
     834,     0,     0,     0,     0,     0,     0,     0,     0,    95,
      96,    97,    98,    99,   100,   101,   102,     0,   103,   104,
     105,     0,     0,     0,     0,   835,     0,     0,   106,   107,
       0,   108,   109,   110,   111,   112,   113,   114,   115,   836,
     117,   837,   838,     0,   120,   121,   122,   123,   124,   125,
     839,   840,   126,   127,   841,   842,   130,     0,   131,   132,
     133,   134,   843,     0,   844,     0,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,     0,   147,   148,   149,
     150,   151,   152,     0,   153,   154,   155,   156,   845,   846,
     847,   848,   849,   850,   851,   158,   159,   160,   161,   162,
     163,   164,   852,   853,   167,   854,   168,     0,   169,   170,
     171,   172,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,     0,     0,   182,   183,   690,   185,   186,   187,
       0,   188,   189,   190,     0,   191,   192,   193,     0,   194,
     195,   196,   197,   855,   199,   200,   201,   202,   856,   857,
     204,     0,   205,   206,   858,   208,     0,   209,     0,   210,
     211,     0,   212,   213,   214,   215,   216,   217,     0,   218,
       0,     0,     0,   859,   860,   221,     0,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,     0,
     234,   235,   236,   237,   238,   239,     0,   240,   241,   242,
     243,   244,   245,   246,   247,   861,   862,     0,   863,     0,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
       0,     0,   261,   262,   263,   264,     0,   265,   266,   267,
     864,   865,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   866,   293,   867,   295,
     296,   297,   298,   299,   868,   300,   301,   302,   303,   869,
     870,   305,   871,   307,   308,   309,     0,   310,   311,     0,
       0,   872,   313,   314,     0,     0,   315,   316,   317,   318,
     319,   873,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,     0,   331,   332,   874,   334,   335,   336,   337,
     338,   339,     0,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   875,   352,   353,   354,   355,     0,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,     0,   370,   371,   372,   373,   374,
     375,   876,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,    26,   388,   389,   390,   391,   392,   877,
     393,   394,   395,   396,   397,   398,   399,   400,   878,   402,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   879,   418,     0,   419,   420,
      31,   421,   422,   423,   424,   425,   426,   427,     0,   880,
     881,     0,     0,   430,   431,   882,   433,   883,   884,   435,
     436,   885,   438,   439,   440,   441,   442,     0,     0,   443,
     444,   445,   446,   447,   886,     0,   448,   449,   450,   451,
     452,   587,   887,     0,   455,   456,   457,   458,   459,   460,
     461,     0,     0,   462,     0,    34,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   888,     0,    35,
       0,     0,     0,     0,   889,   890,     0,     0,     0,     0,
       0,   892,     0,   893,  2885,     0,     0,     0,   894,     0,
     895,   896,    94,   829,   559,   830,   831,   832,   833,   834,
       0,     0,     0,     0,     0,     0,     0,     0,    95,    96,
      97,    98,    99,   100,   101,   102,     0,   103,   104,   105,
       0,     0,     0,     0,   835,     0,     0,   106,   107,     0,
     108,   109,   110,   111,   112,   113,   114,   115,   836,   117,
     837,   838,     0,   120,   121,   122,   123,   124,   125,   839,
     840,   126,   127,   841,   842,   130,     0,   131,   132,   133,
     134,   843,     0,   844,     0,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,     0,   147,   148,   149,   150,
     151,   152,     0,   153,   154,   155,   156,   845,   846,   847,
     848,   849,   850,   851,   158,   159,   160,   161,   162,   163,
     164,   852,   853,   167,   854,   168,     0,   169,   170,   171,
     172,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,     0,     0,   182,   183,   690,   185,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   855,   199,   200,   201,   202,   856,   857,   204,
       0,   205,   206,   858,   208,     0,   209,     0,   210,   211,
       0,   212,   213,   214,   215,   216,   217,     0,   218,     0,
       0,     0,   859,   860,   221,     0,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,     0,   234,
     235,   236,   237,   238,   239,     0,   240,   241,   242,   243,
     244,   245,   246,   247,   861,   862,     0,   863,     0,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,     0,
       0,   261,   262,   263,   264,     0,   265,   266,   267,   864,
     865,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   866,   293,   867,   295,   296,
     297,   298,   299,   868,   300,   301,   302,   303,   869,   870,
     305,   871,   307,   308,   309,     0,   310,   311,     0,     0,
     872,   313,   314,     0,     0,   315,   316,   317,   318,   319,
     873,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,   331,   332,   874,   334,   335,   336,   337,   338,
     339,     0,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   875,   352,   353,   354,   355,     0,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,     0,   370,   371,   372,   373,   374,   375,
     876,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,    26,   388,   389,   390,   391,   392,   877,   393,
     394,   395,   396,   397,   398,   399,   400,   878,   402,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   879,   418,     0,   419,   420,    31,
     421,   422,   423,   424,   425,   426,   427,     0,   880,   881,
       0,     0,   430,   431,   882,   433,   883,   884,   435,   436,
     885,   438,   439,   440,   441,   442,     0,     0,   443,   444,
     445,   446,   447,   886,     0,   448,   449,   450,   451,   452,
     587,   887,     0,   455,   456,   457,   458,   459,   460,   461,
       0,     0,   462,     0,    34,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   888,     0,    35,     0,
       0,     0,     0,   889,   890,     0,     0,     0,     0,     0,
     892,     0,   893,     0,     0,     0,     0,   894,     0,   895,
     896,    94,   829,   559,   830,   831,   832,   833,   834,     0,
       0,     0,     0,     0,     0,     0,     0,    95,    96,    97,
      98,    99,   100,   101,   102,     0,   103,   104,   105,     0,
       0,     0,     0,   835,     0,     0,   106,   107,     0,   108,
     109,   110,   111,   112,   113,   114,   115,   836,   117,   837,
     838,  1667,   120,   121,   122,   123,   124,   125,   839,   840,
     126,   127,   841,   842,   130,     0,   131,   132,   133,   134,
     843,     0,   844,     0,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,   154,   155,   156,   845,   846,   847,   848,
     849,   850,   851,   158,   159,   160,   161,   162,   163,   164,
     852,   853,   167,   854,   168,     0,   169,   170,   171,   172,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
       0,     0,   182,   183,   690,   185,   186,   187,     0,   188,
     189,   190,     0,   191,   192,   193,     0,   194,   195,   196,
     197,   855,   199,   200,   201,   202,   856,   857,   204,     0,
     205,   206,   858,   208,     0,   209,     0,   210,   211,  1668,
     212,   213,   214,   215,   216,   217,     0,   218,     0,     0,
       0,   859,   860,   221,     0,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,     0,   234,   235,
     236,   237,   238,   239,     0,   240,   241,   242,   243,   244,
     245,   246,   247,   861,   862,     0,   863,     0,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,     0,  1669,
     261,   262,   263,   264,     0,   265,   266,   267,   864,   865,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   866,   293,   867,   295,   296,   297,
     298,   299,   868,   300,   301,   302,   303,   869,   870,   305,
     871,   307,   308,   309,     0,   310,   311,     0,     0,   872,
     313,   314,     0,     0,   315,   316,   317,   318,   319,   873,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,   331,   332,   874,   334,   335,   336,   337,   338,   339,
       0,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   875,   352,   353,   354,   355,     0,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,   876,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,     0,   388,   389,   390,   391,   392,   877,   393,   394,
     395,   396,   397,   398,   399,   400,   878,   402,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   879,   418,     0,   419,   420,     0,   421,
     422,   423,   424,   425,   426,   427,     0,   880,   881,     0,
    1670,   430,   431,   882,   433,   883,   884,   435,   436,   885,
     438,   439,   440,   441,   442,     0,     0,   443,   444,   445,
     446,   447,   886,     0,   448,   449,   450,   451,   452,   453,
     887,     0,   455,   456,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   888,     0,     0,     0,     0,
       0,     0,   889,   890,     0,     0,     0,     0,     0,   892,
       0,   893,     0,     0,     0,     0,   894,     0,   895,   896,
      94,   829,   559,   830,   831,   832,   833,   834,     0,     0,
       0,     0,     0,     0,     0,     0,    95,    96,    97,    98,
      99,   100,   101,   102,  -729,   103,   104,   105,     0,     0,
       0,  -729,   835,     0,     0,   106,   107,     0,   108,   109,
     110,   111,   112,   113,   114,   115,   836,   117,   837,   838,
       0,   120,   121,   122,   123,   124,   125,   839,   840,   126,
     127,   841,   842,   130,     0,   131,   132,   133,   134,   843,
       0,   844,     0,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,     0,   147,   148,   149,   150,   151,   152,
       0,   153,   154,   155,   156,   845,   846,   847,   848,   849,
     850,   851,   158,   159,   160,   161,   162,   163,   164,   852,
     853,   167,   854,   168,     0,   169,   170,   171,   172,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,     0,
       0,   182,   183,   690,   185,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     855,   199,   200,   201,   202,   856,   857,   204,     0,   205,
     206,   858,   208,     0,   209,     0,   210,   211,     0,   212,
     213,   214,   215,   216,   217,     0,   218,     0,     0,     0,
     859,   860,   221,     0,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,     0,   234,   235,   236,
     237,   238,   239,     0,   240,   241,   242,   243,   244,   245,
     246,   247,   861,   862,     0,   863,     0,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,     0,     0,   261,
     262,   263,   264,     0,   265,   266,   267,   864,   865,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   866,   293,   867,   295,   296,   297,   298,
     299,   868,   300,   301,   302,   303,   869,   870,   305,   871,
     307,   308,   309,     0,   310,   311,     0,     0,   872,   313,
     314,     0,     0,   315,   316,   317,   318,   319,   873,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
     331,   332,   874,   334,   335,   336,   337,   338,   339,     0,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   875,   352,   353,   354,   355,     0,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,   375,   876,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
       0,   388,   389,   390,   391,   392,   877,   393,   394,   395,
     396,   397,   398,   399,   400,   878,   402,  -729,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   879,   418,     0,   419,   420,     0,   421,   422,
     423,   424,   425,   426,   427,     0,   880,   881,     0,     0,
     430,   431,   882,   433,   883,   884,   435,   436,   885,   438,
     439,   440,   441,   442,     0,     0,   443,   444,   445,   446,
     447,   886,     0,   448,   449,   450,   451,   452,   453,   887,
       0,   455,   456,   457,   458,   459,   460,   461,     0,     0,
     462,     0,     0,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   888,     0,     0,     0,     0,     0,
       0,   889,   890,     0,     0,     0,     0,     0,   892,     0,
     893,     0,     0,     0,     0,   894,     0,   895,   896,    94,
     829,   559,   830,   831,   832,   833,   834,     0,     0,     0,
       0,     0,     0,     0,     0,    95,    96,    97,    98,    99,
     100,   101,   102,     0,   103,   104,   105,     0,     0,     0,
       0,   835,     0,     0,   106,   107,     0,   108,   109,   110,
     111,   112,   113,   114,   115,   836,   117,   837,   838,     0,
     120,   121,   122,   123,   124,   125,   839,   840,   126,   127,
     841,   842,   130,     0,   131,   132,   133,   134,   843,     0,
     844,     0,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,     0,   147,   148,   149,   150,   151,   152,     0,
     153,   154,   155,   156,   845,   846,   847,   848,   849,   850,
     851,   158,   159,   160,   161,   162,   163,   164,   852,   853,
     167,   854,   168,     0,   169,   170,   171,   172,   173,   174,
       0,   175,   176,   177,   178,   179,   180,   181,     0,     0,
     182,   183,   690,   185,   186,   187,     0,   188,   189,   190,
       0,   191,   192,   193,     0,   194,   195,   196,   197,   855,
     199,   200,   201,   202,   856,   857,   204,     0,   205,   206,
     858,   208,     0,   209,     0,   210,   211,     0,   212,   213,
     214,   215,   216,   217,     0,   218,     0,     0,     0,   859,
     860,   221,     0,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,     0,   234,   235,   236,   237,
     238,   239,     0,   240,   241,   242,   243,   244,   245,   246,
     247,   861,   862,     0,   863,     0,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,     0,     0,   261,   262,
     263,   264,     0,   265,   266,   267,   864,   865,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   866,   293,   867,   295,   296,   297,   298,   299,
     868,   300,   301,   302,   303,   869,   870,   305,   871,   307,
     308,   309,     0,   310,   311,     0,     0,   872,   313,   314,
       0,     0,   315,   316,   317,   318,   319,   873,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,   331,
     332,   874,   334,   335,   336,   337,   338,   339,     0,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     875,   352,   353,   354,   355,     0,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,   375,   876,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,     0,
     388,   389,   390,   391,   392,   877,   393,   394,   395,   396,
     397,   398,   399,   400,   878,   402,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   879,   418,     0,   419,   420,     0,   421,   422,   423,
     424,   425,   426,   427,     0,   880,   881,     0,     0,   430,
     431,   882,   433,   883,   884,   435,   436,   885,   438,   439,
     440,   441,   442,     0,     0,   443,   444,   445,   446,   447,
     886,     0,   448,   449,   450,   451,   452,   453,   887,     0,
     455,   456,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   888,     0,     0,     0,     0,     0,     0,
     889,   890,   891,     0,     0,     0,     0,   892,     0,   893,
       0,     0,     0,     0,   894,     0,   895,   896,    94,  1415,
     559,   830,   831,   832,  1416,   834,     0,     0,     0,     0,
       0,     0,     0,     0,    95,    96,    97,    98,    99,   100,
     101,   102,  1417,   103,   104,   105,     0,     0,     0,     0,
     835,     0,     0,   106,   107,     0,   108,   109,   110,   111,
     112,   113,   114,   115,   836,   117,   837,   838,     0,   120,
     121,   122,   123,   124,   125,   839,   840,   126,   127,   841,
     842,   130,     0,   131,   132,   133,   134,   843,     0,   844,
       0,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,     0,   147,   148,   149,   150,   151,   152,     0,   153,
     154,   155,   156,   845,   846,   847,   848,   849,   850,   851,
     158,   159,   160,   161,   162,   163,   164,   852,   853,   167,
     854,   168,     0,   169,   170,   171,   172,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,     0,     0,   182,
     183,   690,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   855,   199,
     200,   201,   202,   856,   857,   204,     0,   205,   206,   858,
     208,     0,   209,     0,   210,   211,     0,   212,   213,   214,
     215,   216,   217,     0,   218,     0,     0,     0,   859,   860,
     221,     0,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,     0,   234,   235,   236,   237,   238,
     239,     0,   240,   241,   242,   243,   244,   245,   246,   247,
     861,   862,     0,   863,     0,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,     0,     0,   261,   262,   263,
     264,     0,   265,   266,   267,   864,   865,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   866,   293,   867,   295,   296,   297,   298,   299,   868,
     300,   301,   302,   303,   869,   870,   305,   871,   307,   308,
     309,     0,   310,   311,     0,     0,   872,   313,   314,     0,
       0,   315,   316,   317,   318,   319,   873,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,   331,   332,
     874,   334,   335,   336,   337,   338,   339,     0,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   875,
     352,   353,   354,   355,     0,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,     0,
     370,   371,   372,   373,   374,   375,   876,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,     0,   388,
     389,   390,   391,   392,   877,   393,   394,   395,   396,   397,
     398,   399,   400,   878,   402,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     879,   418,     0,   419,   420,     0,   421,   422,   423,   424,
     425,   426,   427,     0,   880,   881,     0,     0,   430,   431,
     882,   433,   883,   884,   435,   436,   885,   438,   439,   440,
     441,   442,     0,     0,   443,   444,   445,   446,   447,   886,
       0,   448,   449,   450,   451,   452,   453,   887,     0,   455,
     456,   457,   458,   459,   460,   461,     0,     0,   462,     0,
       0,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   888,     0,     0,     0,     0,     0,     0,   889,
     890,     0,     0,     0,     0,     0,   892,     0,   893,     0,
       0,     0,     0,   894,     0,   895,   896,  1025,   829,   559,
     830,   831,   832,   833,   834,     0,     0,     0,     0,     0,
       0,     0,     0,    95,    96,    97,    98,    99,   100,   101,
     102,     0,   103,   104,   105,     0,     0,     0,     0,   835,
       0,     0,   106,   107,     0,   108,   109,   110,  1027,   112,
     113,   114,   115,   836,  1028,   837,   838,     0,   120,   121,
     122,   123,   124,   125,   839,   840,   126,   127,   841,   842,
     130,     0,   131,   132,   133,   134,   843,     0,  1029,     0,
     137,   138,   139,   140,   141,   142,  1030,   144,   145,   146,
       0,   147,   148,   149,   150,   151,   152,     0,  1031,   154,
     155,   156,   845,   846,   847,  1032,   849,   850,   851,   158,
     159,   160,   161,   162,   163,   164,   852,   853,   167,   854,
     168,     0,   169,   170,   171,   172,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,     0,     0,   182,   183,
     690,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   855,   199,   200,
     201,   202,   856,   857,   204,     0,   205,   206,   858,   208,
       0,   209,     0,   210,  1034,     0,  1035,   213,   214,   215,
    1036,   217,     0,   218,     0,     0,     0,   859,   860,   221,
       0,   222,   223,   224,   225,   226,   227,   228,  1037,   230,
     231,   232,   233,     0,   234,   235,   236,   237,   238,   239,
       0,   240,  1038,   242,   243,   244,   245,   246,   247,   861,
     862,     0,   863,     0,   251,  1039,  1040,   254,  1041,   256,
     257,   258,   259,   260,     0,     0,   261,  1042,   263,  1043,
       0,   265,   266,   267,   864,   865,   268,   269,   270,   271,
     272,  1044,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     866,  1045,   867,   295,   296,   297,   298,   299,   868,   300,
     301,  1046,   303,   869,   870,   305,   871,   307,   308,   309,
       0,   310,   311,     0,     0,   872,   313,   314,     0,     0,
     315,   316,  1047,   318,  1048,   873,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,   331,   332,   874,
     334,   335,   336,   337,   338,   339,     0,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   875,   352,
     353,   354,   355,     0,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,     0,   370,
     371,  1049,   373,   374,   375,   876,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,     0,   388,   389,
     390,   391,   392,   877,   393,   394,   395,   396,   397,  1050,
     399,   400,   878,   402,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,  1051,   416,   879,
     418,     0,   419,   420,     0,   421,  1052,   423,   424,   425,
     426,   427,     0,   880,   881,     0,     0,   430,   431,   882,
     433,   883,   884,   435,   436,  1053,   438,   439,   440,   441,
     442,     0,     0,   443,   444,   445,   446,   447,   886,     0,
     448,   449,   450,   451,   452,   453,   887,     0,   455,  1055,
     457,   458,   459,   460,   461,     0,     0,   462,     0,     0,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   888,     0,     0,     0,     0,     0,     0,   889,   890,
       0,     0,     0,     0,     0,   892,     0,   893,  1545,     0,
       0,     0,   894,     0,   895,   896,    94,   829,   559,   830,
     831,   832,   833,   834,     0,     0,     0,     0,     0,     0,
       0,     0,    95,    96,    97,    98,    99,   100,   101,   102,
       0,   103,   104,   105,     0,     0,     0,     0,   835,     0,
       0,   106,   107,     0,   108,   109,   110,   111,   112,   113,
     114,   115,   836,   117,   837,   838,     0,   120,   121,   122,
     123,   124,   125,   839,   840,   126,   127,   841,   842,   130,
       0,   131,   132,   133,   134,   843,     0,   844,     0,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,     0,
     147,   148,   149,   150,   151,   152,     0,   153,   154,   155,
     156,   845,   846,   847,   848,   849,   850,   851,   158,   159,
     160,   161,   162,   163,   164,   852,   853,   167,   854,   168,
       0,   169,   170,   171,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,     0,     0,   182,   183,   690,
     185,   186,   187,     0,   188,   189,   190,     0,   191,   192,
     193,     0,   194,   195,   196,   197,   855,   199,   200,   201,
     202,   856,   857,   204,     0,   205,   206,   858,   208,     0,
     209,     0,   210,   211,     0,   212,   213,   214,   215,   216,
     217,     0,   218,     0,     0,     0,   859,   860,   221,     0,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,     0,   234,   235,   236,   237,   238,   239,     0,
     240,   241,   242,   243,   244,   245,   246,   247,   861,   862,
       0,   863,     0,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,     0,     0,   261,   262,   263,   264,     0,
     265,   266,   267,   864,   865,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   866,
     293,   867,   295,   296,   297,   298,   299,   868,   300,   301,
     302,   303,   869,   870,   305,   871,   307,   308,   309,     0,
     310,   311,     0,     0,   872,   313,   314,     0,     0,   315,
     316,   317,   318,   319,   873,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,   331,   332,   874,   334,
     335,   336,   337,   338,   339,     0,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   875,   352,   353,
     354,   355,     0,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,   876,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,   877,   393,   394,   395,   396,   397,   398,   399,
     400,   878,   402,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   879,   418,
       0,   419,   420,     0,   421,   422,   423,   424,   425,   426,
     427,     0,   880,   881,     0,     0,   430,   431,   882,   433,
     883,   884,   435,   436,   885,   438,   439,   440,   441,   442,
       0,     0,   443,   444,   445,   446,   447,   886,     0,   448,
     449,   450,   451,   452,   453,   887,     0,   455,   456,   457,
     458,   459,   460,   461,     0,     0,   462,     0,     0,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     888,     0,     0,     0,     0,     0,     0,   889,   890,     0,
       0,     0,     0,     0,   892,     0,   893,  1661,     0,     0,
       0,   894,     0,   895,   896,  1025,   829,   559,   830,   831,
     832,   833,   834,     0,     0,     0,     0,     0,     0,     0,
       0,    95,    96,    97,    98,    99,   100,   101,   102,     0,
     103,   104,   105,     0,     0,     0,     0,   835,     0,     0,
     106,   107,     0,   108,   109,   110,  1027,   112,   113,   114,
     115,   836,  1028,   837,   838,     0,   120,   121,   122,   123,
     124,   125,   839,   840,   126,   127,   841,   842,   130,     0,
     131,   132,   133,   134,   843,     0,  1029,     0,   137,   138,
     139,   140,   141,   142,  1030,   144,   145,   146,     0,   147,
     148,   149,   150,   151,   152,     0,  1031,   154,   155,   156,
     845,   846,   847,  1032,   849,   850,   851,   158,   159,   160,
     161,   162,   163,   164,   852,   853,   167,   854,   168,     0,
     169,   170,   171,   172,   173,   174,     0,   175,   176,   177,
     178,   179,   180,   181,     0,     0,   182,   183,   690,   185,
     186,   187,     0,   188,   189,   190,     0,   191,   192,   193,
       0,   194,   195,   196,   197,   855,   199,   200,   201,   202,
     856,   857,   204,     0,   205,   206,   858,   208,     0,   209,
       0,   210,  1034,     0,  1035,   213,   214,   215,  1036,   217,
       0,   218,     0,     0,     0,   859,   860,   221,     0,   222,
     223,   224,   225,   226,   227,   228,  1037,   230,   231,   232,
     233,     0,   234,   235,   236,   237,   238,   239,     0,   240,
    1038,   242,   243,   244,   245,   246,   247,   861,   862,     0,
     863,     0,   251,  1039,  1040,   254,  1041,   256,   257,   258,
     259,   260,     0,     0,   261,  1042,   263,  1043,     0,   265,
     266,   267,   864,   865,   268,   269,   270,   271,   272,  1044,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   866,  1045,
     867,   295,   296,   297,   298,   299,   868,   300,   301,  1046,
     303,   869,   870,   305,   871,   307,   308,   309,     0,   310,
     311,     0,     0,   872,   313,   314,     0,     0,   315,   316,
    1047,   318,  1048,   873,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,   331,   332,   874,   334,   335,
     336,   337,   338,   339,     0,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   875,   352,   353,   354,
     355,     0,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,     0,   370,   371,  1049,
     373,   374,   375,   876,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,     0,   388,   389,   390,   391,
     392,   877,   393,   394,   395,   396,   397,  1050,   399,   400,
     878,   402,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,  1051,   416,   879,   418,     0,
     419,   420,     0,   421,  1052,   423,   424,   425,   426,   427,
       0,   880,   881,     0,     0,   430,   431,   882,   433,   883,
     884,   435,   436,  1053,   438,   439,   440,   441,   442,     0,
       0,   443,   444,   445,   446,   447,   886,     0,   448,   449,
     450,   451,   452,   453,   887,  1882,   455,  1055,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   888,
       0,     0,     0,     0,     0,     0,   889,   890,     0,     0,
       0,     0,     0,   892,     0,   893,     0,     0,     0,     0,
     894,     0,   895,   896,    94,   829,   559,   830,   831,   832,
     833,   834,     0,     0,     0,     0,     0,     0,     0,     0,
      95,    96,    97,    98,    99,   100,   101,   102,     0,   103,
     104,   105,     0,     0,     0,     0,   835,     0,     0,   106,
     107,     0,   108,   109,   110,   111,   112,   113,   114,   115,
     836,   117,   837,   838,     0,   120,   121,   122,   123,   124,
     125,   839,   840,   126,   127,   841,   842,   130,     0,   131,
     132,   133,   134,   843,     0,   844,     0,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,     0,   147,   148,
     149,   150,   151,   152,     0,   153,   154,   155,   156,   845,
     846,   847,   848,   849,   850,   851,   158,   159,   160,   161,
     162,   163,   164,   852,   853,   167,   854,   168,     0,   169,
     170,   171,   172,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,     0,     0,   182,   183,   690,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   855,   199,   200,   201,   202,   856,
     857,   204,     0,   205,   206,   858,   208,     0,   209,     0,
     210,   211,  1668,   212,   213,   214,   215,   216,   217,     0,
     218,     0,     0,     0,   859,   860,   221,     0,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
       0,   234,   235,   236,   237,   238,   239,     0,   240,   241,
     242,   243,   244,   245,   246,   247,   861,   862,     0,   863,
       0,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,     0,     0,   261,   262,   263,   264,     0,   265,   266,
     267,   864,   865,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   866,   293,   867,
     295,   296,   297,   298,   299,   868,   300,   301,   302,   303,
     869,   870,   305,   871,   307,   308,   309,     0,   310,   311,
       0,     0,   872,   313,   314,     0,     0,   315,   316,   317,
     318,   319,   873,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,   331,   332,   874,   334,   335,   336,
     337,   338,   339,     0,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   875,   352,   353,   354,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,   375,   876,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     877,   393,   394,   395,   396,   397,   398,   399,   400,   878,
     402,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   879,   418,     0,   419,
     420,     0,   421,   422,   423,   424,   425,   426,   427,     0,
     880,   881,     0,     0,   430,   431,   882,   433,   883,   884,
     435,   436,   885,   438,   439,   440,   441,   442,     0,     0,
     443,   444,   445,   446,   447,   886,     0,   448,   449,   450,
     451,   452,   453,   887,     0,   455,   456,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   888,     0,
       0,     0,     0,     0,     0,   889,   890,     0,     0,     0,
       0,     0,   892,     0,   893,     0,     0,     0,     0,   894,
       0,   895,   896,    94,   829,   559,   830,   831,   832,   833,
     834,     0,     0,     0,     0,     0,     0,     0,     0,    95,
      96,    97,    98,    99,   100,   101,   102,     0,   103,   104,
     105,     0,     0,     0,     0,   835,     0,     0,   106,   107,
       0,   108,   109,   110,   111,   112,   113,   114,   115,   836,
     117,   837,   838,     0,   120,   121,   122,   123,   124,   125,
     839,   840,   126,   127,   841,   842,   130,     0,   131,   132,
     133,   134,   843,     0,   844,     0,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,     0,   147,   148,   149,
     150,   151,   152,     0,   153,   154,   155,   156,   845,   846,
     847,   848,   849,   850,   851,   158,   159,   160,   161,   162,
     163,   164,   852,   853,   167,   854,   168,     0,   169,   170,
     171,   172,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,     0,     0,   182,   183,   690,   185,   186,   187,
       0,   188,   189,   190,     0,   191,   192,   193,     0,   194,
     195,   196,   197,   855,   199,   200,   201,   202,   856,   857,
     204,     0,   205,   206,   858,   208,     0,   209,     0,   210,
     211,     0,   212,   213,   214,   215,   216,   217,     0,   218,
       0,     0,     0,   859,   860,   221,     0,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,     0,
     234,   235,   236,   237,   238,   239,     0,   240,   241,   242,
     243,   244,   245,   246,   247,   861,   862,     0,   863,     0,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
       0,     0,   261,   262,   263,   264,     0,   265,   266,   267,
     864,   865,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   866,   293,   867,   295,
     296,   297,   298,   299,   868,   300,   301,   302,   303,   869,
     870,   305,   871,   307,   308,   309,     0,   310,   311,     0,
       0,   872,   313,   314,     0,     0,   315,   316,   317,   318,
     319,   873,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,     0,   331,   332,   874,   334,   335,   336,   337,
     338,   339,     0,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   875,   352,   353,   354,   355,     0,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,     0,   370,   371,   372,   373,   374,
     375,   876,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,     0,   388,   389,   390,   391,   392,   877,
     393,   394,   395,   396,   397,   398,   399,   400,   878,   402,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   879,   418,     0,   419,   420,
       0,   421,   422,   423,   424,   425,   426,   427,     0,   880,
     881,     0,     0,   430,   431,   882,   433,   883,   884,   435,
     436,   885,   438,   439,   440,   441,   442,     0,     0,   443,
     444,   445,   446,   447,   886,     0,   448,   449,   450,   451,
     452,   453,   887,     0,   455,   456,   457,   458,   459,   460,
     461,     0,     0,   462,     0,     0,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   888,     0,     0,
       0,     0,     0,     0,   889,   890,     0,     0,     0,     0,
       0,   892,     0,   893,     0,     0,     0,     0,   894,     0,
     895,   896,  1025,   829,   559,   830,   831,   832,   833,   834,
       0,     0,     0,     0,     0,     0,     0,     0,    95,    96,
      97,    98,    99,   100,   101,   102,     0,   103,   104,   105,
       0,     0,     0,     0,   835,     0,     0,   106,   107,     0,
     108,   109,   110,  1027,   112,   113,   114,   115,   836,  1028,
     837,   838,     0,   120,   121,   122,   123,   124,   125,   839,
     840,   126,   127,   841,   842,   130,     0,   131,   132,   133,
     134,   843,     0,  1029,     0,   137,   138,   139,   140,   141,
     142,  1030,   144,   145,   146,     0,   147,   148,   149,   150,
     151,   152,     0,  1031,   154,   155,   156,   845,   846,   847,
    1032,   849,   850,   851,   158,   159,   160,   161,   162,   163,
     164,   852,   853,   167,   854,   168,     0,   169,   170,   171,
     172,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,     0,     0,   182,   183,   690,   185,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   855,   199,   200,   201,   202,   856,   857,   204,
       0,   205,   206,   858,   208,     0,   209,     0,   210,  1034,
       0,  1035,   213,   214,   215,  1036,   217,     0,   218,     0,
       0,     0,   859,   860,   221,     0,   222,   223,   224,   225,
     226,   227,   228,  1037,   230,   231,   232,   233,     0,   234,
     235,   236,   237,   238,   239,     0,   240,  1038,   242,   243,
     244,   245,   246,   247,   861,   862,     0,   863,     0,   251,
    1039,  1040,   254,  1041,   256,   257,   258,   259,   260,     0,
       0,   261,  1042,   263,  1043,     0,   265,   266,   267,   864,
     865,   268,   269,   270,   271,   272,  1044,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   866,  1045,   867,   295,   296,
     297,   298,   299,   868,   300,   301,  1046,   303,   869,   870,
     305,   871,   307,   308,   309,     0,   310,   311,     0,     0,
     872,   313,   314,     0,     0,   315,   316,  1047,   318,  1048,
     873,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,   331,   332,   874,   334,   335,   336,   337,   338,
     339,     0,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   875,   352,   353,   354,   355,     0,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,     0,   370,   371,  1049,   373,   374,   375,
     876,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,     0,   388,   389,   390,   391,   392,   877,   393,
     394,   395,   396,   397,  1050,   399,   400,   878,   402,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,  1051,   416,   879,   418,     0,   419,   420,     0,
     421,  1052,   423,   424,   425,   426,   427,     0,   880,   881,
       0,     0,   430,   431,   882,   433,   883,   884,   435,   436,
    1053,   438,   439,   440,   441,   442,     0,     0,   443,   444,
     445,   446,   447,   886,     0,   448,   449,   450,   451,   452,
     453,   887,     0,   455,  1055,   457,   458,   459,   460,   461,
       0,     0,   462,     0,     0,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   888,     0,     0,     0,
       0,     0,     0,   889,   890,     0,     0,     0,     0,     0,
     892,     0,   893,     0,     0,     0,     0,   894,     0,   895,
     896,    94,   829,   559,   830,   831,   832,   833,   834,     0,
       0,     0,     0,     0,     0,     0,     0,    95,    96,    97,
      98,    99,   100,   101,   102,     0,   103,   104,   105,     0,
       0,     0,     0,   835,     0,     0,   106,   107,     0,   108,
     109,   110,   111,   112,   113,   114,   115,   836,   117,   837,
     838,     0,   120,   121,   122,   123,   124,   125,   839,   840,
     126,   127,   841,   842,   130,     0,   131,   132,   133,   134,
     843,     0,   844,     0,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,   154,   155,   156,   845,   846,   847,   848,
     849,   850,   851,   158,   159,   160,   161,   162,   163,   164,
     852,   853,   167,   854,   168,     0,   169,   170,   171,   172,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
       0,     0,   182,   183,   690,   185,   186,   187,     0,   188,
     189,   190,     0,   191,   192,   193,     0,   194,   195,   196,
     197,   855,   199,   200,   201,   202,   856,   857,   204,     0,
     205,   206,   858,   208,     0,   209,     0,   210,   211,     0,
     212,   213,   214,   215,   216,   217,     0,   218,     0,     0,
       0,   859,   860,   221,     0,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,     0,   234,   235,
     236,   237,   238,   239,     0,   240,   241,   242,   243,   244,
     245,   246,   247,   861,   862,     0,   863,     0,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,     0,     0,
     261,   262,   263,   264,     0,   265,   266,   267,   864,   865,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   866,   293,   867,   295,   296,   297,
     298,   299,   868,   300,   301,   302,   303,   869,   870,   305,
     871,   307,   308,   309,     0,   310,   311,     0,     0,   872,
     313,   314,     0,     0,   315,   316,   317,   318,   319,   873,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,   331,   332,   874,   334,   335,   336,   337,   338,   339,
       0,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   875,   352,   353,   354,   355,     0,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,   876,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,     0,   388,   389,   390,   391,   392,   877,   393,   394,
     395,   396,   397,   398,   399,   400,   878,   402,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   879,   418,     0,   419,   420,     0,   421,
     422,   423,   424,   425,   426,   427,     0,   880,   881,     0,
       0,   430,   431,   882,   433,   883,   884,   435,   436,   885,
     438,   439,   440,   441,   442,     0,     0,   443,   444,   445,
     446,   447,   886,     0,   448,   449,   450,   451,   452,   453,
     887,     0,   455,   456,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   888,     0,     0,     0,     0,
       0,     0,  1420,  1421,     0,     0,     0,     0,     0,   892,
       0,   893,     0,     0,     0,     0,   894,     0,   895,   896,
      94,  1793,   559,   830,   831,   832,   833,   834,     0,     0,
       0,     0,     0,     0,     0,     0,    95,    96,    97,    98,
      99,   100,   101,   102,     0,   103,   104,   105,     0,     0,
       0,     0,   835,     0,     0,   106,   107,     0,   108,   109,
     110,   111,   112,   113,   114,   115,   836,   117,   837,   838,
       0,   120,   121,   122,   123,   124,   125,   839,   840,   126,
     127,   841,   842,   130,     0,   131,   132,   133,   134,   843,
       0,   844,     0,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,     0,   147,   148,   149,   150,   151,   152,
       0,   153,   154,   155,   156,   845,   846,   847,   848,   849,
     850,   851,   158,   159,   160,   161,   162,   163,   164,   852,
     853,   167,   854,   168,     0,   169,   170,   171,   172,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,     0,
       0,   182,   183,   690,   185,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     855,   199,   200,   201,   202,   856,   857,   204,     0,   205,
     206,   858,   208,     0,   209,     0,   210,   211,     0,   212,
     213,   214,   215,   216,   217,     0,   218,     0,     0,     0,
     859,   860,   221,     0,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,     0,   234,   235,   236,
     237,   238,   239,     0,   240,   241,   242,   243,   244,   245,
     246,   247,   861,   862,     0,   863,     0,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,     0,     0,   261,
     262,   263,   264,     0,   265,   266,   267,   864,   865,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   866,   293,   867,   295,   296,   297,   298,
     299,   868,   300,   301,   302,   303,   869,   870,   305,   871,
     307,   308,   309,     0,   310,   311,     0,     0,   872,   313,
     314,     0,     0,   315,   316,   317,   318,   319,   873,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
     331,   332,   874,   334,   335,   336,   337,   338,   339,     0,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   875,   352,   353,   354,   355,     0,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,   375,   876,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
       0,   388,   389,   390,   391,   392,   877,   393,   394,   395,
     396,   397,   398,   399,   400,   878,   402,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   879,   418,     0,   419,   420,     0,   421,   422,
     423,   424,   425,   426,   427,     0,   880,   881,     0,     0,
     430,   431,   882,   433,   883,   884,   435,   436,   885,   438,
     439,   440,   441,   442,     0,     0,   443,   444,   445,   446,
     447,   886,     0,   448,   449,   450,   451,   452,   453,   887,
       0,   455,   456,   457,   458,   459,   460,   461,     0,     0,
     462,     0,     0,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   888,     0,     0,     0,     0,     0,
       0,   889,   890,     0,     0,     0,     0,     0,   892,     0,
     893,     0,     0,     0,     0,   894,     0,   895,   896,    94,
     829,   559,   830,   831,   832,   833,   834,     0,     0,     0,
       0,     0,     0,     0,     0,    95,    96,    97,    98,    99,
     100,   101,   102,     0,   103,   104,   105,     0,     0,     0,
       0,   835,     0,     0,   106,   107,     0,   108,   109,   110,
     111,   112,   113,   114,   115,   836,   117,   837,   838,     0,
     120,   121,   122,   123,   124,   125,   839,   840,   126,   127,
     841,   842,   130,     0,   131,   132,   133,   134,   843,     0,
     844,     0,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,     0,   147,   148,   149,   150,   151,   152,     0,
     153,   154,   155,   156,   845,   846,   847,   848,   849,   850,
     851,   158,   159,   160,   161,   162,   163,   164,   852,   853,
     167,   854,   168,     0,   169,   170,   171,   172,   173,   174,
       0,   175,   176,   177,   178,   179,   180,   181,     0,     0,
     182,   183,   690,   185,   186,   187,     0,   188,   189,   190,
       0,   191,   192,   193,     0,   194,   195,   196,   197,   855,
     199,   200,   201,   202,   856,   857,   204,     0,   205,   206,
     858,   208,     0,   209,     0,   210,   211,     0,   212,   213,
     214,   215,   216,   217,     0,   218,     0,     0,     0,   859,
     860,   221,     0,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,     0,   234,   235,   236,   237,
     238,   239,     0,   240,   241,   242,   243,   244,   245,   246,
     247,   861,   862,     0,   863,     0,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,     0,     0,   261,   262,
     263,   264,     0,   265,   266,   267,   864,   865,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   866,   293,   867,   295,   296,   297,   298,   299,
     868,   300,   301,   302,   303,   869,   870,   305,   871,   307,
     308,   309,     0,   310,   311,     0,     0,   872,   313,   314,
       0,     0,   315,   316,   317,   318,   319,   873,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,   331,
     332,   874,   334,   335,   336,   337,   338,   339,     0,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     875,   352,   353,   354,   355,     0,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,   375,   876,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,     0,
     388,   389,   390,   391,   392,   877,   393,   394,   395,   396,
     397,   398,   399,   400,   878,   402,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   879,   418,     0,   419,   420,     0,   421,   422,   423,
     424,   425,   426,   427,     0,   880,   881,     0,     0,   430,
     431,   882,   433,   883,   884,   435,   436,   885,   438,   439,
     440,   441,   442,     0,     0,   443,   444,   445,   446,   447,
     886,     0,   448,   449,   450,   451,   452,   453,   887,     0,
     455,   456,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   888,     0,     0,     0,     0,     0,     0,
     889,   890,     0,     0,     0,     0,     0,   892,     0,  2036,
       0,     0,     0,     0,   894,     0,   895,   896,    94,   829,
     559,   830,   831,   832,   833,   834,     0,     0,     0,     0,
       0,     0,     0,     0,    95,    96,    97,    98,    99,   100,
     101,   102,     0,   103,   104,   105,     0,     0,     0,     0,
     835,     0,     0,   106,   107,     0,   108,   109,   110,   111,
     112,   113,   114,   115,   836,   117,   837,   838,     0,   120,
     121,   122,   123,   124,   125,   839,   840,   126,   127,   841,
     842,   130,     0,   131,   132,   133,   134,   843,     0,   844,
       0,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,     0,   147,   148,   149,   150,   151,   152,     0,   153,
     154,  2756,   156,   845,   846,   847,   848,   849,   850,   851,
     158,   159,   160,   161,   162,   163,   164,   852,   853,   167,
     854,   168,     0,   169,   170,   171,   172,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,     0,     0,   182,
     183,   690,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   855,   199,
     200,   201,   202,   856,   857,   204,     0,   205,   206,   858,
     208,     0,   209,     0,   210,   211,     0,   212,   213,   214,
     215,   216,   217,     0,   218,     0,     0,     0,  2757,   860,
     221,     0,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,     0,   234,   235,   236,   237,   238,
     239,     0,   240,   241,   242,   243,   244,   245,   246,   247,
     861,   862,     0,   863,     0,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,     0,     0,   261,   262,   263,
     264,     0,   265,   266,   267,   864,   865,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   866,   293,   867,   295,   296,   297,   298,   299,   868,
     300,   301,   302,   303,   869,   870,   305,   871,   307,   308,
     309,     0,   310,   311,     0,     0,   872,   313,   314,     0,
       0,   315,   316,   317,   318,   319,   873,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,   331,   332,
     874,   334,   335,   336,   337,   338,   339,     0,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   875,
     352,   353,   354,   355,     0,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,     0,
     370,   371,   372,   373,   374,  2758,   876,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,     0,   388,
     389,   390,   391,   392,   877,   393,   394,   395,   396,   397,
     398,   399,   400,   878,   402,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     879,   418,     0,   419,   420,     0,   421,   422,   423,   424,
     425,   426,   427,     0,   880,   881,     0,     0,   430,   431,
     882,   433,   883,   884,   435,   436,   885,   438,   439,   440,
     441,   442,     0,     0,   443,   444,   445,   446,   447,   886,
       0,   448,   449,   450,   451,   452,   453,   887,     0,   455,
     456,   457,   458,   459,   460,   461,     0,     0,   462,     0,
       0,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   888,     0,     0,     0,     0,     0,     0,   889,
     890,     0,     0,     0,     0,     0,   892,     0,  2759,     0,
       0,     0,     0,   894,     0,   895,   896,    94,   829,   559,
     830,   831,   832,   833,   834,     0,     0,     0,     0,     0,
       0,     0,     0,    95,    96,    97,    98,    99,   100,   101,
     102,     0,   103,   104,   105,     0,     0,     0,     0,   835,
       0,     0,   106,   107,     0,   108,   109,   110,   111,   112,
     113,   114,  3014,   836,   117,   837,   838,     0,   120,   121,
     122,   123,   124,   125,   839,   840,   126,   127,   841,   842,
     130,     0,   131,   132,   133,   134,   843,     0,   844,     0,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
       0,   147,   148,   149,   150,   151,   152,     0,   153,   154,
     155,  3015,   845,   846,   847,   848,   849,   850,   851,   158,
     159,   160,   161,   162,   163,   164,   852,   853,   167,   854,
     168,     0,   169,   170,   171,   172,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,     0,     0,   182,   183,
     690,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   855,   199,   200,
     201,   202,   856,   857,   204,     0,   205,   206,   858,   208,
       0,   209,     0,   210,   211,     0,   212,   213,   214,   215,
     216,   217,     0,   218,     0,     0,     0,   859,   860,   221,
       0,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,     0,   234,   235,   236,   237,   238,   239,
       0,   240,   241,   242,   243,   244,   245,   246,   247,   861,
     862,     0,   863,     0,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,     0,     0,   261,   262,   263,   264,
       0,   265,   266,   267,   864,   865,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     866,   293,   867,   295,   296,   297,   298,   299,   868,   300,
     301,   302,   303,   869,   870,   305,   871,   307,   308,   309,
       0,   310,   311,     0,     0,   872,   313,   314,     0,     0,
     315,   316,   317,   318,   319,   873,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,   331,   332,   874,
     334,   335,   336,   337,   338,   339,     0,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   875,   352,
     353,   354,   355,     0,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,     0,   370,
     371,   372,   373,   374,   375,   876,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,     0,   388,   389,
     390,   391,   392,   877,   393,   394,   395,   396,   397,   398,
     399,   400,   878,   402,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   879,
     418,     0,   419,   420,     0,   421,   422,   423,   424,   425,
     426,   427,     0,   880,   881,     0,     0,   430,   431,   882,
     433,   883,   884,   435,   436,   885,   438,   439,  3016,   441,
     442,     0,     0,   443,   444,   445,   446,   447,   886,     0,
     448,   449,   450,   451,   452,   453,   887,     0,   455,   456,
     457,   458,   459,   460,   461,     0,     0,   462,     0,     0,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   888,     0,     0,     0,     0,     0,     0,   889,   890,
       0,     0,     0,     0,     0,   892,     0,   893,     0,     0,
       0,     0,   894,     0,   895,   896,    94,   829,   559,   830,
     831,   832,   833,   834,     0,     0,     0,     0,     0,     0,
       0,     0,    95,    96,    97,    98,    99,   100,   101,   102,
       0,   103,   104,   105,     0,     0,     0,     0,   835,     0,
       0,   106,   107,     0,   108,   109,   110,   111,   112,   113,
     114,   115,   836,   117,   837,   838,     0,   120,   121,   122,
     123,   124,   125,   839,   840,   126,   127,   841,   842,   130,
       0,   131,   132,   133,   134,   843,     0,   844,     0,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,     0,
     147,   148,   149,   150,   151,   152,     0,   153,   154,   155,
    3015,   845,   846,   847,   848,   849,   850,   851,   158,   159,
     160,   161,   162,   163,   164,   852,   853,   167,   854,   168,
       0,   169,   170,   171,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,     0,     0,   182,   183,   690,
     185,   186,   187,     0,   188,   189,   190,     0,   191,   192,
     193,     0,   194,   195,   196,   197,   855,   199,   200,   201,
     202,   856,   857,   204,     0,   205,   206,   858,   208,     0,
     209,     0,   210,   211,     0,   212,   213,   214,   215,   216,
     217,     0,   218,     0,     0,     0,   859,   860,   221,     0,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,     0,   234,   235,   236,   237,   238,   239,     0,
     240,   241,   242,   243,   244,   245,   246,   247,   861,   862,
       0,   863,     0,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,     0,     0,   261,   262,   263,   264,     0,
     265,   266,   267,   864,   865,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   866,
     293,   867,   295,   296,   297,   298,   299,   868,   300,   301,
     302,   303,   869,   870,   305,   871,   307,   308,   309,     0,
     310,   311,     0,     0,   872,   313,   314,     0,     0,   315,
     316,   317,   318,   319,   873,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,   331,   332,   874,   334,
     335,   336,   337,   338,   339,     0,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   875,   352,   353,
     354,   355,     0,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,   876,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,   877,   393,   394,   395,   396,   397,   398,   399,
     400,   878,   402,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   879,   418,
       0,   419,   420,     0,   421,   422,   423,   424,   425,   426,
     427,     0,   880,   881,     0,     0,   430,   431,   882,   433,
     883,   884,   435,   436,   885,   438,   439,  3016,   441,   442,
       0,     0,   443,   444,   445,   446,   447,   886,     0,   448,
     449,   450,   451,   452,   453,   887,     0,   455,   456,   457,
     458,   459,   460,   461,     0,     0,   462,     0,     0,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     888,     0,     0,     0,     0,     0,     0,   889,   890,     0,
       0,     0,     0,     0,   892,     0,   893,     0,     0,     0,
       0,   894,     0,   895,   896,    94,   829,   559,   830,   831,
     832,   833,   834,     0,     0,     0,     0,     0,     0,     0,
       0,    95,    96,    97,    98,    99,   100,   101,   102,     0,
     103,   104,   105,     0,     0,     0,     0,   835,     0,     0,
     106,   107,     0,   108,   109,   110,   111,   112,   113,   114,
   -1796,   836,   117,   837,   838,     0,   120,   121,   122,   123,
     124,   125,   839,   840,   126,   127,   841,   842,   130,     0,
     131,   132,   133,   134,   843,     0,   844,     0,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,     0,   147,
     148,   149,   150,   151,   152,     0,   153,   154,   155,  3015,
     845,   846,   847,   848,   849,   850,   851,   158,   159,   160,
     161,   162,   163,   164,   852,   853,   167,   854,   168,     0,
     169,   170,   171,   172,   173,   174,     0,   175,   176,   177,
     178,   179,   180,   181,     0,     0,   182,   183,   690,   185,
     186,   187,     0,   188,   189,   190,     0,   191,   192,   193,
       0,   194,   195,   196,   197,   855,   199,   200,   201,   202,
     856,   857,   204,     0,   205,   206,   858,   208,     0,   209,
       0,   210,   211,     0,   212,   213,   214,   215, -1796,   217,
       0,   218,     0,     0,     0,   859,   860,   221,     0,   222,
     223,   224,   225,   226,   227,   228, -1796,   230,   231,   232,
     233,     0,   234,   235,   236,   237,   238,   239,     0,   240,
     241,   242,   243,   244,   245,   246,   247,   861,   862,     0,
     863,     0,   251,     0,     0,   254,   255,   256,   257,   258,
     259,   260,     0,     0,   261,   262,   263, -1796,     0,   265,
     266,   267,   864,   865,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   866,   293,
     867,   295,   296,   297,   298,   299,     0,   300,   301,     0,
     303,   869,   870,   305,   871,   307,   308,   309,     0,   310,
     311,     0,     0,   872,   313,   314,     0,     0,   315,   316,
     317,   318,   319,   873,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,   331,   332,   874,   334,   335,
     336,   337,   338,   339,     0,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   875,   352,   353,   354,
     355,     0,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,     0,   370,   371,   372,
     373,   374,   375,   876,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,     0,   388,   389,   390,   391,
     392,   877,   393,   394,   395,   396,   397, -1796,   399,   400,
     878,   402,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   879,   418,     0,
     419,   420,     0,   421,   422,   423,   424,   425,   426,   427,
       0,   880,   881,     0,     0,   430,   431,   882,   433,   883,
     884,   435,   436,   885,   438,   439,  3016,   441,   442,     0,
       0,   443,   444,   445,   446,   447,   886,     0,   448,   449,
     450,   451,   452,   453,   887,     0,   455,   456,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483, -1796,
       0,     0,     0,     0,     0,     0,   889,   890,     0,     0,
       0,     0,     0,   892,     0,   893,     0,     0,     0,     0,
     894,     0,   895,   896,    94,   829,   559,   830,   831,   832,
     833,   834,     0,     0,     0,     0,     0,     0,     0,     0,
      95,    96,    97,    98,    99,   100,   101,   102,     0,   103,
     104,   105,     0,     0,     0,     0,     0,     0,     0,   106,
     107,     0,   108,   109,   110,   111,   112,   113,   114,   115,
     836,   117,   837,   838,     0,   120,   121,   122,   123,   124,
     125,   839,   840,   126,   127,   841,   842,   130,     0,   131,
     132,   133,   134,   843,     0,   844,     0,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,     0,   147,   148,
     149,   150,   151,   152,     0,   153,   154,   155,   156,   845,
     846,   847,   848,   849,   850,   851,   158,   159,   160,   161,
     162,   163,   164,   852,   853,   167,     0,   168,     0,   169,
     170,   171,   172,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,     0,     0,   182,   183,   690,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   855,   199,   200,   201,   202,   856,
     857,   204,     0,   205,   206,   858,   208,     0,   209,     0,
     210,   211,     0,   212,   213,   214,   215,   216,   217,     0,
     218,     0,     0,     0,   859,   860,   221,     0,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
       0,   234,   235,   236,   237,   238,   239,     0,   240,   241,
     242,   243,   244,   245,   246,   247,   861,   862,     0,   863,
       0,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,     0,     0,   261,   262,   263,   264,     0,   265,   266,
     267,   864,   865,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   866,   293,   867,
     295,   296,   297,   298,   299,     0,   300,   301,   302,   303,
     869,   870,   305,   871,   307,   308,   309,     0,   310,   311,
       0,     0,   872,   313,   314,     0,     0,   315,   316,   317,
     318,   319,   873,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,   331,   332,   874,   334,   335,   336,
     337,   338,   339,     0,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   875,   352,   353,   354,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     877,   393,   394,   395,   396,   397,   398,   399,   400,   878,
     402,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   879,   418,     0,   419,
     420,     0,   421,   422,   423,   424,   425,   426,   427,     0,
     880,   881,     0,     0,   430,   431,   882,   433,   883,   884,
     435,   436,   885,   438,   439,   440,   441,   442,     0,     0,
     443,   444,   445,   446,   447,   886,     0,   448,   449,   450,
     451,   452,   453,   887,     0,   455,   456,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,     0,     0,
       0,     0,     0,     0,     0,  1653,  1654,     0,     0,    94,
     829,   559,   830,   831,  1655,   833,   834,     0,     0,     0,
       0,   895,   896,     0,     0,    95,    96,    97,    98,    99,
     100,   101,   102,     0,   103,   104,   105,     0,     0,     0,
       0,     0,     0,     0,   106,   107,     0,   108,   109,   110,
     111,   112,   113,   114,   115,   836,   117,   837,   838,     0,
     120,   121,   122,   123,   124,   125,   839,   840,   126,   127,
     841,   842,   130,     0,   131,   132,   133,   134,   843,     0,
     844,     0,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,     0,   147,   148,   149,   150,   151,   152,     0,
     153,   154,   155,   156,   845,   846,   847,   848,   849,   850,
     851,   158,   159,   160,   161,   162,   163,   164,   852,   853,
     167,     0,   168,     0,   169,   170,   171,   172,   173,   174,
       0,   175,   176,   177,   178,   179,   180,   181,     0,     0,
     182,   183,   690,   185,   186,   187,     0,   188,   189,   190,
       0,   191,   192,   193,     0,   194,   195,   196,   197,   855,
     199,   200,   201,   202,   856,   857,   204,     0,   205,   206,
     858,   208,     0,   209,     0,   210,   211,     0,   212,   213,
     214,   215,   216,   217,     0,   218,     0,     0,     0,   859,
     860,   221,     0,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,     0,   234,   235,   236,   237,
     238,   239,     0,   240,   241,   242,   243,   244,   245,   246,
     247,   861,   862,     0,   863,     0,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,     0,     0,   261,   262,
     263,   264,     0,   265,   266,   267,   864,   865,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   866,   293,   867,   295,   296,   297,   298,   299,
       0,   300,   301,   302,   303,   869,   870,   305,   871,   307,
     308,   309,     0,   310,   311,     0,     0,   312,   313,   314,
       0,     0,   315,   316,   317,   318,   319,   873,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,   331,
     332,   874,   334,   335,   336,   337,   338,   339,     0,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     875,   352,   353,   354,   355,     0,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,   375,  1779,  1780,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,     0,
     388,   389,   390,   391,   392,   877,   393,   394,   395,   396,
     397,   398,   399,   400,   878,   402,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   879,   418,     0,   419,   420,     0,   421,   422,   423,
     424,   425,   426,   427,     0,   880,   881,     0,     0,   430,
     431,   882,   433,   883,   884,   435,   436,   885,   438,   439,
     440,   441,   442,     0,     0,   443,   444,   445,   446,   447,
     886,     0,   448,   449,   450,   451,   452,   453,   887,     0,
     455,   456,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,     0,     0,     0,     0,     0,     0,     0,
    1781,  1782,     0,     0,     0,     0,     0,     0,     0,  1655,
       0,     0,     0,     0,     0,     0,   895,   896,    94,   829,
     559,   830,   831,   832,   833,   834,     0,     0,     0,     0,
       0,     0,     0,     0,    95,    96,    97,    98,    99,   100,
     101,   102,     0,   103,   104,   105,     0,     0,     0,     0,
       0,     0,     0,   106,   107,     0,   108,   109,   110,   111,
     112,   113,   114,   115,   836,   117,   837,   838,     0,   120,
     121,   122,   123,   124,   125,   839,   840,   126,   127,   841,
     842,   130,     0,   131,   132,   133,   134,   843,     0,   844,
       0,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,     0,   147,   148,   149,   150,   151,   152,     0,   153,
     154,   155,   156,   845,   846,   847,   848,   849,   850,   851,
     158,   159,   160,   161,   162,   163,   164,   852,   853,   167,
       0,   168,     0,   169,   170,   171,   172,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,     0,     0,   182,
     183,   690,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   855,   199,
     200,   201,   202,   856,   857,   204,     0,   205,   206,   858,
     208,     0,   209,     0,   210,   211,     0,   212,   213,   214,
     215,   216,   217,     0,   218,     0,     0,     0,   859,   860,
     221,     0,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,     0,   234,   235,   236,   237,   238,
     239,     0,   240,   241,   242,   243,   244,   245,   246,   247,
     861,   862,     0,   863,     0,   251,     0,   253,   254,   255,
     256,   257,   258,   259,   260,     0,     0,   261,   262,   263,
     264,     0,   265,   266,   267,   864,   865,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   866,   293,   867,   295,   296,   297,   298,   299,     0,
     300,   301,   302,   303,   869,   870,   305,   871,   307,   308,
     309,     0,   310,   311,     0,     0,   872,   313,   314,     0,
       0,   315,   316,   317,   318,   319,   873,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,   331,   332,
     874,   334,   335,   336,   337,   338,   339,     0,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   875,
     352,   353,   354,   355,     0,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,     0,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,     0,   388,
     389,   390,   391,   392,   877,   393,   394,   395,   396,   397,
     398,   399,   400,   878,   402,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     879,   418,     0,   419,   420,     0,   421,   422,   423,   424,
     425,   426,   427,     0,   880,   881,     0,     0,   430,   431,
     882,   433,   883,   884,   435,   436,   885,   438,   439,   440,
     441,   442,     0,     0,   443,   444,   445,   446,   447,   886,
       0,   448,   449,   450,   451,   452,   453,   887,     0,   455,
     456,   457,   458,   459,   460,   461,     0,     0,   462,     0,
       0,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,     0,     0,     0,     0,     0,     0,     0,  1653,
    1654,     0,     0,     0,     0,     0,     0,     0,  1655,     0,
       0,     0,     0,     0,     0,   895,   896,    94,   829,   559,
     830,   831,   832,   833,   834,     0,     0,     0,     0,     0,
       0,     0,     0,    95,    96,    97,    98,    99,   100,   101,
     102,     0,   103,   104,   105,     0,     0,     0,     0,   835,
       0,     0,   106,   107,     0,   108,   109,   110,   111,   112,
     113,   114,     0,   836,   117,   837,   838,     0,   120,   121,
     122,   123,   124,   125,   839,   840,   126,   127,   841,   842,
     130,     0,   131,   132,   133,   134,   843,     0,   844,     0,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
       0,   147,   148,   149,   150,   151,   152,     0,   153,   154,
     155,   156,   845,   846,   847,   848,   849,   850,   851,   158,
     159,   160,   161,   162,   163,   164,   852,   853,   167,   854,
     168,     0,   169,   170,   171,   172,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,     0,     0,   182,   183,
     690,   185,   186,   187,     0,   188,   189,   190,     0,   191,
       0,   193,     0,   194,   195,   196,   197,   855,   199,   200,
     201,   202,   856,   857,   204,     0,   205,   206,   858,   208,
       0,   209,     0,   210,   211,     0,   212,   213,   214,   215,
       0,   217,     0,   218,     0,     0,     0,   859,   860,   221,
       0,   222,   223,   224,   225,   226,   227,   228,     0,   230,
     231,   232,   233,     0,   234,   235,   236,   237,   238,   239,
       0,   240,   241,   242,   243,   244,   245,   246,   247,   861,
     862,     0,   863,     0,   251,     0,     0,   254,   255,   256,
     257,   258,   259,   260,     0,     0,   261,   262,   263,     0,
       0,   265,   266,   267,   864,   865,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     866,   293,   867,   295,   296,   297,   298,   299,     0,   300,
     301,     0,   303,   869,   870,   305,   871,   307,   308,   309,
       0,   310,   311,     0,     0,   872,   313,   314,     0,     0,
     315,   316,   317,   318,   319,   873,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,   331,   332,   874,
     334,   335,   336,   337,   338,   339,     0,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   875,   352,
     353,   354,   355,     0,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,     0,   370,
     371,   372,   373,   374,   375,   876,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,     0,   388,   389,
     390,   391,   392,   877,   393,   394,   395,   396,   397,     0,
     399,   400,   878,   402,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   879,
     418,     0,   419,   420,     0,   421,   422,   423,   424,   425,
     426,   427,     0,   880,   881,     0,     0,   430,   431,   882,
     433,   883,   884,   435,   436,   885,   438,   439,   440,   441,
     442,     0,     0,   443,   444,   445,   446,   447,   886,     0,
     448,   449,   450,   451,   452,   453,   887,     0,   455,   456,
     457,   458,   459,   460,   461,     0,     0,   462,     0,     0,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,     0,     0,     0,     0,     0,     0,     0,   889,   890,
     510,     0,     0,     0,     0,   892,     0,   893,     0,     0,
       0,     0,   894,     0,   895,   896,    95,    96,    97,    98,
      99,   100,   101,   102,     0,   103,   104,   105,     0,     0,
       0,     0,     0,  2349,     0,   106,   107,     0,   108,   109,
     110,     0,   112,   113,   114,   115,   116,     0,   118,   119,
       0,   120,   121,   122,   123,   124,   125,     0,     0,   126,
     127,   128,   129,   130,     0,   131,   132,   133,   134,   135,
       0,     0,     0,   137,   138,   139,   140,   141,   142,     0,
     144,   145,   146,     0,   147,   148,   149,   150,   151,   152,
       0,  -406,   154,   155,   156,     0,     0,     0,     0,     0,
       0,     0,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,     0,
       0,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,     0,   204,     0,   205,
     206,   207,   208,     0,   209,     0,   210,     0,     0,  -406,
     213,   214,   215,     0,   217,     0,   218,     0,     0,     0,
     219,   220,   221,     0,   222,   223,   224,   225,   226,   227,
     228,     0,   230,   231,   232,   233,     0,   234,   235,   236,
     237,   238,   239,     0,   240,  -406,   242,   243,   244,   245,
     246,   247,   248,   249,     0,   250,     0,   251,     0,     0,
     254,  -406,   256,   257,   258,   259,   260,     0,     0,   261,
    -406,   263,     0,     0,   265,   266,   267,     0,     0,   268,
     269,   270,   271,   272,   512,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,  -406,   294,   295,   296,   297,   298,
     299,     0,   300,   301,     0,   303,     0,   304,   305,   306,
     307,   308,   309,     0,   310,   311,     0,     0,   312,   313,
     314,     0,     0,   315,   316,     0,   318,     0,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,     0,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,     0,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,     0,   370,   371,  -406,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
       0,   388,   389,   390,   391,   392,     0,   393,   394,   395,
     396,   397,     0,   399,   400,   401,   402,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     514,   416,   417,   418,     0,   419,   420,     0,   421,  -406,
     423,   424,   425,   426,   427,     0,   428,   429,     0,     0,
     430,   431,   432,   433,   434,     0,   435,   436,   437,   438,
     439,   440,   441,   442,     0,     0,   443,   444,   445,   446,
     447,     0,     0,   448,   449,   450,   451,   452,   453,   454,
       0,   455,     0,   457,   458,   459,   460,   461,     0,     0,
     462,     0,     0,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,     0,     0,    94,     0,   592,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   957,    95,    96,    97,    98,    99,   100,   101,   102,
       0,   103,   104,   105,     0,     0,     0,     0,     0,     0,
       0,   106,   107,     0,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,     0,   120,   121,   122,
     123,   124,   125,     0,   840,   126,   127,   128,   129,   130,
       0,   131,   132,   133,   134,   843,     0,   844,     0,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,     0,
     147,   148,   149,   150,   151,   152,     0,   153,   154,   155,
     156,   845,   846,   847,   848,   849,   850,   851,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,     0,   168,
       0,   169,   170,   171,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,     0,     0,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,     0,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   856,     0,   204,     0,   205,   206,   207,   208,     0,
     209,     0,   210,   211,     0,   212,   213,   214,   215,   216,
     217,     0,   218,     0,  2082,     0,   219,   220,   221,     0,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,     0,   234,   235,   236,   237,   238,   239,     0,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
       0,   250,     0,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,  2083,     0,   261,   262,   263,   264,     0,
     265,   266,   267,   864,   865,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,     0,   300,   301,
     302,   303,     0,   870,   305,   306,   307,   308,   309,     0,
     310,   311,     0,   593,   312,   313,   314,     0,     0,   315,
     316,   317,   318,   319,   873,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,   331,   332,   874,   334,
     335,   336,   337,   338,   339,     0,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,     0,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,   376,  2084,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,    26,   388,   389,   390,
     391,   392,   877,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   879,   418,
       0,   419,   420,    31,   421,   422,   423,   424,   425,   426,
     427,     0,   428,   429,     0,     0,   430,   431,   882,   433,
     883,     0,   435,   436,   885,   438,   439,   440,   441,   442,
       0,     0,   443,   444,   445,   446,   447,   886,     0,   448,
     449,   450,   451,   452,   587,   454,     0,   455,   456,   457,
     458,   459,   460,   461,     0,     0,   462,     0,    34,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
       0,    94,    35,   592,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2085,    95,    96,    97,
      98,    99,   100,   101,   102,     0,   103,   104,   105,     0,
       0,     0,     0,     0,     0,     0,   106,   107,     0,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,     0,   120,   121,   122,   123,   124,   125,     0,   840,
     126,   127,   128,   129,   130,     0,   131,   132,   133,   134,
     843,     0,   844,     0,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,   154,   155,   156,   845,   846,   847,   848,
     849,   850,   851,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,     0,   168,     0,   169,   170,   171,   172,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
       0,     0,   182,   183,   184,   185,   186,   187,     0,   188,
     189,   190,     0,   191,   192,   193,     0,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   856,     0,   204,     0,
     205,   206,   207,   208,     0,   209,     0,   210,   211,     0,
     212,   213,   214,   215,   216,   217,     0,   218,     0,  2082,
       0,   219,   220,   221,     0,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,     0,   234,   235,
     236,   237,   238,   239,     0,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,     0,   250,     0,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,  2083,     0,
     261,   262,   263,   264,     0,   265,   266,   267,   864,   865,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,     0,   300,   301,   302,   303,     0,   870,   305,
     306,   307,   308,   309,     0,   310,   311,     0,   593,   312,
     313,   314,     0,     0,   315,   316,   317,   318,   319,   873,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,   331,   332,   874,   334,   335,   336,   337,   338,   339,
       0,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,     0,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,   376,
    2084,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,     0,   388,   389,   390,   391,   392,   877,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   879,   418,     0,   419,   420,     0,   421,
     422,   423,   424,   425,   426,   427,     0,   428,   429,     0,
       0,   430,   431,   882,   433,   883,     0,   435,   436,   885,
     438,   439,   440,   441,   442,     0,     0,   443,   444,   445,
     446,   447,   886,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,   456,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,     0,    94,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2085,    95,    96,    97,    98,    99,   100,   101,   102,
       0,   103,   104,   105,     0,     0,     0,     0,     0,     0,
       0,   106,   107,     0,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,     0,   120,   121,   122,
     123,   124,   125,     0,   840,   126,   127,   128,   129,   130,
       0,   131,   132,   133,   134,   843,     0,   844,     0,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,     0,
     147,   148,   149,   150,   151,   152,     0,   153,   154,   155,
     156,   845,   846,   847,   848,   849,   850,   851,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,     0,   168,
       0,   169,   170,   171,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,     0,     0,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,     0,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   856,     0,   204,     0,   205,   206,   207,   208,     0,
     209,     0,   210,   211,     0,   212,   213,   214,   215,   216,
     217,     0,   218,     0,     0,     0,   219,   220,   221,     0,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,     0,   234,   235,   236,   237,   238,   239,     0,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
       0,   250,     0,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,     0,     0,   261,   262,   263,   264,     0,
     265,   266,   267,   864,   865,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,     0,   300,   301,
     302,   303,     0,   870,   305,   306,   307,   308,   309,     0,
     310,   311,     0,     0,   312,   313,   314,     0,     0,   315,
     316,   317,   318,   319,   873,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,   331,   332,   874,   334,
     335,   336,   337,   338,   339,     0,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,     0,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,   376,  2084,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,   877,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   879,   418,
       0,   419,   420,     0,   421,   422,   423,   424,   425,   426,
     427,     0,   428,   429,     0,     0,   430,   431,   882,   433,
     883,     0,   435,   436,   885,   438,   439,   440,   441,   442,
       0,     0,   443,   444,   445,   446,   447,   886,     0,   448,
     449,   450,   451,   452,   453,   454,     0,   455,   456,   457,
     458,   459,   460,   461,     0,     0,   462,     0,     0,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
       0,    94,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   588,    95,    96,    97,
      98,    99,   100,   101,   102,     0,   103,   104,   105,     0,
       0,     0,     0,     0,     0,     0,   106,   107,     0,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,     0,   120,   121,   122,   123,   124,   125,     0,   840,
     126,   127,   128,   129,   130,     0,   131,   132,   133,   134,
     843,     0,   844,     0,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,   154,   155,   156,   845,   846,   847,   848,
     849,   850,   851,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,     0,   168,     0,   169,   170,   171,   172,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
       0,     0,   182,   183,   184,   185,   186,   187,     0,   188,
     189,   190,     0,   191,   192,   193,     0,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   856,     0,   204,     0,
     205,   206,   207,   208,     0,   209,     0,   210,   211,     0,
     212,   213,   214,   215,   216,   217,     0,   218,     0,     0,
       0,   219,   220,   221,     0,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,     0,   234,   235,
     236,   237,   238,   239,     0,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,     0,   250,     0,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,     0,     0,
     261,   262,   263,   264,     0,   265,   266,   267,   864,   865,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,     0,   300,   301,   302,   303,     0,   870,   305,
     306,   307,   308,   309,     0,   310,   311,     0,     0,   312,
     313,   314,     0,     0,   315,   316,   317,   318,   319,   873,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,   331,   332,   874,   334,   335,   336,   337,   338,   339,
       0,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,     0,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,     0,   388,   389,   390,   391,   392,   877,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   879,   418,     0,   419,   420,     0,   421,
     422,   423,   424,   425,   426,   427,     0,   428,   429,     0,
       0,   430,   431,   882,   433,   883,     0,   435,   436,   885,
     438,   439,   440,   441,   442,     0,     0,   443,   444,   445,
     446,   447,   886,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,   456,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,     0,   757,  1250,   559,     0,
       0,     0,   833,     0,     0,     0,     0,     0,     0,     0,
       0,  2783,    95,    96,    97,    98,    99,   100,   101,   102,
       0,   103,   104,   105,     0,     0,     0,     0,     0,     0,
       0,   106,   107,     0,   108,   109,   110,     0,   112,   113,
     114,   758,   759,     0,   760,   761,     0,   120,   121,   122,
     123,   124,   125,     0,     0,   126,   127,   762,   763,   130,
       0,   131,   132,   133,   134,   764,     0,     0,     0,   137,
     138,   139,   140,   141,   142,     0,   144,   145,   146,     0,
     147,   148,   149,   150,   151,   152,     0,     0,   154,   155,
     156,     0,     0,     0,     0,     0,     0,     0,   158,   159,
     160,   161,   162,   163,   164,   765,   766,   167,     0,   168,
       0,   169,   170,   171,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,     0,     0,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,     0,   191,   192,
     193,     0,   194,   195,   196,   197,   767,   199,   200,   201,
     202,   768,  1251,   204,     0,   205,   206,   769,   208,     0,
     209,     0,   210,     0,     0,     0,   213,   214,   215,     0,
     217,     0,   218,     0,     0,     0,   770,   771,   221,     0,
     222,   223,   224,   225,   226,   227,   228,     0,   230,   231,
     232,   233,     0,   234,   235,   236,   237,   238,   239,     0,
     240,     0,   772,   243,   244,   245,   246,   247,   773,   774,
       0,   775,     0,   251,     0,     0,   254,     0,   256,   257,
     258,   259,   260,     0,     0,   261,     0,   263,     0,     0,
     265,   266,   267,     0,     0,   268,   269,   270,   271,   272,
     776,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   777,
       0,   778,   295,   296,   297,   298,   779,     0,   300,   301,
       0,   303,     0,   780,   305,   781,   307,   308,   309,     0,
     310,   311,  1252,     0,   312,   313,   314,     0,     0,   315,
     782,     0,   318,     0,   783,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,   331,   332,   784,   334,
     335,   785,   337,   338,   339,     0,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   786,   352,   353,
     354,   355,     0,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
       0,   373,   374,   375,   787,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,     0,   393,   788,   395,   396,   397,     0,   399,
     400,   789,   402,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   790,   416,   791,   418,
       0,   419,   420,     0,   421,     0,   423,   424,   425,   426,
     427,     0,   792,   793,     0,     0,   430,   431,   794,   433,
     795,  1253,   435,   436,   796,   438,   439,   440,   441,   442,
       0,     0,   443,   444,   445,   446,   447,     0,     0,   448,
     449,   450,   451,   452,  1142,   798,     0,   455,     0,   457,
     458,   459,   460,   461,     0,     0,   462,     0,     0,   463,
     464,   465,   466,   467,   468,   799,   800,   801,   802,   803,
     804,   805,   806,   807,   808,   809,   480,   481,   482,   483,
       0,   757,     0,     0,     0,     0,     0,  1254,  1255,  1960,
       0,     0,     0,     0,     0,     0,  1961,    95,    96,    97,
      98,    99,   100,   101,   102,     0,   103,   104,   105,     3,
       4,     0,     0,     0,     0,     0,   106,   107,     0,   108,
     109,   110,     0,   112,   113,   114,   758,   759,     0,   760,
     761,     0,   120,   121,   122,   123,   124,   125,     0,     0,
     126,   127,   762,   763,   130,     0,   131,   132,   133,   134,
     764,     0,     0,     0,   137,   138,   139,   140,   141,   142,
       0,   144,   145,   146,     0,   147,   148,   149,   150,   151,
     152,     0,     0,   154,   155,   156,     0,     0,     0,     0,
       0,     0,     0,   158,   159,   160,   161,   162,   163,   164,
     765,   766,   167,     0,   168,     0,   169,   170,   171,   172,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
       0,     0,   182,   183,   184,   185,   186,   187,     0,   188,
     189,   190,     0,   191,   192,   193,     0,   194,   195,   196,
     197,   767,   199,   200,   201,   202,   768,     0,   204,     0,
     205,   206,   769,   208,     0,   209,     0,   210,     0,     0,
       0,   213,   214,   215,     0,   217,     0,   218,     0,     0,
       0,   770,   771,   221,     0,   222,   223,   224,   225,   226,
     227,   228,     0,   230,   231,   232,   233,     0,   234,   235,
     236,   237,   238,   239,     0,   240,     0,   772,   243,   244,
     245,   246,   247,   773,   774,     0,   775,     0,   251,     0,
       0,   254,     0,   256,   257,   258,   259,   260,     0,     0,
     261,     0,   263,     0,     0,   265,   266,   267,     0,     0,
     268,   269,   270,   271,   272,   776,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   777,     0,   778,   295,   296,   297,
     298,   779,     0,   300,   301,     0,   303,     0,   780,   305,
     781,   307,   308,   309,     0,   310,   311,     0,     0,   312,
     313,   314,     0,     0,   315,   782,     0,   318,     0,   783,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,   331,   332,   784,   334,   335,   785,   337,   338,   339,
       0,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   786,   352,   353,   354,   355,     0,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,     0,   373,   374,   375,   787,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,    26,   388,   389,   390,   391,   392,     0,   393,   788,
     395,   396,   397,     0,   399,   400,   789,   402,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   790,   416,   791,   418,     0,   419,   420,    31,   421,
       0,   423,   424,   425,   426,   427,     0,   792,   793,     0,
       0,   430,   431,   794,   433,   795,     0,   435,   436,   796,
     438,   439,   440,   441,   442,     0,     0,   443,   444,   445,
     446,   447,     0,     0,   448,   449,   450,   451,   452,   797,
     798,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,    34,   463,   464,   465,   466,   467,   468,
     799,   800,   801,   802,   803,   804,   805,   806,   807,   808,
     809,   480,   481,   482,   483,     0,   510,    35,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   588,    95,    96,    97,    98,    99,   100,   101,   102,
     614,   103,   104,   105,     0,     0,     0,     0,     0,     0,
       0,   106,   107,     0,   108,   109,   110,     0,   112,   113,
     114,   115,   116,     0,   118,   119,     0,   120,   121,   122,
     123,   124,   125,     0,     0,   126,   127,   128,   129,   130,
       0,   131,   132,   133,   134,   135,     0,     0,     0,   137,
     138,   139,   140,   141,   142,     0,   144,   145,   146,     0,
     147,   148,   149,   150,   151,   152,     0,     0,   154,   155,
     156,     0,     0,     0,     0,     0,     0,     0,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,     0,   168,
       0,   169,   170,   171,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,     0,     0,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,     0,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,     0,   204,     0,   205,   206,   207,   208,     0,
     209,     0,   210,     0,     0,     0,   213,   214,   215,     0,
     217,     0,   218,     0,     0,     0,   219,   220,   221,     0,
     222,   223,   224,   225,   226,   227,   228,     0,   230,   231,
     232,   233,     0,   234,   235,   236,   237,   238,   239,     0,
     240,     0,   242,   243,   244,   245,   246,   247,   248,   249,
       0,   250,     0,   251,     0,     0,   254,     0,   256,   257,
     258,   259,   260,     0,     0,   261,     0,   263,     0,     0,
     265,   266,   267,     0,     0,   268,   269,   270,   271,   272,
     512,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   294,   295,   296,   297,   298,   299,     0,   300,   301,
       0,   303,     0,   304,   305,   306,   307,   308,   309,     0,
     310,   311,     0,     0,   312,   313,   314,     0,     0,   315,
     316,     0,   318,     0,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,   331,   332,   333,   334,
     335,   336,   337,   338,   339,     0,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,     0,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,    26,   388,   389,   390,
     391,   392,     0,   393,   394,   395,   396,   397,     0,   399,
     400,   401,   402,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   514,   416,   417,   418,
       0,   419,   420,    31,   421,     0,   423,   424,   425,   426,
     427,     0,   615,   429,     0,     0,   616,   431,   432,   433,
     434,     0,   435,   436,   437,   438,   439,   440,   441,   442,
       0,     0,   443,   444,   445,   446,   447,     0,     0,   448,
     449,   450,   451,   452,   587,   454,     0,   455,     0,   457,
     458,   459,   460,   461,     0,     0,   462,     0,    34,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
       0,   510,    35,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   588,    95,    96,    97,
      98,    99,   100,   101,   102,     0,   103,   104,   105,     0,
       0,     0,     0,     0,     0,     0,   106,   107,     0,   108,
     109,   110,     0,   112,   113,   114,   115,   116,     0,   118,
     119,     0,   120,   121,   122,   123,   124,   125,     0,     0,
     126,   127,   128,   129,   130,     0,   131,   132,   133,   134,
     135,     0,     0,     0,   137,   138,   139,   140,   141,   142,
       0,   144,   145,   146,     0,   147,   148,   149,   150,   151,
     152,     0,     0,   154,   155,   156,     0,     0,     0,     0,
       0,     0,     0,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,     0,   168,     0,   169,   170,   171,   172,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
       0,     0,   182,   183,   184,   185,   186,   187,     0,   188,
     189,   190,     0,   191,   192,   193,     0,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,     0,   204,     0,
     205,   206,   207,   208,     0,   209,     0,   210,     0,     0,
       0,   213,   214,   215,     0,   217,     0,   218,     0,     0,
       0,   219,   220,   221,     0,   222,   223,   224,   225,   226,
     227,   228,     0,   230,   231,   232,   233,     0,   234,   235,
     236,   237,   238,   239,     0,   240,     0,   242,   243,   244,
     245,   246,   247,   248,   249,     0,   250,     0,   251,     0,
       0,   254,     0,   256,   257,   258,   259,   260,     0,     0,
     261,     0,   263,     0,     0,   265,   266,   267,     0,     0,
     268,   269,   270,   271,   272,   512,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,     0,   294,   295,   296,   297,
     298,   299,     0,   300,   301,     0,   303,     0,   304,   305,
     306,   307,   308,   309,     0,   310,   311,     0,     0,   312,
     313,   314,     0,     0,   315,   316,     0,   318,     0,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,   331,   332,   333,   334,   335,   336,   337,   338,   339,
       0,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,     0,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,     0,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,    26,   388,   389,   390,   391,   392,     0,   393,   394,
     395,   396,   397,     0,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   514,   416,   417,   418,     0,   419,   420,    31,   421,
       0,   423,   424,   425,   426,   427,     0,   428,   429,     0,
       0,   430,   431,   432,   433,   434,     0,   435,   436,   437,
     438,   439,   440,   441,   442,     0,     0,   443,   444,   445,
     446,   447,     0,     0,   448,   449,   450,   451,   452,   587,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,    34,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,     0,   510,    35,   592,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   588,    95,    96,    97,    98,    99,   100,   101,   102,
       0,   103,   104,   105,     0,     0,     0,     0,     0,     0,
       0,   106,   107,     0,   108,   109,   110,     0,   112,   113,
     114,   115,   116,     0,   118,   119,     0,   120,   121,   122,
     123,   124,   125,     0,     0,   126,   127,   128,   129,   130,
       0,   131,   132,   133,   134,   135,     0,     0,     0,   137,
     138,   139,   140,   141,   142,     0,   144,   145,   146,     0,
     147,   148,   149,   150,   151,   152,     0,     0,   154,   155,
     156,     0,     0,     0,     0,     0,     0,     0,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,     0,   168,
       0,   169,   170,   171,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,     0,     0,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,     0,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,     0,   204,     0,   205,   206,   207,   208,     0,
     209,     0,   210,     0,     0,     0,   213,   214,   215,     0,
     217,     0,   218,     0,     0,     0,   219,   220,   221,     0,
     222,   223,   224,   225,   226,   227,   228,     0,   230,   231,
     232,   233,     0,   234,   235,   236,   237,   238,   239,     0,
     240,     0,   242,   243,   244,   245,   246,   247,   248,   249,
       0,   250,     0,   251,     0,     0,   254,     0,   256,   257,
     258,   259,   260,     0,     0,   261,     0,   263,     0,     0,
     265,   266,   267,     0,     0,   268,   269,   270,   271,   272,
     512,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   294,   295,   296,   297,   298,   299,     0,   300,   301,
       0,   303,     0,   304,   305,   306,   307,   308,   309,     0,
     310,   311,     0,     0,   312,   313,   314,     0,     0,   315,
     316,     0,   318,     0,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,   331,   332,   333,   334,
     335,   336,   337,   338,   339,     0,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,     0,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,     0,   393,   394,   395,   396,   397,     0,   399,
     400,   401,   402,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   514,   416,   417,   418,
       0,   419,   420,     0,   421,     0,   423,   424,   425,   426,
     427,     0,   428,   429,     0,     0,   430,   431,   432,   433,
     434,     0,   435,   436,   437,   438,   439,   440,   441,   442,
       0,     0,   443,   444,   445,   446,   447,     0,     0,   448,
     449,   450,   451,   452,   453,   454,     0,   455,     0,   457,
     458,   459,   460,   461,     0,     0,   462,     0,     0,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
       0,   510,     0,   592,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   936,    95,    96,    97,
      98,    99,   100,   101,   102,     0,   103,   104,   105,     0,
       0,     0,     0,     0,     0,     0,   106,   107,     0,   108,
     109,   110,     0,   112,   113,   114,   115,   116,     0,   118,
     119,     0,   120,   121,   122,   123,   124,   125,     0,     0,
     126,   127,   128,   129,   130,     0,   131,   132,   133,   134,
     135,     0,     0,     0,   137,   138,   139,   140,   141,   142,
       0,   144,   145,   146,     0,   147,   148,   149,   150,   151,
     152,     0,     0,   154,   155,   156,     0,     0,     0,     0,
       0,     0,     0,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,     0,   168,     0,   169,   170,   171,   172,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
       0,     0,   182,   183,   184,   185,   186,   187,     0,   188,
     189,   190,     0,   191,   192,   193,     0,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,     0,   204,     0,
     205,   206,   207,   208,     0,   209,     0,   210,     0,     0,
       0,   213,   214,   215,     0,   217,     0,   218,     0,     0,
       0,   219,   220,   221,     0,   222,   223,   224,   225,   226,
     227,   228,     0,   230,   231,   232,   233,     0,   234,   235,
     236,   237,   238,   239,     0,   240,     0,   242,   243,   244,
     245,   246,   247,   248,   249,     0,   250,     0,   251,     0,
       0,   254,     0,   256,   257,   258,   259,   260,     0,     0,
     261,     0,   263,     0,     0,   265,   266,   267,     0,     0,
     268,   269,   270,   271,   272,   512,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,     0,   294,   295,   296,   297,
     298,   299,     0,   300,   301,     0,   303,     0,   304,   305,
     306,   307,   308,   309,     0,   310,   311,     0,     0,   312,
     313,   314,     0,     0,   315,   316,     0,   318,     0,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,   331,   332,   333,   334,   335,   336,   337,   338,   339,
       0,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,     0,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,     0,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,     0,   388,   389,   390,   391,   392,     0,   393,   394,
     395,   396,   397,     0,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   514,   416,   417,   418,     0,   419,   420,     0,   421,
       0,   423,   424,   425,   426,   427,     0,   428,   429,     0,
       0,   430,   431,   432,   433,   434,     0,   435,   436,   437,
     438,   439,   440,   441,   442,     0,     0,   443,   444,   445,
     446,   447,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,     0,   510,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2594,    95,    96,    97,    98,    99,   100,   101,   102,
       0,   103,   104,   105,     0,     0,     0,     0,     0,     0,
       0,   106,   107,     0,   108,   109,   110,     0,   112,   113,
     114,   115,   116,     0,   118,   119,     0,   120,   121,   122,
     123,   124,   125,     0,     0,   126,   127,   128,   129,   130,
       0,   131,   132,   133,   134,   135,     0,     0,     0,   137,
     138,   139,   140,   141,   142,     0,   144,   145,   146,     0,
     147,   148,   149,   150,   151,   152,     0,     0,   154,   155,
     156,     0,     0,     0,     0,     0,     0,     0,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,     0,   168,
       0,   169,   170,   171,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,     0,     0,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,     0,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,     0,   204,     0,   205,   206,   207,   208,     0,
     209,     0,   210,     0,     0,     0,   213,   214,   215,     0,
     217,     0,   218,     0,     0,     0,   219,   220,   221,     0,
     222,   223,   224,   225,   226,   227,   228,     0,   230,   231,
     232,   233,     0,   234,   235,   236,   237,   238,   239,     0,
     240,     0,   242,   243,   244,   245,   246,   247,   248,   249,
       0,   250,     0,   251,     0,     0,   254,     0,   256,   257,
     258,   259,   260,     0,     0,   261,     0,   263,     0,     0,
     265,   266,   267,     0,     0,   268,   269,   270,   271,   272,
     512,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   294,   295,   296,   297,   298,   299,     0,   300,   301,
       0,   303,     0,   304,   305,   306,   307,   308,   309,     0,
     310,   311,     0,     0,   312,   313,   314,     0,     0,   315,
     316,     0,   318,     0,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,   331,   332,   333,   334,
     335,   336,   337,   338,   339,     0,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,     0,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,     0,   393,   394,   395,   396,   397,     0,   399,
     400,   401,   402,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   514,   416,   417,   418,
       0,   419,   420,     0,   421,     0,   423,   424,   425,   426,
     427,     0,   428,   429,     0,     0,   430,   431,   432,   433,
     434,     0,   435,   436,   437,   438,   439,   440,   441,   442,
       0,     0,   443,   444,   445,   446,   447,     0,     0,   448,
     449,   450,   451,   452,   453,   454,     0,   455,     0,   457,
     458,   459,   460,   461,     0,     0,   462,     0,     0,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
       0,   510,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1675,    95,    96,    97,
      98,    99,   100,   101,   102,     0,   103,   104,   105,     0,
       0,     0,     0,     0,     0,     0,   106,   107,     0,   108,
     109,   110,     0,   112,   113,   114,   115,   116,     0,   118,
     119,     0,   120,   121,   122,   123,   124,   125,     0,     0,
     126,   127,   128,   129,   130,     0,   131,   132,   133,   134,
     135,     0,     0,     0,   137,   138,   139,   140,   141,   142,
       0,   144,   145,   146,     0,   147,   148,   149,   150,   151,
     152,     0,     0,   154,   155,   156,     0,     0,     0,     0,
       0,     0,     0,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,     0,   168,     0,   169,   170,   171,   172,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
       0,     0,   182,   183,   184,   185,   186,   187,     0,   188,
     189,   190,     0,   191,   192,   193,     0,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,     0,   204,     0,
     205,   206,   207,   208,     0,   209,     0,   210,     0,     0,
       0,   213,   214,   215,     0,   217,     0,   218,     0,     0,
       0,   219,   220,   221,     0,   222,   223,   224,   225,   226,
     227,   228,     0,   230,   231,   232,   233,     0,   234,   235,
     236,   237,   238,   239,     0,   240,     0,   242,   243,   244,
     245,   246,   247,   248,   249,     0,   250,     0,   251,     0,
       0,   254,     0,   256,   257,   258,   259,   260,     0,     0,
     261,     0,   263,     0,     0,   265,   266,   267,     0,     0,
     268,   269,   270,   271,   272,   512,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,     0,   294,   295,   296,   297,
     298,   299,     0,   300,   301,     0,   303,     0,   304,   305,
     306,   307,   308,   309,     0,   310,   311,     0,     0,   312,
     313,   314,     0,     0,   315,   316,     0,   318,     0,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,   331,   332,   333,   334,   335,   336,   337,   338,   339,
       0,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,     0,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,     0,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,     0,   388,   389,   390,   391,   392,     0,   393,   394,
     395,   396,   397,     0,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   514,   416,   417,   418,     0,   419,   420,     0,   421,
       0,   423,   424,   425,   426,   427,     0,   428,   429,     0,
       0,   430,   431,   432,   433,   434,     0,   435,   436,   437,
     438,   439,   440,   441,   442,     0,     0,   443,   444,   445,
     446,   447,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,     0,   510,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1816,    95,    96,    97,    98,    99,   100,   101,   102,
       0,   103,   104,   105,     0,     0,     0,     0,     0,     0,
       0,   106,   107,     0,   108,   109,   110,     0,   112,   113,
     114,   115,   116,     0,   118,   119,     0,   120,   121,   122,
     123,   124,   125,     0,     0,   126,   127,   128,   129,   130,
       0,   131,   132,   133,   134,   135,     0,     0,     0,   137,
     138,   139,   140,   141,   142,     0,   144,   145,   146,     0,
     147,   148,   149,   150,   151,   152,     0,     0,   154,   155,
     156,     0,     0,     0,     0,     0,     0,     0,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,     0,   168,
       0,   169,   170,   171,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,     0,     0,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,     0,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,     0,   204,     0,   205,   206,   207,   208,     0,
     209,     0,   210,     0,     0,     0,   213,   214,   215,     0,
     217,     0,   218,     0,     0,     0,   219,   220,   221,     0,
     222,   223,   224,   225,   226,   227,   228,     0,   230,   231,
     232,   233,     0,   234,   235,   236,   237,   238,   239,     0,
     240,     0,   242,   243,   244,   245,   246,   247,   248,   249,
       0,   250,     0,   251,     0,     0,   254,     0,   256,   257,
     258,   259,   260,     0,     0,   261,     0,   263,     0,     0,
     265,   266,   267,     0,     0,   268,   269,   270,   271,   272,
     512,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   294,   295,   296,   297,   298,   299,     0,   300,   301,
       0,   303,     0,   304,   305,   306,   307,   308,   309,     0,
     310,   311,     0,     0,   312,   313,   314,     0,     0,   315,
     316,     0,   318,     0,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,   331,   332,   333,   334,
     335,   336,   337,   338,   339,     0,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,     0,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,     0,   393,   394,   395,   396,   397,     0,   399,
     400,   401,   402,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   514,   416,   417,   418,
       0,   419,   420,     0,   421,     0,   423,   424,   425,   426,
     427,     0,   428,   429,     0,     0,   430,   431,   432,   433,
     434,     0,   435,   436,   437,   438,   439,   440,   441,   442,
       0,     0,   443,   444,   445,   446,   447,     0,     0,   448,
     449,   450,   451,   452,   453,   454,     0,   455,     0,   457,
     458,   459,   460,   461,     0,     0,   462,     0,     0,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
       0,     0,     0,     0,  2449,  1250,   559,     0,     0,  1635,
     833,     0,     0,     0,     0,     0,  2331,  1636,  1637,  1638,
      95,    96,    97,    98,    99,   100,   101,   102,  1068,   103,
     104,   105,  1069,  1070,  1071,  1072,  1073,  1074,  1075,   106,
     107,  1076,   108,   109,   110,  2450,   112,   113,   114,     0,
     678,  2451,   680,   681,  1077,   120,   121,   122,   123,   124,
     125,  1078,  1079,   126,   127,   682,   683,   130,  1080,   131,
     132,   133,   134,     0,  1081,  2452,  1082,   137,   138,   139,
     140,   141,   142,  2453,   144,   145,   146,  1083,   147,   148,
     149,   150,   151,   152,  1084,  2454,   154,   155,   156,  1085,
    1086,  1087,  2455,  1088,  1089,  1090,   158,   159,   160,   161,
     162,   163,   164,   688,   689,   167,  1091,   168,  1092,   169,
     170,   171,   172,   173,   174,  1093,   175,   176,   177,   178,
     179,   180,   181,  1094,  1095,   182,   183,   690,   185,   186,
     187,  1096,   188,   189,   190,  1097,   191,   192,   193,  1098,
     194,   195,   196,   197,     0,   199,   200,   201,   202,     0,
    1099,   204,  1100,   205,   206,   691,   208,  1101,   209,  1102,
     210,  2456,  1103,  2457,   213,   214,   215,  2458,   217,  1104,
     218,  1105,  1106,  1107,     0,     0,   221,  1108,   222,   223,
     224,   225,   226,   227,   228,  2459,   230,   231,   232,   233,
    1109,   234,   235,   236,   237,   238,   239,  1110,   240,  2460,
       0,   243,   244,   245,   246,   247,   698,   699,  1111,   700,
    1112,   251,  2461,  2462,   254,  2463,   256,   257,   258,   259,
     260,  1113,  1114,   261,  2464,   263,  2465,  1115,   265,   266,
     267,  1116,  1117,   268,   269,   270,   271,   272,  2466,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   707,  2467,   709,
     295,   296,   297,   298,  2468,  1118,   300,   301,  2469,   303,
    1119,     0,   305,   711,   307,   308,   309,  1120,   310,   311,
    1121,  1122,  2470,   313,   314,  1123,  1124,   315,     0,  2471,
     318,  2472,     0,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,  1125,   331,   332,     0,   334,   335,     0,
     337,   338,   339,  1126,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   714,   352,   353,   354,   355,
    1127,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,  1128,   370,   371,  2473,   373,
     374,   375,   716,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,  1129,   388,   389,   390,   391,   392,
    1130,   393,  2474,   395,   396,   397,  2475,   399,   400,   719,
     402,  1131,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,  2476,   416,     0,   418,  1132,   419,
     420,  1133,   421,  2477,   423,   424,   425,   426,   427,  1134,
     722,   723,  1135,  1136,   430,   431,     0,   433,     0,  1137,
     435,   436,  2478,   438,   439,   440,   441,   442,  1138,  1139,
     443,   444,   445,   446,   447,  1140,  1141,   448,   449,   450,
     451,   452,     0,   725,  1143,   455,  2479,   457,   458,   459,
     460,   461,  1144,  1145,   462,  1146,  1147,   463,   464,   465,
     466,   467,   468,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   480,   481,   482,   483,     0,   510,
       0,  1639,  1640,  1641,  1635,  2480,  2481,  1644,  1645,  1646,
    1647,     0,  1636,  1637,  1638,    95,    96,    97,    98,    99,
     100,   101,   102,     0,   103,   104,   105,     0,     0,     0,
       0,     0,     0,     0,   106,   107,     0,   108,   109,   110,
       0,   112,   113,   114,   115,   116,     0,   118,   119,     0,
     120,   121,   122,   123,   124,   125,     0,     0,   126,   127,
     128,   129,   130,     0,   131,   132,   133,   134,   135,     0,
       0,     0,   137,   138,   139,   140,   141,   142,     0,   144,
     145,   146,     0,   147,   148,   149,   150,   151,   152,     0,
       0,   154,   155,   156,     0,     0,     0,     0,     0,     0,
       0,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,     0,   168,     0,   169,   170,   171,   172,   173,   174,
       0,   175,   176,   177,   178,   179,   180,   181,     0,     0,
     182,   183,   184,   185,   186,   187,     0,   188,   189,   190,
       0,   191,   192,   193,     0,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,     0,   204,     0,   205,   206,
     207,   208,     0,   209,     0,   210,     0,     0,     0,   213,
     214,   215,     0,   217,     0,   218,     0,     0,     0,   219,
     220,   221,     0,   222,   223,   224,   225,   226,   227,   228,
       0,   230,   231,   232,   233,     0,   234,   235,   236,   237,
     238,   239,     0,   240,     0,   242,   243,   244,   245,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,   254,
       0,   256,   257,   258,   259,   260,     0,     0,   261,     0,
     263,     0,     0,   265,   266,   267,     0,     0,   268,   269,
     270,   271,   272,   512,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,     0,   294,   295,   296,   297,   298,   299,
       0,   300,   301,     0,   303,     0,   304,   305,   306,   307,
     308,   309,     0,   310,   311,     0,     0,   312,   313,   314,
       0,     0,   315,   316,     0,   318,     0,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,   331,
     332,   333,   334,   335,   336,   337,   338,   339,     0,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,     0,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,     0,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,     0,
     388,   389,   390,   391,   392,     0,   393,   394,   395,   396,
     397,     0,   399,   400,   401,   402,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   514,
     416,   417,   418,     0,   419,   420,     0,   421,     0,   423,
     424,   425,   426,   427,     0,   428,   429,     0,     0,   430,
     431,   432,   433,   434,     0,   435,   436,   437,   438,   439,
     440,   441,   442,     0,     0,   443,   444,   445,   446,   447,
       0,     0,   448,   449,   450,   451,   452,   453,   454,     0,
     455,     0,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,     0,     0,     0,  1639,  1640,  1641,     0,
    1642,  1643,  1644,  1645,  1646,  1647,  1326,     0,     0,  1327,
       0,     0,     0,     0,  1328,  1329,  1330,     0,     0,     0,
       0,     0,     0,     0,     0,  1326,     0,     0,  1327,     0,
       0,  1331,     0,  1328,  1329,  1330,     0,     0,     0,  1333,
       0,     0,     0,     0,  1326,     0,  1334,  1327,     0,     0,
    1331,     0,  1328,  1329,  1330,     0,     0,     0,  1333,     0,
       0,     0,     0,     0,     0,  1334,     0,     0,     0,  1331,
       0,  1335,     0,  1326,     0,     0,  1327,  1333,     0,     0,
       0,  1328,  1329,  1330,  1334,     0,     0,     0,     0,     0,
    1335,     0,  1326,     0,     0,  1327,     0,     0,  1331,     0,
    1328,  1329,  1330,     0,     0,     0,  1333,     0,     0,  1335,
       0,     0,     0,  1334,     0,     0,     0,  1331,     0,     0,
       0,     0,     0,     0,     0,  1333,     0,     0,     0,     0,
       0,     0,  1334,     0,     0,     0,     0,     0,  1335,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1335,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1336,     0,     0,  1326,     0,     0,
    1327,     0,     0,     0,     0,  1328,  1329,  1330,     0,     0,
       0,     0,  1337,  1336,     0,     0,     0,  1338,     0,     0,
       0,     0,  1331,     0,     0,     0,     0,     0,     0,     0,
    1333,  1337,  1336,     0,     0,     0,  1338,  1334,     0,  1339,
    1340,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1337,     0,     0,  1341,     0,  1338,     0,     0,  1339,  1340,
       0,  1336,  1335,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1341,     0,     0,     0,     0,  1339,  1340,  1337,
    1336,     0,     0,     0,  1338,     0,     0,     0,     0,     0,
       0,  1341,  1342,     0,     0,  1343,     0,     0,  1337,     0,
       0,     0,     0,  1338,     0,     0,  1339,  1340,     0,  1344,
       0,  1342,  1345,     0,  1343,     0,     0,     0,     0,     0,
    1341,     0,     0,     0,     0,  1339,  1340,     0,  1344,     0,
    1342,  1345,     0,  1343,     0,     0,     0,     0,     0,  1341,
       0,     0,     0,     0,     0,     0,     0,  1344,     0,     0,
    1345,     0,     0,     0,     0,     0,     0,     0,     0,  1342,
       0,     0,  1343,     0,     0,  1336,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1344,     0,  1342,  1345,
       0,  1343,     0,  1337,     0,     0,     0,     0,  1338,     0,
       0,     0,     0,     0,     0,  1344,     0,     0,  1345,     0,
       0,     0,     0,  1346,     0,     0,     0,     0,     0,     0,
    1339,  1340,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1346,     0,  1341,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1346,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1342,     0,     0,  1343,     0,     0,     0,
    1346,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1344,     0,     0,  1345,     0,     0,     0,     0,     0,  1346,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1347,     0,     0,  1348,  1349,
    1350,     0,  1351,  1352,  1353,  1354,  1355,  1356,     0,     0,
       0,     0,  2542,     0,  1347,     0,     0,  1348,  1349,  1350,
       0,  1351,  1352,  1353,  1354,  1355,  1356,     0,     0,     0,
       0,  2564,     0,  1347,     0,     0,  1348,  1349,  1350,     0,
    1351,  1352,  1353,  1354,  1355,  1356,     0,     0,     0,     0,
    2728,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1347,     0,  1346,  1348,  1349,  1350,     0,  1351,
    1352,  1353,  1354,  1355,  1356,     0,     0,     0,     0,  2981,
       0,  1347,     0,     0,  1348,  1349,  1350,     0,  1351,  1352,
    1353,  1354,  1355,  1356,     0,     0,     0,     0,  2993,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1347,  1067,     0,  1348,
    1349,  1350,     0,  1351,  1352,  1353,  1354,  1355,  1356,     0,
       0,  1508,     0,    95,    96,    97,    98,    99,   100,   101,
     102,  1068,   103,   104,   105,  1069,  1070,  1071,  1072,  1073,
    1074,  1075,   106,   107,  1076,   108,   109,   110,     0,   112,
     113,   114,   758,   759,     0,   760,   761,  1077,   120,   121,
     122,   123,   124,   125,  1078,  1079,   126,   127,   762,   763,
     130,  1080,   131,   132,   133,   134,   764,  1081,     0,  1082,
     137,   138,   139,   140,   141,   142,     0,   144,   145,   146,
    1083,   147,   148,   149,   150,   151,   152,  1084,     0,   154,
     155,   156,  1085,  1086,  1087,     0,  1088,  1089,  1090,   158,
     159,   160,   161,   162,   163,   164,   765,   766,   167,  1091,
     168,  1092,   169,   170,   171,   172,   173,   174,  1093,   175,
     176,   177,   178,   179,   180,   181,  1094,  1095,   182,   183,
     184,   185,   186,   187,  1096,   188,   189,   190,  1097,   191,
     192,   193,  1098,   194,   195,   196,   197,   767,   199,   200,
     201,   202,   768,  1099,   204,  1100,   205,   206,   769,   208,
    1101,   209,  1102,   210,     0,  1103,     0,   213,   214,   215,
       0,   217,  1104,   218,  1105,  1106,  1107,   770,   771,   221,
    1108,   222,   223,   224,   225,   226,   227,   228,     0,   230,
     231,   232,   233,  1109,   234,   235,   236,   237,   238,   239,
    1110,   240,     0,   772,   243,   244,   245,   246,   247,   773,
     774,  1111,   775,  1112,   251,     0,     0,   254,     0,   256,
     257,   258,   259,   260,  1113,  1114,   261,     0,   263,     0,
    1115,   265,   266,   267,  1116,  1117,   268,   269,   270,   271,
     272,   776,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     777,     0,   778,   295,   296,   297,   298,   779,  1118,   300,
     301,     0,   303,  1119,   780,   305,   781,   307,   308,   309,
    1120,   310,   311,  1121,  1122,   312,   313,   314,  1123,  1124,
     315,   782,     0,   318,     0,   783,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,  1125,   331,   332,   784,
     334,   335,   785,   337,   338,   339,  1126,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   786,   352,
     353,   354,   355,  1127,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,  1128,   370,
     371,     0,   373,   374,   375,   787,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,  1129,   388,   389,
     390,   391,   392,  1130,   393,   788,   395,   396,   397,     0,
     399,   400,   789,   402,  1131,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   790,   416,   791,
     418,  1132,   419,   420,  1133,   421,     0,   423,   424,   425,
     426,   427,  1134,   792,   793,  1135,  1136,   430,   431,   794,
     433,   795,  1137,   435,   436,   796,   438,   439,   440,   441,
     442,  1138,  1139,   443,   444,   445,   446,   447,  1140,  1141,
     448,   449,   450,   451,   452,  1142,   798,  1143,   455,     0,
     457,   458,   459,   460,   461,  1144,  1145,   462,  1146,  1147,
     463,   464,   465,   466,   467,   468,   799,   800,   801,   802,
     803,   804,   805,   806,   807,   808,   809,   480,   481,   482,
     483,   510,     0,     0,     0,     0,     0,     0,     0,     0,
    1759,     0,     0,     0,     0,     0,     0,    95,    96,    97,
      98,    99,   100,   101,   102,     0,   103,   104,   105,     0,
       0,     0,     0,     0,     0,     0,   106,   107,     0,   108,
     109,   110,     0,   112,   113,   114,   115,   116,     0,   118,
     119,     0,   120,   121,   122,   123,   124,   125,     0,     0,
     126,   127,   128,   129,   130,     0,   131,   132,   133,   134,
     135,     0,     0,     0,   137,   138,   139,   140,   141,   142,
       0,   144,   145,   146,     0,   147,   148,   149,   150,   151,
     152,     0,     0,   154,   155,   156,     0,     0,     0,     0,
       0,     0,     0,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,     0,   168,     0,   169,   170,   171,   172,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
       0,     0,   182,   183,   184,   185,   186,   187,     0,   188,
     189,   190,     0,   191,   192,   193,     0,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,     0,   204,     0,
     205,   206,   207,   208,     0,   209,     0,   210,     0,     0,
       0,   213,   214,   215,     0,   217,     0,   218,     0,     0,
       0,   219,   220,   221,     0,   222,   223,   224,   225,   226,
     227,   228,     0,   230,   231,   232,   233,     0,   234,   235,
     236,   237,   238,   239,     0,   240,     0,   242,   243,   244,
     245,   246,   247,   248,   249,     0,   250,     0,   251,     0,
       0,   254,     0,   256,   257,   258,   259,   260,     0,     0,
     261,     0,   263,     0,     0,   265,   266,   267,     0,     0,
     268,   269,   270,   271,   272,   512,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,     0,   294,   295,   296,   297,
     298,   299,     0,   300,   301,     0,   303,     0,   304,   305,
     306,   307,   308,   309,     0,   310,   311,     0,     0,   312,
     313,   314,     0,     0,   315,   316,     0,   318,     0,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,   331,   332,   333,   334,   335,   336,   337,   338,   339,
       0,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,     0,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,     0,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,     0,   388,   389,   390,   391,   392,     0,   393,   394,
     395,   396,   397,     0,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   514,   416,   417,   418,     0,   419,   420,     0,   421,
       0,   423,   424,   425,   426,   427,     0,   428,   429,     0,
       0,   430,   431,   432,   433,   434,     0,   435,   436,   437,
     438,   439,   440,   441,   442,     0,     0,   443,   444,   445,
     446,   447,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   757,  1250,   559,     0,     0,
       0,   833,     0,     0,  2262,     0,     0,     0,     0,     0,
       0,    95,    96,    97,    98,    99,   100,   101,   102,     0,
     103,   104,   105,     0,     0,     0,     0,     0,     0,     0,
     106,   107,     0,   108,   109,   110,     0,   112,   113,   114,
     758,   759,     0,   760,   761,     0,   120,   121,   122,   123,
     124,   125,     0,     0,   126,   127,   762,   763,   130,     0,
     131,   132,   133,   134,   764,     0,     0,     0,   137,   138,
     139,   140,   141,   142,     0,   144,   145,   146,     0,   147,
     148,   149,   150,   151,   152,     0,     0,   154,   155,   156,
       0,     0,     0,     0,     0,     0,     0,   158,   159,   160,
     161,   162,   163,   164,   765,   766,   167,  1385,   168,     0,
     169,   170,   171,   172,   173,   174,     0,   175,   176,   177,
     178,   179,   180,   181,     0,     0,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,     0,   191,   192,   193,
       0,   194,   195,   196,   197,   767,   199,   200,   201,   202,
     768,  1251,   204,     0,   205,   206,   769,   208,     0,   209,
       0,   210,     0,     0,     0,   213,   214,   215,     0,   217,
       0,   218,     0,     0,     0,   770,   771,   221,     0,   222,
     223,   224,   225,   226,   227,   228,     0,   230,   231,   232,
     233,     0,   234,   235,   236,   237,   238,   239,     0,   240,
       0,   772,   243,   244,   245,   246,   247,   773,   774,     0,
     775,     0,   251,     0,     0,   254,     0,   256,   257,   258,
     259,   260,     0,     0,   261,     0,   263,     0,     0,   265,
     266,   267,     0,     0,   268,   269,   270,   271,   272,   776,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   777,     0,
     778,   295,   296,   297,   298,   779,     0,   300,   301,     0,
     303,     0,   780,   305,   781,   307,   308,   309,     0,   310,
     311,  1252,     0,   312,   313,   314,     0,     0,   315,   782,
       0,   318,     0,   783,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,   331,   332,   784,   334,   335,
     785,   337,   338,   339,     0,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   786,   352,   353,   354,
     355,     0,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,     0,   370,   371,     0,
     373,   374,   375,   787,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,     0,   388,   389,   390,   391,
     392,     0,   393,   788,   395,   396,   397,     0,   399,   400,
     789,   402,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   790,   416,   791,   418,     0,
     419,   420,     0,   421,     0,   423,   424,   425,   426,   427,
       0,   792,   793,     0,     0,   430,   431,   794,   433,   795,
    1253,   435,   436,   796,   438,   439,   440,   441,   442,     0,
       0,   443,   444,   445,   446,   447,     0,     0,   448,   449,
     450,   451,   452,  1142,   798,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   480,   481,   482,   483,   757,
    1250,   559,     0,     0,     0,   833,  1254,  1255,     0,     0,
       0,     0,     0,     0,     0,    95,    96,    97,    98,    99,
     100,   101,   102,     0,   103,   104,   105,     0,     0,     0,
       0,     0,     0,     0,   106,   107,     0,   108,   109,   110,
       0,   112,   113,   114,   758,   759,     0,   760,   761,     0,
     120,   121,   122,   123,   124,   125,     0,     0,   126,   127,
     762,   763,   130,     0,   131,   132,   133,   134,   764,     0,
       0,     0,   137,   138,   139,   140,   141,   142,     0,   144,
     145,   146,     0,   147,   148,   149,   150,   151,   152,     0,
       0,   154,   155,   156,     0,     0,     0,     0,     0,     0,
       0,   158,   159,   160,   161,   162,   163,   164,   765,   766,
     167,  1387,   168,     0,   169,   170,   171,   172,   173,   174,
       0,   175,   176,   177,   178,   179,   180,   181,     0,     0,
     182,   183,   184,   185,   186,   187,     0,   188,   189,   190,
       0,   191,   192,   193,     0,   194,   195,   196,   197,   767,
     199,   200,   201,   202,   768,  1251,   204,     0,   205,   206,
     769,   208,     0,   209,     0,   210,     0,     0,     0,   213,
     214,   215,     0,   217,     0,   218,     0,     0,     0,   770,
     771,   221,     0,   222,   223,   224,   225,   226,   227,   228,
       0,   230,   231,   232,   233,     0,   234,   235,   236,   237,
     238,   239,     0,   240,     0,   772,   243,   244,   245,   246,
     247,   773,   774,     0,   775,     0,   251,     0,     0,   254,
       0,   256,   257,   258,   259,   260,     0,     0,   261,     0,
     263,     0,     0,   265,   266,   267,     0,     0,   268,   269,
     270,   271,   272,   776,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   777,     0,   778,   295,   296,   297,   298,   779,
       0,   300,   301,     0,   303,     0,   780,   305,   781,   307,
     308,   309,     0,   310,   311,  1252,     0,   312,   313,   314,
       0,     0,   315,   782,     0,   318,     0,   783,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,   331,
     332,   784,   334,   335,   785,   337,   338,   339,     0,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     786,   352,   353,   354,   355,     0,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,     0,   373,   374,   375,   787,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,     0,
     388,   389,   390,   391,   392,     0,   393,   788,   395,   396,
     397,     0,   399,   400,   789,   402,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   790,
     416,   791,   418,     0,   419,   420,     0,   421,     0,   423,
     424,   425,   426,   427,     0,   792,   793,     0,     0,   430,
     431,   794,   433,   795,  1253,   435,   436,   796,   438,   439,
     440,   441,   442,     0,     0,   443,   444,   445,   446,   447,
       0,     0,   448,   449,   450,   451,   452,  1142,   798,     0,
     455,     0,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   799,   800,
     801,   802,   803,   804,   805,   806,   807,   808,   809,   480,
     481,   482,   483,   757,  1250,   559,     0,     0,     0,   833,
    1254,  1255,     0,     0,     0,     0,     0,     0,     0,    95,
      96,    97,    98,    99,   100,   101,   102,     0,   103,   104,
     105,     0,     0,     0,     0,     0,     0,     0,   106,   107,
       0,   108,   109,   110,     0,   112,   113,   114,   758,   759,
       0,   760,   761,     0,   120,   121,   122,   123,   124,   125,
       0,     0,   126,   127,   762,   763,   130,     0,   131,   132,
     133,   134,   764,     0,     0,     0,   137,   138,   139,   140,
     141,   142,     0,   144,   145,   146,     0,   147,   148,   149,
     150,   151,   152,     0,     0,   154,   155,   156,     0,     0,
       0,     0,     0,     0,     0,   158,   159,   160,   161,   162,
     163,   164,   765,   766,   167,     0,   168,     0,   169,   170,
     171,   172,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,     0,     0,   182,   183,   184,   185,   186,   187,
       0,   188,   189,   190,     0,   191,   192,   193,     0,   194,
     195,   196,   197,   767,   199,   200,   201,   202,   768,  1251,
     204,     0,   205,   206,   769,   208,     0,   209,     0,   210,
       0,     0,     0,   213,   214,   215,     0,   217,     0,   218,
       0,     0,     0,   770,   771,   221,     0,   222,   223,   224,
     225,   226,   227,   228,     0,   230,   231,   232,   233,     0,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   772,
     243,   244,   245,   246,   247,   773,   774,     0,   775,     0,
     251,     0,     0,   254,     0,   256,   257,   258,   259,   260,
       0,     0,   261,     0,   263,     0,     0,   265,   266,   267,
       0,     0,   268,   269,   270,   271,   272,   776,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   777,     0,   778,   295,
     296,   297,   298,   779,     0,   300,   301,     0,   303,     0,
     780,   305,   781,   307,   308,   309,     0,   310,   311,  1252,
       0,   312,   313,   314,     0,     0,   315,   782,     0,   318,
       0,   783,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,     0,   331,   332,   784,   334,   335,   785,   337,
     338,   339,     0,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   786,   352,   353,   354,   355,     0,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,     0,   370,   371,     0,   373,   374,
     375,   787,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,     0,   388,   389,   390,   391,   392,     0,
     393,   788,   395,   396,   397,     0,   399,   400,   789,   402,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   790,   416,   791,   418,     0,   419,   420,
       0,   421,     0,   423,   424,   425,   426,   427,     0,   792,
     793,     0,     0,   430,   431,   794,   433,   795,  1253,   435,
     436,   796,   438,   439,   440,   441,   442,     0,     0,   443,
     444,   445,   446,   447,     0,     0,   448,   449,   450,   451,
     452,  1142,   798,     0,   455,     0,   457,   458,   459,   460,
     461,     0,     0,   462,     0,     0,   463,   464,   465,   466,
     467,   468,   799,   800,   801,   802,   803,   804,   805,   806,
     807,   808,   809,   480,   481,   482,   483,     0,  1326,     0,
       0,  1327,     0,     0,  1254,  1255,  1328,  1329,  1330,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1331,     0,     0,     0,  1775,     0,     0,
       0,  1333,  1326,     0,     0,  1327,     0,     0,  1334,     0,
    1328,  1329,  1330,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1331,     0,     0,
       0,     0,     0,  1335,     0,  1333,     0,     0,     0,     0,
       0,     0,  1334,     0,     0,  1326,     0,     0,  1327,     0,
       0,     0,     0,  1328,  1329,  1330,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1335,     0,     0,
    1331,     0,     0,     0,     0,     0,     0,     0,  1333,     0,
       0,     0,     0,     0,  1776,  1334,     0,     0,     0,     0,
       0,     0,  1326,     0,     0,  1327,     0,     0,     0,     0,
    1328,  1329,  1330,     0,     0,     0,     0,     0,     0,     0,
    1335,     0,     0,     0,     0,     0,     0,  1331,     0,     0,
    1984,     0,     0,     0,     0,  1333,     0,     0,     0,     0,
       0,     0,  1334,     0,     0,     0,  1336,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1337,     0,     0,  1335,     0,  1338,
    2022,     0,     0,     0,     0,  2023,     0,     0,     0,     0,
    1336,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1339,  1340,     0,     0,     0,     0,     0,  1337,     0,
       0,     0,     0,  1338,     0,  1341,     0,     0,     0,     0,
       0,     0,  3064,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1336,     0,  1339,  1340,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1341,
       0,  1337,     0,     0,  1342,     0,  1338,  1343,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1344,     0,     0,  1345,     0,     0,     0,  1339,  1340,
    1336,     0,     0,     0,     0,     0,     0,     0,  1342,     0,
       0,  1343,  1341,     0,     0,     0,     0,     0,  1337,     0,
       0,     0,     0,  1338,     0,  1344,     0,     0,  1345,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1339,  1340,     0,     0,     0,
       0,  1342,     0,     0,  1343,     0,     0,     0,     0,  1341,
       0,     0,     0,     0,     0,     0,  1326,     0,  1344,  1327,
       0,  1345,     0,     0,  1328,  1329,  1330,     0,     0,     0,
       0,     0,     0,     0,     0,  1346,     0,     0,     0,     0,
       0,  1331,     0,     0,  3065,     0,     0,     0,  1342,  1333,
       0,  1343,     0,     0,     0,     0,  1334,     0,     0,     0,
       0,     0,     0,  1326,     0,  1344,  1327,     0,  1345,  1346,
       0,  1328,  1329,  1330,     0,     0,     0,     0,     0,     0,
       0,  1335,     0,     0,     0,     0,     0,     0,  1331,     0,
       0,  2027,     0,     0,     0,  1777,  1333,     0,     0,     0,
       0,     0,     0,  1334,     0,     0,     0,     0,     0,     0,
       0,     0,  1346,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1335,     0,
       0,     0,     0,     0,     0,     0,     0,  1347,     0,     0,
    1348,  1349,  1350,     0,  1351,  1352,  1353,  1354,  1355,  1356,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1346,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1347,     0,     0,  1348,  1349,  1350,     0,  1351,  1352,
    1353,  1354,  1355,  1356,  1336,     0,     0,  1326,     0,     0,
    1327,     0,     0,     0,     0,  1328,  1329,  1330,     0,     0,
       0,     0,  1337,     0,     0,     0,     0,  1338,     0,     0,
       0,     0,  1331,     0,  1347,     0,     0,  1348,  1349,  1350,
    1333,  1351,  1352,  1353,  1354,  1355,  1356,  1334,     0,  1339,
    1340,  1336,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1341,     0,     0,     0,     0,     0,  1337,
       0,     0,  1335,     0,  1338,     0,     0,     0,     0,     0,
       0,  1347,     0,     0,  1348,  1349,  1350,     0,  1351,  1352,
    1353,  1354,  1355,  1356,     0,     0,  1339,  1340,     0,     0,
       0,     0,  1342,     0,     0,  1343,     0,     0,     0,     0,
    1341,     0,     0,     0,     0,     0,     0,     0,     0,  1344,
       0,     0,  1345,  1326,     0,     0,  1327,     0,     0,     0,
       0,  1328,  1329,  1330,     0,     0,     0,     0,     0,     0,
    1996,     0,     0,     0,     0,     0,     0,     0,  1331,  1342,
       0,  2034,  1343,     0,     0,     0,  1333,     0,     0,     0,
       0,     0,     0,  1334,     0,     0,  1344,     0,     0,  1345,
    2032,     0,     0,     0,     0,  1336,     0,  1326,     0,     0,
    1327,     0,     0,     0,     0,  1328,  1329,  1330,  1335,     0,
       0,     0,     0,  1337,     0,     0,     0,     0,  1338,     0,
       0,     0,  1331,     0,     0,     0,     0,     0,     0,     0,
    1333,     0,     0,  1346,     0,     0,     0,  1334,     0,     0,
    1339,  1340,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1341,     0,     0,     0,     0,     0,
       0,     0,  1335,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1326,     0,     0,  1327,
    1346,     0,     0,     0,  1328,  1329,  1330,     0,     0,     0,
       0,     0,     0,  1342,     0,     0,  1343,     0,     0,     0,
       0,  1331,     0,     0,  2308,     0,     0,     0,     0,  1333,
    1344,  1336,     0,  1345,     0,     0,  1334,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1337,
       0,     0,     0,     0,  1338,  1347,     0,     0,  1348,  1349,
    1350,  1335,  1351,  1352,  1353,  1354,  1355,  1356,     0,     0,
       0,     0,     0,     0,     0,     0,  1339,  1340,     0,     0,
       0,     0,     0,     0,     0,  1336,     0,     0,     0,     0,
    1341,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1347,  1337,     0,  1348,  1349,  1350,  1338,  1351,
    1352,  1353,  1354,  1355,  1356,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1346,     0,     0,     0,     0,  1342,
    1339,  1340,  1343,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1341,     0,  1344,     0,  1326,  1345,
       0,  1327,     0,     0,     0,     0,  1328,  1329,  1330,     0,
       0,     0,     0,     0,  1336,     0,     0,     0,     0,     0,
       0,     0,     0,  1331,     0,     0,     0,     0,     0,     0,
       0,  1333,  1337,  1342,     0,     0,  1343,  1338,  1334,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1344,     0,     0,  1345,     0,     0,     0,     0,     0,  1339,
    1340,     0,     0,  1335,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1341,     0,     0,  1347,     0,     0,  1348,
    1349,  1350,     0,  1351,  1352,  1353,  1354,  1355,  1356,     0,
    1346,  1326,     0,     0,  1327,     0,     0,     0,     0,  1328,
    1329,  1330,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1342,     0,     0,  1343,  1331,     0,     0,     0,
       0,     0,     0,     0,  1333,  1326,     0,     0,  1327,  1344,
       0,  1334,  1345,  1328,  1329,  1330,     0,     0,     0,     0,
       0,     0,     0,     0,  1346,     0,     0,     0,     0,     0,
    1331,     0,     0,     0,  1326,     0,  1335,  1327,  1333,     0,
       0,     0,  1328,  1329,  1330,  1334,  1336,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2266,     0,     0,
       0,     0,     0,     0,  1337,     0,     0,  1333,     0,  1338,
    1335,     0,  1347,     0,  1334,  1348,  1349,  1350,     0,  1351,
    1352,  1353,  1354,  1355,  1356,     0,     0,     0,     0,     0,
       0,  1339,  1340,     0,     0,     0,     0,     0,     0,  1335,
       0,     0,     0,  1346,     0,  1341,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1347,     0,     0,  1348,
    1349,  1350,     0,  1351,  1352,  1353,  1354,  1355,  1356,  1336,
       0,     0,     0,     0,  1342,     0,     0,  1343,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1337,     0,     0,
       0,  1344,  1338,     0,  1345,     0,     0,     0,     0,     0,
       0,     0,     0,  1336,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1339,  1340,     0,     0,     0,     0,
       0,  1337,     0,     0,     0,     0,  1338,     0,  1341,     0,
       0,     0,  1336,     0,     0,  1347,     0,     0,  1348,  1349,
    1350,     0,  1351,  1352,  1353,  1354,  1355,  1356,  1339,  1340,
    1337,     0,     0,     0,     0,  1338,     0,     0,     0,     0,
       0,     0,  1341,     0,     0,     0,     0,  1342,     0,     0,
    1343,     0,     0,     0,     0,     0,     0,  1339,  1340,     0,
       0,     0,     0,     0,  1344,  1346,     0,  1345,     0,     0,
       0,  1341,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1342,     0,     0,  1343,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1342,     0,     0,  1343,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1344,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1346,     0,
       0,     0,     0,     0,     0,     0,     0,  1347,     0,     0,
    1348,  1349,  1350,     0,  1351,  1352,  1353,  1354,  1355,  1356,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1346,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1346,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1347,     0,     0,  1348,  1349,  1350,     0,  1351,  1352,  1353,
    1354,  1792,  1356,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1347,     0,     0,  1348,  1349,  1350,
       0,  1351,  1352,  1353,  1354,  1355,  1356,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1067,     0,  1694,  1347,     0,     0,  1348,  1349,  1350,     0,
    1351,  1352,  1353,  1354,  1355,  1356,    95,    96,    97,    98,
      99,   100,   101,   102,  1068,   103,   104,   105,  1069,  1070,
    1071,  1072,  1073,  1074,  1075,   106,   107,  1076,   108,   109,
     110,     0,   112,   113,   114,   758,   759,     0,   760,   761,
    1077,   120,   121,   122,   123,   124,   125,  1078,  1079,   126,
     127,   762,   763,   130,  1080,   131,   132,   133,   134,   764,
    1081,     0,  1082,   137,   138,   139,   140,   141,   142,     0,
     144,   145,   146,  1083,   147,   148,   149,   150,   151,   152,
    1084,     0,   154,   155,   156,  1085,  1086,  1087,     0,  1088,
    1089,  1090,   158,   159,   160,   161,   162,   163,   164,   765,
     766,   167,  1091,   168,  1092,   169,   170,   171,   172,   173,
     174,  1093,   175,   176,   177,   178,   179,   180,   181,  1094,
    1095,   182,   183,   184,   185,   186,   187,  1096,   188,   189,
     190,  1097,   191,   192,   193,  1098,   194,   195,   196,   197,
     767,   199,   200,   201,   202,   768,  1099,   204,  1100,   205,
     206,   769,   208,  1101,   209,  1102,   210,     0,  1103,     0,
     213,   214,   215,     0,   217,  1104,   218,  1105,  1106,  1107,
     770,   771,   221,  1108,   222,   223,   224,   225,   226,   227,
     228,     0,   230,   231,   232,   233,  1109,   234,   235,   236,
     237,   238,   239,  1110,   240,     0,   772,   243,   244,   245,
     246,   247,   773,   774,  1111,   775,  1112,   251,     0,     0,
     254,     0,   256,   257,   258,   259,   260,  1113,  1114,   261,
       0,   263,     0,  1115,   265,   266,   267,  1116,  1117,   268,
     269,   270,   271,   272,   776,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   777,     0,   778,   295,   296,   297,   298,
     779,  1118,   300,   301,     0,   303,  1119,   780,   305,   781,
     307,   308,   309,  1120,   310,   311,  1121,  1122,   312,   313,
     314,  1123,  1124,   315,   782,     0,   318,     0,   783,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,  1125,
     331,   332,   784,   334,   335,   785,   337,   338,   339,  1126,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   786,   352,   353,   354,   355,  1127,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,  1128,   370,   371,     0,   373,   374,   375,   787,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
    1129,   388,   389,   390,   391,   392,  1130,   393,   788,   395,
     396,   397,     0,   399,   400,   789,   402,  1131,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     790,   416,   791,   418,  1132,   419,   420,  1133,   421,     0,
     423,   424,   425,   426,   427,  1134,   792,   793,  1135,  1136,
     430,   431,   794,   433,   795,  1137,   435,   436,   796,   438,
     439,   440,   441,   442,  1138,  1139,   443,   444,   445,   446,
     447,  1140,  1141,   448,   449,   450,   451,   452,  1142,   798,
    1143,   455,     0,   457,   458,   459,   460,   461,  1144,  1145,
     462,  1146,  1147,   463,   464,   465,   466,   467,   468,   799,
     800,   801,   802,   803,   804,   805,   806,   807,   808,   809,
     480,   481,   482,   483,  1067,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      95,    96,    97,    98,    99,   100,   101,   102,  1068,   103,
     104,   105,  1069,  1070,  1071,  1072,  1073,  1074,  1075,   106,
     107,  1076,   108,   109,   110,     0,   112,   113,   114,   758,
     759,     0,   760,   761,  1077,   120,   121,   122,   123,   124,
     125,  1078,  1079,   126,   127,   762,   763,   130,  1080,   131,
     132,   133,   134,   764,  1081,     0,  1082,   137,   138,   139,
     140,   141,   142,     0,   144,   145,   146,  1083,   147,   148,
     149,   150,   151,   152,  1084,     0,   154,   155,   156,  1085,
    1086,  1087,     0,  1088,  1089,  1090,   158,   159,   160,   161,
     162,   163,   164,   765,   766,   167,  1091,   168,  1092,   169,
     170,   171,   172,   173,   174,  1093,   175,   176,   177,   178,
     179,   180,   181,  1094,  1095,   182,   183,   184,   185,   186,
     187,  1096,   188,   189,   190,  1097,   191,   192,   193,  1098,
     194,   195,   196,   197,   767,   199,   200,   201,   202,   768,
    1099,   204,  1100,   205,   206,   769,   208,  1101,   209,  1102,
     210,     0,  1103,     0,   213,   214,   215,     0,   217,  1104,
     218,  1105,  1106,  1107,   770,   771,   221,  1108,   222,   223,
     224,   225,   226,   227,   228,     0,   230,   231,   232,   233,
    1109,   234,   235,   236,   237,   238,   239,  1110,   240,     0,
     772,   243,   244,   245,   246,   247,   773,   774,  1111,   775,
    1112,   251,     0,     0,   254,     0,   256,   257,   258,   259,
     260,  1113,  1114,   261,     0,   263,     0,  1115,   265,   266,
     267,  1116,  1117,   268,   269,   270,   271,   272,   776,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   777,     0,   778,
     295,   296,   297,   298,   779,  1118,   300,   301,     0,   303,
    1119,   780,   305,   781,   307,   308,   309,  1120,   310,   311,
    1121,  1122,   312,   313,   314,  1123,  1124,   315,   782,     0,
     318,     0,   783,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,  1125,   331,   332,   784,   334,   335,   785,
     337,   338,   339,  1126,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   786,   352,   353,   354,   355,
    1127,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,  1128,   370,   371,     0,   373,
     374,   375,   787,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,  1129,   388,   389,   390,   391,   392,
    1130,   393,   788,   395,   396,   397,     0,   399,   400,   789,
     402,  1131,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   790,   416,   791,   418,  1132,   419,
     420,  1133,   421,     0,   423,   424,   425,   426,   427,  1134,
     792,   793,  1135,  1136,   430,   431,   794,   433,   795,  1137,
     435,   436,   796,   438,   439,   440,   441,   442,  1138,  1139,
     443,   444,   445,   446,   447,  1140,  1141,   448,   449,   450,
     451,   452,  1142,   798,  1143,   455,     0,   457,   458,   459,
     460,   461,  1144,  1145,   462,  1146,  1147,   463,   464,   465,
     466,   467,   468,   799,   800,   801,   802,   803,   804,   805,
     806,   807,   808,   809,   480,   481,   482,   483,  1067,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    95,    96,    97,    98,  1841,   100,
     101,   102,  1068,   103,   104,   105,  1069,  1070,  1071,  1072,
    1073,  1074,  1075,   106,   107,  1076,   108,   109,   110,     0,
     112,   113,   114,   758,   759,     0,   760,   761,  1077,   120,
     121,   122,   123,   124,   125,  1078,  1079,   126,   127,   762,
     763,   130,  1080,   131,   132,   133,   134,   764,  1081,     0,
    1082,   137,   138,   139,   140,   141,   142,     0,   144,   145,
     146,  1083,   147,   148,   149,   150,   151,   152,  1084,     0,
     154,   155,   156,  1085,  1086,  1087,     0,  1088,  1089,  1090,
     158,   159,   160,   161,   162,   163,   164,   765,   766,   167,
    1091,   168,  1092,   169,   170,   171,   172,   173,   174,  1093,
     175,   176,   177,   178,   179,   180,   181,  1094,  1095,   182,
     183,   184,  1842,   186,   187,  1096,   188,   189,   190,  1097,
     191,   192,   193,  1098,   194,   195,   196,   197,   767,   199,
     200,   201,   202,   768,  1099,   204,  1100,   205,   206,   769,
     208,  1101,   209,  1102,   210,     0,  1103,     0,   213,   214,
     215,     0,   217,  1104,   218,  1105,  1106,  1107,   770,   771,
     221,  1108,   222,   223,   224,   225,   226,   227,   228,     0,
     230,   231,   232,   233,  1109,   234,   235,   236,   237,   238,
     239,  1110,   240,     0,   772,   243,   244,   245,   246,   247,
     773,   774,  1111,   775,  1112,   251,     0,     0,   254,     0,
     256,   257,   258,   259,   260,  1113,  1114,   261,     0,   263,
       0,  1115,   265,   266,   267,  1116,  1117,   268,   269,   270,
     271,   272,   776,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   777,     0,   778,   295,   296,   297,   298,   779,  1118,
     300,   301,     0,   303,  1119,   780,   305,   781,   307,   308,
     309,  1120,   310,   311,  1121,  1122,   312,   313,   314,  1123,
    1124,   315,   782,     0,   318,     0,   783,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,  1125,   331,   332,
     784,   334,   335,   785,   337,   338,   339,  1126,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   786,
     352,   353,   354,   355,  1127,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,  1128,
     370,   371,     0,   373,   374,   375,   787,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,  1129,   388,
     389,   390,   391,   392,  1130,  1843,   788,   395,   396,   397,
       0,   399,   400,   789,   402,  1131,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   790,   416,
     791,   418,  1132,   419,   420,  1133,   421,     0,   423,   424,
     425,   426,   427,  1134,   792,   793,  1135,  1136,   430,   431,
     794,   433,   795,  1137,   435,   436,   796,   438,   439,   440,
     441,   442,  1138,  1139,   443,   444,   445,   446,   447,  1140,
    1141,   448,   449,   450,   451,   452,  1142,   798,  1143,   455,
       0,   457,   458,   459,   460,   461,  1144,  1145,   462,  1146,
    1147,   463,   464,   465,   466,   467,   468,   799,   800,   801,
     802,   803,   804,   805,   806,   807,   808,   809,   480,   481,
     482,   483,    94,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    95,    96,
      97,    98,    99,   100,   101,   102,     0,   103,   104,   105,
       0,     0,     0,     0,     0,     0,     0,   106,   107,     0,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,     0,   120,   121,   122,   123,   124,   125,     0,
     840,   126,   127,   128,   129,   130,     0,   131,   132,   133,
     134,   843,     0,   844,     0,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,     0,   147,   148,   149,   150,
     151,   152,     0,   153,   154,   155,   156,   845,   846,   847,
     848,   849,   850,   851,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,     0,   168,     0,   169,   170,   171,
     172,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,     0,     0,   182,   183,   184,   185,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   856,     0,   204,
       0,   205,   206,   207,   208,     0,   209,     0,   210,   211,
       0,   212,   213,   214,   215,   216,   217,     0,   218,     0,
       0,     0,   219,   220,   221,     0,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,     0,   234,
     235,   236,   237,   238,   239,     0,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,     0,   250,     0,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,     0,
       0,   261,   262,   263,   264,     0,   265,   266,   267,   864,
     865,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,     0,   300,   301,   302,   303,     0,   870,
     305,   306,   307,   308,   309,     0,   310,   311,     0,     0,
     312,   313,   314,     0,     0,   315,   316,   317,   318,   319,
     873,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,   331,   332,   874,   334,   335,   336,   337,   338,
     339,     0,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,     0,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,     0,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,     0,   388,   389,   390,   391,   392,   877,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   879,   418,     0,   419,   420,     0,
     421,   422,   423,   424,   425,   426,   427,     0,   428,   429,
       0,     0,   430,   431,   882,   433,   883,     0,   435,   436,
     885,   438,   439,   440,   441,   442,     0,     0,   443,   444,
     445,   446,   447,   886,     0,   448,   449,   450,   451,   452,
     453,   454,     0,   455,   456,   457,   458,   459,   460,   461,
       0,     0,   462,     0,     0,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,    94,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    95,    96,    97,    98,    99,   100,   101,   102,
       0,   103,   104,   105,     0,     0,     0,     0,     0,     0,
       0,   106,   107,     0,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,     0,   120,   121,   122,
     123,   124,   125,     0,     0,   126,   127,   128,   129,   130,
       0,   131,   132,   133,   134,   135,     0,   136,     0,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,     0,
     147,   148,   149,   150,   151,   152,     0,   153,   154,   155,
     156,     0,     0,     0,   157,     0,     0,     0,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,     0,   168,
       0,   169,   170,   171,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,     0,     0,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,     0,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,     0,   204,     0,   205,   206,   207,   208,     0,
     209,     0,   210,   211,     0,   212,   213,   214,   215,   216,
     217,     0,   218,     0,     0,     0,   219,   220,   221,     0,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,     0,   234,   235,   236,   237,   238,   239,     0,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
       0,   250,     0,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,     0,     0,   261,   262,   263,   264,     0,
     265,   266,   267,     0,     0,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,     0,   300,   301,
     302,   303,     0,   304,   305,   306,   307,   308,   309,     0,
     310,   311,     0,     0,   312,   313,   314,     0,     0,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,   331,   332,   333,   334,
     335,   336,   337,   338,   339,     0,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,     0,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,     0,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
       0,   419,   420,     0,   421,   422,   423,   424,   425,   426,
     427,     0,   428,   429,     0,     0,   430,   431,   432,   433,
     434,     0,   435,   436,   437,   438,   439,   440,   441,   442,
       0,     0,   443,   444,   445,   446,   447,     0,     0,   448,
     449,   450,   451,   452,   453,   454,     0,   455,   456,   457,
     458,   459,   460,   461,     0,     0,   462,     0,     0,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     510,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    95,    96,    97,    98,
      99,   100,   101,   102,     0,   103,   104,   105,     0,     0,
       0,     0,     0,     0,     0,   106,   107,     0,   108,   109,
     110,     0,   112,   113,   114,   115,   116,     0,   118,   119,
       0,   120,   121,   122,   123,   124,   125,     0,     0,   126,
     127,   128,   129,   130,  1446,   131,   132,   133,   134,   135,
       0,     0,  1447,   137,   138,   139,   140,   141,   142,     0,
     144,   145,   146,  1448,   147,   148,   149,   150,   151,   152,
       0,     0,   154,   155,   156,     0,     0,     0,     0,     0,
       0,     0,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,     0,
       0,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,     0,   204,     0,   205,
     206,   207,   208,     0,   209,  1449,   210,     0,     0,     0,
     213,   214,   215,     0,   217,     0,   218,     0,     0,     0,
     219,   220,   221,     0,   222,   223,   224,   225,   226,  1450,
     228,     0,   230,   231,   232,   233,     0,   234,   235,   236,
     237,   238,   239,     0,   240,     0,   242,   243,   244,   245,
     246,   247,   248,   249,     0,   250,     0,   251,     0,     0,
     254,     0,   256,   257,   258,   259,   260,     0,     0,   261,
       0,   263,     0,     0,   265,   266,   267,     0,     0,   268,
     269,   270,   271,   272,   512,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,     0,   294,   295,   296,   297,   298,
     299,     0,   300,   301,     0,   303,     0,   304,   305,   306,
     307,   308,   309,     0,   310,   311,     0,     0,   312,   313,
     314,     0,     0,   315,   316,     0,   318,     0,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,  1451,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,     0,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,     0,   370,   371,     0,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
       0,   388,   389,   390,   391,   392,     0,   393,   394,   395,
     396,   397,     0,   399,   400,   401,   402,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     514,   416,   417,   418,     0,   419,   420,     0,   421,     0,
     423,   424,   425,   426,   427,     0,   428,   429,     0,     0,
     430,   431,   432,   433,   434,     0,   435,   436,   437,   438,
     439,   440,   441,   442,     0,  1452,   443,   444,   445,   446,
     447,     0,     0,   448,   449,   450,   451,   452,   453,   454,
       0,   455,     0,   457,   458,   459,   460,   461,     0,     0,
     462,     0,     0,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   510,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      95,    96,    97,    98,    99,   100,   101,   102,     0,   103,
     104,   105,     0,     0,     0,     0,     0,     0,     0,   106,
     107,     0,   108,   109,   110,     0,   112,   113,   114,   115,
     116,     0,   118,   119,     0,   120,   121,   122,   123,   124,
     125,     0,     0,   126,   127,   128,   129,   130,  1446,   131,
     132,   133,   134,   135,     0,     0,     0,   137,   138,   139,
     140,   141,   142,     0,   144,   145,   146,  1448,   147,   148,
     149,   150,   151,   152,     0,     0,   154,   155,   156,     0,
       0,     0,     0,     0,     0,     0,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,     0,   168,     0,   169,
     170,   171,   172,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,     0,     0,   182,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
       0,   204,     0,   205,   206,   207,   208,     0,   209,  1449,
     210,     0,     0,     0,   213,   214,   215,     0,   217,     0,
     218,     0,     0,     0,   219,   220,   221,     0,   222,   223,
     224,   225,   226,   227,   228,     0,   230,   231,   232,   233,
       0,   234,   235,   236,   237,   238,   239,     0,   240,     0,
     242,   243,   244,   245,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,   254,     0,   256,   257,   258,   259,
     260,     0,     0,   261,     0,   263,  1912,     0,   265,   266,
     267,     0,     0,   268,   269,   270,   271,   272,   512,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,     0,   294,
     295,   296,   297,   298,   299,     0,   300,   301,     0,   303,
       0,   304,   305,   306,   307,   308,   309,     0,   310,   311,
       0,     0,   312,   313,   314,     0,     0,   315,   316,     0,
     318,     0,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,   331,   332,   333,   334,   335,   336,
     337,   338,   339,  1451,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,     0,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
       0,   393,   394,   395,   396,   397,     0,   399,   400,   401,
     402,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   514,   416,   417,   418,     0,   419,
     420,     0,   421,     0,   423,   424,   425,   426,   427,     0,
     428,   429,     0,     0,   430,   431,   432,   433,   434,     0,
     435,   436,   437,   438,   439,   440,   441,   442,     0,  1452,
     443,   444,   445,   446,   447,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   757,     0,
     559,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    95,    96,    97,    98,    99,   100,
     101,   102,     0,   103,   104,   105,     0,     0,     0,     0,
       0,     0,     0,   106,   107,     0,   108,   109,   110,     0,
     112,   113,   114,   758,   759,     0,   760,   761,     0,   120,
     121,   122,   123,   124,   125,     0,     0,   126,   127,   762,
     763,   130,     0,   131,   132,   133,   134,   764,     0,     0,
       0,   137,   138,   139,   140,   141,   142,     0,   144,   145,
     146,     0,   147,   148,   149,   150,   151,   152,     0,     0,
     154,   155,   156,     0,     0,     0,     0,     0,     0,     0,
     158,   159,   160,   161,   162,   163,   164,   765,   766,   167,
       0,   168,     0,   169,   170,   171,   172,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,     0,     0,   182,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   767,   199,
     200,   201,   202,   768,  1251,   204,     0,   205,   206,   769,
     208,     0,   209,     0,   210,     0,     0,     0,   213,   214,
     215,     0,   217,     0,   218,     0,     0,     0,   770,   771,
     221,     0,   222,   223,   224,   225,   226,   227,   228,     0,
     230,   231,   232,   233,     0,   234,   235,   236,   237,   238,
     239,     0,   240,     0,   772,   243,   244,   245,   246,   247,
     773,   774,     0,   775,     0,   251,     0,     0,   254,     0,
     256,   257,   258,   259,   260,     0,     0,   261,     0,   263,
       0,     0,   265,   266,   267,     0,     0,   268,   269,   270,
     271,   272,   776,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   777,     0,   778,   295,   296,   297,   298,   779,     0,
     300,   301,     0,   303,     0,   780,   305,   781,   307,   308,
     309,     0,   310,   311,  1252,     0,   312,   313,   314,     0,
       0,   315,   782,     0,   318,     0,   783,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,   331,   332,
     784,   334,   335,   785,   337,   338,   339,     0,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   786,
     352,   353,   354,   355,     0,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,     0,
     370,   371,     0,   373,   374,   375,   787,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,     0,   388,
     389,   390,   391,   392,     0,   393,   788,   395,   396,   397,
       0,   399,   400,   789,   402,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   790,   416,
     791,   418,     0,   419,   420,     0,   421,     0,   423,   424,
     425,   426,   427,     0,   792,   793,     0,     0,   430,   431,
     794,   433,   795,  1253,   435,   436,   796,   438,   439,   440,
     441,   442,     0,     0,   443,   444,   445,   446,   447,     0,
       0,   448,   449,   450,   451,   452,  1142,   798,     0,   455,
       0,   457,   458,   459,   460,   461,     0,     0,   462,     0,
       0,   463,   464,   465,   466,   467,   468,   799,   800,   801,
     802,   803,   804,   805,   806,   807,   808,   809,   480,   481,
     482,   483,   510,     0,   592,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    95,    96,
      97,    98,    99,   100,   101,   102,     0,   103,   104,   105,
       3,     4,     0,     0,     0,     0,     0,   106,   107,     0,
     108,   109,   110,     0,   112,   113,   114,   115,   116,     0,
     118,   119,     0,   120,   121,   122,   123,   124,   125,     0,
       0,   126,   127,   128,   129,   130,     0,   131,   132,   133,
     134,   135,     0,     0,     0,   137,   138,   139,   140,   141,
     142,     0,   144,   145,   146,     0,   147,   148,   149,   150,
     151,   152,     0,     0,   154,   155,   156,     0,     0,     0,
       0,     0,     0,     0,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,     0,   168,     0,   169,   170,   171,
     172,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,     0,     0,   182,   183,   184,   185,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,     0,   204,
       0,   205,   206,   207,   208,     0,   209,     0,   210,     0,
       0,     0,   213,   214,   215,     0,   217,     0,   218,     0,
       0,     0,   219,   220,   221,     0,   222,   223,   224,   225,
     226,   227,   228,     0,   230,   231,   232,   233,     0,   234,
     235,   236,   237,   238,   239,     0,   240,     0,   242,   243,
     244,   245,   246,   247,   248,   249,     0,   250,     0,   251,
       0,     0,   254,     0,   256,   257,   258,   259,   260,     0,
       0,   261,     0,   263,     0,     0,   265,   266,   267,     0,
       0,   268,   269,   270,   271,   272,   512,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,     0,   294,   295,   296,
     297,   298,   299,     0,   300,   301,     0,   303,     0,   304,
     305,   306,   307,   308,   309,     0,   310,   311,     0,     0,
     312,   313,   314,     0,     0,   315,   316,     0,   318,     0,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,   331,   332,   333,   334,   335,   336,   337,   338,
     339,     0,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,     0,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,     0,   370,   371,     0,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,     0,   388,   389,   390,   391,   392,     0,   393,
     394,   395,   396,   397,     0,   399,   400,   401,   402,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   514,   416,   417,   418,     0,   419,   420,     0,
     421,     0,   423,   424,   425,   426,   427,     0,   428,   429,
       0,     0,   430,   431,   432,   433,   434,     0,   435,   436,
     437,   438,   439,   440,   441,   442,     0,     0,   443,   444,
     445,   446,   447,     0,     0,   448,   449,   450,   451,   452,
     453,   454,     0,   455,     0,   457,   458,   459,   460,   461,
       0,     0,   462,     0,     0,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   510,     0,   592,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    95,    96,    97,    98,    99,   100,   101,   102,
       0,   103,   104,   105,     0,     0,     0,     0,     0,     0,
       0,   106,   107,     0,   108,   109,   110,     0,   112,   113,
     114,   115,   116,     0,   118,   119,     0,   120,   121,   122,
     123,   124,   125,     0,     0,   126,   127,   128,   129,   130,
       0,   131,   132,   133,   134,   135,     0,     0,     0,   137,
     138,   139,   140,   141,   142,     0,   144,   145,   146,     0,
     147,   148,   149,   150,   151,   152,     0,     0,   154,   155,
     156,     0,     0,     0,     0,     0,     0,     0,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,     0,   168,
       0,   169,   170,   171,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,     0,     0,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,     0,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,     0,   204,     0,   205,   206,   207,   208,     0,
     209,     0,   210,     0,     0,     0,   213,   214,   215,     0,
     217,     0,   218,     0,     0,     0,   219,   220,   221,     0,
     222,   223,   224,   225,   226,   227,   228,     0,   230,   231,
     232,   233,     0,   234,   235,   236,   237,   238,   239,     0,
     240,     0,   242,   243,   244,   245,   246,   247,   248,   249,
       0,   250,     0,   251,     0,     0,   254,     0,   256,   257,
     258,   259,   260,     0,     0,   261,     0,   263,     0,     0,
     265,   266,   267,     0,     0,   268,   269,   270,   271,   272,
     512,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   294,   295,   296,   297,   298,   299,     0,   300,   301,
       0,   303,     0,   304,   305,   306,   307,   308,   309,     0,
     310,   311,     0,   593,   312,   313,   314,     0,     0,   315,
     316,     0,   318,     0,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,   331,   332,   333,   334,
     335,   336,   337,   338,   339,     0,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,     0,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,     0,   393,   394,   395,   396,   397,     0,   399,
     400,   401,   402,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   514,   416,   417,   418,
       0,   419,   420,     0,   421,     0,   423,   424,   425,   426,
     427,     0,   428,   429,     0,     0,   430,   431,   432,   433,
     434,     0,   435,   436,   437,   438,   439,   440,   441,   442,
       0,     0,   443,   444,   445,   446,   447,     0,     0,   448,
     449,   450,   451,   452,   453,   454,     0,   455,     0,   457,
     458,   459,   460,   461,     0,     0,   462,     0,     0,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     510,     0,   592,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    95,    96,    97,    98,
      99,   100,   101,   102,     0,   103,   104,   105,     0,     0,
       0,     0,     0,     0,     0,   106,   107,     0,   108,   109,
     110,     0,   112,   113,   114,   115,   116,     0,   118,   119,
       0,   120,   121,   122,   123,   124,   125,     0,     0,   126,
     127,   128,   129,   130,     0,   131,   132,   133,   134,   135,
       0,     0,     0,   137,   138,   139,   140,   141,   142,     0,
     144,   145,   146,     0,   147,   148,   149,   150,   151,   152,
       0,     0,   154,   155,   156,     0,     0,     0,     0,     0,
       0,     0,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,     0,
       0,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,     0,   204,     0,   205,
     206,   207,   208,     0,   209,     0,   210,     0,     0,     0,
     213,   214,   215,     0,   217,     0,   218,     0,     0,     0,
     219,   220,   221,     0,   222,   223,   224,   225,   226,   637,
     228,     0,   230,   231,   232,   233,     0,   234,   235,   236,
     237,   238,   239,     0,   240,     0,   242,   243,   244,   245,
     246,   247,   248,   249,     0,   250,     0,   251,     0,     0,
     254,     0,   256,   257,   258,   259,   260,     0,     0,   261,
       0,   263,     0,     0,   265,   266,   267,     0,     0,   268,
     269,   270,   271,   272,   512,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,     0,   294,   295,   296,   297,   298,
     299,     0,   300,   301,     0,   303,     0,   304,   305,   306,
     307,   308,   309,     0,   310,   311,     0,   593,   312,   313,
     314,     0,     0,   315,   316,     0,   318,     0,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,     0,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,     0,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,     0,   370,   371,     0,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
       0,   388,   389,   390,   391,   392,     0,   393,   394,   395,
     396,   397,     0,   399,   400,   401,   402,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     514,   416,   417,   418,     0,   419,   420,     0,   421,     0,
     423,   424,   425,   426,   427,     0,   428,   429,     0,     0,
     430,   431,   432,   433,   434,     0,   435,   436,   437,   438,
     439,   440,   441,   442,     0,     0,   443,   444,   445,   446,
     447,     0,     0,   448,   449,   450,   451,   452,   453,   454,
       0,   455,     0,   457,   458,   459,   460,   461,     0,     0,
     462,     0,     0,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   757,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      95,    96,    97,    98,    99,   100,   101,   102,     0,   103,
     104,   105,     3,     4,     0,     0,     0,     0,     0,   106,
     107,     0,   108,   109,   110,     0,   112,   113,   114,   758,
     759,     0,   760,   761,     0,   120,   121,   122,   123,   124,
     125,     0,     0,   126,   127,   762,   763,   130,     0,   131,
     132,   133,   134,   764,     0,     0,     0,   137,   138,   139,
     140,   141,   142,     0,   144,   145,   146,     0,   147,   148,
     149,   150,   151,   152,     0,     0,   154,   155,   156,     0,
       0,     0,     0,     0,     0,     0,   158,   159,   160,   161,
     162,   163,   164,   765,   766,   167,     0,   168,     0,   169,
     170,   171,   172,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,     0,     0,   182,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   767,   199,   200,   201,   202,   768,
       0,   204,     0,   205,   206,   769,   208,     0,   209,     0,
     210,     0,     0,     0,   213,   214,   215,     0,   217,     0,
     218,     0,     0,     0,   770,   771,   221,     0,   222,   223,
     224,   225,   226,   227,   228,     0,   230,   231,   232,   233,
       0,   234,   235,   236,   237,   238,   239,     0,   240,     0,
     772,   243,   244,   245,   246,   247,   773,   774,     0,   775,
       0,   251,     0,     0,   254,     0,   256,   257,   258,   259,
     260,     0,     0,   261,     0,   263,     0,     0,   265,   266,
     267,     0,     0,   268,   269,   270,   271,   272,   776,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   777,     0,   778,
     295,   296,   297,   298,   779,     0,   300,   301,     0,   303,
       0,   780,   305,   781,   307,   308,   309,     0,   310,   311,
       0,     0,   312,   313,   314,     0,     0,   315,   782,     0,
     318,     0,   783,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,   331,   332,   784,   334,   335,   785,
     337,   338,   339,     0,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   786,   352,   353,   354,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,     0,   373,
     374,   375,   787,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
       0,   393,   788,   395,   396,   397,     0,   399,   400,   789,
     402,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   790,   416,   791,   418,     0,   419,
     420,     0,   421,     0,   423,   424,   425,   426,   427,     0,
     792,   793,     0,     0,   430,   431,   794,   433,   795,     0,
     435,   436,   796,   438,   439,   440,   441,   442,     0,     0,
     443,   444,   445,   446,   447,     0,     0,   448,   449,   450,
     451,   452,  1142,   798,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   799,   800,   801,   802,   803,   804,   805,
     806,   807,   808,   809,   480,   481,   482,   483,   510,     0,
     592,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    95,    96,    97,    98,    99,   100,
     101,   102,     0,   103,   104,   105,     0,     0,     0,     0,
       0,     0,     0,   106,   107,     0,   108,   109,   110,     0,
     112,   113,   114,   115,   116,     0,   118,   119,     0,   120,
     121,   122,   123,   124,   125,     0,     0,   126,   127,   128,
     129,   130,     0,   131,   132,   133,   134,   135,     0,     0,
       0,   137,   138,   139,   140,   141,   142,     0,   144,   145,
     146,     0,   147,   148,   149,   150,   151,   152,     0,     0,
     154,   155,   156,     0,     0,     0,     0,     0,     0,     0,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
       0,   168,     0,   169,   170,   171,   172,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,     0,     0,   182,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,     0,   204,     0,   205,   206,   207,
     208,     0,   209,     0,   210,     0,     0,     0,   213,   214,
     215,     0,  1747,     0,   218,     0,     0,     0,   219,   220,
     221,     0,   222,   223,   224,   225,   226,   227,   228,     0,
     230,   231,   232,   233,     0,   234,   235,   236,   237,   238,
     239,     0,   240,     0,   242,   243,   244,   245,   246,   247,
     248,   249,     0,   250,     0,   251,     0,     0,   254,     0,
     256,   257,   258,   259,   260,     0,     0,   261,     0,   263,
       0,     0,   265,   266,  1748,     0,     0,   268,   269,   270,
     271,   272,   512,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,     0,   294,   295,   296,   297,   298,   299,     0,
     300,   301,     0,   303,     0,   304,   305,   306,   307,   308,
     309,     0,   310,   311,     0,     0,   312,   313,   314,     0,
       0,   315,   316,     0,   318,     0,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,   331,   332,
     333,   334,   335,   336,   337,   338,   339,     0,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,     0,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,     0,
     370,   371,     0,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,     0,   388,
     389,   390,   391,   392,     0,   393,   394,   395,   396,   397,
       0,   399,   400,   401,   402,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   514,   416,
     417,   418,     0,   419,   420,  1749,   421,     0,   423,  1750,
     425,  1751,   427,     0,   428,   429,     0,     0,   430,   431,
     432,   433,   434,     0,   435,   436,   437,   438,   439,   440,
     441,   442,     0,     0,   443,   444,  1752,   446,   447,     0,
       0,   448,   449,   450,   451,   452,   453,   454,     0,   455,
       0,   457,   458,   459,   460,   461,     0,     0,   462,     0,
       0,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   510,  2736,     0,     0,     0,     0,  2737,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    95,    96,
      97,    98,    99,   100,   101,   102,     0,   103,   104,   105,
       0,     0,     0,     0,     0,     0,     0,   106,   107,     0,
     108,   109,   110,     0,   112,   113,   114,   115,   116,     0,
     118,   119,     0,   120,   121,   122,   123,   124,   125,     0,
       0,   126,   127,   128,   129,   130,     0,   131,   132,   133,
     134,   135,     0,     0,     0,   137,   138,   139,   140,   141,
     142,     0,   144,   145,   146,     0,   147,   148,   149,   150,
     151,   152,     0,     0,   154,   155,   156,     0,     0,     0,
       0,     0,     0,     0,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,     0,   168,     0,   169,   170,   171,
     172,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,     0,     0,   182,   183,   184,   185,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,     0,   204,
       0,   205,   206,   207,   208,     0,   209,     0,   210,     0,
       0,     0,   213,   214,   215,     0,   217,     0,   218,     0,
       0,     0,   219,   220,   221,     0,   222,   223,   224,   225,
     226,   227,   228,     0,   230,   231,   232,   233,     0,   234,
     235,   236,   237,   238,   239,     0,   240,     0,   242,   243,
     244,   245,   246,   247,   248,   249,     0,   250,     0,   251,
       0,     0,   254,     0,   256,   257,   258,   259,   260,     0,
       0,   261,     0,   263,     0,     0,   265,   266,   267,     0,
       0,   268,   269,   270,   271,   272,   512,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,     0,   294,   295,   296,
     297,   298,   299,     0,   300,   301,     0,   303,     0,   304,
     305,   306,   307,   308,   309,     0,   310,   311,     0,     0,
     312,   313,   314,     0,     0,   315,   316,     0,   318,     0,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,   331,   332,   333,   334,   335,   336,   337,   338,
     339,     0,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,     0,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,     0,   370,   371,     0,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,     0,   388,   389,   390,   391,   392,     0,   393,
     394,   395,   396,   397,     0,   399,   400,   401,   402,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   514,   416,   417,   418,     0,   419,   420,     0,
     421,     0,   423,   424,   425,   426,   427,     0,   428,   429,
       0,     0,   430,   431,   432,   433,   434,     0,   435,   436,
     437,   438,   439,   440,   441,   442,     0,     0,   443,   444,
     445,   446,   447,     0,     0,   448,   449,   450,   451,   452,
     453,   454,     0,   455,     0,   457,   458,   459,   460,   461,
       0,     0,   462,     0,     0,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   510,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    95,    96,    97,    98,    99,   100,   101,   102,
     511,   103,   104,   105,     0,     0,     0,     0,     0,     0,
       0,   106,   107,     0,   108,   109,   110,     0,   112,   113,
     114,   115,   116,     0,   118,   119,     0,   120,   121,   122,
     123,   124,   125,     0,     0,   126,   127,   128,   129,   130,
       0,   131,   132,   133,   134,   135,     0,     0,     0,   137,
     138,   139,   140,   141,   142,     0,   144,   145,   146,     0,
     147,   148,   149,   150,   151,   152,     0,     0,   154,   155,
     156,     0,     0,     0,     0,     0,     0,     0,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,     0,   168,
       0,   169,   170,   171,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,     0,     0,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,     0,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,     0,   204,     0,   205,   206,   207,   208,     0,
     209,     0,   210,     0,     0,     0,   213,   214,   215,     0,
     217,     0,   218,     0,     0,     0,   219,   220,   221,     0,
     222,   223,   224,   225,   226,   227,   228,     0,   230,   231,
     232,   233,     0,   234,   235,   236,   237,   238,   239,     0,
     240,     0,   242,   243,   244,   245,   246,   247,   248,   249,
       0,   250,     0,   251,     0,     0,   254,     0,   256,   257,
     258,   259,   260,     0,     0,   261,     0,   263,     0,     0,
     265,   266,   267,     0,     0,   268,   269,   270,   271,   272,
     512,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   294,   295,   296,   297,   298,   299,     0,   300,   301,
       0,   303,     0,   304,   305,   306,   307,   308,   309,     0,
     310,   311,     0,     0,   312,   313,   314,     0,     0,   315,
     316,     0,   318,     0,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,   331,   332,   333,   334,
     335,   336,   513,   338,   339,     0,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,     0,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,     0,   393,   394,   395,   396,   397,     0,   399,
     400,   401,   402,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   514,   416,   417,   418,
       0,   419,   420,     0,   421,     0,   423,   424,   425,   426,
     427,     0,   428,   429,     0,     0,   430,   431,   432,   433,
     434,     0,   435,   436,   437,   438,   439,   440,   441,   442,
       0,     0,   443,   444,   445,   446,   447,     0,     0,   448,
     449,   450,   451,   452,   453,   454,     0,   455,     0,   457,
     458,   459,   460,   461,     0,     0,   462,     0,     0,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     510,     0,   559,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    95,    96,    97,    98,
      99,   100,   101,   102,     0,   103,   104,   105,     0,     0,
       0,     0,     0,     0,     0,   106,   107,     0,   108,   109,
     110,     0,   112,   113,   114,   115,   116,     0,   118,   119,
       0,   120,   121,   122,   123,   124,   125,     0,     0,   126,
     127,   128,   129,   130,     0,   131,   132,   133,   134,   135,
       0,     0,     0,   137,   138,   139,   140,   141,   142,     0,
     144,   145,   146,     0,   147,   148,   149,   150,   151,   152,
       0,     0,   154,   155,   156,     0,     0,     0,     0,     0,
       0,     0,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,     0,
       0,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,     0,   204,     0,   205,
     206,   207,   208,     0,   209,     0,   210,     0,     0,     0,
     213,   214,   215,     0,   217,     0,   218,     0,     0,     0,
     219,   220,   221,     0,   222,   223,   224,   225,   226,   227,
     228,     0,   230,   231,   232,   233,     0,   234,   235,   236,
     237,   238,   239,     0,   240,     0,   242,   243,   244,   245,
     246,   247,   248,   249,     0,   250,     0,   251,     0,     0,
     254,     0,   256,   257,   258,   259,   260,     0,     0,   261,
       0,   263,     0,     0,   265,   266,   267,     0,     0,   268,
     269,   270,   271,   272,   512,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,     0,   294,   295,   296,   297,   298,
     299,     0,   300,   301,     0,   303,     0,   304,   305,   306,
     307,   308,   309,     0,   310,   311,     0,     0,   312,   313,
     314,     0,     0,   315,   316,     0,   318,     0,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,     0,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,     0,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,     0,   370,   371,     0,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
       0,   388,   389,   390,   391,   392,     0,   393,   394,   395,
     396,   397,     0,   399,   400,   401,   402,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     514,   416,   417,   418,     0,   419,   420,     0,   421,     0,
     423,   424,   425,   426,   427,     0,   428,   429,     0,     0,
     430,   431,   432,   433,   434,     0,   435,   436,   437,   438,
     439,   440,   441,   442,     0,     0,   443,   444,   445,   446,
     447,     0,     0,   448,   449,   450,   451,   452,   453,   454,
       0,   455,     0,   457,   458,   459,   460,   461,     0,     0,
     462,     0,     0,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   510,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      95,    96,    97,    98,    99,   100,   101,   102,   566,   103,
     104,   105,     0,     0,     0,     0,     0,     0,     0,   106,
     107,     0,   108,   109,   110,     0,   112,   113,   114,   115,
     116,     0,   118,   119,     0,   120,   121,   122,   123,   124,
     125,     0,     0,   126,   127,   128,   129,   130,     0,   131,
     132,   133,   134,   135,     0,     0,     0,   137,   138,   139,
     140,   141,   142,     0,   144,   145,   146,     0,   147,   148,
     149,   150,   151,   152,     0,     0,   154,   155,   156,     0,
       0,     0,     0,     0,     0,     0,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,     0,   168,     0,   169,
     170,   171,   172,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,     0,     0,   182,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
       0,   204,     0,   205,   206,   207,   208,     0,   209,     0,
     210,     0,     0,     0,   213,   214,   215,     0,   217,     0,
     218,     0,     0,     0,   219,   220,   221,     0,   222,   223,
     224,   225,   226,   227,   228,     0,   230,   231,   232,   233,
       0,   234,   235,   236,   237,   238,   239,     0,   240,     0,
     242,   243,   244,   245,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,   254,     0,   256,   257,   258,   259,
     260,     0,     0,   261,     0,   263,     0,     0,   265,   266,
     267,     0,     0,   268,   269,   270,   271,   272,   512,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,     0,   294,
     295,   296,   297,   298,   299,     0,   300,   301,     0,   303,
       0,   304,   305,   306,   307,   308,   309,     0,   310,   311,
       0,     0,   312,   313,   314,     0,     0,   315,   316,     0,
     318,     0,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,   331,   332,   333,   334,   335,   336,
     337,   338,   339,     0,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,     0,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
       0,   393,   394,   395,   396,   397,     0,   399,   400,   401,
     402,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   514,   416,   417,   418,     0,   419,
     420,     0,   421,     0,   423,   424,   425,   426,   427,     0,
     567,   429,     0,     0,   568,   431,   432,   433,   434,     0,
     435,   436,   437,   438,   439,   440,   441,   442,     0,     0,
     443,   444,   445,   446,   447,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   510,     0,
     592,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    95,    96,    97,    98,    99,   100,
     101,   102,     0,   103,   104,   105,     0,     0,     0,     0,
       0,     0,     0,   106,   107,     0,   108,   109,   110,     0,
     112,   113,   114,   115,   116,     0,   118,   119,     0,   120,
     121,   122,   123,   124,   125,     0,     0,   126,   127,   128,
     129,   130,     0,   131,   132,   133,   134,   135,     0,     0,
       0,   137,   138,   139,   140,   141,   142,     0,   144,   145,
     146,     0,   147,   148,   149,   150,   151,   152,     0,     0,
     154,   155,   156,     0,     0,     0,     0,     0,     0,     0,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
       0,   168,     0,   169,   170,   171,   172,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,     0,     0,   182,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,     0,   204,     0,   205,   206,   207,
     208,     0,   209,     0,   210,     0,     0,     0,   213,   214,
     215,     0,   217,     0,   218,     0,     0,     0,   219,   220,
     221,     0,   222,   223,   224,   225,   226,   632,   228,     0,
     230,   231,   232,   233,     0,   234,   235,   236,   237,   238,
     239,     0,   240,     0,   242,   243,   244,   245,   246,   247,
     248,   249,     0,   250,     0,   251,     0,     0,   254,     0,
     256,   257,   258,   259,   260,     0,     0,   261,     0,   263,
       0,     0,   265,   266,   267,     0,     0,   268,   269,   270,
     271,   272,   512,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,     0,   294,   295,   296,   297,   298,   299,     0,
     300,   301,     0,   303,     0,   304,   305,   306,   307,   308,
     309,     0,   310,   311,     0,     0,   312,   313,   314,     0,
       0,   315,   316,     0,   318,     0,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,   331,   332,
     333,   334,   335,   336,   337,   338,   339,     0,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,     0,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,     0,
     370,   371,     0,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,     0,   388,
     389,   390,   391,   392,     0,   393,   394,   395,   396,   397,
       0,   399,   400,   401,   402,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   514,   416,
     417,   418,     0,   419,   420,     0,   421,     0,   423,   424,
     425,   426,   427,     0,   428,   429,     0,     0,   430,   431,
     432,   433,   434,     0,   435,   436,   437,   438,   439,   440,
     441,   442,     0,     0,   443,   444,   445,   446,   447,     0,
       0,   448,   449,   450,   451,   452,   453,   454,     0,   455,
       0,   457,   458,   459,   460,   461,     0,     0,   462,     0,
       0,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   510,     0,   592,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    95,    96,
      97,    98,    99,   100,   101,   102,     0,   103,   104,   105,
       0,     0,     0,     0,     0,     0,     0,   106,   107,     0,
     108,   109,   110,     0,   112,   113,   114,   115,   116,     0,
     118,   119,     0,   120,   121,   122,   123,   124,   125,     0,
       0,   126,   127,   128,   129,   130,     0,   131,   132,   133,
     134,   135,     0,     0,     0,   137,   138,   139,   140,   141,
     142,     0,   144,   145,   146,     0,   147,   148,   149,   150,
     151,   152,     0,     0,   154,   155,   156,     0,     0,     0,
       0,     0,     0,     0,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,     0,   168,     0,   169,   170,   171,
     172,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,     0,     0,   182,   183,   184,   185,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,     0,   204,
       0,   205,   206,   207,   208,     0,   209,     0,   210,     0,
       0,     0,   213,   214,   215,     0,   217,     0,   218,     0,
       0,     0,   219,   220,   221,     0,   222,   223,   224,   225,
     226,   635,   228,     0,   230,   231,   232,   233,     0,   234,
     235,   236,   237,   238,   239,     0,   240,     0,   242,   243,
     244,   245,   246,   247,   248,   249,     0,   250,     0,   251,
       0,     0,   254,     0,   256,   257,   258,   259,   260,     0,
       0,   261,     0,   263,     0,     0,   265,   266,   267,     0,
       0,   268,   269,   270,   271,   272,   512,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,     0,   294,   295,   296,
     297,   298,   299,     0,   300,   301,     0,   303,     0,   304,
     305,   306,   307,   308,   309,     0,   310,   311,     0,     0,
     312,   313,   314,     0,     0,   315,   316,     0,   318,     0,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,   331,   332,   333,   334,   335,   336,   337,   338,
     339,     0,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,     0,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,     0,   370,   371,     0,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,     0,   388,   389,   390,   391,   392,     0,   393,
     394,   395,   396,   397,     0,   399,   400,   401,   402,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   514,   416,   417,   418,     0,   419,   420,     0,
     421,     0,   423,   424,   425,   426,   427,     0,   428,   429,
       0,     0,   430,   431,   432,   433,   434,     0,   435,   436,
     437,   438,   439,   440,   441,   442,     0,     0,   443,   444,
     445,   446,   447,     0,     0,   448,   449,   450,   451,   452,
     453,   454,     0,   455,     0,   457,   458,   459,   460,   461,
       0,     0,   462,     0,     0,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   510,     0,   592,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    95,    96,    97,    98,    99,   100,   101,   102,
       0,   103,   104,   105,     0,     0,     0,     0,     0,     0,
       0,   106,   107,     0,   108,   109,   110,     0,   112,   113,
     114,   115,   116,     0,   118,   119,     0,   120,   121,   122,
     123,   124,   125,     0,     0,   126,   127,   128,   129,   130,
       0,   131,   132,   133,   134,   135,     0,     0,     0,   137,
     138,   139,   140,   141,   142,     0,   144,   145,   146,     0,
     147,   148,   149,   150,   151,   152,     0,     0,   154,   155,
     156,     0,     0,     0,     0,     0,     0,     0,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,     0,   168,
       0,   169,   170,   171,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,     0,     0,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,     0,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,     0,   204,     0,   205,   206,   207,   208,     0,
     209,     0,   210,     0,     0,     0,   213,   214,   215,     0,
     217,     0,   218,     0,     0,     0,   219,   220,   221,     0,
     222,   223,   224,   225,   226,   639,   228,     0,   230,   231,
     232,   233,     0,   234,   235,   236,   237,   238,   239,     0,
     240,     0,   242,   243,   244,   245,   246,   247,   248,   249,
       0,   250,     0,   251,     0,     0,   254,     0,   256,   257,
     258,   259,   260,     0,     0,   261,     0,   263,     0,     0,
     265,   266,   267,     0,     0,   268,   269,   270,   271,   272,
     512,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   294,   295,   296,   297,   298,   299,     0,   300,   301,
       0,   303,     0,   304,   305,   306,   307,   308,   309,     0,
     310,   311,     0,     0,   312,   313,   314,     0,     0,   315,
     316,     0,   318,     0,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,   331,   332,   333,   334,
     335,   336,   337,   338,   339,     0,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,     0,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,     0,   393,   394,   395,   396,   397,     0,   399,
     400,   401,   402,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   514,   416,   417,   418,
       0,   419,   420,     0,   421,     0,   423,   424,   425,   426,
     427,     0,   428,   429,     0,     0,   430,   431,   432,   433,
     434,     0,   435,   436,   437,   438,   439,   440,   441,   442,
       0,     0,   443,   444,   445,   446,   447,     0,     0,   448,
     449,   450,   451,   452,   453,   454,     0,   455,     0,   457,
     458,   459,   460,   461,     0,     0,   462,     0,     0,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     510,     0,   592,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    95,    96,    97,    98,
      99,   100,   101,   102,     0,   103,   104,   105,     0,     0,
       0,     0,     0,     0,     0,   106,   107,     0,   108,   109,
     110,     0,   112,   113,   114,   115,   116,     0,   118,   119,
       0,   120,   121,   122,   123,   124,   125,     0,     0,   126,
     127,   128,   129,   130,     0,   131,   132,   133,   134,   135,
       0,     0,     0,   137,   138,   139,   140,   141,   142,     0,
     144,   145,   146,     0,   147,   148,   149,   150,   151,   152,
       0,     0,   154,   155,   156,     0,     0,     0,     0,     0,
       0,     0,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,     0,
       0,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,     0,   204,     0,   205,
     206,   207,   208,     0,   209,     0,   210,     0,     0,     0,
     213,   214,   215,     0,   217,     0,   218,     0,     0,     0,
     219,   220,   221,     0,   222,   223,   224,   225,   226,   227,
     228,     0,   230,   231,   232,   233,     0,   234,   235,   236,
     237,   238,   239,     0,   240,     0,   242,   243,   244,   245,
     246,   247,   248,   249,     0,   250,     0,   251,     0,     0,
     254,     0,   256,   257,   258,   259,   260,     0,     0,   261,
       0,   263,     0,     0,   265,   266,   267,     0,     0,   268,
     269,   270,   271,   272,   512,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,     0,   294,   295,   296,   297,   298,
     299,     0,   300,   301,     0,   303,     0,   304,   305,   306,
     307,   308,   309,     0,   310,   311,     0,     0,   312,   313,
     314,     0,     0,   315,   316,     0,   318,     0,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,     0,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,     0,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,     0,   370,   371,     0,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
       0,   388,   389,   390,   391,   392,     0,   393,   394,   395,
     396,   397,     0,   399,   400,   401,   402,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     514,   416,   417,   418,     0,   419,   420,     0,   421,     0,
     423,   424,   425,   426,   427,     0,   428,   429,     0,     0,
     430,   431,   432,   433,   434,     0,   435,   436,   437,   438,
     439,   440,   441,   442,     0,     0,   443,   444,   445,   446,
     447,     0,     0,   448,   449,   450,   451,   452,   453,   454,
       0,   455,     0,   457,   458,   459,   460,   461,     0,     0,
     462,     0,     0,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   510,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      95,    96,    97,    98,    99,   100,   101,   102,   668,   103,
     104,   105,     0,     0,     0,     0,     0,     0,     0,   106,
     107,     0,   108,   109,   110,     0,   112,   113,   114,   115,
     116,     0,   118,   119,     0,   120,   121,   122,   123,   124,
     125,     0,     0,   126,   127,   128,   129,   130,     0,   131,
     132,   133,   134,   135,     0,     0,     0,   137,   138,   139,
     140,   141,   142,     0,   144,   145,   146,     0,   147,   148,
     149,   150,   151,   152,     0,     0,   154,   155,   156,     0,
       0,     0,     0,     0,     0,     0,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,     0,   168,     0,   169,
     170,   171,   172,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,     0,     0,   182,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
       0,   204,     0,   205,   206,   207,   208,     0,   209,     0,
     210,     0,     0,     0,   213,   214,   215,     0,   217,     0,
     218,     0,     0,     0,   219,   220,   221,     0,   222,   223,
     224,   225,   226,   227,   228,     0,   230,   231,   232,   233,
       0,   234,   235,   236,   237,   238,   239,     0,   240,     0,
     242,   243,   244,   245,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,   254,     0,   256,   257,   258,   259,
     260,     0,     0,   261,     0,   263,     0,     0,   265,   266,
     267,     0,     0,   268,   269,   270,   271,   272,   512,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,     0,   294,
     295,   296,   297,   298,   299,     0,   300,   301,     0,   303,
       0,   304,   305,   306,   307,   308,   309,     0,   310,   311,
       0,     0,   312,   313,   314,     0,     0,   315,   316,     0,
     318,     0,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,   331,   332,   333,   334,   335,   336,
     337,   338,   339,     0,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,     0,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
       0,   393,   394,   395,   396,   397,     0,   399,   400,   401,
     402,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   514,   416,   417,   418,     0,   419,
     420,     0,   421,     0,   423,   424,   425,   426,   427,     0,
     428,   429,     0,     0,   430,   431,   432,   433,   434,     0,
     435,   436,   437,   438,   439,   440,   441,   442,     0,     0,
     443,   444,   445,   446,   447,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   510,     0,
     592,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    95,    96,    97,    98,    99,   100,
     101,   102,     0,   103,   104,   105,     0,     0,     0,     0,
       0,     0,     0,   106,   107,     0,   108,   109,   110,     0,
     112,   113,   114,   115,   116,     0,   118,   119,     0,   120,
     121,   122,   123,   124,   125,     0,     0,   126,   127,   128,
     129,   130,     0,   131,   132,   133,   134,   135,     0,     0,
       0,   137,   138,   139,   140,   141,   142,     0,   144,   145,
     146,     0,   147,   148,   149,   150,   151,   152,     0,     0,
     154,   155,   156,     0,     0,     0,     0,     0,     0,     0,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
       0,   168,     0,   169,   170,   171,   172,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,     0,     0,   182,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,     0,   204,     0,   205,   206,   207,
     208,     0,   209,     0,   210,     0,     0,     0,   213,   214,
     215,     0,   217,     0,   218,     0,     0,     0,   219,   220,
     221,     0,   222,   223,   224,   225,   226,  1165,   228,     0,
     230,   231,   232,   233,     0,   234,   235,   236,   237,   238,
     239,     0,   240,     0,   242,   243,   244,   245,   246,   247,
     248,   249,     0,   250,     0,   251,     0,     0,   254,     0,
     256,   257,   258,   259,   260,     0,     0,   261,     0,   263,
       0,     0,   265,   266,   267,     0,     0,   268,   269,   270,
     271,   272,   512,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,     0,   294,   295,   296,   297,   298,   299,     0,
     300,   301,     0,   303,     0,   304,   305,   306,   307,   308,
     309,     0,   310,   311,     0,     0,   312,   313,   314,     0,
       0,   315,   316,     0,   318,     0,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,   331,   332,
     333,   334,   335,   336,   337,   338,   339,     0,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,     0,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,     0,
     370,   371,     0,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,     0,   388,
     389,   390,   391,   392,     0,   393,   394,   395,   396,   397,
       0,   399,   400,   401,   402,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   514,   416,
     417,   418,     0,   419,   420,     0,   421,     0,   423,   424,
     425,   426,   427,     0,   428,   429,     0,     0,   430,   431,
     432,   433,   434,     0,   435,   436,   437,   438,   439,   440,
     441,   442,     0,     0,   443,   444,   445,   446,   447,     0,
       0,   448,   449,   450,   451,   452,   453,   454,     0,   455,
       0,   457,   458,   459,   460,   461,     0,     0,   462,     0,
       0,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   510,     0,   592,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    95,    96,
      97,    98,    99,   100,   101,   102,     0,   103,   104,   105,
       0,     0,     0,     0,     0,     0,     0,   106,   107,     0,
     108,   109,   110,     0,   112,   113,   114,   115,   116,     0,
     118,   119,     0,   120,   121,   122,   123,   124,   125,     0,
       0,   126,   127,   128,   129,   130,     0,   131,   132,   133,
     134,   135,     0,     0,     0,   137,   138,   139,   140,   141,
     142,     0,   144,   145,   146,     0,   147,   148,   149,   150,
     151,   152,     0,     0,   154,   155,   156,     0,     0,     0,
       0,     0,     0,     0,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,     0,   168,     0,   169,   170,   171,
     172,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,     0,     0,   182,   183,   184,   185,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,     0,   204,
       0,   205,   206,   207,   208,     0,   209,     0,   210,     0,
       0,     0,   213,   214,   215,     0,   217,     0,   218,     0,
       0,     0,   219,   220,   221,     0,   222,   223,   224,   225,
     226,  1167,   228,     0,   230,   231,   232,   233,     0,   234,
     235,   236,   237,   238,   239,     0,   240,     0,   242,   243,
     244,   245,   246,   247,   248,   249,     0,   250,     0,   251,
       0,     0,   254,     0,   256,   257,   258,   259,   260,     0,
       0,   261,     0,   263,     0,     0,   265,   266,   267,     0,
       0,   268,   269,   270,   271,   272,   512,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,     0,   294,   295,   296,
     297,   298,   299,     0,   300,   301,     0,   303,     0,   304,
     305,   306,   307,   308,   309,     0,   310,   311,     0,     0,
     312,   313,   314,     0,     0,   315,   316,     0,   318,     0,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,   331,   332,   333,   334,   335,   336,   337,   338,
     339,     0,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,     0,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,     0,   370,   371,     0,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,     0,   388,   389,   390,   391,   392,     0,   393,
     394,   395,   396,   397,     0,   399,   400,   401,   402,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   514,   416,   417,   418,     0,   419,   420,     0,
     421,     0,   423,   424,   425,   426,   427,     0,   428,   429,
       0,     0,   430,   431,   432,   433,   434,     0,   435,   436,
     437,   438,   439,   440,   441,   442,     0,     0,   443,   444,
     445,   446,   447,     0,     0,   448,   449,   450,   451,   452,
     453,   454,     0,   455,     0,   457,   458,   459,   460,   461,
       0,     0,   462,     0,     0,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   510,     0,   592,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    95,    96,    97,    98,    99,   100,   101,   102,
       0,   103,   104,   105,     0,     0,     0,     0,     0,     0,
       0,   106,   107,     0,   108,   109,   110,     0,   112,   113,
     114,   115,   116,     0,   118,   119,     0,   120,   121,   122,
     123,   124,   125,     0,     0,   126,   127,   128,   129,   130,
       0,   131,   132,   133,   134,   135,     0,     0,     0,   137,
     138,   139,   140,   141,   142,     0,   144,   145,   146,     0,
     147,   148,   149,   150,   151,   152,     0,     0,   154,   155,
     156,     0,     0,     0,     0,     0,     0,     0,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,     0,   168,
       0,   169,   170,   171,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,     0,     0,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,     0,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,     0,   204,     0,   205,   206,   207,   208,     0,
     209,     0,   210,     0,     0,     0,   213,   214,   215,     0,
     217,     0,   218,     0,     0,     0,   219,   220,   221,     0,
     222,   223,   224,   225,   226,  1579,   228,     0,   230,   231,
     232,   233,     0,   234,   235,   236,   237,   238,   239,     0,
     240,     0,   242,   243,   244,   245,   246,   247,   248,   249,
       0,   250,     0,   251,     0,     0,   254,     0,   256,   257,
     258,   259,   260,     0,     0,   261,     0,   263,     0,     0,
     265,   266,   267,     0,     0,   268,   269,   270,   271,   272,
     512,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   294,   295,   296,   297,   298,   299,     0,   300,   301,
       0,   303,     0,   304,   305,   306,   307,   308,   309,     0,
     310,   311,     0,     0,   312,   313,   314,     0,     0,   315,
     316,     0,   318,     0,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,   331,   332,   333,   334,
     335,   336,   337,   338,   339,     0,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,     0,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,     0,   393,   394,   395,   396,   397,     0,   399,
     400,   401,   402,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   514,   416,   417,   418,
       0,   419,   420,     0,   421,     0,   423,   424,   425,   426,
     427,     0,   428,   429,     0,     0,   430,   431,   432,   433,
     434,     0,   435,   436,   437,   438,   439,   440,   441,   442,
       0,     0,   443,   444,   445,   446,   447,     0,     0,   448,
     449,   450,   451,   452,   453,   454,     0,   455,     0,   457,
     458,   459,   460,   461,     0,     0,   462,     0,     0,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     510,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    95,    96,    97,    98,
      99,   100,   101,   102,     0,   103,   104,   105,     0,     0,
       0,     0,     0,  2349,     0,   106,   107,     0,   108,   109,
     110,     0,   112,   113,   114,   115,   116,     0,   118,   119,
       0,   120,   121,   122,   123,   124,   125,     0,     0,   126,
     127,   128,   129,   130,     0,   131,   132,   133,   134,   135,
       0,     0,     0,   137,   138,   139,   140,   141,   142,     0,
     144,   145,   146,     0,   147,   148,   149,   150,   151,   152,
       0,     0,   154,   155,   156,     0,     0,     0,     0,     0,
       0,     0,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,     0,
       0,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,     0,   204,     0,   205,
     206,   207,   208,     0,   209,     0,   210,     0,     0,     0,
     213,   214,   215,     0,   217,     0,   218,     0,     0,     0,
     219,   220,   221,     0,   222,   223,   224,   225,   226,   227,
     228,     0,   230,   231,   232,   233,     0,   234,   235,   236,
     237,   238,   239,     0,   240,     0,   242,   243,   244,   245,
     246,   247,   248,   249,     0,   250,     0,   251,     0,     0,
     254,     0,   256,   257,   258,   259,   260,     0,     0,   261,
       0,   263,     0,     0,   265,   266,   267,     0,     0,   268,
     269,   270,   271,   272,   512,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,     0,   294,   295,   296,   297,   298,
     299,     0,   300,   301,     0,   303,     0,   304,   305,   306,
     307,   308,   309,     0,   310,   311,     0,     0,   312,   313,
     314,     0,     0,   315,   316,     0,   318,     0,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,     0,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,     0,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,     0,   370,   371,     0,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
       0,   388,   389,   390,   391,   392,     0,   393,   394,   395,
     396,   397,     0,   399,   400,   401,   402,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     514,   416,   417,   418,     0,   419,   420,     0,   421,     0,
     423,   424,   425,   426,   427,     0,   428,   429,     0,     0,
     430,   431,   432,   433,   434,     0,   435,   436,   437,   438,
     439,   440,   441,   442,     0,     0,   443,   444,   445,   446,
     447,     0,     0,   448,   449,   450,   451,   452,   453,   454,
       0,   455,     0,   457,   458,   459,   460,   461,     0,     0,
     462,     0,     0,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   510,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      95,    96,    97,    98,    99,   100,   101,   102,     0,   103,
     104,   105,     0,     0,     0,     0,     0,  2363,     0,   106,
     107,     0,   108,   109,   110,     0,   112,   113,   114,   115,
     116,     0,   118,   119,     0,   120,   121,   122,   123,   124,
     125,     0,     0,   126,   127,   128,   129,   130,     0,   131,
     132,   133,   134,   135,     0,     0,     0,   137,   138,   139,
     140,   141,   142,     0,   144,   145,   146,     0,   147,   148,
     149,   150,   151,   152,     0,     0,   154,   155,   156,     0,
       0,     0,     0,     0,     0,     0,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,     0,   168,     0,   169,
     170,   171,   172,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,     0,     0,   182,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
       0,   204,     0,   205,   206,   207,   208,     0,   209,     0,
     210,     0,     0,     0,   213,   214,   215,     0,   217,     0,
     218,     0,     0,     0,   219,   220,   221,     0,   222,   223,
     224,   225,   226,   227,   228,     0,   230,   231,   232,   233,
       0,   234,   235,   236,   237,   238,   239,     0,   240,     0,
     242,   243,   244,   245,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,   254,     0,   256,   257,   258,   259,
     260,     0,     0,   261,     0,   263,     0,     0,   265,   266,
     267,     0,     0,   268,   269,   270,   271,   272,   512,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,     0,   294,
     295,   296,   297,   298,   299,     0,   300,   301,     0,   303,
       0,   304,   305,   306,   307,   308,   309,     0,   310,   311,
       0,     0,   312,   313,   314,     0,     0,   315,   316,     0,
     318,     0,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,   331,   332,   333,   334,   335,   336,
     337,   338,   339,     0,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,     0,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
       0,   393,   394,   395,   396,   397,     0,   399,   400,   401,
     402,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   514,   416,   417,   418,     0,   419,
     420,     0,   421,     0,   423,   424,   425,   426,   427,     0,
     428,   429,     0,     0,   430,   431,   432,   433,   434,     0,
     435,   436,   437,   438,   439,   440,   441,   442,     0,     0,
     443,   444,   445,   446,   447,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   510,     0,
     592,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    95,    96,    97,    98,    99,   100,
     101,   102,     0,   103,   104,   105,     0,     0,     0,     0,
       0,     0,     0,   106,   107,     0,   108,   109,   110,     0,
     112,   113,   114,   115,   116,     0,   118,   119,     0,   120,
     121,   122,   123,   124,   125,     0,     0,   126,   127,   128,
     129,   130,     0,   131,   132,   133,   134,   135,     0,     0,
       0,   137,   138,   139,   140,   141,   142,     0,   144,   145,
     146,     0,   147,   148,   149,   150,   151,   152,     0,     0,
     154,   155,   156,     0,     0,     0,     0,     0,     0,     0,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
       0,   168,     0,   169,   170,   171,   172,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,     0,     0,   182,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,     0,   204,     0,   205,   206,   207,
     208,     0,   209,     0,   210,     0,     0,     0,   213,   214,
     215,     0,   217,     0,   218,     0,     0,     0,   219,   220,
     221,     0,   222,   223,   224,   225,   226,  2514,   228,     0,
     230,   231,   232,   233,     0,   234,   235,   236,   237,   238,
     239,     0,   240,     0,   242,   243,   244,   245,   246,   247,
     248,   249,     0,   250,     0,   251,     0,     0,   254,     0,
     256,   257,   258,   259,   260,     0,     0,   261,     0,   263,
       0,     0,   265,   266,   267,     0,     0,   268,   269,   270,
     271,   272,   512,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,     0,   294,   295,   296,   297,   298,   299,     0,
     300,   301,     0,   303,     0,   304,   305,   306,   307,   308,
     309,     0,   310,   311,     0,     0,   312,   313,   314,     0,
       0,   315,   316,     0,   318,     0,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,   331,   332,
     333,   334,   335,   336,   337,   338,   339,     0,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,     0,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,     0,
     370,   371,     0,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,     0,   388,
     389,   390,   391,   392,     0,   393,   394,   395,   396,   397,
       0,   399,   400,   401,   402,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   514,   416,
     417,   418,     0,   419,   420,     0,   421,     0,   423,   424,
     425,   426,   427,     0,   428,   429,     0,     0,   430,   431,
     432,   433,   434,     0,   435,   436,   437,   438,   439,   440,
     441,   442,     0,     0,   443,   444,   445,   446,   447,     0,
       0,   448,   449,   450,   451,   452,   453,   454,     0,   455,
       0,   457,   458,   459,   460,   461,     0,     0,   462,     0,
       0,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   510,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    95,    96,
      97,    98,    99,   100,   101,   102,     0,   103,   104,   105,
       0,     0,     0,     0,     0,     0,     0,   106,   107,     0,
     108,   109,   110,     0,   112,   113,   114,   115,   116,     0,
     118,   119,     0,   120,   121,   122,   123,   124,   125,     0,
       0,   126,   127,   128,   129,   130,     0,   131,   132,   133,
     134,   135,     0,     0,     0,   137,   138,   139,   140,   141,
     142,     0,   144,   145,   146,     0,   147,   148,   149,   150,
     151,   152,     0,     0,   154,   155,   156,     0,     0,     0,
       0,     0,     0,     0,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,     0,   168,     0,   169,   170,   171,
     172,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,     0,     0,   182,   183,   184,   185,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,     0,   204,
       0,   205,   206,   207,   208,     0,   209,     0,   210,     0,
       0,     0,   213,   214,   215,     0,   217,     0,   218,     0,
       0,     0,   219,   220,   221,     0,   222,   223,   224,   225,
     226,   227,   228,     0,   230,   231,   232,   233,     0,   234,
     235,   236,   237,   238,   239,     0,   240,     0,   242,   243,
     244,   245,   246,   247,   248,   249,     0,   250,     0,   251,
       0,     0,   254,     0,   256,   257,   258,   259,   260,     0,
       0,   261,     0,   263,     0,     0,   265,   266,   267,     0,
       0,   268,   269,   270,   271,   272,   512,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,     0,   294,   295,   296,
     297,   298,   299,     0,   300,   301,     0,   303,     0,   304,
     305,   306,   307,   308,   309,     0,   310,   311,     0,     0,
     312,   313,   314,     0,     0,   315,   316,     0,   318,     0,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,   331,   332,   333,   334,   335,   336,   337,   338,
     339,     0,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,     0,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,     0,   370,   371,     0,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,     0,   388,   389,   390,   391,   392,     0,   393,
     394,   395,   396,   397,     0,   399,   400,   401,   402,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   514,   416,   417,   418,     0,   419,   420,     0,
     421,     0,   423,   424,   425,   426,   427,     0,   428,   429,
       0,     0,   430,   431,   432,   433,   434,     0,   435,   436,
     437,   438,   439,   440,   441,   442,     0,     0,   443,   444,
     445,   446,   447,     0,     0,   448,   449,   450,   451,   452,
     453,   454,     0,   455,     0,   457,   458,   459,   460,   461,
       0,     0,   462,     0,     0,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   510,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    95,    96,    97,    98,    99,   100,   101,   102,
       0,   103,   104,   105,     0,     0,     0,     0,     0,     0,
       0,   106,   107,     0,   108,   109,   110,     0,   112,   113,
     114,   115,   116,     0,   118,   119,     0,   120,   121,   122,
     123,   124,   125,     0,     0,   126,   127,   128,   129,   130,
       0,   131,   132,   133,   134,   135,     0,     0,     0,   137,
     138,   139,   140,   141,   142,     0,   144,   145,   146,     0,
     147,   148,   149,   150,   151,   152,     0,     0,   154,   155,
     156,     0,     0,     0,     0,     0,     0,     0,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,     0,   168,
       0,   169,   170,   171,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,     0,     0,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,     0,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,     0,   204,     0,   205,   206,   207,   208,     0,
     209,     0,   210,     0,     0,     0,   213,   214,   215,     0,
     578,     0,   218,     0,     0,     0,   219,   220,   221,     0,
     222,   223,   224,   225,   226,   227,   228,     0,   230,   231,
     232,   233,     0,   234,   235,   236,   237,   238,   239,     0,
     240,     0,   242,   243,   244,   245,   246,   247,   248,   249,
       0,   250,     0,   251,     0,     0,   254,     0,   256,   257,
     258,   259,   260,     0,     0,   261,     0,   263,     0,     0,
     265,   266,   579,     0,     0,   268,   269,   270,   271,   272,
     512,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   294,   295,   296,   297,   298,   299,     0,   300,   301,
       0,   303,     0,   304,   305,   306,   307,   308,   309,     0,
     310,   311,     0,     0,   312,   313,   314,     0,     0,   315,
     316,     0,   318,     0,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,   331,   332,   333,   334,
     335,   336,   337,   338,   339,     0,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,     0,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   580,
     382,   383,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   581,     0,   393,   394,   395,   396,   397,     0,   399,
     400,   401,   402,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   514,   416,   417,   418,
       0,   419,   420,     0,   421,     0,   423,   424,   425,   426,
     427,     0,   582,   429,     0,     0,   430,   431,   432,   433,
     434,     0,   435,   436,   437,   438,   439,   440,   441,   442,
       0,     0,   443,   444,   445,   446,   447,     0,     0,   448,
     449,   450,   451,   452,   453,   454,     0,   455,     0,   457,
     458,   459,   460,   461,     0,     0,   462,     0,     0,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     510,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    95,    96,    97,    98,
      99,   100,   101,   102,     0,   103,   104,   105,     0,     0,
       0,     0,     0,     0,     0,   106,   107,     0,   108,   109,
     110,     0,   112,   113,   114,   115,   116,     0,   118,   119,
       0,   120,   121,   122,   123,   124,   125,     0,     0,   126,
     127,   128,   129,   130,     0,   131,   132,   133,   134,   135,
       0,     0,     0,   137,   138,   139,   140,   141,   142,     0,
     144,   145,   146,     0,   147,   148,   149,   150,   151,   152,
       0,     0,   154,   155,   156,     0,     0,     0,     0,     0,
       0,     0,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,     0,
       0,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,     0,   204,     0,   205,
     206,   207,   208,     0,   209,     0,   210,     0,     0,     0,
     213,   214,   215,     0,   217,     0,   218,     0,     0,     0,
     219,   220,   221,     0,   222,   223,   224,   225,   226,   227,
     228,     0,   230,   231,   232,   233,     0,   234,   235,   236,
     237,   238,   239,     0,   240,     0,   242,   243,   244,   245,
     246,   247,   248,   249,     0,   250,     0,   251,     0,     0,
     254,     0,   256,   257,   258,   259,   260,     0,     0,   261,
       0,   263,     0,     0,   265,   266,   267,     0,     0,   268,
     269,   270,   271,   272,   512,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,     0,   294,   295,   296,   297,   298,
     299,     0,   300,   301,     0,   303,     0,   304,   305,   306,
     307,   308,   309,     0,   310,   311,     0,     0,   312,   313,
     314,     0,     0,   315,   316,     0,   318,     0,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,     0,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   602,   355,     0,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,     0,   370,   371,     0,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
       0,   388,   389,   390,   391,   392,     0,   393,   394,   395,
     396,   397,     0,   399,   400,   401,   402,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     514,   416,   417,   418,     0,   419,   420,     0,   421,     0,
     423,   424,   425,   426,   427,     0,   428,   429,     0,     0,
     430,   431,   432,   433,   434,     0,   435,   436,   437,   438,
     439,   440,   441,   442,     0,     0,   443,   444,   445,   446,
     447,     0,     0,   448,   449,   450,   451,   452,   453,   454,
       0,   455,     0,   457,   458,   459,   460,   461,     0,     0,
     462,     0,     0,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   510,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      95,    96,    97,    98,    99,   100,   101,   102,     0,   103,
     104,   105,     0,     0,     0,     0,     0,     0,     0,   106,
     107,     0,   108,   109,   110,     0,   112,   113,   114,   115,
     116,     0,   118,   119,     0,   120,   121,   122,   123,   124,
     125,     0,     0,   126,   127,   128,   129,   130,     0,   131,
     132,   133,   134,   135,     0,     0,     0,   137,   138,   139,
     140,   141,   142,     0,   144,   145,   146,     0,   147,   148,
     149,   150,   151,   152,     0,     0,   154,   155,   156,     0,
       0,     0,     0,     0,     0,     0,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,     0,   168,     0,   169,
     170,   171,   172,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,     0,     0,   182,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
       0,   204,     0,   205,   206,   207,   208,     0,   209,     0,
     210,     0,     0,     0,   213,   214,   215,     0,   217,     0,
     218,     0,     0,     0,   219,   220,   221,     0,   222,   223,
     224,   225,   226,   658,   228,     0,   230,   231,   232,   233,
       0,   234,   235,   236,   237,   238,   239,     0,   240,     0,
     242,   243,   244,   245,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,   254,     0,   256,   257,   258,   259,
     260,     0,     0,   261,     0,   263,     0,     0,   265,   266,
     267,     0,     0,   268,   269,   270,   271,   272,   512,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,     0,   294,
     295,   296,   297,   298,   299,     0,   300,   301,     0,   303,
       0,   304,   305,   306,   307,   308,   309,     0,   310,   311,
       0,     0,   312,   313,   314,     0,     0,   315,   316,     0,
     318,     0,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,   331,   332,   333,   334,   335,   336,
     337,   338,   339,     0,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,     0,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
       0,   393,   394,   395,   396,   397,     0,   399,   400,   401,
     402,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   514,   416,   417,   418,     0,   419,
     420,     0,   421,     0,   423,   424,   425,   426,   427,     0,
     428,   429,     0,     0,   430,   431,   432,   433,   434,     0,
     435,   436,   437,   438,   439,   440,   441,   442,     0,     0,
     443,   444,   445,   446,   447,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   510,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    95,    96,    97,    98,    99,   100,
     101,   102,     0,   103,   104,   105,     0,     0,     0,     0,
       0,     0,     0,   106,   107,     0,   108,   109,   110,     0,
     112,   113,   114,   115,   116,     0,   118,   119,     0,   120,
     121,   122,   123,   124,   125,     0,     0,   126,   127,   128,
     129,   130,     0,   131,   132,   133,   134,   135,     0,     0,
       0,   137,   138,   139,   140,   141,   142,     0,   144,   145,
     146,     0,   147,   148,   149,   150,   151,   152,     0,     0,
     154,   155,   156,     0,     0,     0,     0,     0,     0,     0,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
       0,   168,     0,   169,   170,   171,   172,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,     0,     0,   182,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,     0,   204,     0,   205,   206,   207,
     208,     0,   209,     0,   210,     0,     0,     0,   213,   214,
     215,     0,   217,     0,   218,     0,     0,     0,   219,   220,
     221,     0,   222,   223,   224,   225,   226,   745,   228,     0,
     230,   231,   232,   233,     0,   234,   235,   236,   237,   238,
     239,     0,   240,     0,   242,   243,   244,   245,   246,   247,
     248,   249,     0,   250,     0,   251,     0,     0,   254,     0,
     256,   257,   258,   259,   260,     0,     0,   261,     0,   263,
       0,     0,   265,   266,   267,     0,     0,   268,   269,   270,
     271,   272,   512,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,     0,   294,   295,   296,   297,   298,   299,     0,
     300,   301,     0,   303,     0,   304,   305,   306,   307,   308,
     309,     0,   310,   311,     0,     0,   312,   313,   314,     0,
       0,   315,   316,     0,   318,     0,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,   331,   332,
     333,   334,   335,   336,   337,   338,   339,     0,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,     0,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,     0,
     370,   371,     0,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,     0,   388,
     389,   390,   391,   392,     0,   393,   394,   395,   396,   397,
       0,   399,   400,   401,   402,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   514,   416,
     417,   418,     0,   419,   420,     0,   421,     0,   423,   424,
     425,   426,   427,     0,   428,   429,     0,     0,   430,   431,
     432,   433,   434,     0,   435,   436,   437,   438,   439,   440,
     441,   442,     0,     0,   443,   444,   445,   446,   447,     0,
       0,   448,   449,   450,   451,   452,   453,   454,     0,   455,
       0,   457,   458,   459,   460,   461,     0,     0,   462,     0,
       0,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   510,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    95,    96,
      97,    98,    99,   100,   101,   102,     0,   103,   104,   105,
       0,     0,     0,     0,     0,     0,     0,   106,   107,     0,
     108,   109,   110,     0,   112,   113,   114,   115,   116,     0,
     118,   119,     0,   120,   121,   122,   123,   124,   125,     0,
       0,   126,   127,   128,   129,   130,     0,   131,   132,   133,
     134,   135,     0,     0,     0,   137,   138,   139,   140,   141,
     142,     0,   144,   145,   146,     0,   147,   148,   149,   150,
     151,   152,     0,     0,   154,   155,   156,     0,     0,     0,
       0,     0,     0,     0,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,     0,   168,     0,   169,   170,   171,
     172,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,     0,     0,   182,   183,   184,   185,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,     0,   204,
       0,   205,   206,   207,   208,     0,   209,     0,   210,     0,
       0,     0,   213,   214,   215,     0,   217,     0,   218,     0,
       0,     0,   219,   220,   221,     0,   222,   223,   224,   225,
     226,   748,   228,     0,   230,   231,   232,   233,     0,   234,
     235,   236,   237,   238,   239,     0,   240,     0,   242,   243,
     244,   245,   246,   247,   248,   249,     0,   250,     0,   251,
       0,     0,   254,     0,   256,   257,   258,   259,   260,     0,
       0,   261,     0,   263,     0,     0,   265,   266,   267,     0,
       0,   268,   269,   270,   271,   272,   512,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,     0,   294,   295,   296,
     297,   298,   299,     0,   300,   301,     0,   303,     0,   304,
     305,   306,   307,   308,   309,     0,   310,   311,     0,     0,
     312,   313,   314,     0,     0,   315,   316,     0,   318,     0,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,   331,   332,   333,   334,   335,   336,   337,   338,
     339,     0,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,     0,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,     0,   370,   371,     0,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,     0,   388,   389,   390,   391,   392,     0,   393,
     394,   395,   396,   397,     0,   399,   400,   401,   402,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   514,   416,   417,   418,     0,   419,   420,     0,
     421,     0,   423,   424,   425,   426,   427,     0,   428,   429,
       0,     0,   430,   431,   432,   433,   434,     0,   435,   436,
     437,   438,   439,   440,   441,   442,     0,     0,   443,   444,
     445,   446,   447,     0,     0,   448,   449,   450,   451,   452,
     453,   454,     0,   455,     0,   457,   458,   459,   460,   461,
       0,     0,   462,     0,     0,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   510,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    95,    96,    97,    98,    99,   100,   101,   102,
       0,   103,   104,   105,     0,     0,     0,     0,     0,     0,
       0,   106,   107,     0,   108,   109,   110,     0,   112,   113,
     114,   115,   116,     0,   118,   119,     0,   120,   121,   122,
     123,   124,   125,     0,     0,   126,   127,   128,   129,   130,
       0,   131,   132,   133,   134,   135,     0,     0,     0,   137,
     138,   139,   140,   141,   142,     0,   144,   145,   146,     0,
     147,   148,   149,   150,   151,   152,     0,     0,   154,   155,
     156,     0,     0,     0,     0,     0,     0,     0,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,     0,   168,
       0,   169,   170,   171,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,     0,     0,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,     0,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,     0,   204,     0,   205,   206,   207,   208,     0,
     209,     0,   210,     0,     0,     0,   213,   214,   215,     0,
     217,     0,   218,     0,     0,     0,   219,   220,   221,     0,
     222,   223,   224,   225,   226,   751,   228,     0,   230,   231,
     232,   233,     0,   234,   235,   236,   237,   238,   239,     0,
     240,     0,   242,   243,   244,   245,   246,   247,   248,   249,
       0,   250,     0,   251,     0,     0,   254,     0,   256,   257,
     258,   259,   260,     0,     0,   261,     0,   263,     0,     0,
     265,   266,   267,     0,     0,   268,   269,   270,   271,   272,
     512,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   294,   295,   296,   297,   298,   299,     0,   300,   301,
       0,   303,     0,   304,   305,   306,   307,   308,   309,     0,
     310,   311,     0,     0,   312,   313,   314,     0,     0,   315,
     316,     0,   318,     0,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,   331,   332,   333,   334,
     335,   336,   337,   338,   339,     0,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,     0,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,     0,   393,   394,   395,   396,   397,     0,   399,
     400,   401,   402,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   514,   416,   417,   418,
       0,   419,   420,     0,   421,     0,   423,   424,   425,   426,
     427,     0,   428,   429,     0,     0,   430,   431,   432,   433,
     434,     0,   435,   436,   437,   438,   439,   440,   441,   442,
       0,     0,   443,   444,   445,   446,   447,     0,     0,   448,
     449,   450,   451,   452,   453,   454,     0,   455,     0,   457,
     458,   459,   460,   461,     0,     0,   462,     0,     0,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     510,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    95,    96,    97,    98,
      99,   100,   101,   102,     0,   103,   104,   105,     0,     0,
       0,     0,     0,     0,     0,   106,   107,     0,   108,   109,
     110,     0,   112,   113,   114,   115,   116,     0,   118,   119,
       0,   120,   121,   122,   123,   124,   125,     0,     0,   126,
     127,   128,   129,   130,     0,   131,   132,   133,   134,   135,
       0,     0,     0,   137,   138,   139,   140,   141,   142,     0,
     144,   145,   146,     0,   147,   148,   149,   150,   151,   152,
       0,     0,   154,   155,   156,     0,     0,     0,     0,     0,
       0,     0,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,     0,
       0,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,     0,   204,     0,   205,
     206,   207,   208,     0,   209,     0,   210,     0,     0,     0,
     213,   214,   215,     0,   217,     0,   218,     0,     0,     0,
     219,   220,   221,     0,   222,   223,   224,   225,   226,   227,
     228,     0,   230,   231,   232,   233,     0,   234,   235,   236,
     237,   238,   239,     0,   240,     0,   242,   243,   244,   245,
     246,   247,   248,   249,     0,   250,     0,   251,     0,     0,
     254,     0,   256,   257,   258,   259,   260,     0,     0,   261,
       0,   263,     0,     0,   265,   266,   267,     0,     0,   268,
     269,   270,   271,   272,   512,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,     0,   294,   295,   296,   297,   298,
     299,     0,   300,   301,     0,   303,     0,   304,   305,   306,
     307,   308,   309,     0,   310,   311,     0,     0,   312,   313,
     314,     0,     0,   315,   316,     0,   318,     0,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,     0,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,     0,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,     0,   370,   371,     0,   373,   374,   375,   376,   377,
     378,   379,   380,   580,   382,   383,   384,   385,   386,   387,
       0,   388,   389,   390,   391,   392,     0,   393,   394,   395,
     396,   397,     0,   399,   400,   401,   402,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     514,   416,   417,   418,     0,   419,   420,     0,   421,     0,
     423,   424,   425,   426,   427,     0,   582,   429,     0,     0,
     430,   431,   432,   433,   434,     0,   435,   436,   437,   438,
     439,   440,   441,   442,     0,     0,   443,   444,   445,   446,
     447,     0,     0,   448,   449,   450,   451,   452,   453,   454,
       0,   455,     0,   457,   458,   459,   460,   461,     0,     0,
     462,     0,     0,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   510,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      95,    96,    97,    98,    99,   100,   101,   102,     0,   103,
     104,   105,     0,     0,     0,     0,     0,  1443,     0,   106,
     107,     0,   108,   109,   110,     0,   112,   113,   114,   115,
     116,     0,   118,   119,     0,   120,   121,   122,   123,   124,
     125,     0,     0,   126,   127,   128,   129,   130,     0,   131,
     132,   133,   134,   135,     0,     0,     0,   137,   138,   139,
     140,   141,   142,     0,   144,   145,   146,     0,   147,   148,
     149,   150,   151,   152,     0,     0,   154,   155,   156,     0,
       0,     0,     0,     0,     0,     0,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,     0,   168,     0,   169,
     170,   171,   172,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,     0,     0,   182,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
       0,   204,     0,   205,   206,   207,   208,     0,   209,     0,
     210,     0,     0,     0,   213,   214,   215,     0,   217,     0,
     218,     0,     0,     0,   219,   220,   221,     0,   222,   223,
     224,   225,   226,   227,   228,     0,   230,   231,   232,   233,
       0,   234,   235,   236,   237,   238,   239,     0,   240,     0,
     242,   243,   244,   245,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,   254,     0,   256,   257,   258,   259,
     260,     0,     0,   261,     0,   263,     0,     0,   265,   266,
     267,     0,     0,   268,   269,   270,   271,   272,   512,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,     0,   294,
     295,   296,   297,   298,   299,     0,   300,   301,     0,   303,
       0,   304,   305,   306,   307,   308,   309,     0,   310,   311,
       0,     0,   312,   313,   314,     0,     0,   315,   316,     0,
     318,     0,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,   331,   332,   333,   334,   335,   336,
     337,   338,   339,     0,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,     0,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
       0,     0,   394,   395,   396,   397,     0,   399,   400,   401,
     402,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   514,   416,   417,   418,     0,   419,
     420,     0,   421,     0,   423,   424,   425,   426,   427,     0,
     428,   429,     0,     0,   430,   431,   432,   433,   434,     0,
     435,   436,   437,   438,   439,   440,   441,   442,     0,     0,
     443,   444,   445,   446,   447,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   510,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    95,    96,    97,    98,    99,   100,
     101,   102,     0,   103,   104,   105,     0,     0,     0,     0,
       0,     0,     0,   106,   107,     0,   108,   109,   110,     0,
     112,   113,   114,   115,   116,     0,   118,   119,     0,   120,
     121,   122,   123,   124,   125,     0,     0,   126,   127,   128,
     129,   130,     0,   131,   132,   133,   134,   135,     0,     0,
       0,   137,   138,   139,   140,   141,   142,     0,   144,   145,
     146,     0,   147,   148,   149,   150,   151,   152,     0,     0,
     154,   155,   156,     0,     0,     0,     0,     0,     0,     0,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
       0,   168,     0,   169,   170,   171,   172,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,     0,     0,   182,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,     0,   204,     0,   205,   206,   207,
     208,     0,   209,     0,   210,     0,     0,     0,   213,   214,
     215,     0,   217,     0,   218,     0,     0,     0,   219,   220,
     221,     0,   222,   223,   224,   225,   226,  1541,   228,     0,
     230,   231,   232,   233,     0,   234,   235,   236,   237,   238,
     239,     0,   240,     0,   242,   243,   244,   245,   246,   247,
     248,   249,     0,   250,     0,   251,     0,     0,   254,     0,
     256,   257,   258,   259,   260,     0,     0,   261,     0,   263,
       0,     0,   265,   266,   267,     0,     0,   268,   269,   270,
     271,   272,   512,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,     0,   294,   295,   296,   297,   298,   299,     0,
     300,   301,     0,   303,     0,   304,   305,   306,   307,   308,
     309,     0,   310,   311,     0,     0,   312,   313,   314,     0,
       0,   315,   316,     0,   318,     0,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,   331,   332,
     333,   334,   335,   336,   337,   338,   339,     0,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,     0,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,     0,
     370,   371,     0,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,     0,   388,
     389,   390,   391,   392,     0,   393,   394,   395,   396,   397,
       0,   399,   400,   401,   402,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   514,   416,
     417,   418,     0,   419,   420,     0,   421,     0,   423,   424,
     425,   426,   427,     0,   428,   429,     0,     0,   430,   431,
     432,   433,   434,     0,   435,   436,   437,   438,   439,   440,
     441,   442,     0,     0,   443,   444,   445,   446,   447,     0,
       0,   448,   449,   450,   451,   452,   453,   454,     0,   455,
       0,   457,   458,   459,   460,   461,     0,     0,   462,     0,
       0,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   510,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    95,    96,
      97,    98,    99,   100,   101,   102,     0,   103,   104,   105,
       0,     0,     0,     0,     0,     0,     0,   106,   107,     0,
     108,   109,   110,     0,   112,   113,   114,   115,   116,     0,
     118,   119,     0,   120,   121,   122,   123,   124,   125,     0,
       0,   126,   127,   128,   129,   130,     0,   131,   132,   133,
     134,   135,     0,     0,     0,   137,   138,   139,   140,   141,
     142,     0,   144,   145,   146,     0,   147,   148,   149,   150,
     151,   152,     0,     0,   154,   155,   156,     0,     0,     0,
       0,     0,     0,     0,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,     0,   168,     0,   169,   170,   171,
     172,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,     0,     0,   182,   183,   184,   185,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,     0,   204,
       0,   205,   206,   207,   208,     0,   209,     0,   210,     0,
       0,     0,   213,   214,   215,     0,   217,     0,   218,     0,
       0,     0,   219,   220,   221,     0,   222,   223,   224,   225,
     226,  1825,   228,     0,   230,   231,   232,   233,     0,   234,
     235,   236,   237,   238,   239,     0,   240,     0,   242,   243,
     244,   245,   246,   247,   248,   249,     0,   250,     0,   251,
       0,     0,   254,     0,   256,   257,   258,   259,   260,     0,
       0,   261,     0,   263,     0,     0,   265,   266,   267,     0,
       0,   268,   269,   270,   271,   272,   512,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,     0,   294,   295,   296,
     297,   298,   299,     0,   300,   301,     0,   303,     0,   304,
     305,   306,   307,   308,   309,     0,   310,   311,     0,     0,
     312,   313,   314,     0,     0,   315,   316,     0,   318,     0,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,   331,   332,   333,   334,   335,   336,   337,   338,
     339,     0,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,     0,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,     0,   370,   371,     0,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,     0,   388,   389,   390,   391,   392,     0,   393,
     394,   395,   396,   397,     0,   399,   400,   401,   402,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   514,   416,   417,   418,     0,   419,   420,     0,
     421,     0,   423,   424,   425,   426,   427,     0,   428,   429,
       0,     0,   430,   431,   432,   433,   434,     0,   435,   436,
     437,   438,   439,   440,   441,   442,     0,     0,   443,   444,
     445,   446,   447,     0,     0,   448,   449,   450,   451,   452,
     453,   454,     0,   455,     0,   457,   458,   459,   460,   461,
       0,     0,   462,     0,     0,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   510,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    95,    96,    97,    98,    99,   100,   101,   102,
       0,   103,   104,   105,     0,     0,     0,     0,     0,     0,
       0,   106,   107,     0,   108,   109,   110,     0,   112,   113,
     114,   115,   116,     0,   118,   119,     0,   120,   121,   122,
     123,   124,   125,     0,     0,   126,   127,   128,   129,   130,
       0,   131,   132,   133,   134,   135,     0,     0,     0,   137,
     138,   139,   140,   141,   142,     0,   144,   145,   146,     0,
     147,   148,   149,   150,   151,   152,     0,     0,   154,   155,
     156,     0,     0,     0,     0,     0,     0,     0,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,     0,   168,
       0,   169,   170,   171,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,     0,     0,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,     0,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,     0,   204,     0,   205,   206,   207,   208,     0,
     209,     0,   210,     0,     0,     0,   213,   214,   215,     0,
     217,     0,   218,     0,     0,     0,   219,   220,   221,     0,
     222,   223,   224,   225,   226,  1837,   228,     0,   230,   231,
     232,   233,     0,   234,   235,   236,   237,   238,   239,     0,
     240,     0,   242,   243,   244,   245,   246,   247,   248,   249,
       0,   250,     0,   251,     0,     0,   254,     0,   256,   257,
     258,   259,   260,     0,     0,   261,     0,   263,     0,     0,
     265,   266,   267,     0,     0,   268,   269,   270,   271,   272,
     512,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   294,   295,   296,   297,   298,   299,     0,   300,   301,
       0,   303,     0,   304,   305,   306,   307,   308,   309,     0,
     310,   311,     0,     0,   312,   313,   314,     0,     0,   315,
     316,     0,   318,     0,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,   331,   332,   333,   334,
     335,   336,   337,   338,   339,     0,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,     0,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,     0,   393,   394,   395,   396,   397,     0,   399,
     400,   401,   402,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   514,   416,   417,   418,
       0,   419,   420,     0,   421,     0,   423,   424,   425,   426,
     427,     0,   428,   429,     0,     0,   430,   431,   432,   433,
     434,     0,   435,   436,   437,   438,   439,   440,   441,   442,
       0,     0,   443,   444,   445,   446,   447,     0,     0,   448,
     449,   450,   451,   452,   453,   454,     0,   455,     0,   457,
     458,   459,   460,   461,     0,     0,   462,     0,     0,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     510,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    95,    96,    97,    98,
      99,   100,   101,   102,     0,   103,   104,   105,     0,     0,
       0,     0,     0,     0,     0,   106,   107,     0,   108,   109,
     110,     0,   112,   113,   114,   115,   116,     0,   118,   119,
       0,   120,   121,   122,   123,   124,   125,     0,     0,   126,
     127,   128,   129,   130,     0,   131,   132,   133,   134,   135,
       0,     0,     0,   137,   138,   139,   140,   141,   142,     0,
     144,   145,   146,     0,   147,   148,   149,   150,   151,   152,
       0,     0,   154,   155,   156,     0,     0,     0,     0,     0,
       0,     0,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,     0,
       0,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,     0,   204,     0,   205,
     206,   207,   208,     0,   209,     0,   210,     0,     0,     0,
     213,   214,   215,     0,   217,     0,   218,     0,     0,     0,
     219,   220,   221,     0,   222,   223,   224,   225,   226,  1839,
     228,     0,   230,   231,   232,   233,     0,   234,   235,   236,
     237,   238,   239,     0,   240,     0,   242,   243,   244,   245,
     246,   247,   248,   249,     0,   250,     0,   251,     0,     0,
     254,     0,   256,   257,   258,   259,   260,     0,     0,   261,
       0,   263,     0,     0,   265,   266,   267,     0,     0,   268,
     269,   270,   271,   272,   512,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,     0,   294,   295,   296,   297,   298,
     299,     0,   300,   301,     0,   303,     0,   304,   305,   306,
     307,   308,   309,     0,   310,   311,     0,     0,   312,   313,
     314,     0,     0,   315,   316,     0,   318,     0,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,     0,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,     0,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,     0,   370,   371,     0,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
       0,   388,   389,   390,   391,   392,     0,   393,   394,   395,
     396,   397,     0,   399,   400,   401,   402,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     514,   416,   417,   418,     0,   419,   420,     0,   421,     0,
     423,   424,   425,   426,   427,     0,   428,   429,     0,     0,
     430,   431,   432,   433,   434,     0,   435,   436,   437,   438,
     439,   440,   441,   442,     0,     0,   443,   444,   445,   446,
     447,     0,     0,   448,   449,   450,   451,   452,   453,   454,
       0,   455,     0,   457,   458,   459,   460,   461,     0,     0,
     462,     0,     0,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   510,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      95,    96,    97,    98,    99,   100,   101,   102,     0,   103,
     104,   105,     0,     0,     0,     0,     0,     0,     0,   106,
     107,     0,   108,   109,   110,     0,   112,   113,   114,   115,
     116,     0,   118,   119,     0,   120,   121,   122,   123,   124,
     125,     0,     0,   126,   127,   128,   129,   130,     0,   131,
     132,   133,   134,   135,     0,     0,     0,   137,   138,   139,
     140,   141,   142,     0,   144,   145,   146,     0,   147,   148,
     149,   150,   151,   152,     0,     0,   154,   155,   156,     0,
       0,     0,     0,     0,     0,     0,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,     0,   168,     0,   169,
     170,   171,   172,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,     0,     0,   182,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
       0,   204,     0,   205,   206,   207,   208,     0,   209,     0,
     210,     0,     0,     0,   213,   214,   215,     0,   217,     0,
     218,     0,     0,     0,   219,   220,   221,     0,   222,   223,
     224,   225,   226,   227,   228,     0,   230,   231,   232,   233,
       0,   234,   235,   236,   237,   238,   239,     0,   240,     0,
     242,   243,   244,   245,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,   254,     0,   256,   257,   258,   259,
     260,     0,     0,   261,     0,   263,     0,     0,   265,   266,
     267,     0,     0,   268,   269,   270,   271,   272,   512,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,     0,   294,
     295,   296,   297,   298,   299,     0,   300,   301,     0,   303,
       0,   304,   305,   306,   307,   308,   309,     0,   310,   311,
       0,     0,   312,   313,   314,     0,     0,   315,   316,     0,
     318,     0,   320,   321,   322,   323,   324,   325,   326,     0,
     328,   329,   330,     0,   331,   332,   333,   334,   335,   336,
     337,   338,   339,     0,   340,   341,   342,   343,   344,   345,
     346,   347,   348,     0,   350,   351,   352,   353,   354,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,     0,   373,
     374,   375,   376,     0,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
       0,   393,   394,   395,   396,   397,     0,   399,   400,   401,
     402,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   514,   416,   417,   418,     0,   419,
     420,     0,   421,     0,   423,   424,   425,   426,   427,     0,
     428,   429,     0,     0,   430,   431,   432,   433,   434,     0,
     435,   436,   437,   438,   439,   440,   441,   442,     0,     0,
     443,   444,   445,   446,   447,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   676,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    95,    96,    97,    98,    99,   100,
     101,   102,     0,   103,   104,   105,     0,     0,     0,     0,
       0,     0,     0,   106,   107,     0,   108,   109,   110,   677,
     112,   113,   114,     0,   678,   679,   680,   681,     0,   120,
     121,   122,   123,   124,   125,     0,     0,   126,   127,   682,
     683,   130,     0,   131,   132,   133,   134,     0,     0,   684,
       0,   137,   138,   139,   140,   141,   142,   685,   144,   145,
     146,     0,   147,   148,   149,   150,   151,   152,     0,   686,
     154,   155,   156,     0,     0,     0,   687,     0,     0,     0,
     158,   159,   160,   161,   162,   163,   164,   688,   689,   167,
       0,   168,     0,   169,   170,   171,   172,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,     0,     0,   182,
     183,   690,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,     0,   199,
     200,   201,   202,     0,     0,   204,     0,   205,   206,   691,
     208,     0,   209,     0,   210,   692,     0,   693,   213,   214,
     215,   694,   217,     0,   218,     0,     0,     0,     0,     0,
     221,     0,   222,   223,   224,   225,   226,   695,   228,   696,
     230,   231,   232,   233,     0,   234,   235,   236,   237,   238,
     239,     0,   240,   697,     0,   243,   244,   245,   246,   247,
     698,   699,     0,   700,     0,   251,   701,   702,   254,   703,
     256,   257,   258,   259,   260,     0,     0,   261,   704,   263,
     705,     0,   265,   266,   267,     0,     0,   268,   269,   270,
     271,   272,   706,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   707,   708,   709,   295,   296,   297,   298,     0,     0,
     300,   301,   710,   303,     0,     0,   305,   711,   307,   308,
     309,     0,   310,   311,     0,     0,   312,   313,   314,     0,
       0,   315,     0,   712,   318,   713,     0,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,   331,   332,
       0,   334,   335,     0,   337,   338,   339,     0,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   714,
     352,   353,   354,   355,     0,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,     0,
     370,   371,   715,   373,   374,   375,   716,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,     0,   388,
     389,   390,   391,   392,     0,   393,   717,   395,   396,   397,
     718,   399,   400,   719,   402,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   720,   416,
       0,   418,     0,   419,   420,     0,   421,   721,   423,   424,
     425,   426,   427,     0,   722,   723,     0,     0,   430,   431,
       0,   433,     0,     0,   435,   436,   724,   438,   439,   440,
     441,   442,     0,     0,   443,   444,   445,   446,   447,     0,
       0,   448,   449,   450,   451,   452,     0,   725,     0,   455,
     726,   457,   458,   459,   460,   461,     0,     0,   462,     0,
       0,   463,   464,   465,   466,   467,   468,   676,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   480,   481,
     482,   483,     0,    95,    96,    97,    98,    99,   100,   101,
     102,     0,   103,   104,   105,     0,     0,     0,     0,     0,
       0,     0,   106,   107,     0,   108,   109,   110,   677,   112,
     113,   114,     0,   678,   679,   680,   681,     0,   120,   121,
     122,   123,   124,   125,     0,     0,   126,   127,   682,   683,
     130,     0,   131,   132,   133,   134,     0,     0,   684,     0,
     137,   138,   139,   140,   141,   142,   685,   144,   145,   146,
       0,   147,   148,   149,   150,   151,   152,     0,   686,   154,
     155,   156,     0,     0,     0,   687,     0,     0,     0,   158,
     159,   160,   161,   162,   163,   164,   688,   689,   167,     0,
     168,     0,   169,   170,   171,   172,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,     0,     0,   182,   183,
     690,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,     0,   199,   200,
     201,   202,     0,     0,   204,     0,   205,   206,   691,   208,
       0,   209,     0,   210,   692,     0,   693,   213,   214,   215,
     694,   217,     0,   218,     0,     0,     0,     0,     0,   221,
       0,   222,   223,   224,   225,   226,   227,   228,   696,   230,
     231,   232,   233,     0,   234,   235,   236,   237,   238,   239,
       0,   240,   697,     0,   243,   244,   245,   246,   247,   698,
     699,     0,   700,     0,   251,   701,   702,   254,   703,   256,
     257,   258,   259,   260,     0,     0,   261,   704,   263,   705,
       0,   265,   266,   267,     0,     0,   268,   269,   270,   271,
     272,   706,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     707,   708,   709,   295,   296,   297,   298,     0,     0,   300,
     301,   710,   303,     0,     0,   305,   711,   307,   308,   309,
       0,   310,   311,     0,     0,   312,   313,   314,     0,     0,
     315,     0,   712,   318,   713,     0,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,   331,   332,     0,
     334,   335,     0,   337,   338,   339,     0,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   714,   352,
     353,   354,   355,     0,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,     0,   370,
     371,   715,   373,   374,   375,   716,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,     0,   388,   389,
     390,   391,   392,     0,   393,   717,   395,   396,   397,   718,
     399,   400,   719,   402,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   720,   416,     0,
     418,     0,   419,   420,     0,   421,   721,   423,   424,   425,
     426,   427,     0,   722,   723,     0,     0,   430,   431,     0,
     433,     0,     0,   435,   436,   724,   438,   439,   440,   441,
     442,     0,     0,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,   452,     0,   725,     0,   455,   726,
     457,   458,   459,   460,   461,     0,     0,   462,     0,     0,
     463,   464,   465,   466,   467,   468,  2449,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   480,   481,   482,
     483,     0,    95,    96,    97,    98,    99,   100,   101,   102,
       0,   103,   104,   105,     0,     0,     0,     0,     0,     0,
       0,   106,   107,     0,   108,   109,   110,  2450,   112,   113,
     114,     0,   678,  2451,   680,   681,     0,   120,   121,   122,
     123,   124,   125,     0,     0,   126,   127,   682,   683,   130,
       0,   131,   132,   133,   134,     0,     0,  2452,     0,   137,
     138,   139,   140,   141,   142,  2453,   144,   145,   146,     0,
     147,   148,   149,   150,   151,   152,     0,  2454,   154,   155,
     156,     0,     0,     0,  2455,     0,     0,     0,   158,   159,
     160,   161,   162,   163,   164,   688,   689,   167,     0,   168,
       0,   169,   170,   171,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,     0,     0,   182,   183,   690,
     185,   186,   187,     0,   188,   189,   190,     0,   191,   192,
     193,     0,   194,   195,   196,   197,     0,   199,   200,   201,
     202,     0,     0,   204,     0,   205,   206,   691,   208,     0,
     209,     0,   210,  2456,     0,  2457,   213,   214,   215,  2458,
     217,     0,   218,     0,     0,     0,     0,     0,   221,     0,
     222,   223,   224,   225,   226,   227,   228,  2459,   230,   231,
     232,   233,     0,   234,   235,   236,   237,   238,   239,     0,
     240,  2460,     0,   243,   244,   245,   246,   247,   698,   699,
       0,   700,     0,   251,  2461,  2462,   254,  2463,   256,   257,
     258,   259,   260,     0,     0,   261,  2464,   263,  2465,     0,
     265,   266,   267,     0,     0,   268,   269,   270,   271,   272,
    2677,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   707,
    2467,   709,   295,   296,   297,   298,     0,     0,   300,   301,
    2469,   303,     0,     0,   305,   711,   307,   308,   309,     0,
     310,   311,     0,     0,   312,   313,   314,     0,     0,   315,
       0,  2471,   318,  2472,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,   331,   332,     0,   334,
     335,     0,   337,   338,   339,     0,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   714,   352,   353,
     354,   355,     0,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
    2473,   373,   374,   375,     0,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,     0,   393,     0,   395,   396,   397,  2475,   399,
     400,   719,   402,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,  2678,   416,     0,   418,
       0,   419,   420,     0,   421,  2477,   423,   424,   425,   426,
     427,     0,   722,   723,     0,     0,   430,   431,     0,   433,
       0,     0,   435,   436,  2478,   438,   439,   440,   441,   442,
       0,     0,   443,   444,   445,   446,   447,     0,     0,   448,
     449,   450,   451,   452,     0,   725,     0,   455,  2479,   457,
     458,   459,   460,   461,     0,     0,   462,     0,     0,   463,
     464,   465,   466,   467,   468,   676,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   480,   481,   482,   483,
       0,    95,    96,    97,    98,    99,   100,   101,   102,     0,
     103,   104,   105,     0,     0,     0,     0,     0,     0,     0,
     106,   107,     0,   108,   109,   110,   677,   112,   113,   114,
       0,   678,   679,   680,   681,     0,   120,   121,   122,   123,
     124,   125,     0,     0,   126,   127,   682,   683,   130,     0,
     131,   132,   133,   134,     0,     0,   684,     0,   137,   138,
     139,   140,   141,   142,   685,   144,   145,   146,     0,   147,
     148,   149,   150,   151,   152,     0,   686,   154,   155,   156,
       0,     0,     0,   687,     0,     0,     0,   158,   159,   160,
     161,   162,   163,   164,   688,   689,   167,     0,   168,     0,
     169,   170,   171,   172,   173,   174,     0,   175,   176,   177,
     178,   179,   180,   181,     0,     0,   182,   183,   690,   185,
     186,   187,     0,   188,   189,   190,     0,   191,   192,   193,
       0,   194,   195,   196,   197,     0,   199,   200,   201,   202,
       0,     0,   204,     0,   205,   206,   691,   208,     0,   209,
       0,   210,   692,     0,   693,   213,   214,   215,   694,   217,
       0,   218,     0,     0,     0,     0,     0,   221,     0,   222,
     223,   224,   225,   226,   227,   228,   696,   230,   231,   232,
     233,     0,   234,   235,   236,   237,   238,   239,     0,   240,
     697,     0,   243,   244,   245,   246,   247,   698,   699,     0,
     700,     0,   251,   701,   702,   254,   703,   256,   257,   258,
     259,   260,     0,     0,   261,   704,   263,   705,     0,   265,
     266,   267,     0,     0,   268,   269,   270,   271,   272,     0,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   707,   708,
     709,   295,   296,   297,   298,     0,     0,   300,   301,   710,
     303,     0,     0,   305,   711,   307,   308,   309,     0,   310,
     311,     0,     0,   312,   313,   314,     0,     0,   315,     0,
     712,   318,   713,     0,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,   331,   332,     0,   334,   335,
       0,   337,   338,   339,     0,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   714,   352,   353,   354,
     355,     0,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,     0,   370,   371,   715,
     373,   374,   375,     0,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,     0,   388,   389,   390,   391,
     392,     0,   393,     0,   395,   396,   397,   718,   399,   400,
     719,   402,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,     0,   416,     0,   418,     0,
     419,   420,     0,   421,   721,   423,   424,   425,   426,   427,
       0,   722,   723,     0,     0,   430,   431,     0,   433,     0,
       0,   435,   436,   724,   438,   439,   440,   441,   442,     0,
       0,   443,   444,   445,   446,   447,     0,     0,   448,   449,
     450,   451,   452,     0,   725,     0,   455,   726,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   480,   481,   482,   483
};

static const yytype_int16 yycheck[] =
{
       6,   651,    36,   636,    88,    11,    90,   626,    92,    15,
      52,   577,     6,   541,    20,    21,    22,    23,    24,  1014,
     814,    27,  1160,     0,    30,    31,   717,     6,    34,    35,
     814,   747,  1191,   749,  1369,   547,   596,  1160,  1013,   601,
      46,   723,  1247,    16,   894,  1160,   545,   896,    31,     0,
       0,     0,  1835,   988,   538,  1160,   960,  1760,   538,  1841,
    2217,  1843,   990,   912,   643,    16,  1054,  2189,   993,  1772,
    2189,  1832,  2122,     0,  1294,   924,   546,  2216,   547,  1716,
       0,   504,    88,    89,    90,    91,    92,  1196,  1323,  1324,
    1018,  2228,    54,  1653,  1654,  1879,  1880,  1881,  1658,   645,
      35,  2085,   538,    30,  1816,   636,    21,   638,    91,   640,
     682,   683,  2036,     5,   822,    54,  2111,   540,     5,    46,
    2232,     5,    13,    14,   549,     5,     3,     0,    73,    13,
      14,  2526,     0,    13,    14,     0,    50,   709,    40,  1699,
    1700,  1161,     3,  2597,    40,     5,  1907,     5,   932,    11,
    1376,    16,     5,    13,    14,    13,    14,   656,  1275,     5,
      13,    14,     9,  2522,  1423,    30,     5,     5,   120,   972,
       3,    36,  1421,     5,     5,     5,     5,     9,     9,     5,
       5,    46,     5,  2091,   623,     5,   171,     5,   623,    54,
       5,   753,     5,   140,    48,     5,   117,   172,   221,   881,
    1289,     9,     9,  2506,   219,    83,    27,   120,  2090,    15,
    2716,  1972,  1973,    34,   171,   122,   245,    15,  1002,    15,
      93,  1005,  1006,     9,     4,    93,  2024,     3,    27,     9,
      75,  2825,    11,   717,   202,  2681,    27,   717,  2389,     4,
     302,    86,  2487,    34,     9,   289,   311,    15,    75,   689,
     128,     3,     4,     5,    58,    31,    32,     9,   107,    86,
     212,  2436,    41,   139,   172,   115,  2635,   287,  1289,   841,
     842,   711,   361,   295,    11,    11,    20,    21,    15,    78,
    2785,   193,   161,  2145,   311,   295,    23,  2656,    87,     3,
      68,    58,    37,   163,    73,   867,    58,    34,    35,  2753,
     278,   741,   814,   538,   275,    15,   107,    58,  3014,   821,
    1001,   373,  1756,   118,  2098,    11,    11,   116,  1026,   409,
     115,  3055,   176,   423,    27,  1033,  1289,  2160,    59,   445,
     892,    34,   332,   150,   118,   362,    67,   897,   352,   823,
     194,   191,  2701,   823,   221,   199,    41,   817,   410,  2943,
     108,   163,    89,    24,   444,  2474,  1997,   236,  1995,    30,
     221,  2518,   362,   115,  1808,   925,   380,   492,   468,  2353,
     462,  3105,   161,  2357,  2109,    46,  2159,    73,    73,   124,
     505,   235,  2521,   200,  2025,  3091,  3120,   503,   108,   451,
     195,   951,   191,   939,   170,  2156,   172,  2158,   366,   307,
     270,   115,   120,   465,   203,   503,   374,   286,  2241,   387,
     494,   195,   441,   853,   503,   507,   289,   229,     0,   137,
     982,   289,   934,   935,   274,   509,   954,   489,   306,  2824,
     272,   871,    11,   498,  2679,   213,  2344,  2806,    11,   351,
    1059,   503,   410,  2003,  2004,  2005,  2006,   236,   932,  2009,
    2010,  2011,  2012,  2013,  2014,  2015,  2016,  2017,  2018,   503,
    3054,  2343,    41,  2614,   421,  1173,   218,   343,    41,    23,
     271,   498,   443,  2575,   503,  2650,  2981,  2275,   386,  1568,
    1569,   354,   717,   503,   279,   507,   354,   239,   494,   512,
     458,   443,   507,  1296,    73,   501,  1716,   507,   504,  2260,
      73,  2061,  2062,   509,  2958,   407,  3012,   513,   239,   593,
    1530,   407,  1447,   547,   461,  1503,   493,  1001,  2821,   171,
    1170,  1001,   507,   948,  1783,  2627,   447,  1762,   503,   613,
     443,   385,    93,  1782,   540,   541,   542,   415,   445,  1534,
     373,   980,   493,   493,   493,   980,  2992,  1568,  2410,   353,
    2945,   557,   398,   399,   588,     8,   501,  1777,    11,  2681,
     505,   410,  2681,    16,    17,    18,   493,   454,    11,   390,
     576,   577,   578,   579,   547,   581,   421,   410,  2690,   663,
     664,   665,  1161,   137,   626,  2944,   353,   593,   823,   503,
     300,   353,   465,  1819,   421,   546,   602,   465,   397,   390,
    2584,   400,   353,   321,  1567,  2589,  1409,   613,  2592,   501,
    2605,   503,   503,   505,  2716,   457,   503,  1605,   451,   503,
    1192,  1193,  1184,   503,   501,   631,   599,  2551,   493,   591,
    2413,   504,   465,   506,   611,   512,   504,   499,   506,  2083,
     501,  2085,   557,   503,  2426,   503,  2381,   467,   631,   538,
     503,   512,   591,  1770,   467,   502,   489,   663,   664,   665,
     611,   611,   611,  1371,   503,   503,  2823,   602,  2576,   489,
     503,   503,   503,   503,   503,   117,   489,   503,   503,   455,
     503,   546,   547,   503,   611,   503,  1265,   390,   503,   495,
     503,   611,  1476,   503,   502,   502,  2408,   495,  2835,   495,
     465,   455,  1486,   507,  1909,  1489,  1190,  1191,   494,   495,
    1190,  1191,   132,  1241,   494,   495,  1278,   165,  1280,    67,
     499,  2505,  1284,   588,   489,  2837,   591,   495,   131,   494,
     495,   225,   148,  1279,   445,  1297,  1298,  1249,  1300,   293,
     507,    58,   494,   495,  2906,   507,   611,  2508,   106,   506,
    1310,  1289,  1236,  1332,  1190,  2392,  1236,    27,  1320,  2861,
     496,   497,   498,   499,  2748,   245,  1001,   507,   221,   421,
     257,   258,  1318,  1319,   382,  1995,   513,   271,  1248,     8,
    1249,   467,    11,   465,    30,   274,   503,    16,    17,    18,
     279,   132,   503,  2950,  1588,  1374,   350,   373,   352,   462,
    1236,   217,    27,   489,  1588,   542,  2908,   489,    54,  2044,
     117,   555,   373,   557,   558,  1238,  1239,  1363,   159,   496,
     168,   827,  1245,   226,  1933,   502,   380,  1373,   717,  1375,
    1939,  1680,  1682,   132,   410,  1551,   580,   279,   291,  1472,
     492,   498,   331,  1327,   507,   348,   177,  1327,   505,   410,
    1653,  1654,   936,   505,  2637,  1658,  1572,   492,  1574,   893,
    1764,  1577,   132,  1858,   284,   602,   817,  3006,   503,   317,
    2992,   496,   337,  2992,  3036,   451,   180,   502,   245,   295,
    1499,  1500,  1501,   370,   371,  1464,   366,   161,   894,   383,
     451,  1327,   166,   251,  1882,   503,  1699,  1700,  2057,   206,
     984,   259,   202,   987,   465,    13,    14,   132,   239,  2353,
    3012,   501,  1335,  2357,  1445,   505,  1000,   496,   497,   498,
     499,   494,   495,   496,   497,   498,   499,   503,   489,   337,
     936,    64,    65,  3090,   823,    31,    32,  1021,   279,  1867,
     252,  1472,   503,   284,   426,   410,    75,   953,   954,   443,
     458,  1530,   817,     4,   271,  1190,  1191,    86,     9,   369,
    1491,   441,   236,   225,   271,  1496,   374,   274,  1817,  2189,
     199,   503,  1456,   245,   322,   274,  1456,   983,   984,     5,
     986,   987,   988,   132,  2544,   284,  1548,  3037,  3038,   414,
     855,   416,   221,   458,  1000,  1920,   245,    93,  1923,   366,
     983,  1236,   410,   965,   966,   503,   968,    75,  2791,   271,
     159,  1017,   286,   467,  2796,  1021,  1751,  1752,    86,    23,
    1456,   437,   486,   503,  1523,    29,   965,   966,   893,   968,
    1568,  1569,  1570,   245,  1017,   489,   353,   490,   491,   492,
     223,   494,   495,   496,   497,   498,   499,  3097,  2253,   503,
     458,   494,   495,   496,   497,   498,   499,   245,   166,  1482,
     505,   152,   291,   380,  1487,   498,   504,  2984,  2985,   507,
     814,   333,   505,    23,   441,   289,  1588,   821,  1562,    29,
    1164,  2219,  1562,   414,     4,   416,   486,   428,  2648,     9,
     438,  1603,  1327,   467,   366,   152,  2219,   337,   439,  2362,
     965,   966,  2365,   968,  2219,  1667,  1668,  1669,  1670,   496,
     441,     4,  1001,     4,  2219,   489,     9,   366,     9,    13,
      14,   383,  1838,  1607,  1840,   274,  1562,  1607,   501,   503,
     279,  2575,   505,   137,   374,   284,   503,   170,   504,  1758,
    2584,   507,  1704,     8,   507,  2589,    11,  1675,  2592,  1155,
     503,    16,    17,    18,   366,   899,  3073,   507,  1164,  2318,
    2720,    13,    14,  1247,   908,     8,  1172,  1961,    11,   441,
     410,  1607,  2392,   578,   579,  2170,   581,   921,   366,   504,
     490,   443,   501,  2627,   503,   495,   505,   137,   932,   504,
     934,   935,   441,   503,  2169,   486,   504,  1203,    41,   507,
    2003,  2004,  2005,  2006,  2907,    48,  2009,  2010,  2011,  2012,
    2013,  2014,  2015,  2016,  2017,  2018,   953,   414,   458,   416,
     161,  1456,  2157,   223,  1667,   166,  1669,  1670,    54,   441,
      73,   503,  1238,  1239,   503,  1241,  1242,  2212,  1244,  1245,
      94,  1247,  1595,  2168,   172,  2170,  1599,   504,  1601,   504,
     507,  1901,   507,   441,   503,  1937,  1938,   504,  2061,  2062,
     507,   490,   491,   492,   171,   494,   495,   496,   497,   498,
     499,  2606,  2716,   507,   219,   509,  1249,   373,   153,   428,
     208,    23,   373,   504,  1368,   346,   507,    29,  1294,   293,
     439,   503,  2141,   153,  3077,   236,   224,  1248,  1275,  1305,
     153,  1190,  1191,   146,  2748,   233,  1390,   153,  1392,   504,
    3013,   465,   507,   467,   410,   503,   373,   504,   172,   410,
     507,  2358,   504,  2360,  1275,  1275,  1275,  1562,   504,  1335,
     503,   507,   504,   176,   504,   507,  3039,   507,  2073,  2074,
    2075,  2076,   346,   293,     3,   286,   350,  1236,  1275,   504,
    1434,   194,   507,   410,   208,   451,   199,   505,   504,   455,
     451,   507,  1368,  1369,   414,   504,   416,    67,   507,   465,
     224,    23,  1607,   414,   465,   416,   380,    29,   274,   233,
      94,     8,    36,  1248,  1390,   458,  1392,  1966,  2547,    16,
      17,    18,   235,   489,   451,   137,   346,    82,   489,   504,
     350,   503,   507,   504,  3107,  2189,   507,   503,   465,   469,
    1275,   504,   503,   267,   507,   115,   538,  2861,  1391,   504,
     504,   504,   507,   507,   507,   454,   291,   503,  1434,   357,
     380,   503,   489,  1517,  1518,  1919,  1442,  1443,  1327,  1919,
     504,  1447,  1448,   507,   448,   318,   503,  2442,   291,  1961,
      13,    14,  1458,  1459,  1460,  1461,   504,  1463,   172,   507,
     620,  2681,   622,  1469,  2908,  1471,   504,   153,   504,   507,
    2032,   507,   503,  1338,    35,   175,  1482,  1483,   503,  2414,
     503,  1487,  1488,  1919,   153,   137,  1492,  1493,  1494,  1495,
     153,  1497,  1498,  2039,   208,   153,   189,   190,   448,  2349,
    1984,    13,    14,   357,  1984,  1242,     5,  1244,   289,     8,
     224,  1517,  1518,  2363,  1441,    14,  1522,   504,  2002,   233,
     507,    23,  2002,    13,    14,   410,    25,    29,    23,   503,
      29,    36,  1538,  1956,    29,  2095,  2252,   504,   504,   234,
     507,   507,   385,  2027,   503,  1289,   501,  2027,  1984,     8,
    2034,   293,    11,   267,  2034,   504,     5,    23,   507,  2894,
      13,    14,  2721,    29,   257,   258,  2002,  1456,  3012,   373,
    1296,    13,    14,  2057,   274,   289,  1441,  2057,   504,   279,
     504,   507,    41,   507,     5,  2204,   166,   504,   115,    48,
     507,  2027,     5,   504,   504,   717,   507,   507,  2034,     5,
     504,   503,  2148,   507,   346,   503,   410,     5,   350,  2188,
    1537,  2190,   504,   503,    73,   507,   504,   504,     5,   507,
     507,  1655,   322,    13,    14,   490,   491,   492,   149,   494,
     495,   496,   497,   498,   499,   137,  1380,   504,   380,   339,
     507,   293,   137,   357,   487,   504,   503,   451,   507,  2433,
       9,   494,   495,   496,   497,   498,   499,   177,   466,   504,
     504,   465,   507,   507,   291,  1749,    13,    14,   503,  1675,
    1704,   137,  1537,  1562,    13,    14,  1682,   370,   371,    13,
      14,   503,   202,  1409,  1919,   489,   504,   146,   504,   507,
     504,   507,   504,   507,   346,   507,    36,   504,   350,   503,
     507,   823,    13,    14,   504,  2189,   448,   507,   503,  2189,
    1716,  1448,  2687,   504,   503,    55,   507,   176,  1607,   239,
     503,  1458,   504,  1460,   504,   507,  1463,   507,   380,  2445,
    2446,   445,  1469,   504,  1471,   194,   507,   503,   438,   504,
     199,  2544,   507,  1749,  2538,   445,  1483,    13,    14,  1984,
    1756,  1488,   503,  2189,   503,  1492,  1493,  1494,  1495,   503,
    1497,  1498,  1756,    13,    14,  2249,   106,  2002,   504,  2249,
     504,   507,  2992,   507,   294,   302,   235,  1756,   504,  1813,
     503,   507,   504,  2474,   503,   507,    13,    14,    13,    14,
    1655,   293,  2027,  1770,    13,    14,   448,   503,   293,  2034,
      13,    14,  1808,    15,  1810,    13,    14,  1813,    13,    14,
    1816,    13,    14,  2249,  1808,  1899,    13,    14,   219,  1770,
    1770,  1770,  2057,  2369,  1908,  1909,  1832,   293,  1912,  1808,
       6,   503,   291,  2399,  2318,    13,    14,   503,  2318,  1704,
     507,    50,  1926,  1770,  1588,  2648,   373,   503,   350,    97,
    1594,   346,   361,   362,   503,   350,  2402,  1722,   249,  1603,
     234,   201,    36,   490,   491,   492,   166,   494,   495,   496,
     497,   498,   499,  1738,   361,   362,   261,   262,   380,  1001,
     346,   370,   371,   410,   350,   380,    95,   286,  1894,   361,
     362,  1756,   166,  1899,   414,   284,   416,  2681,   361,   362,
     380,  1907,  1908,  1909,  1910,  1770,  1912,   934,   935,   503,
     421,   251,   121,   503,   380,    86,   507,  2720,   438,   259,
    1926,   441,    54,   421,   451,    54,   385,  1653,  1654,   421,
     421,   271,  1658,   142,  1940,   264,   504,   146,   465,   512,
     421,   465,   153,  1808,    93,   505,   448,   145,  1813,   274,
    1956,   274,    36,   448,  2189,   503,    36,   503,   167,     9,
    2444,   170,   489,   303,  2444,    35,  1972,  1973,   419,   419,
     501,   501,   507,  1699,  1700,   421,   503,   421,   187,   461,
     421,   421,   448,    11,   503,   348,   512,   502,   419,  1995,
    2474,   507,   279,   148,  2474,  2079,  2080,  2081,   421,   507,
     503,   182,  2036,   503,   162,   171,   161,   504,  2444,   503,
       3,   166,   352,   217,  2249,   383,   311,   290,   225,   507,
     311,   507,    36,   445,   503,   225,  2538,  2069,   487,   274,
    1919,   225,  1959,  2067,   374,   494,   495,   496,   497,   498,
     499,   295,   327,   287,   458,   411,   503,  2131,   503,   153,
     153,  2085,   274,   465,   289,   395,   504,   486,  3053,   486,
     289,   504,   217,  2547,   501,  2071,   504,  2547,  1190,  1191,
     279,   504,   504,  2079,  2080,  2081,    36,  2083,   287,  2085,
    2086,   236,   274,  2318,  2090,  2091,    36,   502,   504,  2083,
     171,  2085,   171,   504,  1959,  1984,   504,   504,   486,   504,
     504,  1845,   505,   503,  2083,   421,  2085,   504,   504,   504,
     504,  2730,   299,  2002,  1236,    36,   462,   503,   488,   503,
     503,   290,   331,   290,   443,  2131,   290,   507,   244,   462,
     451,   286,   289,   421,  2218,   492,  2220,   274,  2027,   503,
     295,   153,   202,  2149,   153,  2034,  2152,   293,  1892,   153,
    2156,  2157,  2158,   421,  2160,   281,   421,  2807,   421,   421,
     281,   504,  1906,   465,   504,   502,   504,   503,  2057,  2253,
    2176,  2036,  2178,  1910,   287,   503,   507,   289,    36,   153,
     502,   153,   502,   279,   171,  2191,  2192,  2193,  2194,  2195,
    2196,  2197,  2198,  2199,  2200,   144,    11,  2681,   166,   504,
     504,  2681,  2067,   504,   171,  1327,   503,  2735,  2992,  2444,
    2216,   504,  2218,  2792,  2220,   462,   171,  1961,  2083,   410,
    2085,   503,   489,  2646,  1968,  2753,  1970,  2233,   507,   182,
    1974,  1975,   504,   504,    76,  2241,   495,  2721,     3,  2474,
     354,  2721,   503,   290,   450,  2681,    84,  2253,   153,   175,
    2334,  2335,  2336,  2337,  2260,   432,   507,   503,    36,    79,
     503,  2911,   504,   538,   504,   504,   504,   503,  2752,   502,
     445,  2755,  2752,   507,   504,  2755,   171,  2003,  2004,  2005,
    2006,   504,   437,  2009,  2010,  2011,  2012,  2013,  2014,  2015,
    2016,  2017,  2018,   503,     3,   412,  2858,   224,  2826,   298,
    2189,   504,  2308,   504,   503,   224,   296,     3,   504,     5,
     503,    54,  2547,  2240,   503,   186,  2752,     3,   504,  2755,
    2882,   503,  2884,     3,   504,  2331,   465,   492,  2334,  2335,
    2336,  2337,   504,   192,  1456,  2061,  2062,  2343,  2344,   204,
    2346,   279,   279,  2349,   505,   505,  2874,  2353,   421,    36,
     492,  2357,   505,   505,   505,   505,   421,  2363,   505,  2353,
    2249,   505,   538,  2357,  2997,   505,    36,   505,    55,   505,
     505,   547,   505,   504,  2353,  2240,   225,   505,  2357,   107,
     505,   505,   505,   505,   274,   505,  2392,   505,   503,   465,
    2813,   289,    36,  2399,   505,   505,   505,   505,  2404,   505,
     576,   577,  2408,   505,   505,   505,   503,   171,  2414,   503,
     503,   308,  2991,   109,   110,  2152,   224,   503,   464,   106,
     495,   504,    86,   133,   339,   601,   503,   225,    81,  2318,
     115,   503,    36,  2439,   153,    73,   504,   503,   122,  2176,
    1562,   226,   717,    36,   362,  2189,  2681,   153,   504,   362,
      36,    54,   503,   507,  2191,  2192,  2193,  2194,  2195,  2196,
    2197,  2198,  2199,  2200,   503,   641,   642,   643,   503,   503,
    2214,   503,   445,   450,  2401,    73,  2403,    36,   191,   445,
     432,  2904,   411,    67,    67,  1607,  2721,   292,  2353,   507,
     503,    36,  2357,   189,   190,   503,   364,   495,    12,   380,
     492,   191,  2508,   279,   249,    36,   503,   432,  2992,     3,
     292,   292,  2992,   504,   201,  2521,   504,  2752,     9,   503,
    2755,   503,   503,  2607,   503,  2531,    12,   271,   289,   361,
     495,     9,     9,    36,   347,   204,  2401,   289,  2403,   502,
     289,   717,   504,    33,   503,   502,   120,   443,   823,     9,
     391,   495,    55,   538,    22,  2444,  2992,   253,   254,   255,
     256,   257,   258,   504,   251,   261,   262,   339,   126,  2575,
    2576,  2655,   259,  2579,   226,   611,  2582,   753,  2584,   339,
    2994,  2575,  3080,  2589,   271,  2474,  2592,  1249,  2594,  2799,
    2584,  2597,  3052,  2520,  3040,  2589,  2575,  2706,  2592,  1830,
    2606,  2607,  2233,   106,  1842,  2584,   988,  2991,  1894,  3050,
    2589,  2695,  1827,  2592,  2188,  2989,   303,  2150,   983,   926,
    1437,  2627,  1774,   953,   975,   974,  2871,  2771,  2972,  2713,
    1791,  1409,  2376,  2627,  2100,  2967,  2886,  2375,   814,  1436,
    2646,  2647,   977,  1808,  2085,   821,   822,   823,  2627,  2655,
    2344,  2359,  2749,  2083,  2861,  2520,  2860,  2878,  2547,  2879,
    1289,  1289,  2603,   839,  1289,   352,  1289,   148,  2970,  2954,
    2971,  1365,   175,  1682,   370,   371,  2682,  2683,  1777,  1280,
     161,  1613,  1722,  2695,  1509,   166,  2099,   374,  1759,  2695,
    3123,  2697,   868,  3089,  2700,  1719,  2853,  2082,   201,  2106,
    2378,  2381,  2608,  1903,  1391,  1238,  2790,  2713,   395,  2438,
    2716,  2225,   888,   889,   890,  1190,   892,   893,  1898,  2584,
    2171,  1966,  2716,  2214,  2589,  2759,  1001,  2592,  2186,  2735,
    1470,  1603,   717,  1836,  2404,  2538,   217,  2716,  2149,  1392,
     916,  2908,  2748,    -1,  2988,    -1,    -1,  2753,   251,  2833,
      -1,  2623,    -1,    -1,  2748,   236,   259,  2992,   934,   935,
      -1,    -1,  2768,    -1,  2691,    -1,    -1,    -1,   271,  2748,
      -1,     8,    -1,  2517,    11,    -1,  2782,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2790,    -1,    -1,   483,   484,    -1,
    2717,   967,  2681,    -1,  2538,   971,   972,  1919,    -1,    -1,
     303,    -1,    -1,  2809,    41,   286,   982,  2813,    -1,    -1,
       0,    48,    -1,    -1,   295,    -1,    -1,    -1,  2544,    -1,
    2826,    -1,    -1,    -1,    -1,  1001,  2691,  2833,    -1,    -1,
      -1,    -1,  2721,    -1,    -1,    -1,    73,    -1,   823,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   352,
    1026,    -1,  2717,    -1,    -1,  2861,    -1,  1033,  2602,    -1,
      -1,    -1,  1984,  2752,  2870,    -1,  2755,  2861,  2874,    -1,
      -1,   374,  2878,    -1,    -1,    -1,    -1,    -1,  1054,    -1,
    2002,    -1,  2861,  2748,    -1,    -1,    -1,    -1,  2894,    -1,
      -1,    -1,   395,    -1,  2759,    -1,    -1,    -1,  2904,  2905,
    2906,    -1,  2908,    93,    -1,  2027,    -1,  2834,    -1,   146,
    2647,    -1,  2034,    -1,  2908,  1190,  1191,     8,    -1,    -1,
      11,  3005,  2648,    -1,    -1,    16,    17,    18,    -1,  2908,
      -1,    -1,    -1,  2939,    -1,  2057,    -1,  2681,    -1,   176,
      -1,    -1,    33,    -1,    -1,  2682,  2683,    -1,    -1,    -1,
      -1,    -1,  2958,    -1,    -1,    -1,   437,   194,   148,    -1,
      -1,  1236,   199,  2700,  2970,    -1,  2972,    -1,    -1,  2834,
      -1,   161,    -1,    -1,  2901,    -1,   166,    -1,    -1,    -1,
      -1,   171,  2988,    -1,    -1,  1161,    -1,    -1,    -1,    -1,
      -1,    -1,   182,    -1,  2720,    -1,   186,  1173,   235,  3005,
    3006,    -1,    -1,    -1,    -1,  3089,  3012,    -1,  1184,    -1,
      -1,    -1,    -1,    -1,  1190,  1191,  1001,    -1,  3012,    -1,
     501,    -1,    -1,   504,   505,    -1,    -1,   217,    -1,    -1,
    3036,    -1,    -1,  3012,  3118,    -1,  2901,    -1,  3122,    -1,
      -1,    -1,    -1,    -1,    -1,  2782,   236,    -1,    -1,    -1,
      -1,    -1,  1327,    -1,   291,    -1,    -1,    -1,    36,    -1,
    1236,    -1,    -1,    -1,    -1,    -1,    -1,  2189,    -1,    -1,
      -1,    -1,  2809,  1249,  3001,    -1,    -1,    55,  2822,    -1,
      -1,    -1,    -1,  3089,    -1,    -1,    -1,    -1,    -1,  1265,
      -1,    67,    -1,    -1,    -1,    -1,   286,    73,    -1,   289,
      -1,    -1,  1278,  2992,  1280,   295,    -1,  1283,  1284,    -1,
      86,    -1,  3118,    -1,    -1,    -1,  3122,  1293,    -1,  1295,
    1296,  1297,  1298,  1299,  1300,  1301,    -1,  2249,   106,   107,
     221,    -1,    -1,    -1,    -1,    -1,  3001,   115,    -1,   115,
      -1,   117,    -1,    -1,  1320,    -1,  1322,    -1,   385,    -1,
      -1,  1327,  1328,  1329,  1330,  1331,  1332,    -1,    -1,    -1,
    1336,  1337,    -1,    -1,   354,  1341,    -1,    -1,    -1,  1345,
      -1,    -1,  1348,  1349,  1350,  1351,  1352,  1353,  1354,  1355,
    1356,  1456,    -1,  1359,    -1,    -1,    -1,    -1,  1364,    -1,
      -1,  1367,    -1,  1369,    -1,  1371,  2318,   175,  1374,   175,
     291,    -1,    -1,    -1,    -1,  1190,  1191,    -1,    -1,     0,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1394,    -1,
     410,    -1,    -1,   201,    -1,    -1,    -1,    -1,    -1,    -1,
     206,    -1,    -1,  1409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1420,  1421,    -1,   437,  2992,    -1,
     487,  1236,    -1,    -1,    -1,   445,    -1,   494,   495,   496,
     497,   498,   499,    -1,    -1,    -1,    -1,     0,    -1,    -1,
      -1,    -1,   462,   251,   464,   465,    -1,    -1,    -1,    -1,
    1456,   259,    -1,    -1,    -1,    -1,  1462,  1562,  1464,    -1,
      -1,    -1,    -1,   271,    -1,    -1,   274,    -1,   274,    -1,
      -1,    -1,    93,   279,    -1,    -1,    -1,    -1,    -1,     8,
      -1,   501,    11,    -1,   504,   505,   506,    16,    17,    18,
      -1,    -1,  2444,    -1,    -1,   303,    -1,  1503,    -1,    -1,
    1506,  1507,  1607,  1509,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1327,    -1,    -1,    -1,   322,    -1,    -1,    -1,
      -1,    -1,  2474,    -1,  1530,    -1,    -1,   148,    -1,    -1,
      93,    -1,    -1,   339,    -1,    -1,   109,   110,    -1,    -1,
     161,  1547,  1548,    -1,   352,   166,    -1,    -1,    -1,    -1,
     171,    -1,    -1,    -1,    -1,    -1,  1562,    -1,    -1,    -1,
      -1,   182,    -1,    -1,    -1,   186,   374,    -1,    -1,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,   499,    -1,
      -1,    -1,  1588,    -1,    -1,   148,    -1,   395,    -1,   397,
      -1,    -1,   400,    -1,    -1,  2547,   217,  1603,   161,  1605,
      -1,  1607,    -1,   166,    -1,    -1,  1612,    -1,   171,    -1,
      -1,  1617,    -1,    -1,    -1,   236,   189,   190,    -1,   182,
      -1,    -1,    -1,   186,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   438,    -1,    -1,    -1,    -1,    -1,    -1,   445,
      -1,  1456,    -1,    -1,    -1,    -1,    -1,  1653,  1654,  1655,
      -1,    -1,  1658,    -1,   217,    -1,    -1,    -1,    -1,    -1,
      -1,  1667,  1668,  1669,  1670,   286,    -1,    -1,   289,    -1,
      -1,  1677,    -1,   236,   295,  1681,    -1,    -1,  1684,    -1,
     253,   254,   255,   256,   257,   258,    -1,    -1,   261,   262,
      -1,    -1,   221,  1699,  1700,   503,    -1,    -1,  1704,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,    -1,
      -1,    -1,  1718,    -1,    -1,  1721,    -1,  1723,    -1,    -1,
      -1,    -1,    -1,   286,    -1,    -1,   289,    19,    -1,  2681,
      -1,    -1,   295,   354,    -1,    -1,    -1,    29,  1744,    31,
      32,    -1,    -1,    -1,    -1,    -1,    -1,  1562,    -1,    -1,
    1756,    -1,    -1,    -1,    -1,    47,    -1,    -1,    -1,    -1,
      -1,    -1,   291,    -1,    56,    -1,    -1,    -1,  1774,  2721,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1791,  1792,    79,    -1,   410,
      -1,   354,  1607,    -1,    -1,    -1,    -1,   370,   371,    91,
    2752,    93,  1808,  2755,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1919,    -1,   437,    -1,  1824,   111,
      -1,    -1,    -1,    -1,   445,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   125,    -1,  1841,  1842,  1843,    -1,    -1,
      -1,   462,    -1,   464,   465,   137,    -1,   410,    -1,    -1,
      -1,    -1,   144,    -1,    -1,     8,    -1,    -1,    11,    -1,
     152,    -1,   154,   155,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   437,   167,  1882,    -1,    -1,  1984,
     501,    -1,   445,   504,   505,   506,    -1,    -1,    41,    -1,
      -1,    -1,    -1,    -1,    -1,    48,    -1,  2002,    -1,   462,
      -1,   464,   465,    -1,    -1,    -1,   198,    -1,    -1,    -1,
     483,   484,    -1,  1919,    -1,    -1,    -1,    -1,    -1,    -1,
      73,   213,  2027,    -1,    -1,    -1,    -1,    -1,    -1,  2034,
     503,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   501,    -1,
      -1,   504,   505,   506,    -1,    -1,   238,    -1,    -1,    -1,
      -1,    -1,  2057,    -1,    -1,  1961,    -1,    -1,    -1,    -1,
    1966,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
     499,    -1,    -1,    -1,    -1,  1981,    -1,    -1,  1984,    -1,
      -1,    -1,    -1,    -1,  1990,    -1,    -1,  1993,    -1,    -1,
    1996,    -1,    -1,   146,    -1,    -1,  2002,  2003,  2004,  2005,
    2006,    -1,    -1,  2009,  2010,  2011,  2012,  2013,  2014,  2015,
    2016,  2017,  2018,    -1,   173,    -1,  2022,  2023,   177,    -1,
      -1,  2027,    -1,   176,   316,    -1,  2032,   319,  2034,    -1,
    2036,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,  2045,
    2992,   194,  2048,   202,  2050,    -1,   199,    -1,    -1,    -1,
      -1,  2057,  2058,    23,    -1,  2061,  2062,    -1,   350,    29,
    2066,  2067,    -1,    -1,    -1,    -1,    36,   359,    41,    -1,
      -1,    -1,    -1,    -1,    -1,    48,    -1,  2083,    -1,  2085,
     239,   373,   235,    -1,  2189,    55,    -1,   246,   380,    -1,
    2096,    -1,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      73,    -1,    -1,   395,  1919,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   406,    -1,    -1,    -1,   410,    -1,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,  2134,    -1,
      -1,    16,    17,    18,    -1,   294,   106,    -1,   291,   576,
     577,    -1,    -1,    -1,  2249,  2151,    -1,    -1,    33,    -1,
      -1,    -1,    -1,    -1,   446,    -1,    41,    -1,    -1,   451,
      -1,    -1,    -1,    48,    -1,    -1,    -1,   137,    -1,  1984,
     329,    -1,    -1,   465,    -1,    -1,    -1,    -1,    -1,    -1,
    2186,    -1,  2188,  2189,  2190,    -1,    -1,  2002,    73,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   489,    -1,    -1,
      -1,    -1,    -1,   176,   641,   642,    -1,   366,    -1,    -1,
      -1,   503,  2027,  2318,   506,    -1,    -1,    -1,    -1,  2034,
      -1,   194,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,
      -1,   201,   385,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,  2057,  2249,    16,    17,    18,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   414,    -1,   416,    -1,    -1,
    2266,    33,   235,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   432,    -1,     8,    -1,    -1,    11,   438,
      -1,   251,   441,    16,    17,    18,    -1,    -1,    -1,   259,
      -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   271,    -1,   814,    -1,    -1,  2312,  2313,    41,   194,
     821,  2317,  2318,    -1,   199,    48,  2322,    -1,   291,  2325,
    2326,    -1,    -1,   293,  2330,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   303,   487,    -1,   221,   222,    -1,  2444,
      73,   494,   495,   496,   497,   498,   499,  2353,    -1,    -1,
     235,  2357,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2474,
      -1,    -1,    -1,    -1,  2189,    -1,   346,    -1,    -1,    -1,
     350,    -1,   352,    -1,    -1,   822,    -1,    -1,    -1,   274,
      -1,    -1,   277,  2399,    -1,    -1,    -1,   908,    -1,    -1,
      -1,    -1,   839,    -1,   374,    -1,   291,    -1,    -1,   294,
     380,    -1,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2426,   932,    -1,   934,   935,   395,    -1,    -1,    -1,  2435,
      -1,   868,    -1,    -1,  2249,    -1,    -1,    -1,  2444,    -1,
      -1,    -1,  2547,   176,    -1,    -1,    -1,    -1,    -1,   221,
      -1,   888,   889,   890,    -1,    -1,   893,    -1,    -1,    -1,
      -1,   194,    -1,    -1,    -1,    -1,   199,    -1,  2474,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   448,   916,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   221,   222,
      -1,  1002,    -1,    -1,  1005,  1006,    -1,    -1,    -1,    -1,
     385,    -1,   235,  2318,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   487,    -1,    -1,    -1,    -1,   291,
      -1,   494,   495,   496,   497,   498,   499,    -1,    -1,    -1,
     967,    -1,  2538,    -1,   971,   972,    -1,    -1,  2544,    -1,
      -1,  2547,    -1,    -1,   277,  2551,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2559,  2560,    -1,    -1,  2563,   291,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2575,
      -1,    -1,    -1,    -1,    -1,    -1,  2681,    -1,  2584,    -1,
      -1,    -1,    -1,  2589,    -1,    -1,  2592,    -1,    -1,  1026,
      -1,    -1,    -1,  2599,  2600,    -1,  1033,    -1,    -1,    -1,
    2606,    -1,   487,    -1,    -1,   490,   491,   492,    -1,   494,
     495,   496,   497,   498,   499,    -1,  2721,  1054,    -1,    -1,
      -1,  2627,   507,  2629,    -1,    -1,    -1,    -1,    -1,  2444,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,  2648,    11,    -1,    -1,    -1,  2752,    -1,    -1,
    2755,    -1,   385,    -1,    -1,    -1,   909,    -1,    -1,  2474,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    41,    -1,  2681,    -1,  1188,    -1,    -1,
      48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1199,    -1,
    1201,    -1,    -1,    -1,    -1,  1206,   949,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,
    2716,    -1,  1223,    -1,  2720,  2721,    -1,    -1,   490,   491,
     492,    -1,   494,   495,   496,   497,   498,   499,    -1,    -1,
      -1,    -1,  2547,    -1,    -1,    -1,  1173,    -1,  2744,    -1,
      -1,    -1,  2748,  1254,  1255,    -1,  2752,    -1,    -1,  2755,
      -1,    -1,    -1,  2759,   487,    -1,    -1,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,   499,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1286,  1287,  2783,   146,  1290,
    1291,    -1,    -1,    -1,    -1,    -1,  2792,    -1,    -1,    -1,
    2796,  2797,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1058,    -1,    -1,   176,    -1,
      -1,    -1,  1065,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    -1,    16,    17,    18,    -1,   194,     3,    -1,    -1,
      -1,   199,     8,    -1,    -1,    11,    -1,    -1,    -1,    33,
      16,    17,    18,    -1,    -1,    -1,  1283,    -1,    -1,    -1,
      -1,    -1,  2858,    -1,    -1,  2861,  1293,    33,  1295,    -1,
      36,  1298,  1299,  1300,  1301,    41,  2681,   235,    -1,    -1,
      -1,    -1,    48,    -1,    -1,    -1,  2882,    -1,  2884,    -1,
    2886,    -1,    -1,    -1,    -1,  1322,    -1,  2992,  2894,   109,
     110,  1328,  1329,  1330,  1331,    -1,    -1,    73,    -1,  1336,
    1337,    -1,  2908,    -1,  1341,    -1,  2721,    -1,  1345,  1420,
    1421,  1348,  1349,  1350,  1351,  1352,  1353,  1354,  1355,  1356,
    2926,    -1,  1359,   291,    -1,    -1,    -1,  1364,    -1,    -1,
    1367,    -1,  1369,    -1,  1371,    -1,    -1,  2752,    -1,    -1,
    2755,    -1,    -1,    -1,    -1,    -1,    -1,  2953,  2954,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1394,    -1,    -1,
      -1,  2967,    -1,    -1,    -1,  1476,    -1,    -1,    -1,   189,
     190,    -1,    -1,    -1,    -1,  1486,    -1,    -1,  1489,    -1,
      -1,    -1,    -1,  1420,  1421,  2991,  2992,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     176,    -1,    -1,    -1,    -1,    -1,  3012,    -1,  3014,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     8,   385,   194,    11,
      -1,    -1,    -1,   199,    16,    17,    18,   221,  1281,    -1,
      -1,    -1,    -1,   253,   254,   255,   256,   257,   258,  1292,
      -1,   261,   262,  1296,    -1,   221,   222,    -1,    -1,  1302,
    1303,  1304,  1563,  1564,    -1,    -1,    -1,    -1,  1311,   235,
      -1,    -1,    -1,    -1,    -1,    -1,  1503,    -1,    -1,  1506,
    1507,    -1,  1509,    -1,    -1,    -1,    -1,  1588,    -1,    -1,
      -1,     8,    -1,    -1,    11,  3091,    -1,    -1,    -1,    16,
      17,    18,  1603,    -1,    -1,    -1,    -1,   291,   274,    -1,
      -1,   277,    -1,    -1,    -1,    -1,    33,    -1,    -1,    36,
    1547,    -1,    -1,  1366,    41,   291,    -1,    -1,   294,   487,
      -1,    48,    -1,    -1,    -1,    -1,   494,   495,   496,   497,
     498,   499,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,
     370,   371,  1405,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1419,    -1,  1605,    -1,
      -1,  1424,    -1,    -1,    -1,  1612,    -1,  2992,    -1,    -1,
    1617,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,   385,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1655,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   221,
    1667,    -1,  1669,  1670,    -1,    -1,    41,    -1,    -1,    -1,
    1677,    -1,    -1,    48,  1681,    -1,    -1,  1684,    -1,   176,
    1761,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   483,   484,    -1,    -1,   194,    73,    -1,
    1781,  1782,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1718,    -1,    -1,  1721,    -1,  1723,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   221,   222,   490,   491,   492,   291,
     494,   495,   496,   497,   498,   499,    -1,    -1,   235,    -1,
      -1,   487,    -1,    -1,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1774,    -1,    -1,
      -1,   146,    -1,    -1,    -1,    -1,    -1,   274,    -1,    -1,
     277,    -1,    -1,    -1,  1791,  1792,    -1,    -1,    -1,    -1,
      -1,    -1,  1615,    -1,   291,    -1,    -1,   294,    -1,    -1,
      -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1634,    -1,    -1,    -1,    -1,    -1,  1824,    -1,   194,
      -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,  1651,    -1,
    1653,  1654,    -1,  1656,    -1,  1658,    -1,    -1,    -1,    -1,
    1663,    -1,    -1,  1666,    -1,    -1,    -1,    -1,  1671,     8,
      -1,  1674,    11,  1934,    -1,    -1,    -1,    16,    17,    18,
     235,    -1,    -1,  1686,    -1,    -1,    -1,  1690,  1691,  1692,
    1693,    -1,    -1,    -1,    33,  1882,  1699,  1700,    -1,  1702,
    1703,    -1,    41,    -1,    -1,    -1,    -1,     8,   385,    48,
      11,  1714,    -1,    -1,  1717,    16,    17,    18,    -1,    -1,
      -1,    -1,  1725,  1726,  1727,  1728,  1729,  1730,  1731,  1732,
    1733,  1734,    33,    -1,    73,    -1,   291,    -1,    -1,  1742,
      41,    -1,    -1,  1746,    -1,    -1,    -1,    48,   490,   491,
     492,    -1,   494,   495,   496,   497,   498,   499,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1768,    -1,    -1,     8,    -1,
      -1,    11,    73,    -1,    -1,    -1,    16,    17,    18,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1981,    -1,    -1,    -1,    -1,    -1,
      -1,    41,    -1,  1990,    -1,    -1,  1993,    -1,    48,  1996,
     487,    -1,    -1,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,   499,    -1,    -1,    -1,    -1,   504,    -1,    -1,
     385,    -1,    -1,    73,    -1,  2022,  2023,   176,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2036,
      -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,  2045,    -1,
     199,  2048,    -1,  2050,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2058,    -1,    -1,    -1,   176,    -1,    -1,    -1,  2066,
    2067,    -1,   221,   222,  1887,  1888,  1889,    -1,    -1,    -1,
      -1,    -1,    -1,   194,    -1,    -1,   235,    -1,   199,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2096,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     221,   222,    -1,    -1,    -1,  1928,    -1,    -1,  2189,    -1,
      -1,    -1,   487,    -1,   235,   274,   176,    -1,   277,   494,
     495,   496,   497,   498,   499,    -1,    -1,  2134,    -1,    -1,
      -1,    21,   291,    -1,   194,   294,    -1,    -1,    -1,   199,
      -1,    -1,    -1,    -1,  2151,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   274,    -1,    -1,   277,  1980,    -1,    -1,
      -1,    -1,    -1,  1986,    -1,    -1,    -1,    -1,    -1,    -1,
     291,    -1,    -1,   294,    -1,   235,  1999,  2000,  2001,    -1,
    2003,  2004,  2005,  2006,    74,    -1,  2009,  2010,  2011,  2012,
    2013,  2014,  2015,  2016,  2017,  2018,  2019,    -1,    -1,    -1,
      90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2037,    -1,    -1,  2040,    -1,  2042,
      -1,    -1,    -1,  2046,  2047,    -1,   385,    -1,    -1,    -1,
      -1,   291,    -1,    -1,    -1,    -1,    -1,  2060,  2061,  2062,
    2063,    -1,  2065,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   147,    -1,  2266,
      -1,    -1,    -1,    -1,   385,    -1,   156,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   168,    -1,
      -1,    -1,    -1,   173,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2312,  2313,    -1,    -1,    -1,
    2317,    -1,   202,    -1,    -1,  2322,    -1,    -1,  2325,  2326,
      -1,    -1,    -1,  2330,    -1,   385,    -1,    -1,   487,    -1,
    2153,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
     499,    -1,    -1,    -1,    -1,   504,    -1,    -1,    -1,    -1,
      -1,    -1,  2433,    -1,    -1,    -1,   246,  2438,    -1,    -1,
     250,    -1,    -1,    -1,    -1,    -1,   487,    -1,    -1,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,   499,    -1,
      -1,     8,    -1,   504,    11,    -1,    -1,    -1,    -1,    16,
      17,    18,  2399,    -1,    -1,    -1,    -1,    -1,    -1,  2480,
    2481,    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,    -1,
      -1,    48,    -1,    -1,   314,    -1,    -1,   487,  2435,    -1,
     490,   491,   492,    -1,   494,   495,   496,   497,   498,   499,
     330,    -1,    -1,    -1,  2267,    -1,    73,    -1,  2271,  2272,
      -1,  2274,    -1,    -1,  2277,  2278,  2279,  2280,    -1,    -1,
      -1,  2284,  2285,  2286,  2287,  2288,  2289,  2290,  2291,  2292,
    2293,  2294,  2295,   363,    -1,    -1,   366,    -1,    -1,    -1,
      -1,    -1,  2305,    -1,   374,    -1,    -1,   377,  2311,    -1,
      -1,  2314,    -1,  2316,    -1,    -1,    -1,  2320,    -1,    -1,
    2323,  2324,    -1,    -1,  2327,  2328,     8,   397,    -1,    11,
      -1,    -1,    -1,    -1,    16,    17,    18,    -1,    -1,    -1,
     410,    -1,    -1,    -1,    -1,    -1,    -1,   417,    -1,    -1,
      -1,    33,    -1,    -1,    -1,    -1,   426,    -1,    -1,    41,
      -1,    -1,   432,    -1,  2551,    -1,    48,  2370,    -1,   176,
      -1,    -1,  2559,  2560,    -1,    -1,  2563,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,   458,    -1,
      -1,    73,   199,     8,    -1,  2398,    11,    -1,    -1,    -1,
      -1,    16,    17,    18,    -1,    -1,    -1,    -1,  2411,  2670,
    2671,    -1,  2599,  2600,   221,   222,    -1,    -1,    33,  2606,
    2681,    -1,    -1,    -1,    23,    -1,    41,    -1,   235,    -1,
      29,    -1,    -1,    48,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    -1,  2629,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    55,    -1,    73,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   274,    -1,    -1,
     277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   291,    -1,    -1,   294,    -1,    -1,
      -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,    -1,    -1,
      -1,    -1,   194,    -1,    -1,    -1,    -1,   199,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2540,   137,   221,
     222,  2544,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2553,  2554,  2555,   235,    -1,  2558,    -1,  2744,  2561,  2562,
      -1,   176,    -1,  2566,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2759,    -1,    -1,    -1,    -1,    -1,   385,   194,
      -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   274,    -1,    -1,   277,  2783,    -1,    -1,    -1,
      -1,    -1,   201,    -1,    -1,    -1,   221,   222,    -1,   291,
    2797,    -1,   294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     235,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2648,    -1,    -1,    -1,    -1,
      -1,    -1,   251,    -1,    -1,    -1,    -1,    -1,    -1,   274,
     259,    -1,   277,    -1,  2667,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   271,    -1,    -1,    -1,   291,    -1,    -1,   294,
     487,    -1,    -1,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,   499,    -1,   293,    -1,    -1,   504,    -1,  2886,
      -1,    -1,    -1,   385,   303,    -1,    -1,  2894,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2719,  2720,    -1,    -1,
      -1,    -1,  2725,  2726,  2727,    -1,    -1,    -1,    -1,    -1,
      -1,  2992,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2926,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   346,    -1,    -1,
      -1,   350,    -1,   352,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2766,  2767,    -1,  2953,  2954,    -1,    -1,
     385,    -1,    -1,    -1,    -1,   374,    -1,    -1,    -1,    -1,
    2967,   380,    -1,    -1,    -1,    -1,  2789,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   395,  2800,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   487,    -1,    -1,   490,   491,
     492,    -1,   494,   495,   496,   497,   498,   499,    -1,    -1,
      -1,    -1,   504,    -1,    -1,    -1,    -1,  3014,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   448,
      -1,    -1,  2855,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2873,    -1,   487,    -1,    -1,   490,   491,   492,    -1,   494,
     495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,   504,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2903,    -1,    -1,    -1,  3091,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2917,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    74,  2999,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    90,    91,    92,  3017,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,   131,   132,    -1,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,   170,    -1,   172,   173,   174,   175,   176,   177,    -1,
     179,    -1,    -1,    -1,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,    -1,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,    -1,   218,
      -1,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,    -1,    -1,   232,   233,   234,   235,    -1,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,    -1,   287,   288,
      -1,    -1,   291,   292,   293,    -1,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,    -1,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,   414,   415,   416,   417,    -1,
     419,   420,    -1,    -1,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,    -1,
     439,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,    -1,
      -1,    -1,    -1,    -1,    -1,   494,   495,   496,    -1,    -1,
      -1,    -1,   501,    -1,   503,   504,    -1,    -1,    -1,   508,
      -1,   510,   511,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
      30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,    39,
      -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    -1,    68,    69,
      70,    71,    72,    -1,    74,    -1,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,    -1,    -1,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,    -1,   218,    -1,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
      -1,    -1,   232,   233,   234,   235,    -1,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,    -1,   287,   288,    -1,
      -1,   291,   292,   293,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
      -1,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    -1,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,    -1,   419,
     420,    -1,    -1,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,   442,   443,   444,    -1,   446,   447,   448,   449,
     450,   451,   452,    -1,   454,   455,   456,   457,   458,   459,
     460,    -1,    -1,   463,    -1,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,    -1,   489,
      -1,    -1,    -1,    -1,   494,   495,    -1,    -1,    -1,    -1,
      -1,   501,    -1,   503,   504,    -1,    -1,    -1,   508,    -1,
     510,   511,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    74,    -1,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
      -1,    -1,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,    -1,
      -1,   232,   233,   234,   235,    -1,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,    -1,   419,   420,
      -1,    -1,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,   442,   443,   444,    -1,   446,   447,   448,   449,   450,
     451,   452,    -1,   454,   455,   456,   457,   458,   459,   460,
      -1,    -1,   463,    -1,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,    -1,   489,    -1,
      -1,    -1,    -1,   494,   495,    -1,    -1,    -1,    -1,    -1,
     501,    -1,   503,    -1,    -1,    -1,    -1,   508,    -1,   510,
     511,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,   171,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,    -1,
      -1,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,    -1,   231,
     232,   233,   234,   235,    -1,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,   408,   409,    -1,   411,
     412,   413,   414,   415,   416,   417,    -1,   419,   420,    -1,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
     442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
     452,    -1,   454,   455,   456,   457,   458,   459,   460,    -1,
      -1,   463,    -1,    -1,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,    -1,    -1,    -1,    -1,
      -1,    -1,   494,   495,    -1,    -1,    -1,    -1,    -1,   501,
      -1,   503,    -1,    -1,    -1,    -1,   508,    -1,   510,   511,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    -1,
      -1,    34,    35,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,   170,    -1,   172,
     173,   174,   175,   176,   177,    -1,   179,    -1,    -1,    -1,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,    -1,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,    -1,   218,    -1,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,    -1,    -1,   232,
     233,   234,   235,    -1,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,    -1,   287,   288,    -1,    -1,   291,   292,
     293,    -1,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
      -1,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,   408,   409,    -1,   411,   412,
     413,   414,   415,   416,   417,    -1,   419,   420,    -1,    -1,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,    -1,   439,   440,   441,   442,
     443,   444,    -1,   446,   447,   448,   449,   450,   451,   452,
      -1,   454,   455,   456,   457,   458,   459,   460,    -1,    -1,
     463,    -1,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,    -1,    -1,    -1,    -1,    -1,
      -1,   494,   495,    -1,    -1,    -1,    -1,    -1,   501,    -1,
     503,    -1,    -1,    -1,    -1,   508,    -1,   510,   511,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    35,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,    -1,   179,    -1,    -1,    -1,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,    -1,   218,    -1,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,    -1,    -1,   232,   233,
     234,   235,    -1,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,    -1,   287,   288,    -1,    -1,   291,   292,   293,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,    -1,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,    -1,   408,   409,    -1,   411,   412,   413,
     414,   415,   416,   417,    -1,   419,   420,    -1,    -1,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,   442,   443,
     444,    -1,   446,   447,   448,   449,   450,   451,   452,    -1,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
      -1,    -1,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,    -1,    -1,    -1,    -1,    -1,    -1,
     494,   495,   496,    -1,    -1,    -1,    -1,   501,    -1,   503,
      -1,    -1,    -1,    -1,   508,    -1,   510,   511,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    -1,    -1,    -1,
      35,    -1,    -1,    38,    39,    -1,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    74,
      -1,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,    -1,    -1,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,    -1,   218,    -1,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,    -1,    -1,   232,   233,   234,
     235,    -1,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,    -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    -1,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,   414,
     415,   416,   417,    -1,   419,   420,    -1,    -1,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,   442,   443,   444,
      -1,   446,   447,   448,   449,   450,   451,   452,    -1,   454,
     455,   456,   457,   458,   459,   460,    -1,    -1,   463,    -1,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,    -1,    -1,    -1,    -1,    -1,    -1,   494,
     495,    -1,    -1,    -1,    -1,    -1,   501,    -1,   503,    -1,
      -1,    -1,    -1,   508,    -1,   510,   511,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    35,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,   170,    -1,   172,   173,   174,   175,
     176,   177,    -1,   179,    -1,    -1,    -1,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
      -1,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,    -1,   218,    -1,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,    -1,    -1,   232,   233,   234,   235,
      -1,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,    -1,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,   408,   409,    -1,   411,   412,   413,   414,   415,
     416,   417,    -1,   419,   420,    -1,    -1,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,   444,    -1,
     446,   447,   448,   449,   450,   451,   452,    -1,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,    -1,    -1,    -1,    -1,    -1,    -1,   494,   495,
      -1,    -1,    -1,    -1,    -1,   501,    -1,   503,   504,    -1,
      -1,    -1,   508,    -1,   510,   511,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    35,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    74,    -1,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,    -1,   179,    -1,    -1,    -1,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,    -1,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,    -1,    -1,   232,   233,   234,   235,    -1,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,   409,    -1,   411,   412,   413,   414,   415,   416,
     417,    -1,   419,   420,    -1,    -1,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,   442,   443,   444,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,   455,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,    -1,    -1,    -1,    -1,    -1,    -1,   494,   495,    -1,
      -1,    -1,    -1,    -1,   501,    -1,   503,   504,    -1,    -1,
      -1,   508,    -1,   510,   511,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      28,    29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,
      38,    39,    -1,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    -1,
      68,    69,    70,    71,    72,    -1,    74,    -1,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
      -1,   179,    -1,    -1,    -1,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,    -1,
     218,    -1,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,    -1,    -1,   232,   233,   234,   235,    -1,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,    -1,   287,
     288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,    -1,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,    -1,
     408,   409,    -1,   411,   412,   413,   414,   415,   416,   417,
      -1,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,   442,   443,   444,    -1,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
      -1,    -1,    -1,    -1,    -1,    -1,   494,   495,    -1,    -1,
      -1,    -1,    -1,   501,    -1,   503,    -1,    -1,    -1,    -1,
     508,    -1,   510,   511,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,   170,   171,   172,   173,   174,   175,   176,   177,    -1,
     179,    -1,    -1,    -1,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,    -1,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,    -1,   218,
      -1,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,    -1,    -1,   232,   233,   234,   235,    -1,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,    -1,   287,   288,
      -1,    -1,   291,   292,   293,    -1,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,    -1,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,   414,   415,   416,   417,    -1,
     419,   420,    -1,    -1,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,    -1,
     439,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
     449,   450,   451,   452,    -1,   454,   455,   456,   457,   458,
     459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,    -1,
      -1,    -1,    -1,    -1,    -1,   494,   495,    -1,    -1,    -1,
      -1,    -1,   501,    -1,   503,    -1,    -1,    -1,    -1,   508,
      -1,   510,   511,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
      30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,    39,
      -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    -1,    68,    69,
      70,    71,    72,    -1,    74,    -1,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,    -1,    -1,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,    -1,   218,    -1,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
      -1,    -1,   232,   233,   234,   235,    -1,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,    -1,   287,   288,    -1,
      -1,   291,   292,   293,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,    -1,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
      -1,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    -1,   408,   409,
      -1,   411,   412,   413,   414,   415,   416,   417,    -1,   419,
     420,    -1,    -1,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,   442,   443,   444,    -1,   446,   447,   448,   449,
     450,   451,   452,    -1,   454,   455,   456,   457,   458,   459,
     460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,    -1,    -1,
      -1,    -1,    -1,    -1,   494,   495,    -1,    -1,    -1,    -1,
      -1,   501,    -1,   503,    -1,    -1,    -1,    -1,   508,    -1,
     510,   511,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    74,    -1,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
      -1,    -1,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,    -1,
      -1,   232,   233,   234,   235,    -1,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,    -1,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,   414,   415,   416,   417,    -1,   419,   420,
      -1,    -1,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,   442,   443,   444,    -1,   446,   447,   448,   449,   450,
     451,   452,    -1,   454,   455,   456,   457,   458,   459,   460,
      -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,    -1,    -1,    -1,
      -1,    -1,    -1,   494,   495,    -1,    -1,    -1,    -1,    -1,
     501,    -1,   503,    -1,    -1,    -1,    -1,   508,    -1,   510,
     511,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,    -1,
      -1,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,    -1,    -1,
     232,   233,   234,   235,    -1,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,   408,   409,    -1,   411,
     412,   413,   414,   415,   416,   417,    -1,   419,   420,    -1,
      -1,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
     442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
     452,    -1,   454,   455,   456,   457,   458,   459,   460,    -1,
      -1,   463,    -1,    -1,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,    -1,    -1,    -1,    -1,
      -1,    -1,   494,   495,    -1,    -1,    -1,    -1,    -1,   501,
      -1,   503,    -1,    -1,    -1,    -1,   508,    -1,   510,   511,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,   170,    -1,   172,
     173,   174,   175,   176,   177,    -1,   179,    -1,    -1,    -1,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,    -1,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,    -1,   218,    -1,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,    -1,    -1,   232,
     233,   234,   235,    -1,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,    -1,   287,   288,    -1,    -1,   291,   292,
     293,    -1,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
      -1,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,   408,   409,    -1,   411,   412,
     413,   414,   415,   416,   417,    -1,   419,   420,    -1,    -1,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,    -1,   439,   440,   441,   442,
     443,   444,    -1,   446,   447,   448,   449,   450,   451,   452,
      -1,   454,   455,   456,   457,   458,   459,   460,    -1,    -1,
     463,    -1,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,    -1,    -1,    -1,    -1,    -1,
      -1,   494,   495,    -1,    -1,    -1,    -1,    -1,   501,    -1,
     503,    -1,    -1,    -1,    -1,   508,    -1,   510,   511,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    35,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,    -1,   179,    -1,    -1,    -1,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,    -1,   218,    -1,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,    -1,    -1,   232,   233,
     234,   235,    -1,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,    -1,   287,   288,    -1,    -1,   291,   292,   293,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,    -1,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,    -1,   408,   409,    -1,   411,   412,   413,
     414,   415,   416,   417,    -1,   419,   420,    -1,    -1,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,   442,   443,
     444,    -1,   446,   447,   448,   449,   450,   451,   452,    -1,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
      -1,    -1,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,    -1,    -1,    -1,    -1,    -1,    -1,
     494,   495,    -1,    -1,    -1,    -1,    -1,   501,    -1,   503,
      -1,    -1,    -1,    -1,   508,    -1,   510,   511,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      35,    -1,    -1,    38,    39,    -1,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    74,
      -1,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,    -1,    -1,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,    -1,   218,    -1,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,    -1,    -1,   232,   233,   234,
     235,    -1,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,    -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    -1,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,   414,
     415,   416,   417,    -1,   419,   420,    -1,    -1,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,   442,   443,   444,
      -1,   446,   447,   448,   449,   450,   451,   452,    -1,   454,
     455,   456,   457,   458,   459,   460,    -1,    -1,   463,    -1,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,    -1,    -1,    -1,    -1,    -1,    -1,   494,
     495,    -1,    -1,    -1,    -1,    -1,   501,    -1,   503,    -1,
      -1,    -1,    -1,   508,    -1,   510,   511,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    35,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,   170,    -1,   172,   173,   174,   175,
     176,   177,    -1,   179,    -1,    -1,    -1,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
      -1,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,    -1,   218,    -1,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,    -1,    -1,   232,   233,   234,   235,
      -1,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,    -1,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,   408,   409,    -1,   411,   412,   413,   414,   415,
     416,   417,    -1,   419,   420,    -1,    -1,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,   444,    -1,
     446,   447,   448,   449,   450,   451,   452,    -1,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,    -1,    -1,    -1,    -1,    -1,    -1,   494,   495,
      -1,    -1,    -1,    -1,    -1,   501,    -1,   503,    -1,    -1,
      -1,    -1,   508,    -1,   510,   511,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    35,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    74,    -1,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,    -1,   179,    -1,    -1,    -1,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,    -1,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,    -1,    -1,   232,   233,   234,   235,    -1,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,   409,    -1,   411,   412,   413,   414,   415,   416,
     417,    -1,   419,   420,    -1,    -1,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,   442,   443,   444,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,   455,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,    -1,    -1,    -1,    -1,    -1,    -1,   494,   495,    -1,
      -1,    -1,    -1,    -1,   501,    -1,   503,    -1,    -1,    -1,
      -1,   508,    -1,   510,   511,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      28,    29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,
      38,    39,    -1,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    -1,
      68,    69,    70,    71,    72,    -1,    74,    -1,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
      -1,   179,    -1,    -1,    -1,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,    -1,
     218,    -1,   220,    -1,    -1,   223,   224,   225,   226,   227,
     228,   229,    -1,    -1,   232,   233,   234,   235,    -1,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,    -1,   275,   276,    -1,
     278,   279,   280,   281,   282,   283,   284,   285,    -1,   287,
     288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,    -1,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,    -1,
     408,   409,    -1,   411,   412,   413,   414,   415,   416,   417,
      -1,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,   442,   443,   444,    -1,   446,   447,
     448,   449,   450,   451,   452,    -1,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
      -1,    -1,    -1,    -1,    -1,    -1,   494,   495,    -1,    -1,
      -1,    -1,    -1,   501,    -1,   503,    -1,    -1,    -1,    -1,
     508,    -1,   510,   511,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,   170,    -1,   172,   173,   174,   175,   176,   177,    -1,
     179,    -1,    -1,    -1,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,    -1,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,    -1,   218,
      -1,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,    -1,    -1,   232,   233,   234,   235,    -1,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,    -1,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,    -1,   287,   288,
      -1,    -1,   291,   292,   293,    -1,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,    -1,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,   414,   415,   416,   417,    -1,
     419,   420,    -1,    -1,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,    -1,
     439,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
     449,   450,   451,   452,    -1,   454,   455,   456,   457,   458,
     459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   494,   495,    -1,    -1,     3,
       4,     5,     6,     7,   503,     9,    10,    -1,    -1,    -1,
      -1,   510,   511,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,    -1,   179,    -1,    -1,    -1,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,    -1,   218,    -1,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,    -1,    -1,   232,   233,
     234,   235,    -1,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
      -1,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,    -1,   287,   288,    -1,    -1,   291,   292,   293,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,    -1,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,    -1,   408,   409,    -1,   411,   412,   413,
     414,   415,   416,   417,    -1,   419,   420,    -1,    -1,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,   442,   443,
     444,    -1,   446,   447,   448,   449,   450,   451,   452,    -1,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
      -1,    -1,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     494,   495,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   503,
      -1,    -1,    -1,    -1,    -1,    -1,   510,   511,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    74,
      -1,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,    -1,    -1,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,    -1,   218,    -1,   220,    -1,   222,   223,   224,
     225,   226,   227,   228,   229,    -1,    -1,   232,   233,   234,
     235,    -1,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,    -1,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,    -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    -1,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,   414,
     415,   416,   417,    -1,   419,   420,    -1,    -1,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,   442,   443,   444,
      -1,   446,   447,   448,   449,   450,   451,   452,    -1,   454,
     455,   456,   457,   458,   459,   460,    -1,    -1,   463,    -1,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,
     495,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   503,    -1,
      -1,    -1,    -1,    -1,    -1,   510,   511,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    35,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
      -1,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,   170,    -1,   172,   173,   174,   175,
      -1,   177,    -1,   179,    -1,    -1,    -1,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
      -1,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,    -1,   218,    -1,   220,    -1,    -1,   223,   224,   225,
     226,   227,   228,   229,    -1,    -1,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,    -1,   275,
     276,    -1,   278,   279,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,    -1,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,   408,   409,    -1,   411,   412,   413,   414,   415,
     416,   417,    -1,   419,   420,    -1,    -1,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,   444,    -1,
     446,   447,   448,   449,   450,   451,   452,    -1,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,   495,
       3,    -1,    -1,    -1,    -1,   501,    -1,   503,    -1,    -1,
      -1,    -1,   508,    -1,   510,   511,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    36,    -1,    38,    39,    -1,    41,    42,
      43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    -1,    -1,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    85,    -1,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,   172,
     173,   174,   175,    -1,   177,    -1,   179,    -1,    -1,    -1,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,    -1,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,    -1,   218,    -1,   220,    -1,    -1,
     223,   224,   225,   226,   227,   228,   229,    -1,    -1,   232,
     233,   234,    -1,    -1,   237,   238,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,    -1,   287,   288,    -1,    -1,   291,   292,
     293,    -1,    -1,   296,   297,    -1,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
      -1,   374,   375,   376,   377,   378,    -1,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,   408,   409,    -1,   411,   412,
     413,   414,   415,   416,   417,    -1,   419,   420,    -1,    -1,
     423,   424,   425,   426,   427,    -1,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,    -1,   439,   440,   441,   442,
     443,    -1,    -1,   446,   447,   448,   449,   450,   451,   452,
      -1,   454,    -1,   456,   457,   458,   459,   460,    -1,    -1,
     463,    -1,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,    -1,    -1,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   504,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    74,    -1,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,    -1,   179,    -1,   181,    -1,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,    -1,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,    -1,   232,   233,   234,   235,    -1,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,   290,   291,   292,   293,    -1,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,    -1,   419,   420,    -1,    -1,   423,   424,   425,   426,
     427,    -1,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,   442,   443,   444,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,   455,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
      -1,     3,   489,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   503,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
      -1,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,    -1,
     232,   233,   234,   235,    -1,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,    -1,   275,   276,   277,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,   290,   291,
     292,   293,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,   408,   409,    -1,   411,
     412,   413,   414,   415,   416,   417,    -1,   419,   420,    -1,
      -1,   423,   424,   425,   426,   427,    -1,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
     442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
     452,    -1,   454,   455,   456,   457,   458,   459,   460,    -1,
      -1,   463,    -1,    -1,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   503,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    74,    -1,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,    -1,   179,    -1,    -1,    -1,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,    -1,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,    -1,    -1,   232,   233,   234,   235,    -1,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,   409,    -1,   411,   412,   413,   414,   415,   416,
     417,    -1,   419,   420,    -1,    -1,   423,   424,   425,   426,
     427,    -1,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,   442,   443,   444,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,   455,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   503,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,    -1,
      -1,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,    -1,    -1,
     232,   233,   234,   235,    -1,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,    -1,   275,   276,   277,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,   408,   409,    -1,   411,
     412,   413,   414,   415,   416,   417,    -1,   419,   420,    -1,
      -1,   423,   424,   425,   426,   427,    -1,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
     442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
     452,    -1,   454,   455,   456,   457,   458,   459,   460,    -1,
      -1,   463,    -1,    -1,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,    -1,     3,     4,     5,    -1,
      -1,    -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   503,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
      47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    -1,
      87,    88,    89,    90,    91,    92,    -1,    -1,    95,    96,
      97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,    -1,    -1,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,    -1,    -1,   232,    -1,   234,    -1,    -1,
     237,   238,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
      -1,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,   289,    -1,   291,   292,   293,    -1,    -1,   296,
     297,    -1,   299,    -1,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,    -1,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,   374,   375,   376,
     377,   378,    -1,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,   409,    -1,   411,    -1,   413,   414,   415,   416,
     417,    -1,   419,   420,    -1,    -1,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,    -1,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
      -1,     3,    -1,    -1,    -1,    -1,    -1,   494,   495,   496,
      -1,    -1,    -1,    -1,    -1,    -1,   503,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    31,
      32,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    81,
      -1,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
      92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,    -1,
      -1,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,    -1,
      -1,   223,    -1,   225,   226,   227,   228,   229,    -1,    -1,
     232,    -1,   234,    -1,    -1,   237,   238,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,    -1,   268,   269,   270,   271,
     272,   273,    -1,   275,   276,    -1,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,    -1,   299,    -1,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,    -1,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,   408,   409,   410,   411,
      -1,   413,   414,   415,   416,   417,    -1,   419,   420,    -1,
      -1,   423,   424,   425,   426,   427,    -1,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,   449,   450,   451,
     452,    -1,   454,    -1,   456,   457,   458,   459,   460,    -1,
      -1,   463,    -1,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,    -1,     3,   489,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   503,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
      47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    -1,
      87,    88,    89,    90,    91,    92,    -1,    -1,    95,    96,
      97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,    -1,    -1,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,    -1,    -1,   232,    -1,   234,    -1,    -1,
     237,   238,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
      -1,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,    -1,   299,    -1,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,    -1,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,   409,   410,   411,    -1,   413,   414,   415,   416,
     417,    -1,   419,   420,    -1,    -1,   423,   424,   425,   426,
     427,    -1,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,    -1,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
      -1,     3,   489,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   503,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    81,
      -1,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
      92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,    -1,
      -1,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,    -1,
      -1,   223,    -1,   225,   226,   227,   228,   229,    -1,    -1,
     232,    -1,   234,    -1,    -1,   237,   238,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,    -1,   268,   269,   270,   271,
     272,   273,    -1,   275,   276,    -1,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,    -1,   299,    -1,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,    -1,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,   408,   409,   410,   411,
      -1,   413,   414,   415,   416,   417,    -1,   419,   420,    -1,
      -1,   423,   424,   425,   426,   427,    -1,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,   449,   450,   451,
     452,    -1,   454,    -1,   456,   457,   458,   459,   460,    -1,
      -1,   463,    -1,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,    -1,     3,   489,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   503,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
      47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    -1,
      87,    88,    89,    90,    91,    92,    -1,    -1,    95,    96,
      97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,    -1,    -1,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,    -1,    -1,   232,    -1,   234,    -1,    -1,
     237,   238,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
      -1,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,    -1,   299,    -1,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,    -1,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,   374,   375,   376,
     377,   378,    -1,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,   409,    -1,   411,    -1,   413,   414,   415,   416,
     417,    -1,   419,   420,    -1,    -1,   423,   424,   425,   426,
     427,    -1,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,    -1,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
      -1,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   503,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    81,
      -1,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
      92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,    -1,
      -1,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,    -1,
      -1,   223,    -1,   225,   226,   227,   228,   229,    -1,    -1,
     232,    -1,   234,    -1,    -1,   237,   238,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,    -1,   268,   269,   270,   271,
     272,   273,    -1,   275,   276,    -1,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,    -1,   299,    -1,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,    -1,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,    -1,   374,   375,   376,   377,   378,    -1,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,   408,   409,    -1,   411,
      -1,   413,   414,   415,   416,   417,    -1,   419,   420,    -1,
      -1,   423,   424,   425,   426,   427,    -1,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,   449,   450,   451,
     452,    -1,   454,    -1,   456,   457,   458,   459,   460,    -1,
      -1,   463,    -1,    -1,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   503,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
      47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    -1,
      87,    88,    89,    90,    91,    92,    -1,    -1,    95,    96,
      97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,    -1,    -1,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,    -1,    -1,   232,    -1,   234,    -1,    -1,
     237,   238,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
      -1,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,    -1,   299,    -1,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,    -1,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,   374,   375,   376,
     377,   378,    -1,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,   409,    -1,   411,    -1,   413,   414,   415,   416,
     417,    -1,   419,   420,    -1,    -1,   423,   424,   425,   426,
     427,    -1,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,    -1,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   503,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    81,
      -1,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
      92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,    -1,
      -1,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,    -1,
      -1,   223,    -1,   225,   226,   227,   228,   229,    -1,    -1,
     232,    -1,   234,    -1,    -1,   237,   238,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,    -1,   268,   269,   270,   271,
     272,   273,    -1,   275,   276,    -1,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,    -1,   299,    -1,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,    -1,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,    -1,   374,   375,   376,   377,   378,    -1,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,   408,   409,    -1,   411,
      -1,   413,   414,   415,   416,   417,    -1,   419,   420,    -1,
      -1,   423,   424,   425,   426,   427,    -1,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,   449,   450,   451,
     452,    -1,   454,    -1,   456,   457,   458,   459,   460,    -1,
      -1,   463,    -1,    -1,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   503,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
      47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    -1,
      87,    88,    89,    90,    91,    92,    -1,    -1,    95,    96,
      97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,    -1,    -1,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,    -1,    -1,   232,    -1,   234,    -1,    -1,
     237,   238,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
      -1,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,    -1,   299,    -1,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,    -1,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,   374,   375,   376,
     377,   378,    -1,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,   409,    -1,   411,    -1,   413,   414,   415,   416,
     417,    -1,   419,   420,    -1,    -1,   423,   424,   425,   426,
     427,    -1,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,    -1,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,    -1,    -1,     3,     4,     5,    -1,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,   503,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    -1,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,    -1,   154,   155,   156,   157,    -1,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,    -1,    -1,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,    -1,   298,
     299,   300,    -1,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,   316,   317,    -1,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,    -1,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,    -1,   426,    -1,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,    -1,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   483,   484,   485,   486,    -1,     3,
      -1,   490,   491,   492,     8,   494,   495,   496,   497,   498,
     499,    -1,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,    -1,    -1,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,    -1,   207,    -1,   209,   210,   211,   212,   213,
     214,   215,   216,    -1,   218,    -1,   220,    -1,    -1,   223,
      -1,   225,   226,   227,   228,   229,    -1,    -1,   232,    -1,
     234,    -1,    -1,   237,   238,   239,    -1,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,    -1,   268,   269,   270,   271,   272,   273,
      -1,   275,   276,    -1,   278,    -1,   280,   281,   282,   283,
     284,   285,    -1,   287,   288,    -1,    -1,   291,   292,   293,
      -1,    -1,   296,   297,    -1,   299,    -1,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
      -1,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,    -1,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,    -1,   408,   409,    -1,   411,    -1,   413,
     414,   415,   416,   417,    -1,   419,   420,    -1,    -1,   423,
     424,   425,   426,   427,    -1,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,   442,   443,
      -1,    -1,   446,   447,   448,   449,   450,   451,   452,    -1,
     454,    -1,   456,   457,   458,   459,   460,    -1,    -1,   463,
      -1,    -1,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,    -1,    -1,    -1,   490,   491,   492,    -1,
     494,   495,   496,   497,   498,   499,     8,    -1,    -1,    11,
      -1,    -1,    -1,    -1,    16,    17,    18,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    33,    -1,    16,    17,    18,    -1,    -1,    -1,    41,
      -1,    -1,    -1,    -1,     8,    -1,    48,    11,    -1,    -1,
      33,    -1,    16,    17,    18,    -1,    -1,    -1,    41,    -1,
      -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    33,
      -1,    73,    -1,     8,    -1,    -1,    11,    41,    -1,    -1,
      -1,    16,    17,    18,    48,    -1,    -1,    -1,    -1,    -1,
      73,    -1,     8,    -1,    -1,    11,    -1,    -1,    33,    -1,
      16,    17,    18,    -1,    -1,    -1,    41,    -1,    -1,    73,
      -1,    -1,    -1,    48,    -1,    -1,    -1,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,
      -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,    73,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   176,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    -1,    16,    17,    18,    -1,    -1,
      -1,    -1,   194,   176,    -1,    -1,    -1,   199,    -1,    -1,
      -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      41,   194,   176,    -1,    -1,    -1,   199,    48,    -1,   221,
     222,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     194,    -1,    -1,   235,    -1,   199,    -1,    -1,   221,   222,
      -1,   176,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   235,    -1,    -1,    -1,    -1,   221,   222,   194,
     176,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,
      -1,   235,   274,    -1,    -1,   277,    -1,    -1,   194,    -1,
      -1,    -1,    -1,   199,    -1,    -1,   221,   222,    -1,   291,
      -1,   274,   294,    -1,   277,    -1,    -1,    -1,    -1,    -1,
     235,    -1,    -1,    -1,    -1,   221,   222,    -1,   291,    -1,
     274,   294,    -1,   277,    -1,    -1,    -1,    -1,    -1,   235,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   291,    -1,    -1,
     294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   274,
      -1,    -1,   277,    -1,    -1,   176,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   291,    -1,   274,   294,
      -1,   277,    -1,   194,    -1,    -1,    -1,    -1,   199,    -1,
      -1,    -1,    -1,    -1,    -1,   291,    -1,    -1,   294,    -1,
      -1,    -1,    -1,   385,    -1,    -1,    -1,    -1,    -1,    -1,
     221,   222,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   385,    -1,   235,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   274,    -1,    -1,   277,    -1,    -1,    -1,
     385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     291,    -1,    -1,   294,    -1,    -1,    -1,    -1,    -1,   385,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   487,    -1,    -1,   490,   491,
     492,    -1,   494,   495,   496,   497,   498,   499,    -1,    -1,
      -1,    -1,   504,    -1,   487,    -1,    -1,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,   499,    -1,    -1,    -1,
      -1,   504,    -1,   487,    -1,    -1,   490,   491,   492,    -1,
     494,   495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,
     504,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   487,    -1,   385,   490,   491,   492,    -1,   494,
     495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,   504,
      -1,   487,    -1,    -1,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,   499,    -1,    -1,    -1,    -1,   504,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   487,     3,    -1,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,   499,    -1,
      -1,   502,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    -1,    45,
      46,    47,    48,    49,    -1,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    -1,    95,
      96,    97,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,    -1,   171,    -1,   173,   174,   175,
      -1,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,    -1,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,    -1,    -1,   223,    -1,   225,
     226,   227,   228,   229,   230,   231,   232,    -1,   234,    -1,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,    -1,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,    -1,   299,    -1,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     496,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    81,
      -1,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
      92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,    -1,
      -1,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,    -1,
      -1,   223,    -1,   225,   226,   227,   228,   229,    -1,    -1,
     232,    -1,   234,    -1,    -1,   237,   238,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,    -1,   268,   269,   270,   271,
     272,   273,    -1,   275,   276,    -1,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,    -1,   299,    -1,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,    -1,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,    -1,   374,   375,   376,   377,   378,    -1,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,   408,   409,    -1,   411,
      -1,   413,   414,   415,   416,   417,    -1,   419,   420,    -1,
      -1,   423,   424,   425,   426,   427,    -1,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,   449,   450,   451,
     452,    -1,   454,    -1,   456,   457,   458,   459,   460,    -1,
      -1,   463,    -1,    -1,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,     3,     4,     5,    -1,    -1,
      -1,     9,    -1,    -1,   496,    -1,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    -1,    41,    42,    43,    -1,    45,    46,    47,
      48,    49,    -1,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    -1,    -1,    62,    63,    64,    65,    66,    -1,
      68,    69,    70,    71,    72,    -1,    -1,    -1,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    85,    -1,    87,
      88,    89,    90,    91,    92,    -1,    -1,    95,    96,    97,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,    -1,    -1,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,    -1,   207,
      -1,   209,   210,   211,   212,   213,   214,   215,   216,    -1,
     218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,   227,
     228,   229,    -1,    -1,   232,    -1,   234,    -1,    -1,   237,
     238,   239,    -1,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,    -1,
     268,   269,   270,   271,   272,   273,    -1,   275,   276,    -1,
     278,    -1,   280,   281,   282,   283,   284,   285,    -1,   287,
     288,   289,    -1,   291,   292,   293,    -1,    -1,   296,   297,
      -1,   299,    -1,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,    -1,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,    -1,   374,   375,   376,   377,
     378,    -1,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,    -1,
     408,   409,    -1,   411,    -1,   413,   414,   415,   416,   417,
      -1,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,   442,   443,    -1,    -1,   446,   447,
     448,   449,   450,   451,   452,    -1,   454,    -1,   456,   457,
     458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,     3,
       4,     5,    -1,    -1,    -1,     9,   494,   495,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,    -1,    -1,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,    -1,   207,    -1,   209,   210,   211,   212,   213,
     214,   215,   216,    -1,   218,    -1,   220,    -1,    -1,   223,
      -1,   225,   226,   227,   228,   229,    -1,    -1,   232,    -1,
     234,    -1,    -1,   237,   238,   239,    -1,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,    -1,   268,   269,   270,   271,   272,   273,
      -1,   275,   276,    -1,   278,    -1,   280,   281,   282,   283,
     284,   285,    -1,   287,   288,   289,    -1,   291,   292,   293,
      -1,    -1,   296,   297,    -1,   299,    -1,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
      -1,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,    -1,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,    -1,   408,   409,    -1,   411,    -1,   413,
     414,   415,   416,   417,    -1,   419,   420,    -1,    -1,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,   442,   443,
      -1,    -1,   446,   447,   448,   449,   450,   451,   452,    -1,
     454,    -1,   456,   457,   458,   459,   460,    -1,    -1,   463,
      -1,    -1,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,     3,     4,     5,    -1,    -1,    -1,     9,
     494,   495,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
      30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      -1,    41,    42,    43,    -1,    45,    46,    47,    48,    49,
      -1,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      -1,    -1,    62,    63,    64,    65,    66,    -1,    68,    69,
      70,    71,    72,    -1,    -1,    -1,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    85,    -1,    87,    88,    89,
      90,    91,    92,    -1,    -1,    95,    96,    97,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
      -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,
      -1,    -1,    -1,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,    -1,   207,    -1,   209,
     210,   211,   212,   213,   214,   215,   216,    -1,   218,    -1,
     220,    -1,    -1,   223,    -1,   225,   226,   227,   228,   229,
      -1,    -1,   232,    -1,   234,    -1,    -1,   237,   238,   239,
      -1,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,    -1,   268,   269,
     270,   271,   272,   273,    -1,   275,   276,    -1,   278,    -1,
     280,   281,   282,   283,   284,   285,    -1,   287,   288,   289,
      -1,   291,   292,   293,    -1,    -1,   296,   297,    -1,   299,
      -1,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,    -1,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,    -1,   374,   375,   376,   377,   378,    -1,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
      -1,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    -1,   408,   409,
      -1,   411,    -1,   413,   414,   415,   416,   417,    -1,   419,
     420,    -1,    -1,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,   442,   443,    -1,    -1,   446,   447,   448,   449,
     450,   451,   452,    -1,   454,    -1,   456,   457,   458,   459,
     460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,    -1,     8,    -1,
      -1,    11,    -1,    -1,   494,   495,    16,    17,    18,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,     8,    -1,    -1,    11,    -1,    -1,    48,    -1,
      16,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,
      -1,    -1,    -1,    73,    -1,    41,    -1,    -1,    -1,    -1,
      -1,    -1,    48,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    -1,    16,    17,    18,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,
      -1,    -1,    -1,    -1,   124,    48,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    -1,
      16,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,
      36,    -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,
      -1,    -1,    48,    -1,    -1,    -1,   176,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   194,    -1,    -1,    73,    -1,   199,
     166,    -1,    -1,    -1,    -1,   171,    -1,    -1,    -1,    -1,
     176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   221,   222,    -1,    -1,    -1,    -1,    -1,   194,    -1,
      -1,    -1,    -1,   199,    -1,   235,    -1,    -1,    -1,    -1,
      -1,    -1,   165,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   176,    -1,   221,   222,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   235,
      -1,   194,    -1,    -1,   274,    -1,   199,   277,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   291,    -1,    -1,   294,    -1,    -1,    -1,   221,   222,
     176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   274,    -1,
      -1,   277,   235,    -1,    -1,    -1,    -1,    -1,   194,    -1,
      -1,    -1,    -1,   199,    -1,   291,    -1,    -1,   294,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   221,   222,    -1,    -1,    -1,
      -1,   274,    -1,    -1,   277,    -1,    -1,    -1,    -1,   235,
      -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,   291,    11,
      -1,   294,    -1,    -1,    16,    17,    18,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   385,    -1,    -1,    -1,    -1,
      -1,    33,    -1,    -1,   317,    -1,    -1,    -1,   274,    41,
      -1,   277,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,
      -1,    -1,    -1,     8,    -1,   291,    11,    -1,   294,   385,
      -1,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    73,    -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,
      -1,    36,    -1,    -1,    -1,   445,    41,    -1,    -1,    -1,
      -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   487,    -1,    -1,
     490,   491,   492,    -1,   494,   495,   496,   497,   498,   499,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   487,    -1,    -1,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,   499,   176,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    -1,    16,    17,    18,    -1,    -1,
      -1,    -1,   194,    -1,    -1,    -1,    -1,   199,    -1,    -1,
      -1,    -1,    33,    -1,   487,    -1,    -1,   490,   491,   492,
      41,   494,   495,   496,   497,   498,   499,    48,    -1,   221,
     222,   176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   235,    -1,    -1,    -1,    -1,    -1,   194,
      -1,    -1,    73,    -1,   199,    -1,    -1,    -1,    -1,    -1,
      -1,   487,    -1,    -1,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,   499,    -1,    -1,   221,   222,    -1,    -1,
      -1,    -1,   274,    -1,    -1,   277,    -1,    -1,    -1,    -1,
     235,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   291,
      -1,    -1,   294,     8,    -1,    -1,    11,    -1,    -1,    -1,
      -1,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,
     312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,   274,
      -1,    36,   277,    -1,    -1,    -1,    41,    -1,    -1,    -1,
      -1,    -1,    -1,    48,    -1,    -1,   291,    -1,    -1,   294,
     171,    -1,    -1,    -1,    -1,   176,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    -1,    16,    17,    18,    73,    -1,
      -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,   199,    -1,
      -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      41,    -1,    -1,   385,    -1,    -1,    -1,    48,    -1,    -1,
     221,   222,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   235,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
     385,    -1,    -1,    -1,    16,    17,    18,    -1,    -1,    -1,
      -1,    -1,    -1,   274,    -1,    -1,   277,    -1,    -1,    -1,
      -1,    33,    -1,    -1,    36,    -1,    -1,    -1,    -1,    41,
     291,   176,    -1,   294,    -1,    -1,    48,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,
      -1,    -1,    -1,    -1,   199,   487,    -1,    -1,   490,   491,
     492,    73,   494,   495,   496,   497,   498,   499,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   221,   222,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,
     235,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   487,   194,    -1,   490,   491,   492,   199,   494,
     495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   385,    -1,    -1,    -1,    -1,   274,
     221,   222,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   235,    -1,   291,    -1,     8,   294,
      -1,    11,    -1,    -1,    -1,    -1,    16,    17,    18,    -1,
      -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    41,   194,   274,    -1,    -1,   277,   199,    48,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     291,    -1,    -1,   294,    -1,    -1,    -1,    -1,    -1,   221,
     222,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   235,    -1,    -1,   487,    -1,    -1,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,   499,    -1,
     385,     8,    -1,    -1,    11,    -1,    -1,    -1,    -1,    16,
      17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   274,    -1,    -1,   277,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    41,     8,    -1,    -1,    11,   291,
      -1,    48,   294,    16,    17,    18,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   385,    -1,    -1,    -1,    -1,    -1,
      33,    -1,    -1,    -1,     8,    -1,    73,    11,    41,    -1,
      -1,    -1,    16,    17,    18,    48,   176,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   418,    -1,    -1,
      -1,    -1,    -1,    -1,   194,    -1,    -1,    41,    -1,   199,
      73,    -1,   487,    -1,    48,   490,   491,   492,    -1,   494,
     495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,
      -1,   221,   222,    -1,    -1,    -1,    -1,    -1,    -1,    73,
      -1,    -1,    -1,   385,    -1,   235,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   487,    -1,    -1,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,   499,   176,
      -1,    -1,    -1,    -1,   274,    -1,    -1,   277,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,
      -1,   291,   199,    -1,   294,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   221,   222,    -1,    -1,    -1,    -1,
      -1,   194,    -1,    -1,    -1,    -1,   199,    -1,   235,    -1,
      -1,    -1,   176,    -1,    -1,   487,    -1,    -1,   490,   491,
     492,    -1,   494,   495,   496,   497,   498,   499,   221,   222,
     194,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,
      -1,    -1,   235,    -1,    -1,    -1,    -1,   274,    -1,    -1,
     277,    -1,    -1,    -1,    -1,    -1,    -1,   221,   222,    -1,
      -1,    -1,    -1,    -1,   291,   385,    -1,   294,    -1,    -1,
      -1,   235,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   274,    -1,    -1,   277,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   291,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     274,    -1,    -1,   277,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   291,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   487,    -1,    -1,
     490,   491,   492,    -1,   494,   495,   496,   497,   498,   499,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     487,    -1,    -1,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,   499,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   487,    -1,    -1,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,   499,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       3,    -1,     5,   487,    -1,    -1,   490,   491,   492,    -1,
     494,   495,   496,   497,   498,   499,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    -1,    95,    96,    97,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,    -1,   171,    -1,
     173,   174,   175,    -1,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,    -1,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,    -1,    -1,
     223,    -1,   225,   226,   227,   228,   229,   230,   231,   232,
      -1,   234,    -1,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,    -1,   268,   269,   270,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,    -1,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,    -1,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    -1,    95,    96,    97,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,    -1,   171,    -1,   173,   174,   175,    -1,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,    -1,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,    -1,    -1,   223,    -1,   225,   226,   227,   228,
     229,   230,   231,   232,    -1,   234,    -1,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,    -1,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,    -1,
     299,    -1,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    -1,
      45,    46,    47,    48,    49,    -1,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    -1,
      95,    96,    97,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,    -1,   171,    -1,   173,   174,
     175,    -1,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,    -1,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,    -1,    -1,   223,    -1,
     225,   226,   227,   228,   229,   230,   231,   232,    -1,   234,
      -1,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,    -1,   268,   269,   270,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,    -1,   299,    -1,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,    -1,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,    -1,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    74,    -1,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
      -1,    -1,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,    -1,
      -1,   232,   233,   234,   235,    -1,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,    -1,   275,   276,   277,   278,    -1,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,    -1,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,   414,   415,   416,   417,    -1,   419,   420,
      -1,    -1,   423,   424,   425,   426,   427,    -1,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,   442,   443,   444,    -1,   446,   447,   448,   449,   450,
     451,   452,    -1,   454,   455,   456,   457,   458,   459,   460,
      -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    74,    -1,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    -1,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,    -1,   179,    -1,    -1,    -1,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,    -1,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,    -1,    -1,   232,   233,   234,   235,    -1,
     237,   238,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,   374,   375,   376,
     377,   378,    -1,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,   409,    -1,   411,   412,   413,   414,   415,   416,
     417,    -1,   419,   420,    -1,    -1,   423,   424,   425,   426,
     427,    -1,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,   455,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      -1,    -1,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,   168,   169,    -1,    -1,    -1,
     173,   174,   175,    -1,   177,    -1,   179,    -1,    -1,    -1,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,    -1,   207,    -1,   209,   210,   211,   212,
     213,   214,   215,   216,    -1,   218,    -1,   220,    -1,    -1,
     223,    -1,   225,   226,   227,   228,   229,    -1,    -1,   232,
      -1,   234,    -1,    -1,   237,   238,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,    -1,   268,   269,   270,   271,   272,
     273,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,    -1,   287,   288,    -1,    -1,   291,   292,
     293,    -1,    -1,   296,   297,    -1,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,    -1,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
      -1,   374,   375,   376,   377,   378,    -1,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,   408,   409,    -1,   411,    -1,
     413,   414,   415,   416,   417,    -1,   419,   420,    -1,    -1,
     423,   424,   425,   426,   427,    -1,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,   438,   439,   440,   441,   442,
     443,    -1,    -1,   446,   447,   448,   449,   450,   451,   452,
      -1,   454,    -1,   456,   457,   458,   459,   460,    -1,    -1,
     463,    -1,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    -1,    95,    96,    97,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,    -1,   162,   163,   164,   165,    -1,   167,   168,
     169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,
     179,    -1,    -1,    -1,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,    -1,   207,    -1,
     209,   210,   211,   212,   213,   214,   215,   216,    -1,   218,
      -1,   220,    -1,    -1,   223,    -1,   225,   226,   227,   228,
     229,    -1,    -1,   232,    -1,   234,   235,    -1,   237,   238,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,    -1,   268,
     269,   270,   271,   272,   273,    -1,   275,   276,    -1,   278,
      -1,   280,   281,   282,   283,   284,   285,    -1,   287,   288,
      -1,    -1,   291,   292,   293,    -1,    -1,   296,   297,    -1,
     299,    -1,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,    -1,   374,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,   408,
     409,    -1,   411,    -1,   413,   414,   415,   416,   417,    -1,
     419,   420,    -1,    -1,   423,   424,   425,   426,   427,    -1,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,   440,   441,   442,   443,    -1,    -1,   446,   447,   448,
     449,   450,   451,   452,    -1,   454,    -1,   456,   457,   458,
     459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,
      45,    46,    47,    48,    49,    -1,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    -1,
      -1,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      85,    -1,    87,    88,    89,    90,    91,    92,    -1,    -1,
      95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,    -1,    -1,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,    -1,   207,    -1,   209,   210,   211,   212,   213,   214,
     215,   216,    -1,   218,    -1,   220,    -1,    -1,   223,    -1,
     225,   226,   227,   228,   229,    -1,    -1,   232,    -1,   234,
      -1,    -1,   237,   238,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,    -1,   268,   269,   270,   271,   272,   273,    -1,
     275,   276,    -1,   278,    -1,   280,   281,   282,   283,   284,
     285,    -1,   287,   288,   289,    -1,   291,   292,   293,    -1,
      -1,   296,   297,    -1,   299,    -1,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,    -1,
     355,   356,    -1,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    -1,   374,
     375,   376,   377,   378,    -1,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,   408,   409,    -1,   411,    -1,   413,   414,
     415,   416,   417,    -1,   419,   420,    -1,    -1,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,   442,   443,    -1,
      -1,   446,   447,   448,   449,   450,   451,   452,    -1,   454,
      -1,   456,   457,   458,   459,   460,    -1,    -1,   463,    -1,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      31,    32,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    85,    -1,    87,    88,    89,    90,
      91,    92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
      -1,    -1,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,    -1,   207,    -1,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
      -1,    -1,   223,    -1,   225,   226,   227,   228,   229,    -1,
      -1,   232,    -1,   234,    -1,    -1,   237,   238,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,    -1,   268,   269,   270,
     271,   272,   273,    -1,   275,   276,    -1,   278,    -1,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,    -1,   299,    -1,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,   355,   356,    -1,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,    -1,   374,   375,   376,   377,   378,    -1,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,   408,   409,    -1,
     411,    -1,   413,   414,   415,   416,   417,    -1,   419,   420,
      -1,    -1,   423,   424,   425,   426,   427,    -1,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,   449,   450,
     451,   452,    -1,   454,    -1,   456,   457,   458,   459,   460,
      -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
      47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    -1,
      87,    88,    89,    90,    91,    92,    -1,    -1,    95,    96,
      97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,    -1,    -1,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,    -1,    -1,   232,    -1,   234,    -1,    -1,
     237,   238,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
      -1,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,   290,   291,   292,   293,    -1,    -1,   296,
     297,    -1,   299,    -1,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,    -1,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,   374,   375,   376,
     377,   378,    -1,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,   409,    -1,   411,    -1,   413,   414,   415,   416,
     417,    -1,   419,   420,    -1,    -1,   423,   424,   425,   426,
     427,    -1,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,    -1,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    -1,    -1,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    85,    -1,    87,    88,    89,    90,    91,    92,
      -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,
     173,   174,   175,    -1,   177,    -1,   179,    -1,    -1,    -1,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,    -1,   207,    -1,   209,   210,   211,   212,
     213,   214,   215,   216,    -1,   218,    -1,   220,    -1,    -1,
     223,    -1,   225,   226,   227,   228,   229,    -1,    -1,   232,
      -1,   234,    -1,    -1,   237,   238,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,    -1,   268,   269,   270,   271,   272,
     273,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,    -1,   287,   288,    -1,   290,   291,   292,
     293,    -1,    -1,   296,   297,    -1,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,    -1,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
      -1,   374,   375,   376,   377,   378,    -1,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,   408,   409,    -1,   411,    -1,
     413,   414,   415,   416,   417,    -1,   419,   420,    -1,    -1,
     423,   424,   425,   426,   427,    -1,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,    -1,   439,   440,   441,   442,
     443,    -1,    -1,   446,   447,   448,   449,   450,   451,   452,
      -1,   454,    -1,   456,   457,   458,   459,   460,    -1,    -1,
     463,    -1,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    -1,    87,    88,
      89,    90,    91,    92,    -1,    -1,    95,    96,    97,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,
     179,    -1,    -1,    -1,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,    -1,   207,    -1,
     209,   210,   211,   212,   213,   214,   215,   216,    -1,   218,
      -1,   220,    -1,    -1,   223,    -1,   225,   226,   227,   228,
     229,    -1,    -1,   232,    -1,   234,    -1,    -1,   237,   238,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,    -1,   268,
     269,   270,   271,   272,   273,    -1,   275,   276,    -1,   278,
      -1,   280,   281,   282,   283,   284,   285,    -1,   287,   288,
      -1,    -1,   291,   292,   293,    -1,    -1,   296,   297,    -1,
     299,    -1,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,    -1,   374,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,   408,
     409,    -1,   411,    -1,   413,   414,   415,   416,   417,    -1,
     419,   420,    -1,    -1,   423,   424,   425,   426,   427,    -1,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,    -1,
     439,   440,   441,   442,   443,    -1,    -1,   446,   447,   448,
     449,   450,   451,   452,    -1,   454,    -1,   456,   457,   458,
     459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,
      45,    46,    47,    48,    49,    -1,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    -1,
      -1,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      85,    -1,    87,    88,    89,    90,    91,    92,    -1,    -1,
      95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,    -1,    -1,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,    -1,   207,    -1,   209,   210,   211,   212,   213,   214,
     215,   216,    -1,   218,    -1,   220,    -1,    -1,   223,    -1,
     225,   226,   227,   228,   229,    -1,    -1,   232,    -1,   234,
      -1,    -1,   237,   238,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,    -1,   268,   269,   270,   271,   272,   273,    -1,
     275,   276,    -1,   278,    -1,   280,   281,   282,   283,   284,
     285,    -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,
      -1,   296,   297,    -1,   299,    -1,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,    -1,
     355,   356,    -1,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    -1,   374,
     375,   376,   377,   378,    -1,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,   408,   409,   410,   411,    -1,   413,   414,
     415,   416,   417,    -1,   419,   420,    -1,    -1,   423,   424,
     425,   426,   427,    -1,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,   442,   443,    -1,
      -1,   446,   447,   448,   449,   450,   451,   452,    -1,   454,
      -1,   456,   457,   458,   459,   460,    -1,    -1,   463,    -1,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,     3,     4,    -1,    -1,    -1,    -1,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    85,    -1,    87,    88,    89,    90,
      91,    92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
      -1,    -1,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,    -1,   207,    -1,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
      -1,    -1,   223,    -1,   225,   226,   227,   228,   229,    -1,
      -1,   232,    -1,   234,    -1,    -1,   237,   238,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,    -1,   268,   269,   270,
     271,   272,   273,    -1,   275,   276,    -1,   278,    -1,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,    -1,   299,    -1,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,   355,   356,    -1,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,    -1,   374,   375,   376,   377,   378,    -1,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,   408,   409,    -1,
     411,    -1,   413,   414,   415,   416,   417,    -1,   419,   420,
      -1,    -1,   423,   424,   425,   426,   427,    -1,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,   449,   450,
     451,   452,    -1,   454,    -1,   456,   457,   458,   459,   460,
      -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
      47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    -1,
      87,    88,    89,    90,    91,    92,    -1,    -1,    95,    96,
      97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,    -1,    -1,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,    -1,    -1,   232,    -1,   234,    -1,    -1,
     237,   238,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
      -1,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,    -1,   299,    -1,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,    -1,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,   374,   375,   376,
     377,   378,    -1,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,   409,    -1,   411,    -1,   413,   414,   415,   416,
     417,    -1,   419,   420,    -1,    -1,   423,   424,   425,   426,
     427,    -1,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,    -1,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    -1,    -1,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    85,    -1,    87,    88,    89,    90,    91,    92,
      -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,
     173,   174,   175,    -1,   177,    -1,   179,    -1,    -1,    -1,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,    -1,   207,    -1,   209,   210,   211,   212,
     213,   214,   215,   216,    -1,   218,    -1,   220,    -1,    -1,
     223,    -1,   225,   226,   227,   228,   229,    -1,    -1,   232,
      -1,   234,    -1,    -1,   237,   238,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,    -1,   268,   269,   270,   271,   272,
     273,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,    -1,   287,   288,    -1,    -1,   291,   292,
     293,    -1,    -1,   296,   297,    -1,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,    -1,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
      -1,   374,   375,   376,   377,   378,    -1,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,   408,   409,    -1,   411,    -1,
     413,   414,   415,   416,   417,    -1,   419,   420,    -1,    -1,
     423,   424,   425,   426,   427,    -1,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,    -1,   439,   440,   441,   442,
     443,    -1,    -1,   446,   447,   448,   449,   450,   451,   452,
      -1,   454,    -1,   456,   457,   458,   459,   460,    -1,    -1,
     463,    -1,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    -1,    87,    88,
      89,    90,    91,    92,    -1,    -1,    95,    96,    97,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,
     179,    -1,    -1,    -1,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,    -1,   207,    -1,
     209,   210,   211,   212,   213,   214,   215,   216,    -1,   218,
      -1,   220,    -1,    -1,   223,    -1,   225,   226,   227,   228,
     229,    -1,    -1,   232,    -1,   234,    -1,    -1,   237,   238,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,    -1,   268,
     269,   270,   271,   272,   273,    -1,   275,   276,    -1,   278,
      -1,   280,   281,   282,   283,   284,   285,    -1,   287,   288,
      -1,    -1,   291,   292,   293,    -1,    -1,   296,   297,    -1,
     299,    -1,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,    -1,   374,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,   408,
     409,    -1,   411,    -1,   413,   414,   415,   416,   417,    -1,
     419,   420,    -1,    -1,   423,   424,   425,   426,   427,    -1,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,    -1,
     439,   440,   441,   442,   443,    -1,    -1,   446,   447,   448,
     449,   450,   451,   452,    -1,   454,    -1,   456,   457,   458,
     459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,
      45,    46,    47,    48,    49,    -1,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    -1,
      -1,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      85,    -1,    87,    88,    89,    90,    91,    92,    -1,    -1,
      95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,    -1,    -1,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,    -1,   207,    -1,   209,   210,   211,   212,   213,   214,
     215,   216,    -1,   218,    -1,   220,    -1,    -1,   223,    -1,
     225,   226,   227,   228,   229,    -1,    -1,   232,    -1,   234,
      -1,    -1,   237,   238,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,    -1,   268,   269,   270,   271,   272,   273,    -1,
     275,   276,    -1,   278,    -1,   280,   281,   282,   283,   284,
     285,    -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,
      -1,   296,   297,    -1,   299,    -1,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,    -1,
     355,   356,    -1,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    -1,   374,
     375,   376,   377,   378,    -1,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,   408,   409,    -1,   411,    -1,   413,   414,
     415,   416,   417,    -1,   419,   420,    -1,    -1,   423,   424,
     425,   426,   427,    -1,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,   442,   443,    -1,
      -1,   446,   447,   448,   449,   450,   451,   452,    -1,   454,
      -1,   456,   457,   458,   459,   460,    -1,    -1,   463,    -1,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    85,    -1,    87,    88,    89,    90,
      91,    92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
      -1,    -1,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,    -1,   207,    -1,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
      -1,    -1,   223,    -1,   225,   226,   227,   228,   229,    -1,
      -1,   232,    -1,   234,    -1,    -1,   237,   238,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,    -1,   268,   269,   270,
     271,   272,   273,    -1,   275,   276,    -1,   278,    -1,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,    -1,   299,    -1,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,   355,   356,    -1,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,    -1,   374,   375,   376,   377,   378,    -1,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,   408,   409,    -1,
     411,    -1,   413,   414,   415,   416,   417,    -1,   419,   420,
      -1,    -1,   423,   424,   425,   426,   427,    -1,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,   449,   450,
     451,   452,    -1,   454,    -1,   456,   457,   458,   459,   460,
      -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
      47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    -1,
      87,    88,    89,    90,    91,    92,    -1,    -1,    95,    96,
      97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,    -1,    -1,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,    -1,    -1,   232,    -1,   234,    -1,    -1,
     237,   238,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
      -1,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,    -1,   299,    -1,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,    -1,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,   374,   375,   376,
     377,   378,    -1,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,   409,    -1,   411,    -1,   413,   414,   415,   416,
     417,    -1,   419,   420,    -1,    -1,   423,   424,   425,   426,
     427,    -1,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,    -1,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    -1,    -1,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    85,    -1,    87,    88,    89,    90,    91,    92,
      -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,
     173,   174,   175,    -1,   177,    -1,   179,    -1,    -1,    -1,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,    -1,   207,    -1,   209,   210,   211,   212,
     213,   214,   215,   216,    -1,   218,    -1,   220,    -1,    -1,
     223,    -1,   225,   226,   227,   228,   229,    -1,    -1,   232,
      -1,   234,    -1,    -1,   237,   238,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,    -1,   268,   269,   270,   271,   272,
     273,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,    -1,   287,   288,    -1,    -1,   291,   292,
     293,    -1,    -1,   296,   297,    -1,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,    -1,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
      -1,   374,   375,   376,   377,   378,    -1,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,   408,   409,    -1,   411,    -1,
     413,   414,   415,   416,   417,    -1,   419,   420,    -1,    -1,
     423,   424,   425,   426,   427,    -1,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,    -1,   439,   440,   441,   442,
     443,    -1,    -1,   446,   447,   448,   449,   450,   451,   452,
      -1,   454,    -1,   456,   457,   458,   459,   460,    -1,    -1,
     463,    -1,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    -1,    87,    88,
      89,    90,    91,    92,    -1,    -1,    95,    96,    97,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,
     179,    -1,    -1,    -1,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,    -1,   207,    -1,
     209,   210,   211,   212,   213,   214,   215,   216,    -1,   218,
      -1,   220,    -1,    -1,   223,    -1,   225,   226,   227,   228,
     229,    -1,    -1,   232,    -1,   234,    -1,    -1,   237,   238,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,    -1,   268,
     269,   270,   271,   272,   273,    -1,   275,   276,    -1,   278,
      -1,   280,   281,   282,   283,   284,   285,    -1,   287,   288,
      -1,    -1,   291,   292,   293,    -1,    -1,   296,   297,    -1,
     299,    -1,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,    -1,   374,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,   408,
     409,    -1,   411,    -1,   413,   414,   415,   416,   417,    -1,
     419,   420,    -1,    -1,   423,   424,   425,   426,   427,    -1,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,    -1,
     439,   440,   441,   442,   443,    -1,    -1,   446,   447,   448,
     449,   450,   451,   452,    -1,   454,    -1,   456,   457,   458,
     459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,
      45,    46,    47,    48,    49,    -1,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    -1,
      -1,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      85,    -1,    87,    88,    89,    90,    91,    92,    -1,    -1,
      95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,    -1,    -1,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,    -1,   207,    -1,   209,   210,   211,   212,   213,   214,
     215,   216,    -1,   218,    -1,   220,    -1,    -1,   223,    -1,
     225,   226,   227,   228,   229,    -1,    -1,   232,    -1,   234,
      -1,    -1,   237,   238,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,    -1,   268,   269,   270,   271,   272,   273,    -1,
     275,   276,    -1,   278,    -1,   280,   281,   282,   283,   284,
     285,    -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,
      -1,   296,   297,    -1,   299,    -1,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,    -1,
     355,   356,    -1,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    -1,   374,
     375,   376,   377,   378,    -1,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,   408,   409,    -1,   411,    -1,   413,   414,
     415,   416,   417,    -1,   419,   420,    -1,    -1,   423,   424,
     425,   426,   427,    -1,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,   442,   443,    -1,
      -1,   446,   447,   448,   449,   450,   451,   452,    -1,   454,
      -1,   456,   457,   458,   459,   460,    -1,    -1,   463,    -1,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    85,    -1,    87,    88,    89,    90,
      91,    92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
      -1,    -1,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,    -1,   207,    -1,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
      -1,    -1,   223,    -1,   225,   226,   227,   228,   229,    -1,
      -1,   232,    -1,   234,    -1,    -1,   237,   238,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,    -1,   268,   269,   270,
     271,   272,   273,    -1,   275,   276,    -1,   278,    -1,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,    -1,   299,    -1,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,   355,   356,    -1,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,    -1,   374,   375,   376,   377,   378,    -1,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,   408,   409,    -1,
     411,    -1,   413,   414,   415,   416,   417,    -1,   419,   420,
      -1,    -1,   423,   424,   425,   426,   427,    -1,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,   449,   450,
     451,   452,    -1,   454,    -1,   456,   457,   458,   459,   460,
      -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
      47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    -1,
      87,    88,    89,    90,    91,    92,    -1,    -1,    95,    96,
      97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,    -1,    -1,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,    -1,    -1,   232,    -1,   234,    -1,    -1,
     237,   238,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
      -1,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,    -1,   299,    -1,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,    -1,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,   374,   375,   376,
     377,   378,    -1,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,   409,    -1,   411,    -1,   413,   414,   415,   416,
     417,    -1,   419,   420,    -1,    -1,   423,   424,   425,   426,
     427,    -1,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,    -1,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    36,    -1,    38,    39,    -1,    41,    42,
      43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    -1,    -1,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    85,    -1,    87,    88,    89,    90,    91,    92,
      -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,
     173,   174,   175,    -1,   177,    -1,   179,    -1,    -1,    -1,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,    -1,   207,    -1,   209,   210,   211,   212,
     213,   214,   215,   216,    -1,   218,    -1,   220,    -1,    -1,
     223,    -1,   225,   226,   227,   228,   229,    -1,    -1,   232,
      -1,   234,    -1,    -1,   237,   238,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,    -1,   268,   269,   270,   271,   272,
     273,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,    -1,   287,   288,    -1,    -1,   291,   292,
     293,    -1,    -1,   296,   297,    -1,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,    -1,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
      -1,   374,   375,   376,   377,   378,    -1,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,   408,   409,    -1,   411,    -1,
     413,   414,   415,   416,   417,    -1,   419,   420,    -1,    -1,
     423,   424,   425,   426,   427,    -1,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,    -1,   439,   440,   441,   442,
     443,    -1,    -1,   446,   447,   448,   449,   450,   451,   452,
      -1,   454,    -1,   456,   457,   458,   459,   460,    -1,    -1,
     463,    -1,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    36,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    -1,    87,    88,
      89,    90,    91,    92,    -1,    -1,    95,    96,    97,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,
     179,    -1,    -1,    -1,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,    -1,   207,    -1,
     209,   210,   211,   212,   213,   214,   215,   216,    -1,   218,
      -1,   220,    -1,    -1,   223,    -1,   225,   226,   227,   228,
     229,    -1,    -1,   232,    -1,   234,    -1,    -1,   237,   238,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,    -1,   268,
     269,   270,   271,   272,   273,    -1,   275,   276,    -1,   278,
      -1,   280,   281,   282,   283,   284,   285,    -1,   287,   288,
      -1,    -1,   291,   292,   293,    -1,    -1,   296,   297,    -1,
     299,    -1,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,    -1,   374,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,   408,
     409,    -1,   411,    -1,   413,   414,   415,   416,   417,    -1,
     419,   420,    -1,    -1,   423,   424,   425,   426,   427,    -1,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,    -1,
     439,   440,   441,   442,   443,    -1,    -1,   446,   447,   448,
     449,   450,   451,   452,    -1,   454,    -1,   456,   457,   458,
     459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,
      45,    46,    47,    48,    49,    -1,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    -1,
      -1,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      85,    -1,    87,    88,    89,    90,    91,    92,    -1,    -1,
      95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,    -1,    -1,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,    -1,   207,    -1,   209,   210,   211,   212,   213,   214,
     215,   216,    -1,   218,    -1,   220,    -1,    -1,   223,    -1,
     225,   226,   227,   228,   229,    -1,    -1,   232,    -1,   234,
      -1,    -1,   237,   238,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,    -1,   268,   269,   270,   271,   272,   273,    -1,
     275,   276,    -1,   278,    -1,   280,   281,   282,   283,   284,
     285,    -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,
      -1,   296,   297,    -1,   299,    -1,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,    -1,
     355,   356,    -1,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    -1,   374,
     375,   376,   377,   378,    -1,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,   408,   409,    -1,   411,    -1,   413,   414,
     415,   416,   417,    -1,   419,   420,    -1,    -1,   423,   424,
     425,   426,   427,    -1,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,   442,   443,    -1,
      -1,   446,   447,   448,   449,   450,   451,   452,    -1,   454,
      -1,   456,   457,   458,   459,   460,    -1,    -1,   463,    -1,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    85,    -1,    87,    88,    89,    90,
      91,    92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
      -1,    -1,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,    -1,   207,    -1,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
      -1,    -1,   223,    -1,   225,   226,   227,   228,   229,    -1,
      -1,   232,    -1,   234,    -1,    -1,   237,   238,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,    -1,   268,   269,   270,
     271,   272,   273,    -1,   275,   276,    -1,   278,    -1,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,    -1,   299,    -1,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,   355,   356,    -1,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,    -1,   374,   375,   376,   377,   378,    -1,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,   408,   409,    -1,
     411,    -1,   413,   414,   415,   416,   417,    -1,   419,   420,
      -1,    -1,   423,   424,   425,   426,   427,    -1,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,   449,   450,
     451,   452,    -1,   454,    -1,   456,   457,   458,   459,   460,
      -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
      47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    -1,
      87,    88,    89,    90,    91,    92,    -1,    -1,    95,    96,
      97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,    -1,    -1,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,    -1,    -1,   232,    -1,   234,    -1,    -1,
     237,   238,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
      -1,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,    -1,   299,    -1,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,    -1,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,   374,   375,   376,
     377,   378,    -1,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,   409,    -1,   411,    -1,   413,   414,   415,   416,
     417,    -1,   419,   420,    -1,    -1,   423,   424,   425,   426,
     427,    -1,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,    -1,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    -1,    -1,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    85,    -1,    87,    88,    89,    90,    91,    92,
      -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,
     173,   174,   175,    -1,   177,    -1,   179,    -1,    -1,    -1,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,    -1,   207,    -1,   209,   210,   211,   212,
     213,   214,   215,   216,    -1,   218,    -1,   220,    -1,    -1,
     223,    -1,   225,   226,   227,   228,   229,    -1,    -1,   232,
      -1,   234,    -1,    -1,   237,   238,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,    -1,   268,   269,   270,   271,   272,
     273,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,    -1,   287,   288,    -1,    -1,   291,   292,
     293,    -1,    -1,   296,   297,    -1,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,    -1,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
      -1,   374,   375,   376,   377,   378,    -1,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,   408,   409,    -1,   411,    -1,
     413,   414,   415,   416,   417,    -1,   419,   420,    -1,    -1,
     423,   424,   425,   426,   427,    -1,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,    -1,   439,   440,   441,   442,
     443,    -1,    -1,   446,   447,   448,   449,   450,   451,   452,
      -1,   454,    -1,   456,   457,   458,   459,   460,    -1,    -1,
     463,    -1,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    -1,    87,    88,
      89,    90,    91,    92,    -1,    -1,    95,    96,    97,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,
     179,    -1,    -1,    -1,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,    -1,   207,    -1,
     209,   210,   211,   212,   213,   214,   215,   216,    -1,   218,
      -1,   220,    -1,    -1,   223,    -1,   225,   226,   227,   228,
     229,    -1,    -1,   232,    -1,   234,    -1,    -1,   237,   238,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,    -1,   268,
     269,   270,   271,   272,   273,    -1,   275,   276,    -1,   278,
      -1,   280,   281,   282,   283,   284,   285,    -1,   287,   288,
      -1,    -1,   291,   292,   293,    -1,    -1,   296,   297,    -1,
     299,    -1,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,    -1,   374,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,   408,
     409,    -1,   411,    -1,   413,   414,   415,   416,   417,    -1,
     419,   420,    -1,    -1,   423,   424,   425,   426,   427,    -1,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,    -1,
     439,   440,   441,   442,   443,    -1,    -1,   446,   447,   448,
     449,   450,   451,   452,    -1,   454,    -1,   456,   457,   458,
     459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,
      45,    46,    47,    48,    49,    -1,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    -1,
      -1,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      85,    -1,    87,    88,    89,    90,    91,    92,    -1,    -1,
      95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,    -1,    -1,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,    -1,   207,    -1,   209,   210,   211,   212,   213,   214,
     215,   216,    -1,   218,    -1,   220,    -1,    -1,   223,    -1,
     225,   226,   227,   228,   229,    -1,    -1,   232,    -1,   234,
      -1,    -1,   237,   238,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,    -1,   268,   269,   270,   271,   272,   273,    -1,
     275,   276,    -1,   278,    -1,   280,   281,   282,   283,   284,
     285,    -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,
      -1,   296,   297,    -1,   299,    -1,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,    -1,
     355,   356,    -1,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    -1,   374,
     375,   376,   377,   378,    -1,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,   408,   409,    -1,   411,    -1,   413,   414,
     415,   416,   417,    -1,   419,   420,    -1,    -1,   423,   424,
     425,   426,   427,    -1,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,   442,   443,    -1,
      -1,   446,   447,   448,   449,   450,   451,   452,    -1,   454,
      -1,   456,   457,   458,   459,   460,    -1,    -1,   463,    -1,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    85,    -1,    87,    88,    89,    90,
      91,    92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
      -1,    -1,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,    -1,   207,    -1,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
      -1,    -1,   223,    -1,   225,   226,   227,   228,   229,    -1,
      -1,   232,    -1,   234,    -1,    -1,   237,   238,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,    -1,   268,   269,   270,
     271,   272,   273,    -1,   275,   276,    -1,   278,    -1,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,    -1,   299,    -1,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,   355,   356,    -1,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,    -1,   374,   375,   376,   377,   378,    -1,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,   408,   409,    -1,
     411,    -1,   413,   414,   415,   416,   417,    -1,   419,   420,
      -1,    -1,   423,   424,   425,   426,   427,    -1,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,   449,   450,
     451,   452,    -1,   454,    -1,   456,   457,   458,   459,   460,
      -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
      47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    -1,
      87,    88,    89,    90,    91,    92,    -1,    -1,    95,    96,
      97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,    -1,    -1,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,    -1,    -1,   232,    -1,   234,    -1,    -1,
     237,   238,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
      -1,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,    -1,   299,    -1,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,    -1,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,   374,   375,   376,
     377,   378,    -1,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,   409,    -1,   411,    -1,   413,   414,   415,   416,
     417,    -1,   419,   420,    -1,    -1,   423,   424,   425,   426,
     427,    -1,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,    -1,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    -1,    -1,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    85,    -1,    87,    88,    89,    90,    91,    92,
      -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,
     173,   174,   175,    -1,   177,    -1,   179,    -1,    -1,    -1,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,    -1,   207,    -1,   209,   210,   211,   212,
     213,   214,   215,   216,    -1,   218,    -1,   220,    -1,    -1,
     223,    -1,   225,   226,   227,   228,   229,    -1,    -1,   232,
      -1,   234,    -1,    -1,   237,   238,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,    -1,   268,   269,   270,   271,   272,
     273,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,    -1,   287,   288,    -1,    -1,   291,   292,
     293,    -1,    -1,   296,   297,    -1,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,    -1,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
      -1,   374,   375,   376,   377,   378,    -1,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,   408,   409,    -1,   411,    -1,
     413,   414,   415,   416,   417,    -1,   419,   420,    -1,    -1,
     423,   424,   425,   426,   427,    -1,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,    -1,   439,   440,   441,   442,
     443,    -1,    -1,   446,   447,   448,   449,   450,   451,   452,
      -1,   454,    -1,   456,   457,   458,   459,   460,    -1,    -1,
     463,    -1,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    36,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    -1,    87,    88,
      89,    90,    91,    92,    -1,    -1,    95,    96,    97,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,
     179,    -1,    -1,    -1,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,    -1,   207,    -1,
     209,   210,   211,   212,   213,   214,   215,   216,    -1,   218,
      -1,   220,    -1,    -1,   223,    -1,   225,   226,   227,   228,
     229,    -1,    -1,   232,    -1,   234,    -1,    -1,   237,   238,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,    -1,   268,
     269,   270,   271,   272,   273,    -1,   275,   276,    -1,   278,
      -1,   280,   281,   282,   283,   284,   285,    -1,   287,   288,
      -1,    -1,   291,   292,   293,    -1,    -1,   296,   297,    -1,
     299,    -1,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,    -1,   374,   375,   376,   377,   378,
      -1,    -1,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,   408,
     409,    -1,   411,    -1,   413,   414,   415,   416,   417,    -1,
     419,   420,    -1,    -1,   423,   424,   425,   426,   427,    -1,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,    -1,
     439,   440,   441,   442,   443,    -1,    -1,   446,   447,   448,
     449,   450,   451,   452,    -1,   454,    -1,   456,   457,   458,
     459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,
      45,    46,    47,    48,    49,    -1,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    -1,
      -1,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      85,    -1,    87,    88,    89,    90,    91,    92,    -1,    -1,
      95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,    -1,    -1,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,    -1,   207,    -1,   209,   210,   211,   212,   213,   214,
     215,   216,    -1,   218,    -1,   220,    -1,    -1,   223,    -1,
     225,   226,   227,   228,   229,    -1,    -1,   232,    -1,   234,
      -1,    -1,   237,   238,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,    -1,   268,   269,   270,   271,   272,   273,    -1,
     275,   276,    -1,   278,    -1,   280,   281,   282,   283,   284,
     285,    -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,
      -1,   296,   297,    -1,   299,    -1,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,    -1,
     355,   356,    -1,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    -1,   374,
     375,   376,   377,   378,    -1,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,   408,   409,    -1,   411,    -1,   413,   414,
     415,   416,   417,    -1,   419,   420,    -1,    -1,   423,   424,
     425,   426,   427,    -1,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,   442,   443,    -1,
      -1,   446,   447,   448,   449,   450,   451,   452,    -1,   454,
      -1,   456,   457,   458,   459,   460,    -1,    -1,   463,    -1,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    85,    -1,    87,    88,    89,    90,
      91,    92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
      -1,    -1,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,    -1,   207,    -1,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
      -1,    -1,   223,    -1,   225,   226,   227,   228,   229,    -1,
      -1,   232,    -1,   234,    -1,    -1,   237,   238,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,    -1,   268,   269,   270,
     271,   272,   273,    -1,   275,   276,    -1,   278,    -1,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,    -1,   299,    -1,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,   355,   356,    -1,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,    -1,   374,   375,   376,   377,   378,    -1,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,   408,   409,    -1,
     411,    -1,   413,   414,   415,   416,   417,    -1,   419,   420,
      -1,    -1,   423,   424,   425,   426,   427,    -1,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,   449,   450,
     451,   452,    -1,   454,    -1,   456,   457,   458,   459,   460,
      -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
      47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    -1,
      87,    88,    89,    90,    91,    92,    -1,    -1,    95,    96,
      97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,    -1,    -1,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,    -1,    -1,   232,    -1,   234,    -1,    -1,
     237,   238,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
      -1,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,    -1,   299,    -1,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,    -1,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,   374,   375,   376,
     377,   378,    -1,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,   409,    -1,   411,    -1,   413,   414,   415,   416,
     417,    -1,   419,   420,    -1,    -1,   423,   424,   425,   426,
     427,    -1,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,    -1,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    -1,    -1,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    85,    -1,    87,    88,    89,    90,    91,    92,
      -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,
     173,   174,   175,    -1,   177,    -1,   179,    -1,    -1,    -1,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,    -1,   207,    -1,   209,   210,   211,   212,
     213,   214,   215,   216,    -1,   218,    -1,   220,    -1,    -1,
     223,    -1,   225,   226,   227,   228,   229,    -1,    -1,   232,
      -1,   234,    -1,    -1,   237,   238,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,    -1,   268,   269,   270,   271,   272,
     273,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,    -1,   287,   288,    -1,    -1,   291,   292,
     293,    -1,    -1,   296,   297,    -1,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,    -1,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
      -1,   374,   375,   376,   377,   378,    -1,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,   408,   409,    -1,   411,    -1,
     413,   414,   415,   416,   417,    -1,   419,   420,    -1,    -1,
     423,   424,   425,   426,   427,    -1,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,    -1,   439,   440,   441,   442,
     443,    -1,    -1,   446,   447,   448,   449,   450,   451,   452,
      -1,   454,    -1,   456,   457,   458,   459,   460,    -1,    -1,
     463,    -1,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    -1,    87,    88,
      89,    90,    91,    92,    -1,    -1,    95,    96,    97,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,
     179,    -1,    -1,    -1,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,    -1,   207,    -1,
     209,   210,   211,   212,   213,   214,   215,   216,    -1,   218,
      -1,   220,    -1,    -1,   223,    -1,   225,   226,   227,   228,
     229,    -1,    -1,   232,    -1,   234,    -1,    -1,   237,   238,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,    -1,   268,
     269,   270,   271,   272,   273,    -1,   275,   276,    -1,   278,
      -1,   280,   281,   282,   283,   284,   285,    -1,   287,   288,
      -1,    -1,   291,   292,   293,    -1,    -1,   296,   297,    -1,
     299,    -1,   301,   302,   303,   304,   305,   306,   307,    -1,
     309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
     329,   330,   331,    -1,   333,   334,   335,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,   355,   356,    -1,   358,
     359,   360,   361,    -1,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,    -1,   374,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,   408,
     409,    -1,   411,    -1,   413,   414,   415,   416,   417,    -1,
     419,   420,    -1,    -1,   423,   424,   425,   426,   427,    -1,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,    -1,
     439,   440,   441,   442,   443,    -1,    -1,   446,   447,   448,
     449,   450,   451,   452,    -1,   454,    -1,   456,   457,   458,
     459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    44,
      45,    46,    47,    -1,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    -1,    -1,    74,
      -1,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    -1,    -1,    -1,   101,    -1,    -1,    -1,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,    -1,   154,
     155,   156,   157,    -1,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,    -1,    -1,    -1,    -1,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,    -1,   207,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,    -1,   218,    -1,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,    -1,    -1,   232,   233,   234,
     235,    -1,   237,   238,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,    -1,    -1,
     275,   276,   277,   278,    -1,    -1,   281,   282,   283,   284,
     285,    -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,
      -1,   296,    -1,   298,   299,   300,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
      -1,   316,   317,    -1,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    -1,   374,
     375,   376,   377,   378,    -1,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
      -1,   406,    -1,   408,   409,    -1,   411,   412,   413,   414,
     415,   416,   417,    -1,   419,   420,    -1,    -1,   423,   424,
      -1,   426,    -1,    -1,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,   442,   443,    -1,
      -1,   446,   447,   448,   449,   450,    -1,   452,    -1,   454,
     455,   456,   457,   458,   459,   460,    -1,    -1,   463,    -1,
      -1,   466,   467,   468,   469,   470,   471,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   483,   484,
     485,   486,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    -1,    -1,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    -1,    -1,    -1,   101,    -1,    -1,    -1,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,    -1,   154,   155,
     156,   157,    -1,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,   170,    -1,   172,   173,   174,   175,
     176,   177,    -1,   179,    -1,    -1,    -1,    -1,    -1,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
      -1,   207,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,    -1,   218,    -1,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,    -1,    -1,   232,   233,   234,   235,
      -1,   237,   238,   239,    -1,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,    -1,    -1,   275,
     276,   277,   278,    -1,    -1,   281,   282,   283,   284,   285,
      -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,
     296,    -1,   298,   299,   300,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,    -1,
     316,   317,    -1,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,    -1,   374,   375,
     376,   377,   378,    -1,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,    -1,
     406,    -1,   408,   409,    -1,   411,   412,   413,   414,   415,
     416,   417,    -1,   419,   420,    -1,    -1,   423,   424,    -1,
     426,    -1,    -1,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,    -1,
     446,   447,   448,   449,   450,    -1,   452,    -1,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,
     466,   467,   468,   469,   470,   471,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   483,   484,   485,
     486,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
      47,    -1,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    -1,    -1,    74,    -1,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    -1,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,    -1,   154,   155,   156,
     157,    -1,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,    -1,   179,    -1,    -1,    -1,    -1,    -1,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,    -1,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,    -1,    -1,   232,   233,   234,   235,    -1,
     237,   238,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,    -1,    -1,   275,   276,
     277,   278,    -1,    -1,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
      -1,   298,   299,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,    -1,   316,
     317,    -1,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,    -1,   355,   356,
     357,   358,   359,   360,    -1,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,   374,   375,   376,
     377,   378,    -1,   380,    -1,   382,   383,   384,   385,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,    -1,   406,
      -1,   408,   409,    -1,   411,   412,   413,   414,   415,   416,
     417,    -1,   419,   420,    -1,    -1,   423,   424,    -1,   426,
      -1,    -1,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,   449,   450,    -1,   452,    -1,   454,   455,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   483,   484,   485,   486,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    -1,    41,    42,    43,    44,    45,    46,    47,
      -1,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    -1,    -1,    62,    63,    64,    65,    66,    -1,
      68,    69,    70,    71,    -1,    -1,    74,    -1,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      -1,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,    -1,   154,   155,   156,   157,
      -1,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
      -1,   179,    -1,    -1,    -1,    -1,    -1,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,    -1,   207,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,    -1,
     218,    -1,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,    -1,    -1,   232,   233,   234,   235,    -1,   237,
     238,   239,    -1,    -1,   242,   243,   244,   245,   246,    -1,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,    -1,    -1,   275,   276,   277,
     278,    -1,    -1,   281,   282,   283,   284,   285,    -1,   287,
     288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,    -1,
     298,   299,   300,    -1,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,    -1,   316,   317,
      -1,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,    -1,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,    -1,   374,   375,   376,   377,
     378,    -1,   380,    -1,   382,   383,   384,   385,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,    -1,   406,    -1,
     408,   409,    -1,   411,   412,   413,   414,   415,   416,   417,
      -1,   419,   420,    -1,    -1,   423,   424,    -1,   426,    -1,
      -1,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,   442,   443,    -1,    -1,   446,   447,
     448,   449,   450,    -1,   452,    -1,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,
     468,   469,   470,   471,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   483,   484,   485,   486
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    19,    29,    31,    32,    47,    56,    68,    79,    91,
      93,   111,   125,   137,   144,   152,   154,   155,   167,   198,
     213,   238,   316,   319,   350,   359,   373,   380,   384,   395,
     406,   410,   446,   451,   465,   489,   503,   514,   515,   516,
     517,   518,   525,   529,   575,   578,   579,   581,   583,   587,
     588,   589,   590,   591,   592,   641,   778,   781,   791,   793,
     794,   795,   796,   803,   823,   826,   831,   834,   837,   838,
     840,   841,   848,   855,   857,   874,   877,   888,   894,   895,
     896,   898,   900,   901,   905,   423,   468,   897,   202,   366,
     374,   410,   458,   897,     3,    19,    20,    21,    22,    23,
      24,    25,    26,    28,    29,    30,    38,    39,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      54,    55,    56,    57,    58,    59,    62,    63,    64,    65,
      66,    68,    69,    70,    71,    72,    74,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    87,    88,    89,
      90,    91,    92,    94,    95,    96,    97,   101,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   116,   118,
     119,   120,   121,   122,   123,   125,   126,   127,   128,   129,
     130,   131,   134,   135,   136,   137,   138,   139,   141,   142,
     143,   145,   146,   147,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   160,   162,   163,   164,   165,   167,
     169,   170,   172,   173,   174,   175,   176,   177,   179,   183,
     184,   185,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   200,   201,   202,   203,   204,   205,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     218,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   232,   233,   234,   235,   237,   238,   239,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     275,   276,   277,   278,   280,   281,   282,   283,   284,   285,
     287,   288,   291,   292,   293,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   374,   375,
     376,   377,   378,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   408,
     409,   411,   412,   413,   414,   415,   416,   417,   419,   420,
     423,   424,   425,   426,   427,   429,   430,   431,   432,   433,
     434,   435,   436,   439,   440,   441,   442,   443,   446,   447,
     448,   449,   450,   451,   452,   454,   455,   456,   457,   458,
     459,   460,   463,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   697,   763,   767,   770,   919,   920,
     921,   897,    50,   503,   869,   173,   177,   239,   246,   294,
     329,   366,   414,   416,   432,   438,   441,   573,   802,   875,
       3,    27,   247,   319,   403,   761,   767,   919,    21,    74,
      90,   147,   156,   168,   173,   202,   246,   250,   314,   330,
     363,   366,   374,   377,   397,   410,   417,   426,   432,   458,
     842,   843,   846,   897,   761,    93,   455,   503,   521,   525,
     575,   583,   587,   895,   901,   108,    68,   213,   108,     5,
     766,   767,   792,   792,   767,   761,    27,   419,   423,   580,
     767,   835,   836,   897,    27,   132,   599,   600,   177,   239,
     366,   378,   419,   580,   889,   890,   897,   451,   503,   580,
     587,   592,     5,   290,   652,   759,   767,   768,   172,   503,
     828,   503,   337,   593,   594,   761,   593,     3,   588,   589,
       0,   506,   455,   519,    27,   419,   423,   580,   587,   148,
     217,   295,   437,   602,   603,   588,   590,   591,   507,   120,
     212,   443,   192,   759,   761,   192,   759,   192,   652,   192,
     759,   503,   501,   505,   745,   747,   583,   587,   833,   895,
     901,   759,   414,   416,   414,   416,   348,   180,   192,   767,
     767,   772,   337,   374,   410,   458,   202,   759,    27,   761,
     252,   426,   107,   410,   458,   369,     3,    44,    49,    50,
      51,    52,    64,    65,    74,    82,    94,   101,   112,   113,
     136,   164,   170,   172,   176,   192,   194,   208,   215,   216,
     218,   221,   222,   224,   233,   235,   247,   266,   267,   268,
     277,   282,   298,   300,   334,   357,   361,   381,   385,   388,
     403,   412,   419,   420,   431,   452,   455,   663,   664,   666,
     668,   670,   672,   674,   675,   676,   678,   679,   680,   682,
     683,   771,   847,   919,   922,   192,   772,   844,   192,   760,
     761,   192,   761,   503,   899,   573,   521,     3,    48,    49,
      51,    52,    64,    65,    72,   112,   113,   153,   158,   164,
     183,   184,   209,   215,   216,   218,   247,   266,   268,   273,
     280,   282,   297,   301,   315,   318,   334,   361,   381,   388,
     403,   405,   419,   420,   425,   427,   431,   451,   452,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     522,   524,   525,   527,   528,   919,   923,   519,   766,   792,
     766,   492,   503,   503,   832,   486,   223,   505,   289,     4,
       6,     7,     8,     9,    10,    35,    49,    51,    52,    60,
      61,    64,    65,    72,    74,    98,    99,   100,   101,   102,
     103,   104,   112,   113,   115,   153,   158,   159,   164,   183,
     184,   215,   216,   218,   240,   241,   266,   268,   274,   279,
     280,   282,   291,   301,   315,   334,   361,   379,   388,   405,
     419,   420,   425,   427,   428,   431,   444,   452,   487,   494,
     495,   496,   501,   503,   508,   510,   511,   588,   632,   667,
     670,   673,   674,   675,   677,   678,   679,   682,   683,   694,
     696,   697,   698,   700,   713,   714,   720,   739,   744,   751,
     752,   763,   764,   765,   766,   767,   750,   751,   889,   889,
     766,   889,   486,   171,   421,   492,   503,   759,   496,   747,
       3,   170,   172,   455,   525,   827,   829,   170,   830,   694,
     724,   767,   593,   507,   503,   774,   507,   504,   504,   516,
     759,   486,   223,    27,   132,   598,   598,    54,   598,   161,
     166,   236,   286,   608,   610,   611,   634,   636,   637,   638,
     602,   603,   503,   171,   219,   584,   652,   153,    23,    29,
     137,   293,   346,   350,   380,   448,   882,   885,   886,   346,
     153,    36,    55,   106,   201,   251,   259,   271,   303,   346,
     352,   374,   380,   395,   849,   852,   885,   153,   346,   380,
     885,   153,   346,   380,   885,     3,    27,    44,    50,    74,
      82,    94,   101,   132,   170,   172,   176,   194,   208,   221,
     222,   224,   233,   235,   247,   267,   277,   298,   300,   357,
     385,   403,   412,   431,   453,   455,   496,   504,   694,   726,
     727,   769,   775,   919,   924,   694,   746,     3,    27,    31,
      32,    33,    34,    35,    36,    37,    40,    53,    60,    61,
      67,    73,    75,    86,    93,    98,    99,   100,   102,   103,
     104,   115,   117,   124,   132,   133,   140,   144,   148,   159,
     161,   166,   168,   171,   178,   180,   181,   182,   186,   199,
     206,   217,   219,   230,   231,   236,   240,   241,   274,   279,
     286,   289,   290,   294,   295,   312,   322,   339,   354,   373,
     379,   390,   407,   410,   418,   421,   422,   428,   437,   438,
     444,   445,   451,   453,   461,   462,   464,   465,   762,   776,
     919,   923,   925,   745,   504,   503,   563,   573,     3,   274,
     824,   505,   773,    36,   458,   192,   759,   192,   577,   759,
     759,    82,   799,   503,   876,   469,    83,   128,   306,   415,
     454,   681,   681,   681,   503,   669,   669,   318,   503,   671,
     153,   503,    64,    65,   681,   669,   666,   467,   489,   503,
     684,   503,   684,   503,    35,   665,   503,   109,   110,   189,
     190,   253,   254,   255,   256,   257,   258,   261,   262,   370,
     371,   483,   484,   503,   685,   686,   687,   688,   689,   690,
     691,   692,   693,   669,    58,   353,   507,   845,   153,   507,
     845,   153,   507,   845,   153,   289,   724,   410,   504,   507,
       4,   159,   289,   428,   494,   495,   520,   522,   523,   526,
     765,   766,   851,   854,   521,   503,   864,   868,   526,   851,
     891,   893,   726,   664,   728,    36,   234,   767,   503,   748,
     501,   694,   743,   503,   503,   166,   503,   503,   588,   503,
     503,   503,   694,   503,   503,   503,   503,   503,   503,   503,
     503,   503,   694,   694,   694,   149,   753,   754,   724,   725,
     588,   694,   724,   715,   716,   767,   768,     9,   748,   747,
     503,   766,   503,   765,   766,     3,     8,    11,    16,    17,
      18,    33,    36,    41,    48,    73,   176,   194,   199,   221,
     222,   235,   274,   277,   291,   294,   385,   487,   490,   491,
     492,   494,   495,   496,   497,   498,   499,   718,   719,   720,
     722,   466,   701,   748,    15,   300,   694,    15,   219,   507,
     595,   503,   766,   748,   505,   747,   595,     3,   115,   239,
     683,   766,   851,   892,    97,   115,   893,   115,   893,   759,
     504,   507,   519,   504,   507,   594,   760,    36,   249,   774,
     234,   590,   590,   604,   605,   694,   590,   163,   270,   624,
     225,   271,   333,   383,   443,     4,     9,    27,   619,   694,
     494,   495,   620,   621,   694,   696,   634,   635,   611,   610,
     608,   609,   166,   637,   284,   639,   608,   634,   724,   584,
     759,   903,   380,    36,   767,   759,    67,    75,    86,   168,
     192,   322,   438,   544,   554,   569,   767,    75,    86,   839,
      86,   839,   503,   421,   503,   542,   245,   441,   542,    86,
     507,   421,   759,   666,   851,    54,   853,   851,   851,   106,
     251,   259,    54,   421,   465,   489,   850,   264,   366,   850,
     852,   652,    86,   421,   839,   366,   759,   421,   366,   726,
     726,   727,   504,   507,   602,   603,    13,    14,   502,   512,
     421,   562,   567,   767,   465,   867,   337,   410,   458,   272,
     457,   782,   153,    93,   529,   581,   796,   825,   855,   762,
     505,   145,   759,   274,   849,   856,   274,    36,   503,   563,
     563,   192,   557,   767,   800,   504,   726,    36,   503,   724,
     765,   847,   728,   681,   681,    35,   665,   419,   419,   765,
     765,   662,   767,   501,   501,   765,   765,   421,   421,   421,
     421,   664,   844,   772,   760,   761,   761,   772,   504,   192,
     577,   759,   521,   527,     4,   765,     4,   765,   776,   866,
     873,    50,    95,   121,   142,   146,   167,   170,   187,   279,
     287,   331,   870,   507,   504,   507,   504,   507,   833,   724,
     745,   725,   461,   740,   741,   694,   724,   503,   765,   765,
       3,   685,   686,   687,   688,   689,   690,   691,   692,   729,
     730,   766,   765,   765,   694,     8,    16,    17,    18,   490,
     491,   492,   494,   495,   496,   497,   498,   499,   718,   723,
     767,   694,   731,   494,   495,   503,   695,   696,   720,   733,
     744,   504,   724,   694,   724,   734,   694,    53,   171,   231,
     422,   694,   724,   737,   694,   503,   767,   348,   757,   502,
     504,   507,   507,   509,   512,   724,   694,   693,   693,   664,
     694,   694,   694,   694,     5,   776,   777,   419,    40,   407,
     749,   772,   694,   694,   503,   588,   738,   132,   159,   274,
     279,   284,   428,   439,   694,   279,   503,   694,   421,    48,
     176,   194,   199,   235,   385,   694,   694,   694,   694,   694,
     694,   694,   694,   694,   694,    27,    34,   390,   717,   182,
     162,   702,   694,   361,   503,   714,   694,   177,   239,   410,
     414,   416,   441,   596,   759,   752,   171,   642,   726,   496,
     642,   503,   766,   504,   759,   827,   759,   894,   694,   504,
     503,     3,   806,   807,   507,    37,   124,   445,   606,   361,
     362,   494,   495,   621,   623,   696,   383,   225,   290,   311,
     311,   507,   498,     4,   622,   765,   622,   361,   362,   623,
     758,   759,   278,   387,   640,   635,   609,   504,   445,   586,
      36,   115,   302,   503,   587,   902,   503,   767,   907,   916,
     918,   767,   346,   885,   503,   192,   554,   761,   225,   274,
     225,   445,   503,   547,   664,   761,   767,   192,   761,   192,
     767,    23,   137,   380,   537,   552,   776,   881,   884,   761,
     546,   566,   776,   761,   882,   761,   346,   380,   849,   885,
     851,   772,   761,   851,   772,   761,   851,   346,   380,   885,
     761,   761,   761,   761,   346,   380,   885,   761,   761,   602,
     602,   602,   453,   727,   193,   351,   601,   694,   694,   694,
     746,   327,   863,   504,   507,   287,   171,   421,   858,   458,
     759,   759,   411,   767,   573,   762,   503,   503,   153,   153,
     152,   587,   235,   544,   554,   558,   561,   570,   572,   767,
     465,   467,   549,   465,   801,   274,   289,   504,   694,   724,
     504,   504,   845,   504,   501,   486,   486,   504,   504,   504,
     507,   664,   765,   502,   765,   504,   504,   686,   688,   689,
     690,   689,   690,   690,   845,   845,   289,   845,   274,    36,
     496,   503,   526,   851,   865,   504,   507,    36,   862,   766,
     862,   274,   279,   331,   862,   862,   891,   664,   504,   502,
     694,   140,   741,   742,    36,   504,   694,   504,   504,   504,
     171,   504,   504,   507,   504,   505,   312,   732,   504,   695,
     695,   694,    11,    16,    17,    18,   199,   221,   291,   490,
     491,   492,   494,   495,   496,   497,   498,   499,   720,   695,
     504,   504,   166,   171,   735,   736,   504,    36,   737,   724,
     737,   737,   171,   504,    36,   760,   503,   694,   755,   748,
     694,   715,   694,   504,   504,   486,   695,   695,   146,   724,
     171,   132,   159,   279,   284,   428,   439,   503,   146,   723,
     694,   407,   749,   694,   738,   694,   421,   503,   588,   503,
     503,   299,   706,   414,   416,   414,   416,   759,   410,   597,
     597,   597,   181,   230,   362,   503,   588,   643,   644,   645,
     652,   653,   697,   699,   700,   767,   462,   658,   602,   754,
     658,   765,   693,   774,   833,    36,   507,   658,   490,   495,
     503,   808,   809,   812,   818,   819,   820,   821,   822,   605,
     291,   718,   721,   488,   607,     4,   765,   623,   290,   443,
     620,   507,   244,   643,   462,   585,   767,   451,   409,   444,
     911,   767,   906,   915,   289,   908,   912,   918,   748,   507,
     642,   492,   421,   694,   274,   569,   503,   153,   503,   547,
     202,   567,   530,   293,   540,   530,    23,   137,   350,   352,
     380,   878,   879,   880,   886,   887,   153,   845,   153,   845,
     537,   552,   537,   533,   766,   504,   507,   504,   507,   492,
     505,   421,   366,    86,   421,   839,   366,   421,   421,   421,
     366,   601,   601,   601,   727,   281,   281,   504,   502,   398,
     399,   766,   872,   562,   863,   759,   503,   563,   503,   824,
     410,   766,   779,   780,   567,   759,   577,   759,   761,   465,
     576,   759,   504,   507,   287,   542,   287,   289,   541,   542,
      36,   153,   759,   504,   665,   765,   684,   684,   665,   767,
     502,   502,   772,   153,   526,   860,   871,   866,   766,   766,
     279,   567,   496,   567,   766,   766,   418,   694,   144,   664,
     504,   694,   694,   723,   694,   735,   664,   695,   695,   695,
     695,   132,   274,   284,   695,   695,   695,   695,   695,   695,
     695,   695,   695,   695,   694,   694,   736,   735,   664,   504,
     504,   504,   724,   664,   504,   694,   755,   756,    36,   504,
     693,   694,    33,    33,   694,   504,   694,   171,   503,   728,
     694,   504,   146,   695,   695,   146,   146,   694,   694,   603,
     462,   503,   707,   767,   597,   597,   597,   597,   759,   759,
     759,   503,   803,   588,   653,   171,   588,   644,   645,    36,
     646,   647,   767,   507,    94,   172,   208,   224,   233,   267,
     357,   649,   647,    36,   646,   648,   767,   489,   657,   747,
     694,   182,   625,   601,   757,   625,   504,   504,   807,    76,
     804,   495,     3,   221,   501,   512,   814,   816,   817,     3,
     811,   809,   503,   607,   163,   229,   290,   759,   694,   354,
     910,   450,   748,   504,   507,    84,   910,   504,   507,   907,
     585,   694,   761,   504,   153,   567,   554,   567,   530,   557,
     504,   117,   206,   271,   274,   553,   503,   564,   175,   115,
     191,   274,   542,   850,   107,   115,   175,   274,   397,   400,
     542,   852,   380,   880,   432,   761,   767,   884,   566,     3,
      44,    50,    74,    82,    94,   101,   170,   172,   176,   194,
     208,   221,   222,   224,   233,   235,   247,   267,   273,   277,
     291,   298,   300,   357,   381,   385,   403,   412,   431,   455,
     494,   495,   531,   568,   664,   721,   766,   769,   851,   919,
     925,   776,   761,   761,   761,   761,   761,   761,   761,   761,
     761,   761,   504,   504,   504,   602,   850,   872,   503,   561,
     801,   759,   784,   785,   192,   759,   504,   507,   504,   856,
      36,   503,   899,   107,   271,   551,   549,   558,    79,   587,
     557,   445,   798,   502,   664,   845,   577,   504,   507,   567,
     694,   504,   504,   736,   171,   132,   284,   503,   504,   504,
     504,   507,   767,   694,   694,   694,   728,   504,   694,    33,
      33,   694,   694,   146,   504,   504,   694,   708,   767,   759,
     759,   759,   759,   647,   648,   503,   504,   767,   768,   412,
     616,   617,   503,   644,   224,   298,   650,   644,   650,   224,
     649,   650,   224,   617,   503,   767,   617,   503,   296,    54,
     186,   633,   504,   633,   766,   808,   503,   504,   501,   817,
     814,   815,     3,   810,   813,     3,    15,   495,   815,   504,
     723,   751,   587,   302,   587,   906,   289,   503,   904,   492,
     918,   910,   530,   554,   504,   504,   465,   560,   118,   195,
     204,   117,   447,   537,   555,    67,    73,    86,   115,   117,
     175,   206,   274,   279,   322,   339,   438,   445,   535,   536,
     548,    30,    54,   574,   192,   279,   851,   694,   574,   279,
     494,   495,   854,   767,   664,   845,   845,   247,   403,   769,
     773,   492,   421,   421,   601,   864,   445,   859,   861,   567,
     504,    36,   225,   786,   504,   507,   274,   503,   766,   801,
     152,   587,   561,   576,   107,   150,   200,   541,   120,   137,
     321,   465,   582,   289,   767,   797,   503,    36,   871,   695,
     171,   503,   728,   755,   504,   694,   694,   694,   504,   308,
     709,   654,   655,   699,   646,   503,     4,     9,   612,   614,
     615,   767,   760,   644,   289,   445,   651,   644,   224,   644,
     659,   660,   767,   503,   659,   767,    96,   183,   360,   503,
     626,   627,   628,   629,   630,   631,   694,   694,   464,   703,
     766,   703,   752,   805,   759,   810,   495,   496,   502,   815,
     504,   911,    86,   503,   699,   767,   909,   917,   133,   694,
     339,   560,   503,   550,   530,   504,   507,   503,   772,   761,
     695,   574,   118,   195,   117,   279,   225,   759,   560,    81,
     115,    36,   153,    73,   661,   773,   498,   531,   761,   761,
     504,   850,   122,   504,   549,   587,   503,   226,   787,   139,
     343,   783,   785,   153,    36,   761,   576,   504,    27,    78,
      87,   116,   191,   203,   397,   400,   545,   545,   362,   362,
      59,    67,   239,   759,   917,   695,   728,   504,    54,   602,
     504,   507,    36,   656,   760,   311,   498,   311,   362,   498,
     503,   503,   504,   694,   503,   644,   651,   504,   507,   664,
     659,   504,   503,   382,   503,   504,   507,   704,   705,   767,
     445,   613,   613,   504,   507,   496,   502,     9,   502,    15,
     495,   450,   761,   694,    73,   913,   913,   504,   507,   275,
     443,   759,   530,   556,   559,   776,   537,   694,   274,   536,
      36,   560,   563,   761,   191,   772,   445,   883,   498,   432,
     864,   766,   801,   541,   582,   760,     3,   115,   788,   131,
     226,   411,   759,   587,   899,   549,    67,   292,    67,   798,
     504,   504,   724,   332,   362,   710,   657,   654,   503,   504,
     767,   612,   760,   660,   661,   504,   724,   503,   724,   627,
     507,    36,   364,   752,     9,   502,   495,    12,    15,   495,
     587,   504,   772,   772,   914,   914,   658,   909,   380,   563,
     504,   507,   492,   504,   191,   249,   571,   503,   532,   694,
     432,    36,   504,   767,     3,   503,   503,   582,   576,   541,
     292,   292,   503,   801,    48,    97,   434,   694,   711,   712,
     711,   504,   659,   504,   507,   504,   504,   504,   626,   504,
     705,   707,   615,    12,   495,     9,   913,   606,   606,   916,
     571,   559,   531,   271,   543,   532,   172,   307,   386,   289,
     538,   539,   565,   849,   587,   759,   789,   790,   917,   658,
     712,   361,   165,   317,   165,   317,   504,     9,   347,   618,
     504,     9,   502,   914,   607,   607,   658,   539,   204,   120,
     443,   289,   565,   289,   538,   504,   582,   786,   504,   507,
     504,    33,   504,   503,   502,    15,   495,   606,   530,    58,
     271,   353,   380,   534,   534,   391,   790,   801,   712,     9,
     495,   607,    22,   115,   279,   786,   658,   504,   339,   759,
     126,   786,   339,   759,   787
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_int16 yyr1[] =
{
       0,   513,   514,   515,   515,   516,   516,   516,   516,   516,
     516,   516,   516,   516,   516,   516,   516,   516,   516,   516,
     516,   516,   516,   516,   516,   516,   516,   516,   516,   516,
     516,   516,   516,   516,   516,   516,   516,   516,   516,   516,
     516,   516,   517,   518,   518,   518,   518,   519,   519,   520,
     520,   520,   521,   521,   521,   521,   521,   522,   522,   522,
     523,   523,   524,   524,   525,   525,   526,   526,   526,   526,
     527,   528,   528,   529,   529,   529,   530,   530,   531,   531,
     531,   531,   531,   531,   532,   532,   533,   534,   534,   534,
     534,   534,   535,   535,   535,   535,   536,   536,   536,   536,
     536,   536,   536,   536,   536,   537,   538,   539,   539,   539,
     539,   539,   540,   540,   541,   541,   541,   541,   542,   543,
     543,   544,   544,   545,   545,   545,   545,   545,   545,   545,
     545,   546,   546,   547,   548,   548,   548,   548,   549,   549,
     549,   549,   550,   551,   551,   551,   552,   553,   553,   553,
     553,   553,   553,   554,   555,   555,   556,   556,   557,   558,
     558,   558,   559,   559,   560,   560,   561,   561,   562,   563,
     563,   564,   564,   565,   566,   566,   566,   566,   567,   567,
     568,   568,   568,   569,   569,   569,   569,   569,   569,   570,
     570,   571,   571,   571,   571,   572,   573,   573,   573,   573,
     573,   573,   573,   573,   574,   574,   575,   575,   576,   576,
     576,   577,   578,   578,   578,   578,   578,   578,   578,   579,
     579,   580,   580,   581,   581,   581,   581,   582,   582,   582,
     582,   583,   584,   584,   584,   585,   585,   586,   586,   587,
     587,   588,   588,   589,   589,   589,   589,   589,   589,   589,
     589,   590,   590,   591,   591,   591,   591,   591,   591,   591,
     592,   592,   592,   593,   593,   594,   595,   595,   596,   596,
     596,   596,   596,   596,   596,   596,   596,   597,   597,   598,
     598,   598,   599,   599,   600,   600,   601,   601,   601,   602,
     602,   603,   604,   604,   605,   605,   606,   606,   606,   607,
     607,   607,   608,   608,   608,   608,   609,   609,   610,   610,
     610,   610,   611,   611,   612,   612,   612,   612,   612,   612,
     613,   613,   614,   614,   615,   615,   615,   615,   616,   617,
     617,   618,   618,   619,   619,   619,   619,   619,   620,   621,
     621,   621,   622,   622,   623,   623,   624,   624,   625,   625,
     626,   626,   627,   627,   627,   627,   627,   628,   629,   630,
     631,   632,   632,   633,   633,   634,   634,   635,   635,   636,
     636,   637,   638,   638,   638,   638,   639,   639,   640,   640,
     640,   641,   641,   642,   642,   643,   643,   644,   644,   644,
     644,   644,   644,   644,   644,   645,   645,   645,   645,   645,
     645,   646,   646,   646,   646,   647,   647,   648,   648,   648,
     648,   648,   649,   649,   649,   649,   650,   650,   651,   651,
     652,   652,   652,   652,   653,   653,   654,   655,   655,   656,
     656,   657,   657,   658,   658,   659,   659,   660,   661,   661,
     662,   662,   663,   663,   664,   664,   664,   664,   664,   664,
     664,   664,   665,   665,   665,   666,   666,   666,   666,   666,
     666,   666,   667,   667,   667,   667,   668,   669,   669,   670,
     670,   670,   670,   670,   670,   670,   670,   670,   670,   670,
     671,   671,   672,   672,   673,   673,   674,   675,   676,   676,
     677,   677,   678,   679,   680,   680,   680,   680,   680,   680,
     681,   681,   682,   682,   682,   682,   683,   684,   684,   684,
     685,   685,   686,   686,   687,   687,   688,   688,   689,   689,
     690,   690,   691,   691,   692,   692,   693,   693,   693,   693,
     693,   693,   693,   693,   693,   693,   693,   693,   693,   693,
     693,   693,   694,   694,   694,   694,   694,   694,   694,   694,
     694,   694,   694,   694,   694,   694,   694,   694,   694,   694,
     694,   694,   694,   694,   694,   694,   694,   694,   694,   694,
     694,   694,   694,   694,   694,   694,   694,   694,   694,   694,
     694,   694,   694,   694,   694,   694,   694,   694,   694,   694,
     694,   694,   694,   694,   694,   694,   694,   694,   694,   694,
     694,   694,   694,   694,   694,   694,   694,   694,   694,   694,
     694,   695,   695,   695,   695,   695,   695,   695,   695,   695,
     695,   695,   695,   695,   695,   695,   695,   695,   695,   695,
     695,   695,   695,   695,   696,   696,   696,   696,   696,   696,
     696,   696,   696,   696,   696,   696,   697,   697,   697,   697,
     697,   697,   697,   698,   698,   699,   699,   700,   700,   700,
     700,   700,   700,   700,   700,   700,   700,   700,   700,   700,
     700,   700,   700,   700,   700,   700,   700,   700,   700,   700,
     700,   700,   700,   700,   700,   700,   701,   701,   702,   702,
     703,   703,   704,   704,   705,   706,   706,   706,   707,   708,
     708,   709,   709,   710,   710,   710,   711,   711,   712,   712,
     712,   712,   712,   713,   713,   714,   714,   715,   716,   716,
     717,   717,   717,   718,   718,   719,   719,   719,   719,   719,
     719,   719,   719,   719,   719,   719,   719,   720,   720,   721,
     721,   722,   722,   722,   722,   722,   722,   722,   722,   723,
     723,   724,   724,   725,   725,   726,   726,   727,   727,   727,
     728,   728,   729,   729,   730,   730,   730,   730,   730,   730,
     730,   730,   730,   730,   731,   731,   732,   733,   733,   734,
     734,   734,   734,   734,   734,   735,   736,   737,   737,   737,
     738,   738,   739,   740,   740,   741,   742,   742,   743,   743,
     744,   744,   745,   745,   745,   746,   746,   747,   747,   748,
     748,   749,   749,   750,   750,   751,   751,   752,   752,   752,
     752,   752,   753,   753,   754,   754,   755,   756,   756,   757,
     757,   757,   758,   758,   759,   759,   760,   760,   761,   762,
     763,   763,   764,   764,   764,   764,   764,   764,   764,   764,
     764,   764,   764,   764,   764,   764,   765,   766,   767,   767,
     767,   768,   768,   769,   769,   769,   770,   770,   770,   771,
     771,   771,   772,   772,   773,   773,   774,   774,   775,   776,
     776,   776,   776,   777,   777,   778,   779,   779,   780,   780,
     781,   781,   782,   782,   783,   783,   784,   784,   785,   785,
     786,   787,   787,   788,   788,   789,   789,   790,   791,   791,
     791,   792,   792,   793,   794,   795,   795,   795,   795,   796,
     796,   797,   798,   798,   799,   799,   800,   800,   801,   801,
     802,   802,   803,   804,   804,   805,   805,   806,   806,   807,
     807,   808,   808,   809,   809,   810,   811,   812,   813,   813,
     814,   815,   815,   816,   816,   817,   817,   818,   819,   819,
     819,   820,   820,   820,   820,   821,   821,   821,   821,   822,
     822,   822,   822,   823,   823,   824,   824,   825,   825,   825,
     825,   826,   826,   826,   826,   826,   827,   827,   827,   827,
     827,   828,   828,   829,   829,   830,   830,   831,   832,   832,
     833,   833,   833,   833,   834,   835,   835,   836,   836,   836,
     837,   837,   838,   838,   838,   838,   838,   838,   838,   838,
     838,   838,   838,   838,   838,   839,   839,   840,   840,   840,
     841,   841,   841,   841,   841,   841,   841,   841,   842,   842,
     842,   842,   842,   842,   842,   842,   842,   842,   842,   842,
     842,   842,   842,   843,   843,   843,   843,   843,   843,   843,
     844,   844,   845,   845,   845,   846,   846,   846,   847,   847,
     848,   848,   849,   849,   850,   850,   850,   851,   851,   851,
     851,   852,   852,   852,   852,   852,   852,   852,   852,   852,
     852,   852,   852,   852,   852,   853,   853,   854,   854,   854,
     855,   855,   856,   856,   857,   857,   858,   858,   859,   859,
     860,   860,   861,   861,   862,   862,   863,   863,   864,   864,
     865,   865,   865,   865,   865,   866,   867,   867,   868,   868,
     869,   869,   870,   870,   870,   870,   870,   870,   870,   870,
     870,   870,   870,   870,   870,   870,   871,   872,   872,   872,
     873,   873,   874,   875,   875,   876,   876,   877,   877,   877,
     877,   877,   877,   877,   877,   878,   878,   879,   879,   880,
     880,   880,   880,   881,   881,   882,   882,   882,   882,   882,
     882,   882,   882,   882,   882,   882,   882,   882,   882,   882,
     882,   882,   882,   882,   882,   882,   882,   882,   882,   882,
     882,   882,   882,   882,   883,   883,   884,   884,   884,   884,
     885,   885,   886,   887,   887,   887,   888,   888,   888,   888,
     889,   889,   889,   889,   890,   890,   890,   890,   891,   891,
     892,   892,   892,   892,   892,   892,   892,   893,   893,   894,
     894,   895,   896,   896,   896,   896,   896,   896,   897,   897,
     897,   898,   898,   898,   899,   899,   900,   900,   900,   900,
     900,   900,   901,   902,   902,   902,   902,   902,   903,   903,
     904,   904,   904,   905,   905,   906,   907,   907,   908,   908,
     908,   909,   909,   909,   910,   910,   911,   911,   912,   912,
     913,   913,   914,   914,   915,   915,   916,   916,   917,   917,
     918,   919,   919,   919,   919,   919,   919,   919,   919,   919,
     919,   919,   919,   919,   919,   919,   919,   919,   919,   919,
     919,   919,   919,   919,   919,   919,   919,   919,   919,   919,
     919,   919,   919,   919,   919,   919,   919,   919,   919,   919,
     919,   919,   919,   919,   919,   919,   919,   919,   919,   919,
     919,   919,   919,   919,   919,   919,   919,   919,   919,   919,
     919,   919,   919,   919,   919,   919,   919,   919,   919,   919,
     919,   919,   919,   919,   919,   919,   919,   919,   919,   919,
     919,   919,   919,   919,   919,   919,   919,   919,   919,   919,
     919,   919,   919,   919,   919,   919,   919,   919,   919,   919,
     919,   919,   919,   919,   919,   919,   919,   919,   919,   919,
     919,   919,   919,   919,   919,   919,   919,   919,   919,   919,
     919,   919,   919,   919,   919,   919,   919,   919,   919,   919,
     919,   919,   919,   919,   919,   919,   919,   919,   919,   919,
     919,   919,   919,   919,   919,   919,   919,   919,   919,   919,
     919,   919,   919,   919,   919,   919,   919,   919,   919,   919,
     919,   919,   919,   919,   919,   919,   919,   919,   919,   919,
     919,   919,   919,   919,   919,   919,   919,   919,   919,   919,
     919,   919,   919,   919,   919,   919,   919,   919,   919,   919,
     919,   919,   919,   919,   919,   919,   919,   919,   919,   919,
     919,   919,   919,   919,   919,   919,   919,   919,   919,   919,
     919,   919,   919,   919,   919,   919,   919,   919,   919,   919,
     919,   919,   919,   919,   919,   919,   919,   919,   919,   919,
     919,   919,   919,   919,   919,   919,   919,   919,   919,   919,
     919,   919,   919,   919,   919,   919,   919,   919,   919,   919,
     919,   919,   919,   919,   919,   919,   919,   919,   919,   919,
     919,   919,   919,   919,   919,   919,   919,   919,   919,   919,
     919,   919,   919,   919,   919,   919,   919,   919,   919,   919,
     919,   919,   919,   919,   919,   919,   919,   919,   919,   919,
     919,   919,   919,   919,   919,   919,   919,   919,   919,   919,
     919,   919,   919,   919,   919,   919,   919,   919,   919,   919,
     919,   919,   919,   919,   920,   920,   920,   920,   920,   920,
     920,   920,   920,   920,   920,   920,   920,   920,   920,   920,
     920,   920,   920,   920,   920,   920,   920,   920,   920,   920,
     920,   920,   920,   920,   920,   920,   920,   920,   920,   920,
     920,   920,   920,   920,   920,   920,   920,   920,   920,   920,
     920,   920,   920,   920,   920,   920,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   922,   922,   922,   922,   922,   922,   922,   922,
     922,   922,   922,   922,   922,   922,   922,   922,   922,   922,
     922,   922,   922,   922,   922,   922,   922,   923,   923,   923,
     923,   923,   923,   923,   923,   923,   923,   923,   923,   923,
     923,   923,   923,   923,   923,   923,   923,   923,   923,   923,
     923,   923,   923,   923,   923,   923,   923,   923,   923,   923,
     923,   923,   923,   923,   923,   923,   923,   923,   923,   923,
     923,   923,   923,   923,   923,   923,   923,   923,   923,   924,
     924,   924,   924,   924,   924,   924,   924,   924,   924,   924,
     924,   924,   924,   924,   924,   924,   924,   924,   924,   924,
     924,   924,   924,   924,   924,   924,   925,   925,   925,   925,
     925,   925,   925,   925,   925,   925,   925,   925,   925,   925,
     925,   925,   925,   925,   925,   925,   925,   925,   925,   925,
     925,   925,   925,   925,   925,   925,   925,   925,   925,   925,
     925,   925,   925,   925,   925,   925,   925,   925,   925,   925,
     925,   925,   925,   925,   925,   925,   925,   925,   925,   925,
     925,   925,   925,   925,   925,   925,   925,   925,   925,   925,
     925,   925,   925,   925,   925,   925,   925,   925,   925,   925,
     925,   925,   925,   925,   925
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     2,     2,     4,     3,     5,     1,     0,     1,
       1,     0,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     1,     1,     1,     1,     1,     1,
       2,     1,     1,     9,    12,    11,     0,     2,     1,     1,
       1,     1,     1,     1,     3,     0,     1,     2,     1,     1,
       2,     2,     3,     1,     1,     2,     2,     1,     2,     3,
       5,     3,     2,     5,     5,     2,     3,     1,     1,     2,
       2,     0,     4,     0,     3,     4,     4,     0,     3,     2,
       0,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     3,     1,     2,     2,     2,     2,     2,
       2,     0,     3,     3,     3,     0,     1,     2,     1,     2,
       2,     2,     2,     4,     1,     3,     1,     3,     1,     1,
       1,     1,     3,     1,     2,     0,     1,     0,     1,     3,
       0,     2,     0,     3,     3,     1,     5,     3,     1,     3,
       1,     4,     5,     5,     6,     3,     7,     4,    11,     1,
       3,     2,     2,     2,     0,     3,     1,     1,     2,     2,
       2,     2,     1,     0,     1,     2,     7,    10,     2,     3,
       0,     4,     2,     2,     2,     2,     3,     4,     2,     1,
       1,     1,     3,     9,    11,    12,    14,     3,     4,     4,
       0,     7,     1,     2,     3,     2,     0,     2,     0,     1,
       1,     3,     3,     1,     2,     4,     4,     2,     3,     5,
       5,     1,     1,    10,    10,     1,     2,     4,     4,     4,
       2,     2,     3,     1,     3,     6,     2,     0,     3,     3,
       4,     4,     4,     4,     3,     2,     1,     1,     0,     1,
       1,     0,     1,     5,     1,     0,     2,     2,     0,     1,
       0,     3,     1,     3,     4,     3,     1,     1,     0,     2,
       2,     0,     2,     2,     1,     1,     1,     0,     2,     4,
       5,     4,     2,     3,     2,     2,     2,     2,     1,     2,
       3,     0,     1,     0,     5,     1,     4,     6,     2,     1,
       0,     4,     0,     1,     1,     2,     2,     2,     1,     1,
       2,     2,     1,     1,     1,     1,     1,     1,     3,     0,
       1,     3,     1,     1,     1,     1,     1,     2,     4,     4,
       5,     1,     1,     2,     0,     1,     3,     1,     0,     1,
       2,     3,     2,     4,     2,     3,     2,     0,     1,     2,
       0,     4,     5,     2,     0,     1,     3,     3,     3,     3,
       3,     3,     1,     4,     2,     3,     4,     5,     4,     5,
       4,     5,     2,     4,     1,     1,     0,     1,     4,     5,
       4,     0,     2,     2,     2,     1,     1,     0,     4,     2,
       1,     2,     2,     4,     2,     6,     2,     1,     3,     4,
       0,     2,     0,     2,     0,     1,     3,     3,     2,     0,
       2,     4,     1,     1,     2,     3,     5,     6,     2,     3,
       5,     5,     3,     4,     0,     1,     1,     1,     1,     1,
       2,     4,     1,     1,     1,     1,     2,     3,     0,     1,
       1,     1,     1,     1,     2,     2,     2,     2,     2,     1,
       3,     0,     1,     1,     1,     1,     5,     2,     1,     1,
       1,     1,     4,     1,     2,     2,     1,     3,     3,     2,
       1,     0,     5,     2,     5,     2,     1,     3,     3,     0,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     3,     3,     3,     3,     3,
       3,     0,     1,     3,     3,     5,     2,     2,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     2,     2,     3,     3,     2,     2,     3,     3,     5,
       4,     6,     3,     5,     4,     6,     4,     6,     5,     7,
       3,     2,     4,     3,     2,     1,     3,     3,     3,     3,
       3,     3,     4,     3,     4,     3,     4,     5,     6,     6,
       7,     6,     7,     6,     7,     3,     4,     4,     6,     1,
       4,     1,     3,     2,     2,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     2,     2,
       5,     6,     6,     7,     1,     1,     2,     2,     2,     4,
       1,     2,     1,     2,     2,     4,     3,     6,     7,     9,
       7,     7,     4,     4,     1,     1,     1,     5,     1,     1,
       4,     1,     4,     1,     4,     1,     4,     1,     1,     1,
       1,     1,     1,     6,     6,     4,     4,     4,     4,     6,
       5,     5,     5,     4,     6,     4,     5,     0,     5,     0,
       2,     0,     1,     3,     3,     2,     2,     0,     6,     1,
       0,     3,     0,     2,     2,     0,     1,     4,     2,     2,
       2,     2,     2,     4,     3,     1,     5,     3,     1,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     4,     1,
       4,     1,     4,     1,     2,     1,     2,     1,     2,     1,
       3,     1,     3,     1,     0,     1,     3,     1,     3,     3,
       1,     3,     3,     0,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     3,     2,     3,     0,     3,
       3,     2,     2,     1,     0,     2,     2,     3,     2,     1,
       1,     3,     5,     1,     2,     4,     2,     0,     1,     0,
       1,     2,     2,     3,     5,     1,     0,     1,     2,     0,
       2,     1,     0,     1,     0,     1,     3,     3,     2,     1,
       3,     5,     4,     2,     1,     0,     3,     1,     3,     4,
       2,     0,     1,     3,     1,     2,     1,     3,     1,     1,
       1,     2,     1,     1,     2,     1,     1,     2,     7,     2,
       5,     3,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     3,     3,     0,     1,     1,
       1,     1,     1,     1,     1,     8,     1,     0,     1,     3,
      14,     4,     1,     1,     1,     1,     1,     3,     5,     3,
       4,     2,     3,     1,     1,     1,     3,    11,     2,     2,
       3,     1,     1,     4,     3,     2,     3,     2,     3,    13,
      16,     1,     2,     0,     1,     0,     1,     0,     2,     0,
       1,     0,     9,     4,     0,     1,     3,     2,     4,     2,
       0,     1,     2,     1,     1,     2,     2,     3,     1,     0,
       2,     1,     0,     1,     1,     2,     1,     1,     1,     1,
       1,     5,     6,     9,     3,     6,     7,    10,     4,     5,
       6,     9,     3,     4,     7,     2,     0,     1,     1,     1,
       1,     4,     5,     5,     4,     6,     1,     1,     1,     1,
       1,     1,     0,     1,     3,     1,     0,     5,     3,     0,
       1,     1,     1,     1,     2,     1,     1,     1,     2,     3,
       2,     1,     6,     6,     8,     6,     8,     6,     8,     6,
       8,     8,    10,     8,    10,     1,     0,     2,     4,     5,
       6,     4,     6,     4,     6,     8,     4,     6,     1,     1,
       1,     1,     1,     2,     1,     2,     1,     1,     1,     3,
       3,     3,     3,     2,     2,     1,     3,     1,     1,     1,
       1,     3,     1,     1,     0,     1,     1,     1,     1,     3,
       4,     6,     1,     2,     1,     1,     0,     1,     2,     2,
       1,     2,     2,     1,     2,     3,     2,     2,     2,     2,
       3,     3,     3,     1,     3,     1,     0,     1,     2,     2,
       5,     8,     1,     0,    11,     9,     1,     1,     3,     0,
       1,     3,     1,     0,     1,     0,     1,     0,     1,     3,
       1,     1,     1,     3,     0,     2,     2,     0,     2,     0,
       1,     0,     1,     1,     1,     3,     3,     1,     1,     3,
       3,     3,     3,     4,     3,     2,     1,     1,     1,     1,
       1,     3,     6,     1,     1,     2,     3,     4,     6,     4,
       6,     4,     6,     4,     6,     1,     2,     3,     2,     1,
       3,     2,     3,     1,     3,     2,     5,     3,     6,     4,
       6,     6,     6,     5,     5,     6,     9,     4,     5,     7,
       6,     4,     8,     4,     2,     4,     3,     6,     4,     2,
       2,     2,     2,     1,     2,     0,     1,     2,     2,     2,
       1,     3,     4,     2,     1,     0,     2,     3,     3,     3,
       1,     3,     3,     2,     3,     3,     3,     3,     1,     1,
       1,     1,     3,     5,     1,     1,     1,     1,     3,     2,
       4,     8,     2,     2,     2,     2,     2,     2,     1,     1,
       0,     3,     9,    12,     3,     0,     6,     8,     6,     8,
       6,     8,     7,     1,     4,     4,     7,     2,     1,     3,
       4,     3,     0,     1,     0,     2,     3,     5,     8,     5,
       0,     5,     5,     7,     2,     0,     1,     1,     1,     3,
       2,     0,     1,     0,     1,     3,     1,     3,     1,     3,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YYUSE (yyoutput);
  YYUSE (yylocationp);
  YYUSE (yyscanner);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyo, yytoknum[yytype], *yyvaluep);
# endif
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  YY_LOCATION_PRINT (yyo, *yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yytype, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[+yyssp[yyi + 1 - yynrhs]],
                       &yyvsp[(yyi + 1) - (yynrhs)]
                       , &(yylsp[(yyi + 1) - (yynrhs)])                       , yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen(S) (YY_CAST (YYPTRDIFF_T, strlen (S)))
#  else
/* Return the length of YYSTR.  */
static YYPTRDIFF_T
yystrlen (const char *yystr)
{
  YYPTRDIFF_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYPTRDIFF_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYPTRDIFF_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            else
              goto append;

          append:
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (yyres)
    return yystpcpy (yyres, yystr) - yyres;
  else
    return yystrlen (yystr);
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYPTRDIFF_T *yymsg_alloc, char **yymsg,
                yy_state_t *yyssp, int yytoken)
{
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat: reported tokens (one for the "unexpected",
     one per "expected"). */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Actual size of YYARG. */
  int yycount = 0;
  /* Cumulated lengths of YYARG.  */
  YYPTRDIFF_T yysize = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[+*yyssp];
      YYPTRDIFF_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
      yysize = yysize0;
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYPTRDIFF_T yysize1
                    = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
                    yysize = yysize1;
                  else
                    return 2;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
    default: /* Avoid compiler warnings. */
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    /* Don't count the "%s"s in the final size, but reserve room for
       the terminator.  */
    YYPTRDIFF_T yysize1 = yysize + (yystrlen (yyformat) - 2 * yycount) + 1;
    if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
      yysize = yysize1;
    else
      return 2;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          ++yyp;
          ++yyformat;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);
  YYUSE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs;

    yy_state_fast_t yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.
       'yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss;
    yy_state_t *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYPTRDIFF_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYPTRDIFF_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    goto yyexhaustedlab;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
# undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2:
#line 492 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 14646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3:
#line 508 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 14662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4:
#line 520 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 14673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 41:
#line 565 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 14679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 42:
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 14689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 43:
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 14700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 44:
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 14714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 45:
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 14725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 46:
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 14736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 47:
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 14742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48:
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 14748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49:
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 14754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50:
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 14760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51:
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 14766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57:
#line 65 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 14772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58:
#line 66 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 14778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59:
#line 67 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 14784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60:
#line 72 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 14790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61:
#line 73 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 14796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62:
#line 79 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 14804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63:
#line 83 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 14812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64:
#line 90 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 14818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65:
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 14824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66:
#line 96 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 14830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67:
#line 97 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 14836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68:
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 14842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69:
#line 104 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 14848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70:
#line 110 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 14856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71:
#line 117 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 14862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72:
#line 118 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 14868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73:
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 14885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74:
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 14902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75:
#line 39 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 14919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76:
#line 56 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 14925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77:
#line 58 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 14953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78:
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 14959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79:
#line 85 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 14965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80:
#line 86 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 14971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81:
#line 87 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 14977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82:
#line 88 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 14983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83:
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 14989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84:
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 14995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85:
#line 94 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 15001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86:
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 15007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87:
#line 104 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 15013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88:
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 15019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89:
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 15025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90:
#line 107 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 15031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91:
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 15037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92:
#line 114 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 15048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93:
#line 120 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 15054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94:
#line 121 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 15060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95:
#line 123 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 15077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 96:
#line 140 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 15088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97:
#line 147 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 15099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98:
#line 154 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 15113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99:
#line 164 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 15127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100:
#line 174 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 15143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101:
#line 186 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[-2]);
					n->compression_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 15155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102:
#line 194 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 15168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103:
#line 203 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 15181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104:
#line 212 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 15200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105:
#line 231 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 15208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106:
#line 237 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 15214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107:
#line 243 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 15220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108:
#line 245 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 15226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109:
#line 247 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 15232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110:
#line 249 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 15238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111:
#line 251 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 15244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112:
#line 256 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 15250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113:
#line 257 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                        { (yyval.list) = NIL; }
#line 15256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114:
#line 261 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 15262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115:
#line 262 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 15268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116:
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 15274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117:
#line 264 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 15280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118:
#line 269 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 15286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119:
#line 273 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 15292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120:
#line 274 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 15298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121:
#line 280 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 15309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122:
#line 286 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 15315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123:
#line 291 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 15321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124:
#line 292 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 15327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125:
#line 293 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 15333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126:
#line 294 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 15339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127:
#line 295 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 15345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128:
#line 296 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 15351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129:
#line 297 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 15357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130:
#line 298 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 15363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131:
#line 304 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 15369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132:
#line 305 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 15375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133:
#line 309 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 15381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134:
#line 315 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 15392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135:
#line 322 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 15403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136:
#line 329 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 15414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137:
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 15425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138:
#line 347 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 15431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139:
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 15437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140:
#line 349 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 15443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141:
#line 350 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 15449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142:
#line 354 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 15455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143:
#line 359 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 15461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144:
#line 360 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 15467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145:
#line 361 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 15473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146:
#line 366 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 15479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147:
#line 371 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 15485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148:
#line 372 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 15491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149:
#line 373 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 15497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150:
#line 374 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 15503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151:
#line 375 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 15509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152:
#line 376 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 15515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153:
#line 382 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					n->fdwoptions = (yyvsp[-1].list);
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
				}
#line 15538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154:
#line 405 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 15546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155:
#line 409 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 15554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156:
#line 415 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 15560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157:
#line 416 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 15566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158:
#line 420 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 15572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159:
#line 424 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 15578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160:
#line 425 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 15584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161:
#line 426 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 15590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162:
#line 431 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 15598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163:
#line 435 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 15606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164:
#line 442 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 15612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165:
#line 443 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 15618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166:
#line 448 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 15624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167:
#line 449 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 15630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168:
#line 454 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 15638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169:
#line 461 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 15644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170:
#line 462 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 15650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171:
#line 467 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 15656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172:
#line 468 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 15662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173:
#line 472 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 15668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174:
#line 478 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 15676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175:
#line 482 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 15684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176:
#line 486 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 15693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177:
#line 491 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 15701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178:
#line 498 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 15707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179:
#line 499 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 15713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180:
#line 503 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 15719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181:
#line 505 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 15729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182:
#line 511 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 15740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183:
#line 522 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 15757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184:
#line 536 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 15774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185:
#line 549 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 15792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186:
#line 564 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 15809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187:
#line 577 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 15827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188:
#line 592 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 15849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189:
#line 614 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 15857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190:
#line 618 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 15865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191:
#line 625 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 15873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192:
#line 629 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 15885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193:
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 15893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194:
#line 641 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 15901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195:
#line 649 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 15912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196:
#line 658 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 15918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197:
#line 659 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 15924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198:
#line 660 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 15930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199:
#line 661 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 15936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200:
#line 663 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 15947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201:
#line 670 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 15958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202:
#line 676 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 15964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203:
#line 677 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 15970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204:
#line 682 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 15976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205:
#line 683 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 15982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206:
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 15999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207:
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 16016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208:
#line 41 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 16022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209:
#line 42 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 16028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210:
#line 43 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 16034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211:
#line 49 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 16048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212:
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 16060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213:
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                        {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 16072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214:
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 16083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215:
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 16094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216:
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 16105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217:
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 16116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218:
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "all";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 16127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221:
#line 57 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 16133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222:
#line 59 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 16139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223:
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 16155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224:
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 16171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225:
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 16192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226:
#line 54 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 16213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227:
#line 74 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 16219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228:
#line 75 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 16225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229:
#line 76 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 16231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230:
#line 77 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 16237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231:
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 16251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232:
#line 22 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 16259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233:
#line 26 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 16270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234:
#line 33 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 16281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235:
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 16287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236:
#line 44 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 16293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237:
#line 50 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 16299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238:
#line 51 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 16305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 241:
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 16311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 242:
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 16317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 243:
#line 68 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244:
#line 70 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 16334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245:
#line 77 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 16346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246:
#line 85 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 16358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247:
#line 93 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 16370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248:
#line 101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 16382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249:
#line 109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 16394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250:
#line 117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 16406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251:
#line 127 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 16412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252:
#line 128 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253:
#line 158 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->intoClause = (yyvsp[-6].into);
					n->fromClause = (yyvsp[-5].list);
					n->whereClause = (yyvsp[-4].node);
					n->groupClause = (yyvsp[-3].list);
					n->havingClause = (yyvsp[-2].node);
					n->windowClause = (yyvsp[-1].list);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 16435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254:
#line 173 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-8].list);
					n->targetList = (yyvsp[-7].list);
					n->intoClause = (yyvsp[-6].into);
					n->fromClause = (yyvsp[-5].list);
					n->whereClause = (yyvsp[-4].node);
					n->groupClause = (yyvsp[-3].list);
					n->havingClause = (yyvsp[-2].node);
					n->windowClause = (yyvsp[-1].list);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 16453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255:
#line 186 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 16459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256:
#line 188 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 16482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257:
#line 207 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 16490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 258:
#line 211 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 16498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 259:
#line 215 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 16506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260:
#line 232 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 16517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261:
#line 239 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 16528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262:
#line 246 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 16539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263:
#line 255 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 16545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264:
#line 256 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 16551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265:
#line 260 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-5].str);
				n->aliascolnames = (yyvsp[-4].list);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-5]);
				(yyval.node) = (PGNode *) n;
			}
#line 16564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266:
#line 272 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 16578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267:
#line 282 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 16584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268:
#line 291 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 16593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269:
#line 296 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 16602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270:
#line 301 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 16611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271:
#line 306 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 16620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272:
#line 311 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 16632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273:
#line 319 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 16644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274:
#line 327 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 16653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275:
#line 332 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 16662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276:
#line 337 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 16671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277:
#line 343 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 16677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278:
#line 344 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 16683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279:
#line 348 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 16689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280:
#line 349 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 16695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 281:
#line 350 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 16701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 282:
#line 357 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 16707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 283:
#line 358 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 16713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284:
#line 362 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 16719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285:
#line 363 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 16725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286:
#line 367 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true;}
#line 16731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287:
#line 368 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false;}
#line 16737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288:
#line 369 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 16743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289:
#line 373 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 16749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290:
#line 374 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 16755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291:
#line 378 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 16761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292:
#line 382 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 16767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293:
#line 383 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 16773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294:
#line 387 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 16786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295:
#line 396 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 16799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296:
#line 406 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 16805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297:
#line 407 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 16811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298:
#line 408 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 16817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299:
#line 411 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 16823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300:
#line 412 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 16829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301:
#line 413 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 16835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302:
#line 417 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 16841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303:
#line 418 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 16847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304:
#line 419 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 16853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305:
#line 420 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 16859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306:
#line 424 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 16865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307:
#line 425 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 16871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308:
#line 430 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 16877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309:
#line 432 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 16890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310:
#line 448 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 16896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311:
#line 450 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 16902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312:
#line 455 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 16908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313:
#line 458 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 16914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314:
#line 466 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 16922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315:
#line 470 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 16930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316:
#line 474 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 16938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317:
#line 478 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 16946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318:
#line 482 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 16954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319:
#line 486 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 16962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320:
#line 493 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 16970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321:
#line 497 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 16976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322:
#line 504 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 16982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323:
#line 505 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 16988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324:
#line 510 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), (yyvsp[0].ival), (yylsp[-4]));
				}
#line 16996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325:
#line 514 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, -1, (yylsp[0]));
		}
#line 17004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326:
#line 518 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), -1, (yylsp[-3]));
		}
#line 17012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327:
#line 522 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), (yyvsp[-1].ival), (yylsp[-5]));
		}
#line 17020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328:
#line 529 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 17028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329:
#line 535 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330:
#line 536 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 17040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331:
#line 541 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 17046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332:
#line 542 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 17052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333:
#line 546 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334:
#line 548 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 17067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335:
#line 553 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent((yyvsp[-1].node)); }
#line 17073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336:
#line 555 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[-1].str),(yylsp[-1]))); }
#line 17079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337:
#line 557 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[-1].ival),(yylsp[-1]))); }
#line 17085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338:
#line 561 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339:
#line 581 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340:
#line 583 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 17103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341:
#line 585 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 17109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 342:
#line 589 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 17115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343:
#line 590 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 17121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344:
#line 594 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 17127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345:
#line 595 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 17133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346:
#line 598 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 17139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347:
#line 599 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 17145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348:
#line 624 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 17151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349:
#line 625 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 17157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350:
#line 629 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 17163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351:
#line 630 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 17169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352:
#line 634 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353:
#line 635 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354:
#line 636 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 17187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355:
#line 637 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 17193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356:
#line 638 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357:
#line 643 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 17207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358:
#line 656 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 17215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359:
#line 663 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 17223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360:
#line 670 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[-1].list), (yylsp[-4]));
				}
#line 17231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361:
#line 676 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 17237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362:
#line 677 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = NULL; }
#line 17243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363:
#line 681 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 17249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364:
#line 682 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 17255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365:
#line 686 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 17261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366:
#line 687 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 17267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367:
#line 691 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 17273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368:
#line 692 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 17279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369:
#line 696 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 17285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370:
#line 697 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 17291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371:
#line 702 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 17303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372:
#line 712 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 17309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373:
#line 713 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 17315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374:
#line 714 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 17321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375:
#line 715 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 17327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376:
#line 719 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 17333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377:
#line 720 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 17339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378:
#line 725 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 17345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379:
#line 726 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 17351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380:
#line 727 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 17357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 381:
#line 737 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 17367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 382:
#line 743 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 17377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383:
#line 760 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 17383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384:
#line 761 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 17389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385:
#line 765 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 17395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 386:
#line 766 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 17401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 387:
#line 773 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 17411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 388:
#line 779 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 17423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 389:
#line 787 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 17435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 390:
#line 795 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 17448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 391:
#line 804 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				}
#line 17461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 392:
#line 813 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 17469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 393:
#line 817 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 17478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 394:
#line 822 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 17486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 395:
#line 847 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 17494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 396:
#line 851 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 17511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 397:
#line 864 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->isNatural = false;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 17529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 398:
#line 878 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 17548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399:
#line 893 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->isNatural = true;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 17564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400:
#line 905 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = true;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 17581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401:
#line 921 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 17591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402:
#line 927 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 17600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403:
#line 932 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 17610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404:
#line 938 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 17619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405:
#line 944 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 17625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406:
#line 945 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 17631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407:
#line 954 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 17639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408:
#line 958 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 17647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409:
#line 962 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 17657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410:
#line 968 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 17667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411:
#line 974 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 17675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412:
#line 979 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 17681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413:
#line 980 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 17687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414:
#line 981 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 17693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415:
#line 982 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 17699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416:
#line 986 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 17705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417:
#line 987 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 17711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418:
#line 999 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 17717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419:
#line 1000 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420:
#line 1006 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 17734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421:
#line 1013 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 17745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422:
#line 1020 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 17756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423:
#line 1027 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 17767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424:
#line 1059 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 17782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425:
#line 1070 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 17797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426:
#line 1083 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 17803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427:
#line 1087 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 17809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428:
#line 1088 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 17815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429:
#line 1091 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 17821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430:
#line 1092 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 17827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431:
#line 1095 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 17833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432:
#line 1096 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 17839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433:
#line 1101 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 17845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434:
#line 1102 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 17851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435:
#line 1108 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 17859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436:
#line 1112 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 17867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437:
#line 1118 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 17889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438:
#line 1139 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 17901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439:
#line 1146 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 17907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440:
#line 1159 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 17915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441:
#line 1162 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 17923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444:
#line 1169 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 17932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445:
#line 1174 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 17942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446:
#line 1181 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 17951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447:
#line 1186 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 17961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448:
#line 1192 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 17970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449:
#line 1197 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 17980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450:
#line 1202 "third_party/libpg_query/grammar/statements/select.y"
                                                                               {
               (yyval.typnam) = SystemTypeName("struct");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
               }
#line 17991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 451:
#line 1208 "third_party/libpg_query/grammar/statements/select.y"
                                                     {
               (yyval.typnam) = SystemTypeName("map");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
			}
#line 18002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452:
#line 1218 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 18008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453:
#line 1220 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 18014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454:
#line 1222 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 18020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455:
#line 1226 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 18026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456:
#line 1227 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 18032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457:
#line 1228 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 18038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458:
#line 1229 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 18044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459:
#line 1230 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 18050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460:
#line 1232 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 18059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461:
#line 1237 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 18069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462:
#line 1256 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 18075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463:
#line 1257 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 18081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464:
#line 1258 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 18087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465:
#line 1259 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 18093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466:
#line 1271 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 18103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467:
#line 1284 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 18109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468:
#line 1285 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 18115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469:
#line 1292 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 18124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470:
#line 1297 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 18133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471:
#line 1302 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 18142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472:
#line 1307 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 18151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473:
#line 1312 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 18160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474:
#line 1317 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 18169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475:
#line 1322 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 18178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476:
#line 1327 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 18188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477:
#line 1333 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 18198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478:
#line 1339 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 18208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479:
#line 1345 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 18217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480:
#line 1352 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 18242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481:
#line 1373 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 18250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482:
#line 1383 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 18258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483:
#line 1387 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 18266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484:
#line 1395 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 18274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485:
#line 1399 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 18283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486:
#line 1407 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 18296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487:
#line 1419 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 18314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488:
#line 1440 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 18322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489:
#line 1444 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 18330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490:
#line 1450 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 18338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491:
#line 1454 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 18353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492:
#line 1467 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 18363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493:
#line 1475 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 18375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494:
#line 1485 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 18381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495:
#line 1487 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 18387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496:
#line 1489 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 18393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497:
#line 1491 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 18399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 498:
#line 1493 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 18405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 499:
#line 1495 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 18411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 500:
#line 1499 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 18417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501:
#line 1500 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 18423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502:
#line 1508 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 18436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 503:
#line 1517 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 18448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504:
#line 1525 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 18461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505:
#line 1534 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 18473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506:
#line 1545 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 18482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507:
#line 1552 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 18488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508:
#line 1553 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 18494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509:
#line 1554 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 18500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526:
#line 1583 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 18506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527:
#line 1585 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 18512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528:
#line 1587 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 18518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529:
#line 1589 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 18524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530:
#line 1591 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 18530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531:
#line 1593 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 18536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532:
#line 1595 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 18542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533:
#line 1597 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 18548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534:
#line 1599 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 18557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535:
#line 1604 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 18566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536:
#line 1609 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 18576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537:
#line 1615 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 18587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538:
#line 1622 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 18596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539:
#line 1627 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 18606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540:
#line 1633 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 18615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541:
#line 1638 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 18621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542:
#line 1669 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 18627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543:
#line 1672 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 18633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544:
#line 1674 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 18645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545:
#line 1682 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 18655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 546:
#line 1697 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 18661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 547:
#line 1699 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 18667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 548:
#line 1701 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 549:
#line 1703 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 550:
#line 1705 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 551:
#line 1707 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552:
#line 1709 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553:
#line 1711 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554:
#line 1713 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555:
#line 1715 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556:
#line 1717 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557:
#line 1719 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558:
#line 1721 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559:
#line 1723 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560:
#line 1726 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561:
#line 1728 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 18751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562:
#line 1730 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 18757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563:
#line 1733 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564:
#line 1735 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565:
#line 1737 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 18775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566:
#line 1739 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 18781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567:
#line 1742 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 18790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568:
#line 1747 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 18799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569:
#line 1752 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 18810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570:
#line 1759 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 18819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571:
#line 1764 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 18830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572:
#line 1771 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 18839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573:
#line 1776 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 18851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574:
#line 1784 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 18860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575:
#line 1789 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 18872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576:
#line 1798 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 18884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577:
#line 1806 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 18896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578:
#line 1814 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 18908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579:
#line 1822 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 18920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580:
#line 1840 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 18932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581:
#line 1848 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 18944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582:
#line 1856 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 18956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583:
#line 1864 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 18968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584:
#line 1872 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 18980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585:
#line 1879 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 18989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586:
#line 1883 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
				PGFuncCall *n = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
				(yyval.node) = (PGNode *) n;
			}
#line 18998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587:
#line 1887 "third_party/libpg_query/grammar/statements/select.y"
                                                {
				PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
				(yyval.node) = (PGNode *) n;
			}
#line 19007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588:
#line 1892 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->parameters = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 19019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589:
#line 1900 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->parameters = list_make1((yyvsp[-2].node));
				n->function = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 19031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590:
#line 1908 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 19051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591:
#line 1924 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 19063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592:
#line 1932 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 19075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593:
#line 1940 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 19087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594:
#line 1948 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 19099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595:
#line 1956 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 19111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596:
#line 1964 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 19123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597:
#line 1972 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 19131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598:
#line 1976 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 19139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599:
#line 1980 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 19147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600:
#line 1984 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 19155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601:
#line 1988 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 19167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602:
#line 1996 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 19179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 603:
#line 2004 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 19191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 604:
#line 2012 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 19203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 605:
#line 2020 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 19227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606:
#line 2040 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 19253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607:
#line 2062 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 19268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608:
#line 2073 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 19279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609:
#line 2080 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 19297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610:
#line 2093 "third_party/libpg_query/grammar/statements/select.y"
                                                      {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 19307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611:
#line 2110 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 19313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612:
#line 2112 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 19319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613:
#line 2114 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 19325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614:
#line 2116 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 19331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615:
#line 2118 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616:
#line 2120 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617:
#line 2122 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618:
#line 2124 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619:
#line 2126 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620:
#line 2128 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621:
#line 2130 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622:
#line 2132 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623:
#line 2134 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624:
#line 2136 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625:
#line 2138 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626:
#line 2140 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627:
#line 2142 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628:
#line 2144 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 19415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629:
#line 2146 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 19421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630:
#line 2148 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 19429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631:
#line 2152 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 19437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632:
#line 2156 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 19445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633:
#line 2160 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 19453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634:
#line 2173 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 19459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635:
#line 2174 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 19465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636:
#line 2176 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 19476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637:
#line 2183 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeParamRef(0, (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeParamRef(0, (yylsp[-1]));
				}
#line 19492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638:
#line 2195 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[-1].ival);
					p->location = (yylsp[-1]);
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) p;
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) p;
				}
#line 19511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639:
#line 2210 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (yyvsp[-2].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *)n;
					}
					else
						(yyval.node) = (yyvsp[-2].node);
				}
#line 19527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 640:
#line 2222 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 19533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 641:
#line 2224 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list)) {
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *)n;
					}
					else {
						(yyval.node) = (yyvsp[-1].node);
					}
				}
#line 19549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642:
#line 2236 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 19564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643:
#line 2247 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 19592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644:
#line 2271 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 19607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645:
#line 2282 "third_party/libpg_query/grammar/statements/select.y"
                          {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[-1].list);
				  g->location = (yylsp[-3]);
				  (yyval.node) = (PGNode *)g;
			  }
#line 19618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646:
#line 2291 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 19626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647:
#line 2295 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-3].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 19637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648:
#line 2302 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), list_make1((yyvsp[-3].node)), (yylsp[-6]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 19649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649:
#line 2310 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-8].list), lappend((yyvsp[-6].list), (yyvsp[-3].node)), (yylsp[-8]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 19661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650:
#line 2318 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 19676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651:
#line 2329 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652:
#line 2337 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * We consider AGGREGATE(*) to invoke a parameterless
					 * aggregate.  This does the right thing for COUNT(*),
					 * and there are no other aggregates in SQL that accept
					 * '*' as parameter.
					 *
					 * The PGFuncCall node is also marked agg_star = true,
					 * so that later processing can detect what the argument
					 * really was.
					 */
					PGFuncCall *n = makeFuncCall((yyvsp[-3].list), NIL, (yylsp[-3]));
					n->agg_star = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653:
#line 2365 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-3].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-2].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-2]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-2]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-2]))));
						n->agg_order = (yyvsp[-2].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-1].node);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 19747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654:
#line 2400 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 19753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655:
#line 2410 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 19759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656:
#line 2411 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657:
#line 2419 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 19775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658:
#line 2425 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_DATE, -1, (yylsp[0]));
				}
#line 19783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659:
#line 2429 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME, -1, (yylsp[0]));
				}
#line 19791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660:
#line 2433 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 19799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661:
#line 2437 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP, -1, (yylsp[0]));
				}
#line 19807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662:
#line 2441 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 19815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663:
#line 2445 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME, -1, (yylsp[0]));
				}
#line 19823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664:
#line 2449 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 19831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665:
#line 2453 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP, -1, (yylsp[0]));
				}
#line 19839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666:
#line 2457 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 19847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667:
#line 2461 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_ROLE, -1, (yylsp[0]));
				}
#line 19855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668:
#line 2465 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_USER, -1, (yylsp[0]));
				}
#line 19863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669:
#line 2469 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_SESSION_USER, -1, (yylsp[0]));
				}
#line 19871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670:
#line 2473 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_USER, -1, (yylsp[0]));
				}
#line 19879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671:
#line 2477 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_CATALOG, -1, (yylsp[0]));
				}
#line 19887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672:
#line 2481 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_SCHEMA, -1, (yylsp[0]));
				}
#line 19895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673:
#line 2485 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 19901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674:
#line 2487 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 19907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675:
#line 2489 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 19915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676:
#line 2493 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 19928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677:
#line 2502 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position(B, A) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 19937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678:
#line 2507 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 19948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679:
#line 2514 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 19967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680:
#line 2529 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 19978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681:
#line 2536 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 19986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682:
#line 2540 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 19994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683:
#line 2544 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 20002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684:
#line 2548 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 20010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685:
#line 2552 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 20021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686:
#line 2565 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687:
#line 2566 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 20033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688:
#line 2570 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 20039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689:
#line 2571 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 20045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690:
#line 2579 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691:
#line 2580 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 20057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692:
#line 2584 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 20063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693:
#line 2586 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 20069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694:
#line 2591 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 20079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695:
#line 2599 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 20085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696:
#line 2601 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 20102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697:
#line 2614 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 20108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698:
#line 2619 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 20126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699:
#line 2644 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700:
#line 2645 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 20138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701:
#line 2648 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702:
#line 2649 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 20150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703:
#line 2661 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					(yyval.windef) = n;
				}
#line 20160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704:
#line 2667 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					(yyval.windef) = n;
				}
#line 20170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705:
#line 2673 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 20182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706:
#line 2683 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 20203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707:
#line 2700 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);
					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_VALUE_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_VALUE_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 20244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708:
#line 2745 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 20256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709:
#line 2753 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 20268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710:
#line 2761 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 20280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711:
#line 2769 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 20292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712:
#line 2777 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 20304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713:
#line 2797 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714:
#line 2798 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 20316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715:
#line 2801 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 20322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716:
#line 2802 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 20328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717:
#line 2806 "third_party/libpg_query/grammar/statements/select.y"
                                                                                {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 20341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718:
#line 2816 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 20347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719:
#line 2817 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 20353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720:
#line 2819 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 20359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721:
#line 2820 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 20365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722:
#line 2821 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 20371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723:
#line 2824 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724:
#line 2825 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 20383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725:
#line 2828 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 20389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726:
#line 2829 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 20395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727:
#line 2830 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 20401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728:
#line 2831 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 20407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729:
#line 2832 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 20413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730:
#line 2833 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 20419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731:
#line 2834 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 20425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732:
#line 2835 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 20431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733:
#line 2836 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 20437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734:
#line 2837 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 20443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735:
#line 2838 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 20449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736:
#line 2839 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 20455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737:
#line 2843 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 20461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738:
#line 2845 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739:
#line 2850 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 20473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740:
#line 2852 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741:
#line 2857 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 20485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742:
#line 2859 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743:
#line 2861 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 20497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744:
#line 2863 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 20503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745:
#line 2865 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 20509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746:
#line 2867 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 20515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747:
#line 2869 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 20521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748:
#line 2871 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 20527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749:
#line 2885 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 20533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750:
#line 2887 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 20539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751:
#line 2891 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 20547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752:
#line 2895 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 20555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753:
#line 2902 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 20563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754:
#line 2906 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = NULL;
				}
#line 20571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755:
#line 2914 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 20579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756:
#line 2918 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 20587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757:
#line 2924 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 20595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758:
#line 2928 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 20608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759:
#line 2937 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 20621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760:
#line 2947 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 20627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761:
#line 2948 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 20633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762:
#line 2953 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 20641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763:
#line 2956 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 20647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764:
#line 2963 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765:
#line 2964 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 20659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766:
#line 2965 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 20665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767:
#line 2966 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 20671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768:
#line 2967 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 20677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769:
#line 2968 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 20683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770:
#line 2969 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 20689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771:
#line 2970 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 20695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772:
#line 2971 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 20701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773:
#line 2972 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774:
#line 2983 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 20715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775:
#line 2987 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 20723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776:
#line 2994 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 20729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777:
#line 3000 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-2].node)); }
#line 20735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778:
#line 3001 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 20741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779:
#line 3018 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 20749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780:
#line 3022 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 20758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781:
#line 3027 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 20766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 782:
#line 3031 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 20785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 783:
#line 3046 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 20793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784:
#line 3050 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 20799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785:
#line 3054 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786:
#line 3057 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787:
#line 3060 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 20817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788:
#line 3061 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789:
#line 3062 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790:
#line 3066 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 20840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791:
#line 3072 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 20846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792:
#line 3083 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 20860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793:
#line 3096 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 20866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794:
#line 3097 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 20872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795:
#line 3102 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 20884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796:
#line 3112 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797:
#line 3113 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 20896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798:
#line 3116 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799:
#line 3117 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 20908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800:
#line 3121 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 20916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801:
#line 3125 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 20924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802:
#line 3132 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 20932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803:
#line 3136 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 20944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804:
#line 3144 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 20956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805:
#line 3154 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806:
#line 3155 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 20968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807:
#line 3159 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 20974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808:
#line 3160 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 20980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809:
#line 3164 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 20986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810:
#line 3165 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 20992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813:
#line 3179 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814:
#line 3180 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 21004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815:
#line 3184 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 21010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816:
#line 3185 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 21016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817:
#line 3189 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 21028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818:
#line 3205 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 21040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819:
#line 3213 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 21052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820:
#line 3221 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnRef *n = makeNode(PGColumnRef);
					PGAStar *star = makeNode(PGAStar);
					n->fields = list_make1(star);
					n->location = (yylsp[-2]);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);

					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)n;
					(yyval.target)->location = (yylsp[-2]);
				}
#line 21071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821:
#line 3236 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnRef *n = makeNode(PGColumnRef);
					PGAStar *star = makeNode(PGAStar);
					n->fields = list_make1(star);
					n->location = (yylsp[-4]);
					star->relation = (yyvsp[-4].str);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);

					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)n;
					(yyval.target)->location = (yylsp[-4]);
				}
#line 21091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822:
#line 3253 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823:
#line 3254 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 21103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824:
#line 3257 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825:
#line 3258 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 21115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826:
#line 3261 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), makeString((yyvsp[0].str))); }
#line 21121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827:
#line 3265 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 21127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828:
#line 3266 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 21133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829:
#line 3269 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830:
#line 3270 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 21145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831:
#line 3271 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 21151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832:
#line 3281 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 21157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833:
#line 3282 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 21163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834:
#line 3294 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 21171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835:
#line 3298 "third_party/libpg_query/grammar/statements/select.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 21200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836:
#line 3325 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 21206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837:
#line 3327 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 21212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838:
#line 3331 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839:
#line 3333 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840:
#line 3344 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 21230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841:
#line 3347 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 21239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842:
#line 3358 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 21247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 843:
#line 3362 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 21255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 844:
#line 3366 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 21271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 845:
#line 3378 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 21279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 846:
#line 3382 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 21292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847:
#line 3391 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 21303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848:
#line 3398 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-6].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[-4].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-3].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-3]))));
					if ((yyvsp[-2].boolean) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[-2]))));


					t->typmods = (yyvsp[-4].list);
					t->location = (yylsp[-6]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 21345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 849:
#line 3436 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 21353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 850:
#line 3440 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 21361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 851:
#line 3444 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 21369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 852:
#line 3448 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 21377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 853:
#line 3452 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 21385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 854:
#line 3456 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 21393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 855:
#line 3460 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 21401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 856:
#line 3465 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 21407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 857:
#line 3466 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 858:
#line 3482 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 859:
#line 3483 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 860:
#line 3484 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 861:
#line 3487 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 862:
#line 3488 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 863:
#line 3494 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 864:
#line 3495 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 865:
#line 3496 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 866:
#line 3499 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 867:
#line 3500 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 868:
#line 3501 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 869:
#line 3504 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 870:
#line 3505 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 871:
#line 3506 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 872:
#line 3509 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 21503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 873:
#line 3510 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 21509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 874:
#line 3514 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 21515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 875:
#line 3516 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 21521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 876:
#line 3520 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 877:
#line 3521 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 21533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 879:
#line 3532 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 880:
#line 3533 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 881:
#line 3534 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 882:
#line 3535 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 883:
#line 3538 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884:
#line 3539 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885:
#line 8 "third_party/libpg_query/grammar/statements/create_enum.y"
                                {
					PGCreateEnumStmt *n = makeNode(PGCreateEnumStmt);
					n->typeName = (yyvsp[-5].list);
					n->vals = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886:
#line 17 "third_party/libpg_query/grammar/statements/create_enum.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887:
#line 18 "third_party/libpg_query/grammar/statements/create_enum.y"
                                                                                { (yyval.list) = NIL; }
#line 21592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888:
#line 22 "third_party/libpg_query/grammar/statements/create_enum.y"
                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 21598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889:
#line 24 "third_party/libpg_query/grammar/statements/create_enum.y"
                                { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 21604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890:
#line 15 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                {
					PGCreatePropertyGraphStmt *n = makeNode(PGCreatePropertyGraphStmt);
					n->name = (yyvsp[-10].str);
					n->vertex_tables = 	(yyvsp[-6].list);
					n->edge_tables = (yyvsp[-1].list);
					// n->property_graph_content = $5;
					(yyval.node) = (PGNode *)n;
					// n = $5;
				}
#line 21618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891:
#line 25 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                {
					PGCreatePropertyGraphStmt *n = makeNode(PGCreatePropertyGraphStmt);
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896:
#line 46 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 21634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897:
#line 47 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 21640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898:
#line 53 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                {
					PGPropertyGraphTable *n = makeNode(PGPropertyGraphTable);
					n->name = (yyvsp[-4].range);
					n->labels = (yyvsp[-2].list);
					n->keys = (yyvsp[-3].list);
					n->is_vertex_table = true;
					n->contains_discriminator = true;
					n->discriminator = (yyvsp[0].str);
					(yyval.node) = (PGNode *) n;
				}
#line 21655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899:
#line 65 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                {
					PGPropertyGraphTable *n = makeNode(PGPropertyGraphTable);
					n->name = (yyvsp[-2].range);
					n->labels = (yyvsp[0].list);
					n->keys = (yyvsp[-1].list);
					n->is_vertex_table = true;
					n->contains_discriminator = false;
					(yyval.node) = (PGNode *) n;
				}
#line 21669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900:
#line 78 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901:
#line 82 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].str)); }
#line 21681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902:
#line 83 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].str)); }
#line 21687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903:
#line 87 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904:
#line 89 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                                                        { (yyval.str) = (char*) "default"; }
#line 21699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905:
#line 93 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 21705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906:
#line 94 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 21711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907:
#line 101 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                {
					PGPropertyGraphTable *n = makeNode(PGPropertyGraphTable);
					n->name = (yyvsp[-10].range);
					n->keys = (yyvsp[-9].list);
					n->is_vertex_table = false;
					n->source_key = (yyvsp[-7].list);
					n->source_key_reference = (yyvsp[-5].range);
					n->destination_key = (yyvsp[-3].list);
					n->destination_key_reference = (yyvsp[-1].range);
					n->labels = (yyvsp[0].list); 
					(yyval.node) = (PGNode *) n;
				}
#line 21728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908:
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				}
#line 21739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909:
#line 14 "third_party/libpg_query/grammar/statements/load.y"
                                                  {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[0].str);
                    n->load_type = PG_LOAD_TYPE_INSTALL;
                    (yyval.node) = (PGNode *)n;
				}
#line 21750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910:
#line 20 "third_party/libpg_query/grammar/statements/load.y"
                                                        {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[0].str);
                      n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 21761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911:
#line 28 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912:
#line 29 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 21773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913:
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 21787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914:
#line 21 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915:
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 21807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916:
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 21817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917:
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 21827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918:
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 21837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919:
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920:
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921:
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922:
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923:
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 21909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924:
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 21915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925:
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 21921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926:
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927:
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 21933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928:
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929:
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 21945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930:
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 21951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931:
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 21957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932:
#line 12 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
    {
        PGMatchPattern *n = makeNode(PGMatchPattern);
        n->pg_name = (yyvsp[-7].str);
        n->pattern = (yyvsp[-4].list);
        n->where_clause = (yyvsp[-3].node);
        n->columns = (yyvsp[-2].list);
        
        n->name = (yyvsp[0].range);
        // n->pg_name = $6;
        // n->pattern = $9;
        // n->where_clause = $10;
        // n->columns = $11;
        
        // n->name = $13;
        (yyval.node) = (PGNode *) n;
    }
#line 21978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933:
#line 32 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                             { (yyval.list) = (yyvsp[-1].list); }
#line 21984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934:
#line 33 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                               { (yyval.list) = NIL; }
#line 21990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935:
#line 38 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                { 
                    (yyval.list) = list_make1((yyvsp[0].target)); 
                }
#line 21998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936:
#line 42 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                {
                     (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); 
                }
#line 22006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937:
#line 49 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
    { 
        (yyval.list) = list_make1(list_make2((yyvsp[-1].str),(yyvsp[0].list))); 
    }
#line 22014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938:
#line 53 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
    { 
        (yyval.list) = lappend((yyvsp[-3].list), list_make1(list_make2((yyvsp[-1].str),(yyvsp[0].list))));
    }
#line 22022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939:
#line 60 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                                    {(yyval.str) = (yyvsp[-1].str); }
#line 22028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940:
#line 61 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                                    {(yyval.str) = NULL;}
#line 22034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941:
#line 65 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                                {(yyval.list) = list_make1((yyvsp[0].node));}
#line 22040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942:
#line 66 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));}
#line 22046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943:
#line 70 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944:
#line 71 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945:
#line 77 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
            {
                PGGraphVariablePattern *n = makeNode(PGGraphVariablePattern);
                n->alias_name = (yyvsp[-1].str);
                n->label_name = (yyvsp[0].str);
                (yyval.node) = (PGNode *) n;
                
            }
#line 22070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946:
#line 86 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
            {
                PGGraphVariablePattern *n = makeNode(PGGraphVariablePattern);
                n->alias_name = (yyvsp[-1].str);
                n->label_name = (yyvsp[0].str);
                (yyval.node) = (PGNode *) n;
            }
#line 22081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947:
#line 94 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
            { 
                PGGraphElementPattern *n = makeNode(PGGraphElementPattern);
                n->pattern_clause = (yyvsp[-1].node);
                // n->label_name = $3;
                n->is_vertex_pattern = true;
                (yyval.node) = (PGNode *) n;
            }
#line 22093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948:
#line 105 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                    { (yyval.str) = (yyvsp[0].str); }
#line 22099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949:
#line 106 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                    { (yyval.str) = NULL; }
#line 22105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950:
#line 110 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                    { (yyval.str) = (yyvsp[0].str);}
#line 22111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951:
#line 114 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                    { (yyval.str) = (yyvsp[0].str); }
#line 22117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 952:
#line 115 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                    { (yyval.str) = NULL; }
#line 22123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 955:
#line 127 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
            { 
                PGGraphVariablePattern *n = makeNode(PGGraphVariablePattern);
                n->alias_name = (yyvsp[-1].str);
                n->label_name = (yyvsp[0].str);
                (yyval.node) = (PGNode *) n;
            }
#line 22134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 956:
#line 134 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
            { 
                PGGraphVariablePattern *n = makeNode(PGGraphVariablePattern);
                n->alias_name = (yyvsp[0].str);
                (yyval.node) = (PGNode *) n;
            }
#line 22144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 957:
#line 142 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                                    {(yyval.node) = (yyvsp[0].node);}
#line 22150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 958:
#line 152 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                                    {(yyval.node) = (yyvsp[0].node);}
#line 22156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 959:
#line 153 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                                    {(yyval.node) = (yyvsp[0].node);}
#line 22162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 960:
#line 154 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                                    {(yyval.node) = (yyvsp[0].node);}
#line 22168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 961:
#line 161 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
            {
                PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
                n->pattern_clause = (yyvsp[-2].node);
                n->direction = PG_MATCH_DIR_RIGHT;
                n->is_vertex_pattern = false;
                n->star_pattern = PG_STAR_NONE;
                (yyval.node) = (PGNode *) n;
            }
#line 22181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 962:
#line 170 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
            {
                PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
                n->pattern_clause = (yyvsp[-3].node);
                n->direction = PG_MATCH_DIR_RIGHT;
                n->is_vertex_pattern = false;
                n->star_pattern = PG_STAR_ALL;
                // $$ = $3;
                (yyval.node) = (PGNode *) n;
            }
#line 22195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 963:
#line 180 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
            {
                PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
                n->pattern_clause = (yyvsp[-6].node);
                n->direction = PG_MATCH_DIR_RIGHT;
                n->is_vertex_pattern = false;
                n->star_pattern = PG_STAR_BOUNDED;
                n->lower_bound = (yyvsp[-4].ival);
                n->upper_bound = (yyvsp[-2].ival);
                (yyval.node) = (PGNode *) n;
            }
#line 22210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 964:
#line 191 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
            { 
                PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
                n->pattern_clause = (yyvsp[-1].node);
                n->direction = PG_MATCH_DIR_RIGHT;
                n->is_vertex_pattern = false;
                n->star_pattern = PG_STAR_NONE;
                (yyval.node) = (PGNode *) n;
            }
#line 22223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 965:
#line 203 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                { 
                    PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
                    n->pattern_clause = (yyvsp[-2].node);
                    n->direction = PG_MATCH_DIR_LEFT;
                    n->is_vertex_pattern = false;
                    n->star_pattern = PG_STAR_NONE;
                    (yyval.node) = (PGNode *) n;
                }
#line 22236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 966:
#line 213 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                { 
                    PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
                    n->pattern_clause = (yyvsp[-3].node);
                    n->direction = PG_MATCH_DIR_LEFT;
                    n->is_vertex_pattern = false;
                    n->star_pattern = PG_STAR_ALL;
                    (yyval.node) = (PGNode *) n;
                }
#line 22249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 967:
#line 223 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                { 
                    PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
                    n->pattern_clause = (yyvsp[-6].node);
                    n->direction = PG_MATCH_DIR_LEFT;
                    n->is_vertex_pattern = false;
                    n->star_pattern = PG_STAR_BOUNDED;
                    n->lower_bound = (yyvsp[-4].ival);
                    n->upper_bound = (yyvsp[-2].ival);
                    (yyval.node) = (PGNode *) n;
                }
#line 22264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 968:
#line 234 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                { 
                    
                    PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
                    n->pattern_clause = (yyvsp[-1].node);
                    n->direction = PG_MATCH_DIR_LEFT;
                    n->is_vertex_pattern = false;
                    n->star_pattern = PG_STAR_NONE;
                    (yyval.node) = (PGNode *) n;
                }
#line 22278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969:
#line 247 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                { 
                    PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
                    n->pattern_clause = (yyvsp[-2].node);
                    n->direction = PG_MATCH_DIR_ANY;
                    n->is_vertex_pattern = false;
                    n->star_pattern = PG_STAR_NONE;
                    (yyval.node) = (PGNode *) n;
                }
#line 22291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970:
#line 256 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                { 
                    PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
                    n->pattern_clause = (yyvsp[-3].node);
                    n->direction = PG_MATCH_DIR_ANY;
                    n->is_vertex_pattern = false;
                    n->star_pattern = PG_STAR_ALL;
                    (yyval.node) = (PGNode *) n;
                }
#line 22304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971:
#line 265 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                { 
                    PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
                    n->pattern_clause = (yyvsp[-6].node);
                    n->direction = PG_MATCH_DIR_ANY;
                    n->is_vertex_pattern = false;
                    n->star_pattern = PG_STAR_BOUNDED;
                    n->lower_bound = (yyvsp[-4].ival);
                    n->upper_bound = (yyvsp[-2].ival);
                    (yyval.node) = (PGNode *) n;
                }
#line 22319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972:
#line 277 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                { 
                    PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
                    n->pattern_clause = (yyvsp[-1].node);
                    n->direction = PG_MATCH_DIR_ANY;
                    n->is_vertex_pattern = false;
                    n->star_pattern = PG_STAR_NONE;
                    (yyval.node) = (PGNode *) n;
                }
#line 22332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973:
#line 396 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					/* ...but not both */
					n->schemaname = (yyvsp[-1].str);
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974:
#line 405 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					/* ...but not here */
					n->schemaname = (yyvsp[-1].str);
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975:
#line 423 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 22373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976:
#line 429 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                { (yyval.list) = NIL; }
#line 22379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981:
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 22397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982:
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[0].range);
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 22415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983:
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 22431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984:
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 22443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985:
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 22457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986:
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 22463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987:
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 22469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988:
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 22475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989:
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 22481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990:
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 22495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 991:
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 22501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 992:
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 22507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 993:
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 22513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 994:
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 22519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 995:
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 22525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 996:
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 22531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997:
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 22543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 998:
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 999:
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 22555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1004:
#line 2 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].vsetstmt); }
#line 22561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1005:
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 22572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1006:
#line 15 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					(yyval.vsetstmt) = n;
				}
#line 22582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1007:
#line 24 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 22588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1008:
#line 26 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 22599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1009:
#line 33 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 22610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1010:
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1011:
#line 12 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1012:
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1013:
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1014:
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1015:
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1016:
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1017:
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1018:
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1019:
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1020:
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1021:
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1022:
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1023:
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1024:
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1025:
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 22819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1026:
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 22825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027:
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 22836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028:
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029:
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030:
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031:
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032:
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033:
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034:
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 22930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035:
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 22944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036:
#line 70 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 22958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037:
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 22972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038:
#line 93 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 22978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039:
#line 94 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 22984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040:
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 22990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041:
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 22996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042:
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 23002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043:
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 23008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044:
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 23014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045:
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 23020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046:
#line 101 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 23026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047:
#line 102 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 23032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048:
#line 103 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 23038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049:
#line 104 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 23044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050:
#line 105 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 23050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051:
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 23056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1052:
#line 107 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 23062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053:
#line 112 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 23068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054:
#line 113 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 23074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055:
#line 114 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 23080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056:
#line 115 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 23086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057:
#line 116 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 23092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058:
#line 117 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 23098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059:
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 23104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060:
#line 123 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 23110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061:
#line 124 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 23116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062:
#line 129 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 23122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063:
#line 130 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 23128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064:
#line 131 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 23134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065:
#line 136 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 23140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066:
#line 137 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 23146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067:
#line 138 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 23152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068:
#line 141 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 23158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069:
#line 142 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 23164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070:
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071:
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072:
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 23194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073:
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 23200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1074:
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 23206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075:
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 23212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076:
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 23218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077:
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 23224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078:
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 23230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079:
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 23239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080:
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 23245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081:
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 23253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082:
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 23261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083:
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 23269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084:
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 23277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085:
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 23285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086:
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 23293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087:
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 23301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088:
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 23309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089:
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 23317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090:
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 23325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091:
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 23334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092:
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 23342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093:
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 23350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094:
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 23358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095:
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 23364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096:
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 23370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097:
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 23376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098:
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 23382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099:
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 23388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100:
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 23402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101:
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 23416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102:
#line 32 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103:
#line 33 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 23428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104:
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 23460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105:
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 23483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106:
#line 53 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 23489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107:
#line 54 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 23495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108:
#line 60 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 23503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109:
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 23509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110:
#line 69 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 23517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111:
#line 73 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 23525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112:
#line 80 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 23531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113:
#line 81 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 23537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114:
#line 85 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 23543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115:
#line 86 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 23549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116:
#line 91 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 23555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117:
#line 92 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 23561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118:
#line 96 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119:
#line 97 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120:
#line 102 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 23579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121:
#line 103 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 23585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122:
#line 104 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 23591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123:
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 23597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124:
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 23603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125:
#line 112 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 23611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126:
#line 120 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 23619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127:
#line 123 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 23625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128:
#line 128 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 23631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129:
#line 129 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 23637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130:
#line 135 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 23645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131:
#line 138 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 23651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132:
#line 144 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 23659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133:
#line 148 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 23667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134:
#line 152 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 23675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1135:
#line 156 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1136:
#line 160 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1137:
#line 164 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 23699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1138:
#line 168 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 23707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1139:
#line 172 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1140:
#line 176 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1141:
#line 180 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 23731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1142:
#line 184 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 23739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1143:
#line 188 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 23747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1144:
#line 192 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 23755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1145:
#line 196 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 23763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1146:
#line 203 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 23769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1147:
#line 209 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1148:
#line 210 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 23781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1149:
#line 211 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 23787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1150:
#line 217 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 23795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1151:
#line 221 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 23803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1152:
#line 8 "third_party/libpg_query/grammar/statements/create_function.y"
                                {
					PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
					n->name = (yyvsp[-3].range);
					n->params = (yyvsp[-2].list);
					n->function = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 23815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1155:
#line 24 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 23823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1156:
#line 28 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 23831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1157:
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1158:
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1159:
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1160:
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1161:
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1162:
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1163:
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1164:
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1165:
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 23941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1166:
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 23947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1167:
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1168:
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 23959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1169:
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 23967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170:
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 23975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171:
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 23990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172:
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 23998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173:
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 24006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174:
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 24014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175:
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176:
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177:
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178:
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179:
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 24074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180:
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 24085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181:
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 24096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182:
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 24108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183:
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 24120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184:
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 24132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185:
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 24144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186:
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 24164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187:
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 24176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1188:
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1189:
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190:
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191:
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192:
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 24244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193:
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 24256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194:
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 24267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195:
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 24285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196:
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 24296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197:
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198:
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199:
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 24332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1200:
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 24342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1201:
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 24353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202:
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 24364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203:
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 24375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204:
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1205:
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 24387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1206:
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 24395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1207:
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 24404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1208:
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 24413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1209:
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 24421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1210:
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1211:
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 24433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1212:
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 24439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1213:
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 24445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1214:
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 24451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1215:
#line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 24457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1216:
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				}
#line 24467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1217:
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				}
#line 24477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1218:
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				}
#line 24487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1219:
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				}
#line 24497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1220:
#line 38 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 24503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1221:
#line 40 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 24514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1222:
#line 48 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 24529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1223:
#line 59 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 24541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1224:
#line 71 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 24553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1225:
#line 79 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 24565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1226:
#line 87 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 24576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1227:
#line 94 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 24587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1228:
#line 104 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 24593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1229:
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 24599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1230:
#line 112 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 24607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1231:
#line 116 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 24615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1232:
#line 120 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 24634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1233:
#line 135 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 24645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1234:
#line 141 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 24651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1235:
#line 142 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 24657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236:
#line 143 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 24663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237:
#line 147 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238:
#line 148 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 24675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1239:
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 24689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1240:
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 24703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1241:
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 24718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1242:
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 24729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1243:
#line 10 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 24739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1244:
#line 16 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 24749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1245:
#line 22 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 24760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1246:
#line 29 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 24771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1247:
#line 36 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 24782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1248:
#line 45 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 24788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1249:
#line 46 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 24794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1250:
#line 47 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 24800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1251:
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 24811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1252:
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 24831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1253:
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 24851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1254:
#line 51 "third_party/libpg_query/grammar/statements/execute.y"
                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 24857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1255:
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 24863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1256:
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1257:
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1258:
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1259:
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1260:
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1261:
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1262:
#line 10 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-3].range);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 24953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1263:
#line 22 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 24963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1264:
#line 28 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 24974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1265:
#line 35 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 24984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1266:
#line 41 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 24995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1267:
#line 48 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 25005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1268:
#line 58 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 25013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1269:
#line 62 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 25022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1270:
#line 71 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 25034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1271:
#line 80 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 25046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1272:
#line 88 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 25054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1273:
#line 95 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 25060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1274:
#line 96 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 25066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1275:
#line 102 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 25078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1276:
#line 114 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 25087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1277:
#line 119 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 25112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1278:
#line 144 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 25125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1279:
#line 154 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 25138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1280:
#line 163 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 25146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1281:
#line 170 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 25161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1282:
#line 181 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 25176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1283:
#line 192 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 25191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1284:
#line 206 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1285:
#line 207 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 25203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1286:
#line 213 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 25209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1287:
#line 214 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 25215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1288:
#line 219 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 25221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1289:
#line 220 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 25227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1290:
#line 226 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1291:
#line 227 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 25239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1292:
#line 231 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1293:
#line 232 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 25251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1294:
#line 238 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 25257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1295:
#line 240 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 25263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1296:
#line 245 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1297:
#line 246 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 25275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1298:
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 25281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1299:
#line 251 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 25287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1300:
#line 257 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 25299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 25303 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = YY_CAST (char *, YYSTACK_ALLOC (YY_CAST (YYSIZE_T, yymsg_alloc)));
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (&yylloc, yyscanner, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;


#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif


/*-----------------------------------------------------.
| yyreturn -- parsing is finished, return the result.  |
`-----------------------------------------------------*/
yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[+*yyssp], yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
#line 276 "third_party/libpg_query/grammar/statements/insert.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	n->seed = seed;
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make2(makeString(DEFAULT_SCHEMA),
											   makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

static PGNode *
makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod, int location)
{
	PGSQLValueFunction *svf = makeNode(PGSQLValueFunction);

	svf->op = op;
	/* svf->type will be filled during parse analysis */
	svf->typmod = typmod;
	svf->location = location;
	return (PGNode *) svf;
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
