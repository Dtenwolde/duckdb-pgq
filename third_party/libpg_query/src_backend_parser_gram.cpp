/* A Bison parser, made by GNU Bison 3.0.4.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.0.4"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs


/* Copy the first part of user declarations.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp" /* yacc.c:339  */

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static PGNode *makeParamRefCast(int number, int location, PGTypeName *tpname);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static PGNode *makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod,
								  int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);


#line 238 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:339  */

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "grammar_out.hpp".  */
#ifndef YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED
# define YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int base_yydebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    IDENT = 258,
    FCONST = 259,
    SCONST = 260,
    BCONST = 261,
    XCONST = 262,
    Op = 263,
    ICONST = 264,
    PARAM = 265,
    TYPECAST = 266,
    DOT_DOT = 267,
    COLON_EQUALS = 268,
    EQUALS_GREATER = 269,
    LAMBDA_ARROW = 270,
    LESS_EQUALS = 271,
    GREATER_EQUALS = 272,
    NOT_EQUALS = 273,
    ABORT_P = 274,
    ABSOLUTE_P = 275,
    ACCESS = 276,
    ACTION = 277,
    ADD_P = 278,
    ADMIN = 279,
    AFTER = 280,
    AGGREGATE = 281,
    ALL = 282,
    ALSO = 283,
    ALTER = 284,
    ALWAYS = 285,
    ANALYSE = 286,
    ANALYZE = 287,
    AND = 288,
    ANY = 289,
    ARRAY = 290,
    AS = 291,
    ASC_P = 292,
    ASSERTION = 293,
    ASSIGNMENT = 294,
    ASYMMETRIC = 295,
    AT = 296,
    ATTACH = 297,
    ATTRIBUTE = 298,
    AUTHORIZATION = 299,
    BACKWARD = 300,
    BEFORE = 301,
    BEGIN_P = 302,
    BETWEEN = 303,
    BIGINT = 304,
    BINARY = 305,
    BIT = 306,
    BOOLEAN_P = 307,
    BOTH = 308,
    BY = 309,
    CACHE = 310,
    CALL_P = 311,
    CALLED = 312,
    CASCADE = 313,
    CASCADED = 314,
    CASE = 315,
    CAST = 316,
    CATALOG_P = 317,
    CHAIN = 318,
    CHAR_P = 319,
    CHARACTER = 320,
    CHARACTERISTICS = 321,
    CHECK_P = 322,
    CHECKPOINT = 323,
    CLASS = 324,
    CLOSE = 325,
    CLUSTER = 326,
    COALESCE = 327,
    COLLATE = 328,
    COLLATION = 329,
    COLUMN = 330,
    COLUMNS = 331,
    COMMENT = 332,
    COMMENTS = 333,
    COMMIT = 334,
    COMMITTED = 335,
    CONCURRENTLY = 336,
    CONFIGURATION = 337,
    CONFLICT = 338,
    CONNECTION = 339,
    CONSTRAINT = 340,
    CONSTRAINTS = 341,
    CONTENT_P = 342,
    CONTINUE_P = 343,
    CONVERSION_P = 344,
    COPY = 345,
    COST = 346,
    CREATE_P = 347,
    CROSS = 348,
    CSV = 349,
    CUBE = 350,
    CURRENT_P = 351,
    CURRENT_CATALOG = 352,
    CURRENT_DATE = 353,
    CURRENT_ROLE = 354,
    CURRENT_SCHEMA = 355,
    CURRENT_TIME = 356,
    CURRENT_TIMESTAMP = 357,
    CURRENT_USER = 358,
    CURSOR = 359,
    CYCLE = 360,
    DATA_P = 361,
    DATABASE = 362,
    DAY_P = 363,
    DAYS_P = 364,
    DEALLOCATE = 365,
    DEC = 366,
    DECIMAL_P = 367,
    DECLARE = 368,
    DEFAULT = 369,
    DEFAULTS = 370,
    DEFERRABLE = 371,
    DEFERRED = 372,
    DEFINER = 373,
    DELETE_P = 374,
    DELIMITER = 375,
    DELIMITERS = 376,
    DEPENDS = 377,
    DESC_P = 378,
    DESCRIBE = 379,
    DESTINATION = 380,
    DETACH = 381,
    DICTIONARY = 382,
    DISABLE_P = 383,
    DISCARD = 384,
    DISTINCT = 385,
    DO = 386,
    DOCUMENT_P = 387,
    DOMAIN_P = 388,
    DOUBLE_P = 389,
    DROP = 390,
    EACH = 391,
    EDGE = 392,
    ELSE = 393,
    ENABLE_P = 394,
    ENCODING = 395,
    ENCRYPTED = 396,
    END_P = 397,
    ENUM_P = 398,
    ESCAPE = 399,
    EVENT = 400,
    EXCEPT = 401,
    EXCLUDE = 402,
    EXCLUDING = 403,
    EXCLUSIVE = 404,
    EXECUTE = 405,
    EXISTS = 406,
    EXPLAIN = 407,
    EXPORT_P = 408,
    EXTENSION = 409,
    EXTERNAL = 410,
    EXTRACT = 411,
    FALSE_P = 412,
    FAMILY = 413,
    FETCH = 414,
    FILTER = 415,
    FIRST_P = 416,
    FLOAT_P = 417,
    FOLLOWING = 418,
    FOR = 419,
    FORCE = 420,
    FOREIGN = 421,
    FORWARD = 422,
    FREEZE = 423,
    FROM = 424,
    FULL = 425,
    FUNCTION = 426,
    FUNCTIONS = 427,
    GENERATED = 428,
    GLOB = 429,
    GLOBAL = 430,
    GRANT = 431,
    GRANTED = 432,
    GRAPH = 433,
    GRAPH_TABLE = 434,
    GROUP_P = 435,
    GROUPING = 436,
    HANDLER = 437,
    HAVING = 438,
    HEADER_P = 439,
    HOLD = 440,
    HOUR_P = 441,
    HOURS_P = 442,
    IDENTITY_P = 443,
    IF_P = 444,
    ILIKE = 445,
    IMMEDIATE = 446,
    IMMUTABLE = 447,
    IMPLICIT_P = 448,
    IMPORT_P = 449,
    IN_P = 450,
    INCLUDING = 451,
    INCREMENT = 452,
    INDEX = 453,
    INDEXES = 454,
    INHERIT = 455,
    INHERITS = 456,
    INITIALLY = 457,
    INLINE_P = 458,
    INNER_P = 459,
    INOUT = 460,
    INPUT_P = 461,
    INSENSITIVE = 462,
    INSERT = 463,
    INSTEAD = 464,
    INT_P = 465,
    INTEGER = 466,
    INTERSECT = 467,
    INTERVAL = 468,
    INTO = 469,
    INVOKER = 470,
    IS = 471,
    ISNULL = 472,
    ISOLATION = 473,
    JOIN = 474,
    KEY = 475,
    LABEL = 476,
    LANGUAGE = 477,
    LARGE_P = 478,
    LAST_P = 479,
    LATERAL_P = 480,
    LEADING = 481,
    LEAKPROOF = 482,
    LEFT = 483,
    LEVEL = 484,
    LIKE = 485,
    LIMIT = 486,
    LISTEN = 487,
    LOAD = 488,
    LOCAL = 489,
    LOCALTIME = 490,
    LOCALTIMESTAMP = 491,
    LOCATION = 492,
    LOCK_P = 493,
    LOCKED = 494,
    LOGGED = 495,
    MACRO = 496,
    MAPPING = 497,
    MATCH = 498,
    MATERIALIZED = 499,
    MAXVALUE = 500,
    METHOD = 501,
    MICROSECOND_P = 502,
    MICROSECONDS_P = 503,
    MILLISECOND_P = 504,
    MILLISECONDS_P = 505,
    MINUTE_P = 506,
    MINUTES_P = 507,
    MINVALUE = 508,
    MODE = 509,
    MONTH_P = 510,
    MONTHS_P = 511,
    MOVE = 512,
    NAME_P = 513,
    NAMES = 514,
    NATIONAL = 515,
    NATURAL = 516,
    NCHAR = 517,
    NEW = 518,
    NEXT = 519,
    NO = 520,
    NODE = 521,
    NONE = 522,
    NOT = 523,
    NOTHING = 524,
    NOTIFY = 525,
    NOTNULL = 526,
    NOWAIT = 527,
    NULL_P = 528,
    NULLIF = 529,
    NULLS_P = 530,
    NUMERIC = 531,
    OBJECT_P = 532,
    OF = 533,
    OFF = 534,
    OFFSET = 535,
    OIDS = 536,
    OLD = 537,
    ON = 538,
    ONLY = 539,
    OPERATOR = 540,
    OPTION = 541,
    OPTIONS = 542,
    OR = 543,
    ORDER = 544,
    ORDINALITY = 545,
    OUT_P = 546,
    OUTER_P = 547,
    OVER = 548,
    OVERLAPS = 549,
    OVERLAY = 550,
    OVERRIDING = 551,
    OWNED = 552,
    OWNER = 553,
    PARALLEL = 554,
    PARSER = 555,
    PARTIAL = 556,
    PARTITION = 557,
    PASSING = 558,
    PASSWORD = 559,
    PERCENT = 560,
    PLACING = 561,
    PLANS = 562,
    POLICY = 563,
    POSITION = 564,
    PRAGMA_P = 565,
    PRECEDING = 566,
    PRECISION = 567,
    PREPARE = 568,
    PREPARED = 569,
    PRESERVE = 570,
    PRIMARY = 571,
    PRIOR = 572,
    PRIVILEGES = 573,
    PROCEDURAL = 574,
    PROCEDURE = 575,
    PROGRAM = 576,
    PROPERTIES = 577,
    PROPERTY = 578,
    PUBLICATION = 579,
    QUOTE = 580,
    RANGE = 581,
    READ_P = 582,
    REAL = 583,
    REASSIGN = 584,
    RECHECK = 585,
    RECURSIVE = 586,
    REF = 587,
    REFERENCES = 588,
    REFERENCING = 589,
    REFRESH = 590,
    REINDEX = 591,
    RELATIONSHIP = 592,
    RELATIVE_P = 593,
    RELEASE = 594,
    RENAME = 595,
    REPEATABLE = 596,
    REPLACE = 597,
    REPLICA = 598,
    RESET = 599,
    RESTART = 600,
    RESTRICT = 601,
    RETURNING = 602,
    RETURNS = 603,
    REVOKE = 604,
    RIGHT = 605,
    ROLE = 606,
    ROLLBACK = 607,
    ROLLUP = 608,
    ROW = 609,
    ROWS = 610,
    RULE = 611,
    SAMPLE = 612,
    SAVEPOINT = 613,
    SCHEMA = 614,
    SCHEMAS = 615,
    SCROLL = 616,
    SEARCH = 617,
    SECOND_P = 618,
    SECONDS_P = 619,
    SECURITY = 620,
    SELECT = 621,
    SEQUENCE = 622,
    SEQUENCES = 623,
    SERIALIZABLE = 624,
    SERVER = 625,
    SESSION = 626,
    SESSION_USER = 627,
    SET = 628,
    SETOF = 629,
    SETS = 630,
    SHARE = 631,
    SHOW = 632,
    SIMILAR = 633,
    SIMPLE = 634,
    SKIP = 635,
    SMALLINT = 636,
    SNAPSHOT = 637,
    SOME = 638,
    SOURCE = 639,
    SQL_P = 640,
    STABLE = 641,
    STANDALONE_P = 642,
    START = 643,
    STATEMENT = 644,
    STATISTICS = 645,
    STDIN = 646,
    STDOUT = 647,
    STORAGE = 648,
    STRICT_P = 649,
    STRIP_P = 650,
    STRUCT = 651,
    SUBSCRIPTION = 652,
    SUBSTRING = 653,
    SYMMETRIC = 654,
    SYSID = 655,
    SYSTEM_P = 656,
    TABLE = 657,
    TABLES = 658,
    TABLESAMPLE = 659,
    TABLESPACE = 660,
    TEMP = 661,
    TEMPLATE = 662,
    TEMPORARY = 663,
    TEXT_P = 664,
    THEN = 665,
    TIME = 666,
    TIMESTAMP = 667,
    TO = 668,
    TRAILING = 669,
    TRANSACTION = 670,
    TRANSFORM = 671,
    TREAT = 672,
    TRIGGER = 673,
    TRIM = 674,
    TRUE_P = 675,
    TRUNCATE = 676,
    TRUSTED = 677,
    TYPE_P = 678,
    TYPES_P = 679,
    UNBOUNDED = 680,
    UNCOMMITTED = 681,
    UNENCRYPTED = 682,
    UNION = 683,
    UNIQUE = 684,
    UNKNOWN = 685,
    UNLISTEN = 686,
    UNLOGGED = 687,
    UNTIL = 688,
    UPDATE = 689,
    USER = 690,
    USING = 691,
    VACUUM = 692,
    VALID = 693,
    VALIDATE = 694,
    VALIDATOR = 695,
    VALUE_P = 696,
    VALUES = 697,
    VARCHAR = 698,
    VARIADIC = 699,
    VARYING = 700,
    VERBOSE = 701,
    VERSION_P = 702,
    VERTEX = 703,
    VIEW = 704,
    VIEWS = 705,
    VOLATILE = 706,
    WHEN = 707,
    WHERE = 708,
    WHITESPACE_P = 709,
    WINDOW = 710,
    WITH = 711,
    WITHIN = 712,
    WITHOUT = 713,
    WORK = 714,
    WRAPPER = 715,
    WRITE_P = 716,
    XML_P = 717,
    XMLATTRIBUTES = 718,
    XMLCONCAT = 719,
    XMLELEMENT = 720,
    XMLEXISTS = 721,
    XMLFOREST = 722,
    XMLNAMESPACES = 723,
    XMLPARSE = 724,
    XMLPI = 725,
    XMLROOT = 726,
    XMLSERIALIZE = 727,
    XMLTABLE = 728,
    YEAR_P = 729,
    YEARS_P = 730,
    YES_P = 731,
    ZONE = 732,
    NOT_LA = 733,
    NULLS_LA = 734,
    WITH_LA = 735,
    POSTFIXOP = 736,
    UMINUS = 737
  };
#endif

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED

union YYSTYPE
{
#line 14 "third_party/libpg_query/grammar/grammar.y" /* yacc.c:355  */

	core_YYSTYPE		core_yystype;
	/* these fields must match core_YYSTYPE: */
	int					ival;
	char				*str;
	const char			*keyword;
	const char          *conststr;

	char				chr;
	bool				boolean;
	PGJoinType			jtype;
	PGDropBehavior		dbehavior;
	PGOnCommitAction		oncommit;
	PGList				*list;
	PGNode				*node;
	PGValue				*value;
	PGObjectType			objtype;
	PGTypeName			*typnam;
	PGObjectWithArgs		*objwithargs;
	PGDefElem				*defelt;
	PGSortBy				*sortby;
	PGWindowDef			*windef;
	PGJoinExpr			*jexpr;
	PGIndexElem			*ielem;
	PGAlias				*alias;
	PGRangeVar			*range;
	PGIntoClause			*into;
	PGWithClause			*with;
	PGInferClause			*infer;
	PGOnConflictClause	*onconflict;
	PGAIndices			*aind;
	PGResTarget			*target;
	PGInsertStmt			*istmt;
	PGVariableSetStmt		*vsetstmt;
	PGOverridingKind       override;
	PGSortByDir            sortorder;
	PGSortByNulls          nullorder;
	PGLockClauseStrength lockstrength;
	PGLockWaitPolicy lockwaitpolicy;
	PGSubLinkType subquerytype;
	PGViewCheckOption viewcheckoption;

#line 804 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:355  */
};

typedef union YYSTYPE YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif

/* Location type.  */
#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE YYLTYPE;
struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
};
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif



int base_yyparse (core_yyscan_t yyscanner);

#endif /* !YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED  */

/* Copy the second part of user declarations.  */

#line 834 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:358  */

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif


#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  574
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   48528

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  501
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  371
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1656
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  2751

/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   737

#define YYTRANSLATE(YYX)                                                \
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,   489,     2,     2,
     494,   495,   487,   485,   498,   486,   496,   488,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   500,   497,
     481,   483,   482,   499,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   492,     2,   493,   490,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   484,   491
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   463,   463,   479,   491,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   535,
       6,     9,    16,    26,    33,    44,    45,    50,    51,    52,
      57,    58,    59,    60,    61,    65,    66,    67,    68,    73,
      74,    79,    83,    91,    92,    97,    98,    99,   105,   110,
     118,   119,     7,    21,    41,    42,    69,    70,    71,    72,
      73,    74,    78,    79,    84,    89,    90,    91,    92,    93,
      98,   105,   106,   107,   124,   131,   138,   148,   158,   170,
     179,   188,   207,   214,   219,   221,   223,   225,   228,   233,
     234,   238,   239,   240,   241,   246,   250,   251,   256,   263,
     268,   269,   270,   271,   272,   273,   274,   275,   281,   282,
     286,   291,   298,   305,   312,   324,   325,   326,   327,   331,
     336,   337,   338,   343,   348,   349,   350,   351,   352,   353,
     358,   381,   385,   392,   393,   397,   401,   402,   403,   407,
     411,   419,   420,   425,   426,   430,   438,   439,   444,   445,
     449,   454,   458,   462,   467,   475,   476,   480,   481,   487,
     498,   511,   525,   539,   553,   567,   590,   594,   601,   605,
     613,   618,   625,   635,   636,   637,   638,   639,   646,   653,
     654,   659,   660,    11,    24,    41,    42,    43,    48,     3,
      10,    16,    22,    28,    37,    37,    39,    40,     8,    21,
      34,    52,    74,    75,    76,    77,     7,    21,    25,    32,
      43,    44,    50,    51,    47,    48,    52,    53,    68,    69,
      76,    84,    92,   100,   108,   116,   127,   128,   155,   170,
     186,   187,   206,   210,   214,   231,   238,   245,   255,   256,
     259,   271,   282,   290,   295,   300,   305,   310,   318,   326,
     331,   336,   343,   344,   348,   349,   350,   357,   358,   362,
     363,   367,   368,   372,   376,   377,   380,   389,   400,   401,
     402,   405,   406,   407,   411,   412,   413,   414,   418,   419,
     423,   425,   441,   443,   448,   451,   459,   463,   467,   471,
     475,   479,   486,   491,   498,   499,   503,   507,   511,   515,
     522,   529,   530,   535,   536,   540,   541,   549,   569,   570,
     572,   577,   578,   582,   583,   586,   587,   612,   613,   617,
     618,   622,   623,   627,   640,   641,   645,   646,   650,   651,
     655,   656,   660,   671,   672,   673,   674,   678,   679,   684,
     685,   686,   695,   701,   719,   720,   724,   725,   731,   737,
     745,   753,   789,   815,   819,   845,   849,   862,   876,   891,
     903,   919,   925,   930,   936,   943,   944,   952,   956,   960,
     966,   973,   978,   979,   980,   981,   985,   986,   998,   999,
    1004,  1011,  1018,  1025,  1057,  1068,  1081,  1086,  1087,  1090,
    1091,  1094,  1095,  1100,  1101,  1106,  1110,  1116,  1137,  1145,
    1158,  1161,  1165,  1165,  1167,  1172,  1179,  1184,  1190,  1195,
    1201,  1209,  1211,  1214,  1218,  1219,  1220,  1221,  1222,  1223,
    1228,  1248,  1249,  1250,  1251,  1262,  1268,  1276,  1277,  1283,
    1288,  1293,  1298,  1303,  1308,  1313,  1318,  1324,  1330,  1336,
    1343,  1365,  1374,  1378,  1386,  1390,  1398,  1410,  1431,  1435,
    1441,  1445,  1458,  1466,  1476,  1478,  1480,  1482,  1484,  1486,
    1491,  1492,  1499,  1508,  1516,  1525,  1536,  1544,  1545,  1546,
    1550,  1550,  1553,  1553,  1556,  1556,  1559,  1559,  1562,  1562,
    1565,  1565,  1568,  1568,  1571,  1571,  1574,  1576,  1578,  1580,
    1582,  1584,  1586,  1588,  1590,  1595,  1600,  1606,  1613,  1618,
    1624,  1630,  1661,  1663,  1665,  1673,  1688,  1690,  1692,  1694,
    1696,  1698,  1700,  1702,  1704,  1706,  1708,  1710,  1712,  1714,
    1717,  1719,  1721,  1724,  1726,  1728,  1730,  1733,  1738,  1743,
    1750,  1755,  1762,  1767,  1775,  1780,  1789,  1797,  1805,  1813,
    1831,  1839,  1847,  1855,  1863,  1871,  1875,  1883,  1891,  1907,
    1915,  1923,  1931,  1939,  1947,  1955,  1959,  1963,  1967,  1971,
    1979,  1987,  1995,  2003,  2023,  2045,  2056,  2063,  2088,  2090,
    2092,  2094,  2096,  2098,  2100,  2102,  2104,  2106,  2108,  2110,
    2112,  2114,  2116,  2118,  2120,  2122,  2124,  2126,  2130,  2134,
    2138,  2152,  2153,  2154,  2166,  2181,  2193,  2195,  2197,  2208,
    2232,  2245,  2249,  2255,  2262,  2269,  2279,  2286,  2314,  2349,
    2360,  2361,  2368,  2374,  2378,  2382,  2386,  2390,  2394,  2398,
    2402,  2406,  2410,  2414,  2418,  2422,  2426,  2430,  2434,  2436,
    2440,  2449,  2454,  2461,  2476,  2483,  2487,  2491,  2495,  2499,
    2513,  2514,  2518,  2519,  2527,  2528,  2532,  2533,  2538,  2546,
    2548,  2562,  2565,  2592,  2593,  2596,  2597,  2608,  2626,  2633,
    2642,  2659,  2704,  2712,  2720,  2728,  2736,  2757,  2758,  2761,
    2762,  2765,  2766,  2767,  2770,  2771,  2774,  2775,  2776,  2777,
    2778,  2779,  2780,  2781,  2782,  2783,  2784,  2785,  2788,  2790,
    2795,  2797,  2802,  2804,  2806,  2808,  2810,  2812,  2814,  2816,
    2830,  2832,  2836,  2840,  2847,  2851,  2857,  2861,  2870,  2881,
    2882,  2886,  2890,  2897,  2898,  2899,  2900,  2901,  2902,  2903,
    2904,  2905,  2906,  2916,  2920,  2927,  2934,  2935,  2951,  2955,
    2960,  2964,  2979,  2984,  2988,  2991,  2994,  2995,  2996,  2999,
    3006,  3016,  3030,  3031,  3035,  3046,  3047,  3050,  3051,  3054,
    3058,  3065,  3069,  3073,  3081,  3092,  3093,  3097,  3098,  3102,
    3103,  3106,  3107,  3117,  3118,  3122,  3123,  3126,  3142,  3150,
    3158,  3180,  3181,  3192,  3196,  3223,  3225,  3230,  3232,  3242,
    3244,  3255,  3259,  3263,  3267,  3271,  3280,  3287,  3319,  3323,
    3327,  3331,  3335,  3339,  3343,  3349,  3350,  3366,  3367,  3368,
    3371,  3372,  3377,  3378,  3379,  3382,  3383,  3386,  3388,  3393,
    3394,  3397,  3405,  3406,  3407,  3408,  3409,  3412,  3413,    38,
      51,    72,    73,    77,    78,    86,    87,    91,   103,   107,
     108,   115,   127,   128,   136,   172,   181,     7,    20,     7,
      13,    19,    25,     8,    33,    62,    66,    67,    72,    73,
      78,    79,    83,    84,    89,    90,     7,    16,    34,    41,
      46,    47,    48,    49,     8,    22,    36,    48,    56,    70,
      71,    72,    73,    74,    87,    88,    93,    94,    98,    99,
       7,    18,    19,    23,    24,    25,    26,     2,     7,    14,
      24,    25,    32,     5,    11,     6,    15,    25,    35,    45,
      55,    65,    75,    85,    95,   106,   117,   127,   140,   141,
       7,    14,    22,     9,    19,    29,    39,    49,    59,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    92,    93,    94,    95,    96,    97,
      98,   103,   104,   109,   110,   111,   116,   117,   118,     9,
      17,    29,    30,    34,    35,    36,    41,    42,    43,    48,
      52,    56,    60,    64,    68,    72,    76,    80,    84,    88,
      92,    97,   101,   105,   112,   113,   117,   118,   119,     9,
      19,    32,    33,     1,    30,    53,    54,    59,    63,    68,
      72,    80,    81,    85,    86,    91,    92,    96,    97,   102,
     103,   104,   105,   106,   111,   119,   123,   128,   129,   134,
     138,   143,   147,   151,   155,   159,   163,   167,   171,   175,
     179,   183,   187,   191,   195,   203,   209,   210,   211,   216,
     220,     7,    18,    19,    23,    27,     9,    18,    27,    36,
      45,    54,    63,    72,    85,    87,    93,    94,    99,   103,
     107,   118,   126,   130,   139,   148,   157,   166,   175,   184,
     192,   200,   209,   218,   227,   236,   253,   262,   271,   280,
     290,   303,   318,   327,   335,   350,   358,   368,   378,   385,
     392,   400,   407,   418,   419,   424,   428,   433,   438,   446,
     447,   452,   456,   457,    10,    16,    22,    32,    33,    41,
      52,    64,    72,    80,    87,    97,    99,   105,   109,   113,
     128,   135,   136,   137,   141,   142,     9,    19,     7,     2,
       9,    15,    21,    28,    35,    45,    46,    47,     7,    14,
      31,    51,    52,     7,    16,    25,    34,    43,    52,     8,
      21,    27,    34,    40,    47,    57,    61,    70,    79,    88,
      95,    96,   101,   113,   118,   143,   153,   163,   169,   180,
     191,   206,   207,   213,   214,   219,   220,   226,   227,   231,
     232,   237,   239,   245,   246,   250,   251,   256,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   269,   269,   269,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     270,   270,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   270,   270
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "IDENT", "FCONST", "SCONST", "BCONST",
  "XCONST", "Op", "ICONST", "PARAM", "TYPECAST", "DOT_DOT", "COLON_EQUALS",
  "EQUALS_GREATER", "LAMBDA_ARROW", "LESS_EQUALS", "GREATER_EQUALS",
  "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS", "ACTION", "ADD_P",
  "ADMIN", "AFTER", "AGGREGATE", "ALL", "ALSO", "ALTER", "ALWAYS",
  "ANALYSE", "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC_P", "ASSERTION",
  "ASSIGNMENT", "ASYMMETRIC", "AT", "ATTACH", "ATTRIBUTE", "AUTHORIZATION",
  "BACKWARD", "BEFORE", "BEGIN_P", "BETWEEN", "BIGINT", "BINARY", "BIT",
  "BOOLEAN_P", "BOTH", "BY", "CACHE", "CALL_P", "CALLED", "CASCADE",
  "CASCADED", "CASE", "CAST", "CATALOG_P", "CHAIN", "CHAR_P", "CHARACTER",
  "CHARACTERISTICS", "CHECK_P", "CHECKPOINT", "CLASS", "CLOSE", "CLUSTER",
  "COALESCE", "COLLATE", "COLLATION", "COLUMN", "COLUMNS", "COMMENT",
  "COMMENTS", "COMMIT", "COMMITTED", "CONCURRENTLY", "CONFIGURATION",
  "CONFLICT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS", "CONTENT_P",
  "CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CREATE_P", "CROSS", "CSV",
  "CUBE", "CURRENT_P", "CURRENT_CATALOG", "CURRENT_DATE", "CURRENT_ROLE",
  "CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER",
  "CURSOR", "CYCLE", "DATA_P", "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE",
  "DEC", "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE",
  "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS",
  "DESC_P", "DESCRIBE", "DESTINATION", "DETACH", "DICTIONARY", "DISABLE_P",
  "DISCARD", "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P",
  "DROP", "EACH", "EDGE", "ELSE", "ENABLE_P", "ENCODING", "ENCRYPTED",
  "END_P", "ENUM_P", "ESCAPE", "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING",
  "EXCLUSIVE", "EXECUTE", "EXISTS", "EXPLAIN", "EXPORT_P", "EXTENSION",
  "EXTERNAL", "EXTRACT", "FALSE_P", "FAMILY", "FETCH", "FILTER", "FIRST_P",
  "FLOAT_P", "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE",
  "FROM", "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOB", "GLOBAL",
  "GRANT", "GRANTED", "GRAPH", "GRAPH_TABLE", "GROUP_P", "GROUPING",
  "HANDLER", "HAVING", "HEADER_P", "HOLD", "HOUR_P", "HOURS_P",
  "IDENTITY_P", "IF_P", "ILIKE", "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P",
  "IMPORT_P", "IN_P", "INCLUDING", "INCREMENT", "INDEX", "INDEXES",
  "INHERIT", "INHERITS", "INITIALLY", "INLINE_P", "INNER_P", "INOUT",
  "INPUT_P", "INSENSITIVE", "INSERT", "INSTEAD", "INT_P", "INTEGER",
  "INTERSECT", "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL", "ISOLATION",
  "JOIN", "KEY", "LABEL", "LANGUAGE", "LARGE_P", "LAST_P", "LATERAL_P",
  "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE", "LIMIT", "LISTEN",
  "LOAD", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", "LOCATION", "LOCK_P",
  "LOCKED", "LOGGED", "MACRO", "MAPPING", "MATCH", "MATERIALIZED",
  "MAXVALUE", "METHOD", "MICROSECOND_P", "MICROSECONDS_P", "MILLISECOND_P",
  "MILLISECONDS_P", "MINUTE_P", "MINUTES_P", "MINVALUE", "MODE", "MONTH_P",
  "MONTHS_P", "MOVE", "NAME_P", "NAMES", "NATIONAL", "NATURAL", "NCHAR",
  "NEW", "NEXT", "NO", "NODE", "NONE", "NOT", "NOTHING", "NOTIFY",
  "NOTNULL", "NOWAIT", "NULL_P", "NULLIF", "NULLS_P", "NUMERIC",
  "OBJECT_P", "OF", "OFF", "OFFSET", "OIDS", "OLD", "ON", "ONLY",
  "OPERATOR", "OPTION", "OPTIONS", "OR", "ORDER", "ORDINALITY", "OUT_P",
  "OUTER_P", "OVER", "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNED", "OWNER",
  "PARALLEL", "PARSER", "PARTIAL", "PARTITION", "PASSING", "PASSWORD",
  "PERCENT", "PLACING", "PLANS", "POLICY", "POSITION", "PRAGMA_P",
  "PRECEDING", "PRECISION", "PREPARE", "PREPARED", "PRESERVE", "PRIMARY",
  "PRIOR", "PRIVILEGES", "PROCEDURAL", "PROCEDURE", "PROGRAM",
  "PROPERTIES", "PROPERTY", "PUBLICATION", "QUOTE", "RANGE", "READ_P",
  "REAL", "REASSIGN", "RECHECK", "RECURSIVE", "REF", "REFERENCES",
  "REFERENCING", "REFRESH", "REINDEX", "RELATIONSHIP", "RELATIVE_P",
  "RELEASE", "RENAME", "REPEATABLE", "REPLACE", "REPLICA", "RESET",
  "RESTART", "RESTRICT", "RETURNING", "RETURNS", "REVOKE", "RIGHT", "ROLE",
  "ROLLBACK", "ROLLUP", "ROW", "ROWS", "RULE", "SAMPLE", "SAVEPOINT",
  "SCHEMA", "SCHEMAS", "SCROLL", "SEARCH", "SECOND_P", "SECONDS_P",
  "SECURITY", "SELECT", "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER",
  "SESSION", "SESSION_USER", "SET", "SETOF", "SETS", "SHARE", "SHOW",
  "SIMILAR", "SIMPLE", "SKIP", "SMALLINT", "SNAPSHOT", "SOME", "SOURCE",
  "SQL_P", "STABLE", "STANDALONE_P", "START", "STATEMENT", "STATISTICS",
  "STDIN", "STDOUT", "STORAGE", "STRICT_P", "STRIP_P", "STRUCT",
  "SUBSCRIPTION", "SUBSTRING", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE",
  "TABLES", "TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY",
  "TEXT_P", "THEN", "TIME", "TIMESTAMP", "TO", "TRAILING", "TRANSACTION",
  "TRANSFORM", "TREAT", "TRIGGER", "TRIM", "TRUE_P", "TRUNCATE", "TRUSTED",
  "TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED", "UNENCRYPTED", "UNION",
  "UNIQUE", "UNKNOWN", "UNLISTEN", "UNLOGGED", "UNTIL", "UPDATE", "USER",
  "USING", "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES",
  "VARCHAR", "VARIADIC", "VARYING", "VERBOSE", "VERSION_P", "VERTEX",
  "VIEW", "VIEWS", "VOLATILE", "WHEN", "WHERE", "WHITESPACE_P", "WINDOW",
  "WITH", "WITHIN", "WITHOUT", "WORK", "WRAPPER", "WRITE_P", "XML_P",
  "XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT", "XMLEXISTS", "XMLFOREST",
  "XMLNAMESPACES", "XMLPARSE", "XMLPI", "XMLROOT", "XMLSERIALIZE",
  "XMLTABLE", "YEAR_P", "YEARS_P", "YES_P", "ZONE", "NOT_LA", "NULLS_LA",
  "WITH_LA", "'<'", "'>'", "'='", "POSTFIXOP", "'+'", "'-'", "'*'", "'/'",
  "'%'", "'^'", "UMINUS", "'['", "']'", "'('", "')'", "'.'", "';'", "','",
  "'?'", "':'", "$accept", "stmtblock", "stmtmulti", "stmt", "CallStmt",
  "ExplainStmt", "opt_verbose", "explain_option_arg", "ExplainableStmt",
  "NonReservedWord", "NonReservedWord_or_Sconst", "explain_option_list",
  "analyze_keyword", "opt_boolean_or_string", "explain_option_elem",
  "explain_option_name", "CreateStmt", "ConstraintAttributeSpec",
  "def_arg", "OptParenthesizedSeqOptList", "generic_option_arg",
  "key_action", "ColConstraint", "ColConstraintElem",
  "generic_option_elem", "key_update", "key_actions",
  "create_generic_options", "OnCommitOption", "reloptions",
  "opt_no_inherit", "TableConstraint", "TableLikeOption", "reloption_list",
  "ExistingIndex", "ConstraintAttr", "OptWith", "definition",
  "TableLikeOptionList", "generic_option_name", "ConstraintAttributeElem",
  "columnDef", "generic_option_list", "def_list", "index_name",
  "TableElement", "def_elem", "opt_definition", "OptTableElementList",
  "columnElem", "opt_column_list", "ColQualList", "key_delete",
  "reloption_elem", "columnList", "func_type", "ConstraintElem",
  "TableElementList", "key_match", "TableLikeClause", "OptTemp",
  "generated_when", "CreateAsStmt", "opt_with_data", "create_as_target",
  "VariableShowStmt", "show_or_describe", "var_name", "ViewStmt",
  "opt_check_option", "DeleteStmt", "relation_expr_opt_alias",
  "where_or_current_clause", "using_clause", "SelectStmt",
  "select_with_parens", "select_no_parens", "select_clause",
  "simple_select", "with_clause", "cte_list", "common_table_expr",
  "into_clause", "OptTempTableName", "opt_table", "all_or_distinct",
  "distinct_clause", "opt_all_clause", "opt_sort_clause", "sort_clause",
  "sortby_list", "sortby", "opt_asc_desc", "opt_nulls_order",
  "select_limit", "opt_select_limit", "limit_clause", "offset_clause",
  "sample_count", "sample_clause", "opt_sample_func", "tablesample_entry",
  "tablesample_clause", "opt_tablesample_clause", "opt_repeatable_clause",
  "select_limit_value", "select_offset_value", "select_fetch_first_value",
  "I_or_F_const", "row_or_rows", "first_or_next", "group_clause",
  "group_by_list", "group_by_item", "empty_grouping_set", "having_clause",
  "for_locking_clause", "opt_for_locking_clause", "for_locking_items",
  "for_locking_item", "for_locking_strength", "locked_rels_list",
  "opt_nowait_or_skip", "values_clause", "from_clause", "from_list",
  "table_ref", "joined_table", "alias_clause", "opt_alias_clause",
  "func_alias_clause", "join_type", "join_outer", "join_qual",
  "relation_expr", "func_table", "rowsfrom_item", "rowsfrom_list",
  "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "Typename", "opt_array_bounds",
  "SimpleTypename", "ConstTypename", "GenericType", "opt_type_modifiers",
  "Numeric", "opt_float", "Bit", "ConstBit", "BitWithLength",
  "BitWithoutLength", "Character", "ConstCharacter", "CharacterWithLength",
  "CharacterWithoutLength", "character", "opt_varying", "ConstDatetime",
  "ConstInterval", "opt_timezone", "year_keyword", "month_keyword",
  "day_keyword", "hour_keyword", "minute_keyword", "second_keyword",
  "millisecond_keyword", "microsecond_keyword", "opt_interval", "a_expr",
  "b_expr", "c_expr", "func_application", "func_expr",
  "func_expr_windowless", "func_expr_common_subexpr",
  "within_group_clause", "filter_clause", "window_clause",
  "window_definition_list", "window_definition", "over_clause",
  "window_specification", "opt_existing_window_name",
  "opt_partition_clause", "opt_frame_clause", "frame_extent",
  "frame_bound", "qualified_row", "row", "sub_type", "all_Op", "MathOp",
  "qual_Op", "qual_all_Op", "subquery_Op", "any_operator", "expr_list",
  "func_arg_list", "func_arg_expr", "type_list", "extract_list",
  "extract_arg", "overlay_list", "overlay_placing", "position_list",
  "substr_list", "substr_from", "substr_for", "trim_list", "in_expr",
  "case_expr", "when_clause_list", "when_clause", "case_default",
  "case_arg", "columnref", "indirection_el", "opt_slice_bound",
  "indirection", "opt_indirection", "opt_asymmetric", "opt_target_list",
  "target_list", "target_el", "qualified_name_list", "qualified_name",
  "name_list", "name", "attr_name", "func_name", "AexprConst", "Iconst",
  "Sconst", "ColId", "ColIdOrString", "type_function_name", "any_name",
  "attrs", "opt_name_list", "param_name", "ColLabel", "ColLabelOrString",
  "CreatePropertyGraphStmt", "vertex_alias", "edge_alias",
  "VertexTableDefinitionList", "VertexTableDefinition",
  "GraphTableKeyClause", "LabelList", "LabelEnd",
  "EdgeTableDefinitionList", "EdgeTableDefinition", "LoadStmt",
  "file_name", "ExportStmt", "ImportStmt", "DeallocateStmt", "IndexStmt",
  "access_method", "access_method_clause", "opt_concurrently",
  "opt_index_name", "opt_reloptions", "opt_unique", "CreateSchemaStmt",
  "OptSchemaEltList", "schema_stmt", "VacuumStmt", "vacuum_option_elem",
  "opt_full", "vacuum_option_list", "opt_freeze", "PrepareStmt",
  "prep_type_clause", "PreparableStmt", "VariableResetStmt",
  "generic_reset", "reset_rest", "CheckPointStmt", "RenameStmt",
  "opt_column", "PragmaStmt", "DropStmt", "drop_type_any_name",
  "drop_type_name", "any_name_list", "opt_drop_behavior",
  "drop_type_name_on_any_name", "AlterSeqStmt", "SeqOptList", "opt_with",
  "NumericOnly", "SeqOptElem", "opt_by", "SignedIconst", "CreateSeqStmt",
  "OptSeqOptList", "CopyStmt", "copy_from", "copy_delimiter",
  "copy_generic_opt_arg_list", "opt_using", "opt_as", "opt_program",
  "copy_options", "copy_generic_opt_arg", "copy_generic_opt_elem",
  "opt_oids", "copy_opt_list", "opt_binary", "copy_opt_item",
  "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CreateFunctionStmt", "macro_alias",
  "param_list", "AlterTableStmt", "alter_identity_column_option_list",
  "alter_column_default", "alter_identity_column_option",
  "alter_generic_option_list", "alter_table_cmd", "alter_using",
  "alter_generic_option_elem", "alter_table_cmds", "alter_generic_options",
  "opt_set_data", "VariableSetStmt", "set_rest", "generic_set",
  "var_value", "zone_value", "var_list", "AnalyzeStmt", "UpdateStmt",
  "TransactionStmt", "opt_transaction", "ExecuteStmt",
  "execute_param_clause", "AlterObjectSchemaStmt", "InsertStmt",
  "insert_rest", "insert_target", "opt_conf_expr", "opt_with_clause",
  "insert_column_item", "set_clause", "opt_on_conflict", "index_elem",
  "returning_clause", "override_kind", "set_target_list", "opt_collate",
  "opt_class", "insert_column_list", "set_clause_list", "index_params",
  "set_target", "unreserved_keyword", "col_name_keyword",
  "type_func_name_keyword", "reserved_keyword", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,    60,    62,    61,   736,    43,    45,    42,    47,    37,
      94,   737,    91,    93,    40,    41,    46,    59,    44,    63,
      58
};
# endif

#define YYPACT_NINF -2360

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-2360)))

#define YYTABLE_NINF -1552

#define yytable_value_is_error(Yytable_value) \
  (!!((Yytable_value) == (-1552)))

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const int yypact[] =
{
    4391,   -79,   575, -2360, -2360,   -79, 30966, -2360,   -79,    56,
    2752, 33341, -2360,  5645,   -79, 37616,   427,   289,   274,   526,
     644, 37616, 37616, 33816,   -79,   233, 38091, -2360,   -79, 34291,
      -8,   172, 38566, 37616,  1345,   796,   327, -2360, -2360, -2360,
     385, -2360, -2360, -2360, 19851, -2360, -2360, -2360,   179, -2360,
      50,   182,   539,   374, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
     124, -2360, -2360, -2360, 39041, 37616, 39516, 34766, 39991, -2360,
     116, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360,   370,   504, -2360,   119, -2360, -2360,
   -2360, -2360,  1345, 37616, -2360,   219,   364, -2360,   544,   703,
   40466, -2360, -2360, -2360, -2360,   877,   698, 37616, -2360, -2360,
   35241, -2360, -2360, -2360,   673, -2360, -2360,   485, -2360,    71,
   -2360, -2360, -2360,   555, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360,   568, -2360, -2360, 40941, 41416, 41891, -2360,   473,
     579,   734, 19375, -2360,   385, -2360, -2360, -2360, -2360, -2360,
     644, -2360,   644, -2360, -2360, -2360,  -178,   496, -2360,   535,
     807,   533, -2360, -2360, -2360, -2360, -2360,   758,  8096,  8096,
   42366,   644, 42366,   569,    -4, -2360, -2360, -2360, 21279, -2360,
     578,   504, -2360,   232,   916, 11078, 37616,   593, -2360,   602,
     593,   618,   627,   539, -2360,  4391, -2360, 37616, -2360,   670,
     920,   172,   533, -2360,   661,   661,  1102,   661,   726,  1210,
   -2360,   163, -2360,   677,  1008,  1020, 34291,  1066,   669,   882,
    1100,  5458,  1112,   991,  1123,  1126,  6108, 11078, 24297, -2360,
     504, -2360, -2360,   762, -2360, -2360,   794, -2360, -2360, -2360,
   -2360,   579,  1286,  1030, -2360,   853, 42841, 43316, 37616,  1222,
     817, -2360, -2360, -2360, -2360,   856, -2360, -2360,   169,  1170,
     836, -2360,    61,  1207,    69, -2360,  1216,  1092, 11078, -2360,
     979, -2360, -2360, -2360,   224, -2360, -2360, 26197, -2360, -2360,
   -2360,   734,   892, -2360, 26197, 11078, 47116,  1335, -2360,  1171,
   37616,   905, -2360, -2360, -2360, -2360, -2360, -2360,  1405,    88,
    1409, 11078,   921,    88,    88,   926,  1264, -2360, -2360, -2360,
     136,   935,   939, -2360,    94,    94, -2360,  1131,   953,   970,
   -2360,   130,  1469,  1484,    99,  1002,  1014,   638,    88, 11078,
   -2360,  1015,    94,  1019,  1021,  1025,  1492,  1045, -2360,  1497,
    1046,   156,   187,  1064,  1065, -2360, -2360,   143, 11078, 11078,
   11078, -2360,  7102, -2360,   504,   644, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360,  1075, -2360,   105,  4642, -2360,  1074, -2360,
   -2360, -2360,   176, 11078, -2360,  1529,   -30, -2360,   147, -2360,
   -2360, -2360,   504,  1363,  1086, -2360, -2360, -2360,   204,  1506,
   25247, 25722, 37616, -2360, -2360,   504, -2360, -2360, -2360, -2360,
   -2360, -2360,   255, -2360,   385, 27306,   310,   593, 37616, 37616,
    1571, -2360, -2360, -2360,   602, -2360,  1379, -2360, -2360,   539,
     539, 11078,   539,   613,   766,  8593, 11575,  1445,  1336,   133,
     741,  1451, -2360,  1339,   726,  1210, 11078, 34291, 37616,  1255,
   43791, 37616, 31441,   752,   780,  1136,  1230,  1144,   443,  1559,
   -2360,  1154, -2360,  1242, 37616, 48051,   185, -2360,  1603,   185,
     185,   152,  1604,  1246,   235,  1403,   -39,  -154,  2610, -2360,
    1154, 34291,   135,   528,  1154, 37616,  1249,   657,  1154, 11078,
   11078, 11078,  1169, -2360, 27306,   -58, -2360,   899,   945, 23821,
    1165, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360,  1256, 37616,  1214,
     -77,   -36,  1520,  1580, 37616,  1407,  2610,  1408,  1644,  1191,
     794, -2360, 44266,  9090,  1650, -2360, -2360, -2360, -2360, -2360,
   37616, 28591,  1192, -2360, -2360, 37616, -2360, 37616, 37616, -2360,
   37616, 37616,   335, 44741,   734, 30491, -2360, -2360, -2360, -2360,
     302,   755, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, 28591, -2360,  2367, -2360, -2360, -2360,  1189,   471, -2360,
   -2360,  1248, -2360,  1248,  1248,  1201,  1201,  1202, -2360, -2360,
   -2360,   638,  1248,  1201, -2360, -2360, 48051, -2360, -2360,  -127,
     481, -2360,  1203, -2360,  1664, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360,  3036,   510,   291, -2360,  1345, -2360,
   -2360, 11078,   504, -2360,  1206, 27306,  1251, 11078, -2360, -2360,
   11078,  1212,  1692,  1692, 11078, -2360, -2360, -2360, -2360,  5160,
    1692, -2360,  1692,  1692,  1248,  1248, -2360, 27419, 11078, -2360,
   23186, 11078, 14060,  9587, 11078,  1293,  1299,  1692, -2360,  1692,
   -2360, 11078,  7599, 27419,  1701,  1701,  2075,  4624,  1220,   504,
     504, -2360,  1692, 11078,  3855,  3855, -2360,   113, 47116, 11078,
   11078, 11078, 11078, 28116,  1309,   155, 37616, 11078, 11078,  1229,
     516, -2360, 11078,  1453, -2360,  1234, 11078,  1311,   154, 11078,
   11078, 11078, 11078, 11078, 11078, 11078, 11078, 11078, -2360, -2360,
   16037,   142,  1549,  1574, 11078,   -96,   806, 11078, 35716,  8096,
    1563,  6108, -2360,   112,  1563, -2360, -2360, -2360,   148, -2360,
   -2360, -2360, -2360, -2360,  1189, -2360,  1189,  1240, 37616,   232,
   32391, -2360, 11078, -2360,   560,  1254, -2360, -2360,  1524, -2360,
    1245, -2360, 26668,  1524, -2360, -2360, 14546,  1364,  1525,  1466,
   -2360, -2360, -2360,  1258, 27306, 12072, 12072, -2360,   628, 27306,
     664, -2360, -2360, -2360, -2360, -2360, -2360,     7, -2360, 37616,
      12,  1445,   741,   608,  1316,  1718,  1225, 21755, 37616, -2360,
    1182,  1263, 45216, 37616,  1538,  1491,  1540,  -121, -2360, -2360,
   -2360, 47116, -2360, 37616, 37616, 45691, 46166, 29066, 37616, 28591,
   -2360, -2360, -2360, -2360, 37616,  1072, 37616,  5460, -2360, -2360,
   -2360,   185, -2360, -2360, -2360, -2360, -2360, 37616, 37616, -2360,
   -2360,   185, 37616, 37616,   185, -2360,  1305, 37616, 37616, 37616,
   37616,  1533, 37616, 37616,   -49,   -49,  1472, -2360, 10084,  1268,
   -2360, 11078, 11078, -2360, 11078,  1443, -2360,   616, -2360,  1485,
      31,  1321, 37616, -2360, -2360,  1368, 37616,  1389, -2360, -2360,
   -2360, -2360, -2360,  1279,  1623,  2610, -2360,  1624,   508, 31916,
     493,  1320,  1512, -2360, -2360,  1507, -2360,   622, 11078,    61,
   -2360, 28591, -2360,    69, -2360,  1508,   241, -2360,  1526,  1756,
     794, -2360, -2360, -2360, -2360, -2360, -2360, 18899, -2360,   645,
   -2360, -2360,  1763,   644,  1763,   584, -2360, -2360,  1763, -2360,
    1763, -2360, 26197, -2360, 11078,  1765, 37616,  1312,  1313, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360,  1692,  1390, -2360,  1393,  1394,
    1395, -2360, -2360, -2360, -2360, -2360, 47116, -2360,   611, -2360,
     674, -2360, 11078, 11078,    43, -2360, 26732,   675, 11078,  1307,
    1315,   690, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360,  1317,  1642, -2360,  1318,  1322,  1324, -2360, -2360,   907,
   -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360,  1327,  1319, 26792,  1328, 14060, 14060,
    7102,   936, -2360, 14060,  1329, -2360, -2360,   714, 26686,  1330,
    1332,  1352,  1355,  1338,  1340, 27021, 10581, 11078, 10581, 10581,
   27067,  1330,  1341, -2360, 11078,  1342,  5161, -2360, -2360, -2360,
    3208,  3208,  3208, 27419, -2360, -2360, -2360,  1361, -2360, 14060,
   14060, -2360,  1452,  1146,  7102, -2360, -2360,  1647, -2360,   786,
   -2360,  1347, -2360, -2360,  2394, -2360, 23186, 27342, 11078,   157,
   -2360, 11078,  1229, 11078,  1430,  3208,  3208,  3208,   218,   218,
     149,   149,   149,   284,   806, -2360, -2360, -2360,  1350,  1351,
    1353,  1553, 27306,  1045, 11078, -2360, 27306,   775,   783, 37616,
    2606,  4119,  4497, -2360, -2360, -2360, 17471,  1399,   -58,  1399,
    1692,  3855, -2360,   602, -2360, -2360, -2360, 27306, -2360,  1345,
   11078, -2360, -2360,   678,  1378,  1576,  1584,   961,   961,   628,
    1587, -2360, -2360,  1438, -2360, 11078,   682, -2360,   699, -2360,
   -2360, -2360, -2360,  1366, -2360, -2360,  1635, -2360, -2360, -2360,
   -2360, 17471,  1422, 37616,  1440,   -94, 20327, -2360,  1600, 37616,
   -2360, -2360,   -26,  1404, -2360,  1473,  1154, 11078,  1620, -2360,
     132,  1396,  1738,  -103,  1693, 37616, -2360,  1605, -2360,   549,
    1742,   241,  1743,   241, 28591, 28591, 28591, -2360,   644, -2360,
     735, -2360, -2360,   747, -2360,  -179, -2360, -2360, -2360,  1486,
     680,  2610,  1154, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
     162,   940,  1154,  1487, -2360,  1488, -2360,  1490,   959,  1154,
   -2360, -2360,  1412,  1421,  1423, 11078, -2360, -2360, 27306, 27306,
   27306,  1411, -2360,   126, -2360, 37616, -2360, -2360, -2360,  1443,
   37616,   794,  1425, -2360,   938, 37616, 37616, 37616, 37616,  1442,
   37616, -2360, -2360, -2360,  1426,  1424, -2360, 47116,   -43,  1639,
    1645,  1144,  1891,  1781, 37616, -2360, 27306, -2360, -2360, -2360,
   37616, -2360,  1783,  1345, -2360, 30016, -2360, -2360, -2360, -2360,
   28591, -2360,   644, -2360,   644,  1663, 37616, 24772,   644,   644,
   -2360,  1462,  1313,   761, 47116,  1692,   125,  1448,   821,   100,
      26,   833, -2360, -2360, -2360,   770, 27191, 11078, -2360,  1815,
   47116, -2360,  5189, -2360, -2360, -2360, -2360, 11078, -2360, -2360,
   -2360, 11078, -2360, 23186, 11078,  1791, -2360,  1950,  1950,  4624,
   47116, 14060, 14060, 14060, 14060,   660,  1019, 14060, 14060, 14060,
   14060, 14060, 14060, 14060, 14060, 14060, 15043,   313, -2360, -2360,
   11078, 11078,  1798,  1791, -2360, -2360, -2360,   260,   260, 47116,
    1476,  1330,  1478,  1480, 11078, -2360,   504,  5207, -2360,  3855,
   11078,  3531,  4575, 11078,   772, 11078,  1799, -2360, -2360,  1482,
   -2360, -2360, 47116, 11078,  1493,  2773, 14060, 14060,  3493, -2360,
    3651, 11078,  7102, -2360,  1472,  1527, 22231, -2360,  1575,  1575,
    1575,  1575, -2360, -2360, 37616, 37616, 37616, 17947,  1813, 16995,
   36191,  1494,  1310, -2360, 36191, 36666, -2360,  1503, -2360,   504,
   11078,  1805,  1496,  1805,  1498, -2360, -2360,  1499, -2360,  1495,
   -2360,  1378,   114, -2360, -2360, -2360,  1702, -2360, -2360, -2360,
   37616, -2360,  1494, 11078,  1648, -2360, -2360, -2360, -2360,  1555,
   -2360, -2360,   827,  1916,  1648,   832, -2360,   504, 21755,  1422,
   11078, 37616,  5592,  1852, -2360, 37616, 37616, 37616, -2360, 37616,
     851,   646,  1510, -2360,   646,  1833,   541,  1144,   235,  2126,
     299, -2360, -2360, -2360,  1586, 37616, -2360, 37616, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, 29066, -2360, 28591, 22710, 28591,
   37616, 37616, 37616, 37616, 37616, 37616, 37616, 37616, 37616, 37616,
   -2360, -2360, -2360,  1472, -2360, -2360, -2360, -2360,  -154, -2360,
     126,  1513,  1320, 37616,  1580, 46641,   865,  2610,  1974,  1518,
     473,   206, -2360, -2360,   493, 31916, -2360, -2360, -2360,  1934,
   -2360, -2360,  1345, 37616,  1578,   241, 37616, -2360,   903, -2360,
   -2360, -2360, -2360, 37616,  1517, -2360,  1517, -2360, -2360,  1692,
   -2360, 37616, -2360,  1523, -2360,  1531, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360, 11078, 27306, -2360,  1532, -2360,
   27306, 23669, -2360, 27306,  1798, -2360,  3183,  3183,  3183,  1296,
    1849,   532,  1528,  3183,  3183,  3183,   238,   238,    89,    89,
      89,  1950,   313, 27306, 27306, -2360, -2360, -2360, -2360,  1535,
   -2360, -2360, -2360,  1330, -2360, -2360,   286, 11078, 11078,  1452,
   -2360, 27644, 11078, 47116,   909,  1452,   151, 11078,  4588,  4885,
   11078, 11078,  3848, 23687,  1536, 11078, 47576, -2360, -2360, 37616,
   37616, 37616, 37616, -2360, -2360, -2360, 36191, 36666,  1534, 16518,
    1310,  1537, 37141, -2360,  1615,  1539, 17471,  1801,  1744, -2360,
   17471,  1744,  1034,  1744,  1816,  1615, 20803, -2360,  1615,  1543,
    1749, -2360,   553, 27306,  1996,  1868,   644,  1868,   644, -2360,
   23186, -2360, -2360, -2360, -2360, -2360, 27306,  8096, -2360,  1345,
     504,  1271, 37616,   -55, -2360,  1570, 37616, -2360,  1648, 27306,
   -2360, -2360, 37616,   911, -2360,   913,   646, -2360,  1598, -2360,
     183,  1855,   117, -2360, 28591,  1850,   328, -2360,  1869,  1784,
   -2360,   185, -2360, 11078,   328,  1786,   225, 37616, -2360, -2360,
    1929, -2360, 47116,   241,   241, -2360, -2360, -2360,  1495, 48051,
     302,   755, -2360, -2360, -2360, -2360, -2360,   291, -2360, -2360,
    1577, -2360, -2360,  1649, -2360,  1651, -2360, -2360, -2360, -2360,
   -2360,  1566,   892,   115, 37616,  2027,  1845,   944, -2360,  1802,
    1573,  1320, -2360,  1036, 31916,  1442, -2360,  1960,   160,  1645,
   -2360,   266,  1613,  1789, 37616,  1579, -2360,  2038, -2360, 30016,
    1517,  1582, 47116, -2360, -2360, 27306, -2360, -2360, -2360, 14060,
    1912,  1588, 47116, -2360,  1452,  1452, 27644,   954, -2360,  1452,
   11078, 11078,  1452,  1452, 11078, -2360, -2360, 23705,  1785, -2360,
   -2360, -2360, -2360, -2360, -2360, -2360, 29541, 36191, -2360,  1594,
   -2360, 32866, -2360, -2360, 37616,  1310, 17471, -2360, -2360,  1357,
   -2360, 17471,  1870, -2360, 17471, -2360, 37616,  1601, -2360, 37616,
   -2360, 12569, 11078,  1637, -2360,  1637, -2360,  1608,  1086, -2360,
     -94, -2360, -2360,  2013, 18423,  1968, 11078, -2360, -2360,   646,
   -2360,  1772,  1598,  1612, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360,   956,  1614, 37616, 37616, 14060, -2360,   328,   186,   227,
   -2360,  1887, 37616,  1598, -2360, -2360, -2360, -2360,  1997,  2073,
    1961, -2360, -2360, 27306, -2360, -2360,  1692,  1692, -2360, -2360,
    2040, -2360, -2360,   291,   521, 22710, 37616, 37616, -2360, -2360,
   -2360,  -154,  1998,   963,  1345,  1628,  1906,    82, 37616,  1977,
   31916,  2095, 37616,  1442,  1638, -2360, -2360,   146,   146, -2360,
    1777, -2360,  1787,   634, -2360, 37616, -2360, -2360, 18423,  1345,
   -2360, -2360, -2360,  2060, 14060, 47116,   967, -2360,  1452,  1452,
    1452, -2360,  2084,  1472, -2360,   978,  2103, -2360, 37616,   -29,
     -32,  1653,  1659, -2360, -2360,   988, -2360, 11078,  1660, -2360,
   -2360, 17471,  1357,   989, -2360, 47116, 37616,  1003, 47116,  6605,
    1657, -2360, -2360, 27306, 27306, 37616,  1707,  1707, -2360,  1704,
   37616, 11078,  2083,    81, -2360,  1009,   -28, 27306, 37616, -2360,
   28591, -2360,   646, -2360, 28591, 11078, -2360,    92,  1296,  2121,
   -2360, -2360, -2360, -2360,  1598,   794, -2360, -2360,  1971, -2360,
   37616,  1727,   538,  1741, -2360, -2360, -2360,   892,   644,  1320,
    1613, 37616,  2164,  1947, -2360, -2360,  1766, -2360, 37616,  1345,
     473, -2360,   493, -2360, -2360, -2360, -2360, -2360, -2360, -2360,
   -2360, -2360, -2360, -2360, -2360,  2105,  1889,  2106,  1578,  1022,
    2060,  1037, -2360, 11078,   359,  1503, 29541,  1682, -2360,  1038,
   -2360, -2360, -2360, -2360, -2360, 37616,   969, -2360, 27306, 37616,
   -2360, -2360, -2360, 37616,  2040,  1039, -2360, -2360, 12569,  1679,
   -2360,  2148,  1828, -2360, -2360,  1345, -2360, 23733, 37616, 37616,
   37616,  1399, 18423, -2360,  1814,   794,   646,  1050, -2360,  1703,
   -2360, 23751,  1915, -2360,  2001, -2360,  1948,  1698, -2360, 11078,
   -2360,  1767, -2360, -2360, -2360,  2157, -2360,  1051, -2360, -2360,
    2192,  1706,  1708,  1613,  1442,  1645,  1910, -2360,  1911,  1709,
    1320, -2360,  1330, 13066, 13066,  1710, -2360, -2360, 37616, -2360,
    1068,  1711,  1088, -2360, -2360, -2360, -2360, 37616,  1713, 32866,
   -2360,  2083, -2360, -2360,   256,   256, -2360, -2360, 21755,  1948,
   -2360, 28591, 22710,  1933,  1698,    98,  1918,  2610, -2360, 27306,
   -2360,  1345, -2360, -2360, 37616, 31916, -2360, -2360, -2360, -2360,
   -2360, 18423,  1399, 15540,  1856,    93, 26704, -2360, -2360, -2360,
   -2360,  1106, -2360,  2195,  1871, -2360, -2360, -2360, -2360, 37616,
    1378,  1378,  -152,  1918, -2360, -2360,  2009, -2360, -2360, -2360,
   -2360, -2360,   134,  1928, -2360,  1930,  1401,  1613,  1845,  1153,
   -2360,  1155, -2360,  2181, -2360, -2360, -2360, -2360, -2360, -2360,
    1720,  1722, -2360,   256, -2360, -2360, -2360, -2360, -2360,   366,
     366,  2104, -2360,  1790, -2360, -2360, -2360,  1835, -2360, 37616,
    1320, 13563, -2360,  2216,  1378,   646, -2360,  2205, -2360,   138,
   -2360, -2360,  1845, -2360,  1399, -2360,  1735, -2360, -2360, -2360,
   -2360,  1902, -2360, -2360, 37616,  2116,  1845,  1913, 37616,  1906,
    1947
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
    1171,  1147,     0,    64,    63,  1147,     0,   914,  1147,  1030,
     200,     0,   215,     0,  1147,     0,  1171,     0,     0,     0,
       0,     0,     0,     0,  1147,   280,     0,   214,  1147,     0,
     895,     0,     0,     0,     0,     0,     2,     4,     9,    22,
      46,    17,    12,    37,     0,    38,    19,    31,   247,   234,
     282,   246,  1170,   250,    14,    27,    23,    24,    18,    25,
      15,    34,    29,    35,    10,    30,    28,    20,     6,    16,
      11,    13,     7,    36,     8,    33,    32,    21,     5,    26,
       0,  1146,  1145,  1139,     0,     0,     0,     0,     0,  1140,
     817,  1198,  1199,  1200,  1201,  1202,  1203,  1204,  1205,  1206,
    1207,  1208,  1209,  1210,  1211,  1212,  1213,  1546,  1214,  1215,
    1216,  1497,  1498,  1547,  1499,  1500,  1217,  1218,  1219,  1220,
    1221,  1222,  1223,  1224,  1501,  1502,  1225,  1226,  1227,  1228,
    1229,  1503,  1548,  1230,  1231,  1232,  1233,  1234,  1549,  1235,
    1236,  1237,  1238,  1239,  1240,  1241,  1242,  1243,  1550,  1244,
    1245,  1246,  1551,  1247,  1248,  1249,  1250,  1251,  1252,  1253,
    1504,  1505,  1254,  1255,  1256,  1257,  1258,  1259,  1260,  1261,
    1262,  1263,  1264,  1265,  1266,  1267,  1268,  1269,  1270,  1271,
    1272,  1273,  1274,  1275,  1276,  1277,  1278,  1279,  1280,  1281,
    1506,  1282,  1283,  1284,  1285,  1507,  1286,  1287,  1288,  1508,
    1289,  1290,  1291,  1552,  1553,  1292,  1293,  1294,  1554,  1295,
    1296,  1509,  1297,  1298,  1299,  1300,  1301,  1302,  1303,  1555,
    1304,  1305,  1306,  1307,  1308,  1309,  1310,  1311,  1312,  1313,
    1314,  1556,  1510,  1315,  1316,  1317,  1318,  1511,  1512,  1513,
    1319,  1557,  1558,  1320,  1559,  1321,  1322,  1323,  1324,  1325,
    1326,  1560,  1327,  1561,  1328,  1329,  1330,  1331,  1332,  1333,
    1334,  1335,  1336,  1337,  1338,  1339,  1340,  1341,  1342,  1343,
    1344,  1345,  1346,  1347,  1348,  1349,  1350,  1351,  1352,  1353,
    1514,  1562,  1515,  1354,  1355,  1356,  1516,  1357,  1358,  1563,
    1359,  1517,  1360,  1518,  1361,  1362,  1363,  1364,  1365,  1366,
    1367,  1368,  1369,  1519,  1564,  1370,  1565,  1520,  1371,  1372,
    1373,  1374,  1375,  1376,  1377,  1378,  1379,  1380,  1381,  1382,
    1521,  1383,  1384,  1522,  1385,  1386,  1387,  1388,  1389,  1390,
    1391,  1392,  1393,  1394,  1395,  1396,  1523,  1397,  1398,  1399,
    1400,  1401,  1402,  1403,  1404,  1405,  1406,  1407,  1408,  1409,
    1410,  1411,  1412,  1413,  1414,  1566,  1415,  1416,  1417,  1524,
    1418,  1419,  1420,  1421,  1422,  1423,  1424,  1425,  1426,  1427,
    1428,  1429,  1430,  1431,  1432,  1433,  1434,  1525,  1435,  1436,
    1437,  1567,  1438,  1439,  1526,  1440,  1441,  1442,  1443,  1444,
    1445,  1446,  1447,  1448,  1449,  1450,  1451,  1527,  1452,  1528,
    1453,  1454,  1455,  1568,  1456,  1457,  1458,  1459,  1460,  1529,
    1530,  1461,  1462,  1531,  1463,  1532,  1464,  1465,  1466,  1467,
    1468,  1469,  1470,  1471,  1472,  1473,  1474,  1475,  1476,  1477,
    1478,  1479,  1480,  1533,  1534,  1481,  1569,  1482,  1483,  1484,
    1485,  1486,  1487,  1488,  1489,  1490,  1491,  1492,  1535,  1536,
    1537,  1538,  1539,  1540,  1541,  1542,  1543,  1544,  1545,  1493,
    1494,  1495,  1496,    40,     0,     0,   799,   818,   819,   824,
    1142,  1029,  1171,     0,  1052,     0,     0,  1053,     0,     0,
       0,   194,   193,   874,   199,     0,     0,     0,   817,   861,
    1385,   859,   797,   818,     0,   947,   948,     0,   956,     0,
     941,   945,   942,     0,   966,   958,   967,   959,   940,   960,
     949,   939,     0,   968,   943,     0,     0,     0,  1143,  1152,
     200,  1171,     0,    41,    46,    54,    53,    50,    52,    51,
       0,   913,     0,   816,   856,   855,   930,   902,   909,  1529,
    1461,   908,   216,   910,   907,  1144,   279,   277,     0,   784,
    1330,  1422,  1433,  1529,     0,  1114,  1117,  1141,     0,   251,
     400,   793,   894,     0,   899,     0,  1399,   255,   258,   830,
     256,   247,     0,     0,     1,  1171,    45,  1136,   213,  1529,
    1461,  1533,   210,   209,   276,   276,     0,   276,     0,   239,
     247,   242,   246,     0,     0,     0,     0,  1303,     0,     0,
    1303,     0,  1303,     0,  1303,     0,     0,   776,     0,   777,
     800,   906,   903,     0,   905,   904,   167,   198,   197,   196,
     195,   200,     0,  1303,   879,     0,     0,     0,     0,   869,
       0,   862,   860,   954,   955,     0,   946,   944,     0,  1303,
     825,   961,   965,  1303,   965,   795,  1303,     0,     0,  1148,
       0,    43,    55,    70,     0,    71,    61,    49,    56,    57,
      58,  1171,  1028,   858,     0,     0,     0,     0,   911,     0,
       0,     0,   802,   804,   805,   708,   815,   779,  1498,  1499,
    1500,   768,     0,  1501,  1502,  1503,  1548,   646,   633,   642,
     647,   634,   636,   643,  1504,  1505,   587,  1269,  1506,  1507,
     813,  1508,  1511,  1512,  1513,   638,   640,  1514,  1515,     0,
     814,  1517,  1518,  1366,  1520,  1521,  1523,  1524,   644,  1526,
    1528,  1529,  1530,  1531,  1532,   812,   645,  1534,     0,     0,
       0,   790,     0,   779,   618,     0,   441,   442,   464,   465,
     443,   470,   471,   473,   444,     0,   789,   522,   661,   617,
     629,   689,   565,     0,   616,   611,   262,   785,     0,   612,
     801,   803,   769,   262,   783,  1115,  1120,  1116,     0,     0,
       0,     0,     0,   402,   401,   794,   893,   891,   892,   890,
     889,   896,     0,   898,    46,   722,     0,   257,     0,     0,
       0,   237,   236,     3,   830,   211,     0,   274,   275,     0,
       0,     0,     0,     0,     0,     0,     0,   349,   296,   297,
     299,   346,   350,   358,     0,   243,     0,     0,     0,     0,
     227,     0,     0,   929,   929,     0,     0,     0,     0,     0,
    1109,  1058,  1102,     0,     0,     0,     0,   982,   995,     0,
       0,     0,     0,     0,   992,     0,     0,   975,   969,   971,
    1060,     0,   929,     0,  1056,     0,     0,     0,  1062,     0,
       0,     0,     0,   621,   726,   282,   724,   799,     0,   775,
       0,   832,  1570,  1571,  1572,  1573,  1574,  1575,  1576,  1577,
    1578,  1579,  1580,  1581,  1582,  1583,  1584,  1585,  1586,  1587,
    1588,  1589,  1590,  1591,  1592,  1593,  1594,  1595,  1596,  1597,
    1598,  1599,  1600,  1601,  1602,  1603,  1604,  1605,  1606,  1607,
    1608,  1609,  1610,  1611,  1612,  1613,  1614,  1615,  1616,  1617,
    1618,  1619,  1620,  1621,  1622,  1623,  1624,  1625,  1626,  1627,
    1628,  1629,  1630,  1631,  1632,  1633,  1634,  1635,  1636,  1637,
    1638,  1639,  1640,  1641,  1642,  1643,  1644,  1645,  1646,  1647,
    1648,  1649,  1650,  1651,  1652,  1653,  1654,  1655,  1656,   772,
     771,   798,   833,   834,   835,   836,   778,     0,     0,  1026,
       0,   840,     0,   876,     0,  1303,  1002,  1303,     0,   167,
     167,   868,   871,     0,     0,   957,   953,   951,   950,   952,
       0,     0,   826,   963,   964,     0,   934,     0,     0,   936,
       0,     0,     0,     0,  1171,     0,   976,    66,    67,    65,
       0,     0,    69,    59,    68,    47,   996,    60,    48,   979,
      42,     0,   857,  1017,  1125,  1126,  1134,   931,     0,   822,
     452,   481,   459,   481,   481,   448,   448,   461,   449,   450,
     486,     0,   481,   448,   453,   422,     0,   451,   423,   489,
     489,   476,     0,   729,   433,   434,   435,   436,   462,   463,
     437,   468,   469,   438,   521,     0,   448,   823,  1171,   912,
     217,     0,   614,   480,   467,   767,     0,     0,   475,   474,
       0,     0,     0,     0,     0,   457,   456,   455,   620,   732,
       0,   454,     0,     0,   481,   481,   479,   545,     0,   458,
       0,     0,   747,     0,   753,     0,     0,     0,   485,     0,
     483,     0,     0,   546,   526,   527,   618,   722,     0,   613,
     619,   808,     0,     0,   521,   521,   788,   708,     0,   705,
     706,   707,     0,     0,     0,   782,     0,   716,   718,     0,
       0,   561,   714,     0,   564,     0,     0,     0,     0,   702,
     703,   704,   696,   697,   698,   699,   700,   701,   712,   695,
     542,     0,     0,   663,     0,     0,   541,     0,     0,     0,
     365,     0,   806,   770,   365,  1128,  1132,  1133,     0,  1127,
    1131,  1119,  1118,  1123,  1121,  1124,  1122,     0,   887,     0,
     884,   362,     0,   259,     0,     0,  1137,   212,   254,   253,
     283,   284,   290,   252,   335,   336,     0,     0,     0,     0,
     355,   353,   326,   300,   325,     0,     0,   304,     0,   327,
     522,   348,   241,   294,   295,   298,   240,     0,   351,     0,
     361,   349,   299,     0,   233,  1165,     0,     0,     0,   228,
       0,     0,     0,     0,     0,  1303,     0,     0,  1093,  1074,
     119,     0,   928,     0,     0,     0,     0,     0,     0,     0,
    1101,  1098,  1099,  1100,     0,     0,     0,     0,   980,   981,
     994,     0,   985,   986,   983,   987,   988,     0,     0,   973,
     974,     0,     0,     0,     0,   972,     0,     0,     0,     0,
       0,     0,     0,     0,   282,   282,   282,   627,     0,     0,
     281,     0,     0,   773,   776,  1016,   175,     0,   165,     0,
       0,     0,     0,   842,   841,     0,     0,   200,   880,   883,
     881,   878,   882,     0,     0,  1001,   999,     0,     0,   164,
     138,   873,  1303,   870,   155,     0,  1054,     0,     0,   965,
     827,     0,   962,   965,   796,     0,   965,  1151,  1303,     0,
     167,    44,    62,   977,   997,   978,   998,  1023,  1049,     0,
    1031,  1036,  1014,     0,  1014,     0,  1033,  1037,  1014,  1032,
    1014,  1027,     0,   932,     0,   433,     0,   428,   424,   494,
     495,   496,   497,   504,   505,   502,   503,   498,   499,   492,
     493,   500,   501,   490,   491,     0,   506,   507,   508,   509,
     510,   511,   512,   513,   439,   901,     0,   445,   448,   900,
       0,   780,     0,     0,   766,   762,     0,     0,     0,     0,
       0,     0,   733,   734,   735,   736,   737,   738,   739,   740,
     741,     0,     0,   742,     0,     0,     0,   478,   477,     0,
     694,   705,   706,   707,   702,   703,   704,   696,   697,   698,
     699,   700,   701,   720,     0,     0,     0,     0,     0,     0,
       0,     0,   588,     0,     0,   611,   688,     0,   722,   752,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     722,   758,     0,   779,     0,     0,     0,   810,   811,   523,
     537,   538,   539,   543,   838,   837,   787,     0,   781,     0,
       0,   524,   547,   552,     0,   759,   583,     0,   571,     0,
     560,     0,   569,   573,   548,   563,     0,   544,     0,   782,
     717,   719,     0,   715,     0,   534,   535,   536,   528,   529,
     530,   531,   532,   533,   540,   693,   691,   692,     0,     0,
       0,   671,   566,     0,     0,   568,   567,  1295,  1330,     0,
     273,   273,   273,   261,   271,   786,     0,   414,   282,   414,
       0,   521,   403,   830,   897,   885,   886,   723,   829,  1171,
       0,   288,   289,     0,   293,  1524,  1418,     0,     0,     0,
       0,   328,   356,     0,   347,     0,   802,   329,   801,   330,
     333,   334,   305,   357,   791,   359,     0,   352,   245,   244,
     363,     0,   231,     0,     0,     0,     0,  1160,  1177,     0,
     779,  1193,   365,     0,   229,     0,  1059,     0,  1303,  1076,
       0,     0,     0,     0,     0,     0,    74,   110,    74,  1113,
    1303,   965,  1303,   965,  1202,  1270,  1434,  1105,     0,   143,
       0,  1072,   922,     0,   128,   172,  1095,  1110,   915,     0,
       0,   970,  1061,   984,   989,   918,   993,   990,  1155,   991,
     929,     0,  1057,     0,   916,     0,  1153,     0,     0,  1063,
     920,  1157,     0,     0,     0,     0,   725,   622,   727,   728,
     775,     0,  1015,     0,   166,     0,  1025,  1005,  1006,  1016,
       0,   167,     0,   879,     0,     0,     0,     0,     0,   207,
       0,   158,   156,   186,     0,   163,   157,   165,     0,     0,
     114,     0,     0,     0,     0,  1055,  1051,   933,   828,   935,
       0,   937,     0,     0,  1021,     0,  1019,  1020,  1024,  1018,
       0,  1013,     0,  1044,     0,     0,     0,     0,     0,     0,
    1135,   429,   425,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   730,   446,   278,     0,     0,     0,   763,     0,
       0,   659,     0,   635,   637,   447,   649,     0,   460,   639,
     641,     0,   709,     0,     0,     0,   650,   590,   591,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   606,   605,   651,   687,
       0,     0,   750,   751,   652,   488,   487,   489,   489,     0,
       0,   757,     0,     0,     0,   657,   615,   723,   472,   521,
       0,     0,     0,     0,     0,     0,     0,   572,   562,     0,
     570,   574,     0,     0,     0,   556,     0,     0,   554,   584,
     550,     0,     0,   585,     0,     0,     0,   628,   273,   273,
     273,   273,   270,   272,     0,     0,     0,     0,  1418,     0,
     386,   364,   366,   373,   386,   391,   630,   412,   631,   793,
       0,   338,     0,   338,     0,  1129,   888,     0,   285,     0,
     710,   293,     0,   287,   332,   331,     0,   303,   354,   301,
       0,   360,   232,     0,  1182,  1166,  1164,  1184,  1183,     0,
     779,  1191,     0,     0,  1182,     0,  1185,  1197,     0,   231,
       0,     0,     0,     0,   118,     0,     0,     0,    74,     0,
       0,   182,     0,   169,  1094,     0,     0,     0,  1068,     0,
    1086,  1078,  1064,  1092,     0,     0,  1097,     0,  1090,  1107,
    1108,  1106,   102,    84,  1111,     0,   115,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     625,   626,   623,   282,   774,  1047,  1048,  1046,   975,   176,
       0,     0,   873,     0,   877,     0,     0,  1002,     0,   167,
    1152,     0,   203,   142,   138,     0,   136,   135,   137,     0,
     208,   872,     0,     0,   867,   965,     0,  1045,     0,  1009,
    1050,  1034,  1039,     0,  1043,  1041,  1040,  1035,  1038,     0,
     430,     0,   420,     0,   431,     0,   440,   514,   515,   516,
     517,   518,   519,   520,   466,     0,   765,   761,     0,   632,
     731,     0,   721,   745,   744,   589,   601,   602,   603,   746,
       0,     0,     0,   598,   599,   600,   592,   593,   594,   595,
     596,   597,   604,   755,   754,   748,   749,   484,   482,     0,
     654,   655,   656,   756,   690,   809,   525,     0,     0,   553,
     760,   575,     0,     0,     0,   549,   709,     0,     0,     0,
       0,     0,   558,     0,     0,     0,   674,   669,   670,     0,
       0,     0,     0,   264,   263,   269,   386,   391,     0,   247,
       0,   373,     0,   385,   322,   384,     0,     0,   397,   395,
       0,   397,     0,   397,     0,   322,     0,   387,   322,   384,
       0,   404,   794,   413,     0,   345,   622,   345,     0,   260,
       0,   286,   291,   292,   302,   792,   230,     0,   226,     0,
    1172,     0,     0,  1169,  1159,     0,     0,  1194,  1182,  1173,
     923,    74,     0,     0,  1075,     0,   184,   130,   162,   145,
       0,     0,     0,    75,     0,   150,     0,  1067,  1087,     0,
    1083,     0,  1112,     0,     0,     0,     0,     0,  1082,  1070,
       0,  1065,     0,   965,   965,  1073,   129,    81,  1366,     0,
     696,   697,   171,    76,   177,    78,    80,   448,    79,    77,
     174,   919,  1156,     0,   917,     0,  1154,   926,   924,   921,
    1158,     0,  1028,  1008,     0,     0,     0,     0,   845,  1303,
       0,   873,  1000,     0,   164,   207,   205,     0,   192,   114,
     187,     0,   225,     0,     0,     0,   938,     0,  1022,     0,
    1042,     0,     0,   426,   432,   764,   648,   658,   743,     0,
       0,     0,     0,   653,   581,   579,   576,     0,   577,   557,
       0,     0,   555,   551,     0,   586,   660,     0,   676,   673,
     268,   267,   266,   265,   372,   370,     0,   375,   821,   820,
     382,   315,   321,   371,     0,   367,     0,   396,   392,     0,
     393,     0,     0,   394,     0,   368,     0,   820,   369,     0,
     411,     0,     0,   665,   807,   665,  1130,     0,  1181,  1161,
       0,  1162,  1192,     0,     0,     0,     0,  1186,  1138,   180,
    1077,     0,   162,     0,    74,   147,   146,   149,   144,   148,
     151,     0,     0,     0,     0,     0,   131,     0,     0,     0,
      95,     0,     0,   162,   168,    91,    92,   201,     0,     0,
       0,  1079,  1069,  1066,  1071,  1080,     0,     0,  1081,  1084,
     419,  1096,  1089,   448,   448,     0,     0,     0,   624,  1004,
    1011,   975,     0,     0,     0,     0,     0,     0,     0,     0,
     164,     0,     0,   207,     0,  1149,   206,     0,     0,    72,
       0,   111,     0,     0,   218,     0,   865,   866,     0,     0,
    1010,   427,   421,   607,     0,     0,     0,   578,   582,   580,
     559,   662,     0,   282,   407,     0,   410,   374,     0,     0,
     310,   317,     0,   320,   314,     0,   376,     0,     0,   378,
     380,     0,     0,     0,   415,     0,     0,     0,   797,     0,
     337,   339,   342,   341,   344,     0,   313,   313,   711,     0,
       0,     0,  1188,  1188,  1195,     0,     0,  1174,     0,    74,
       0,   161,   181,   109,     0,     0,    93,     0,    99,     0,
     133,   134,   132,    94,   162,   167,    96,   202,     0,  1088,
       0,  1104,   448,     0,   173,   927,   925,  1028,     0,   873,
     225,     0,     0,   847,   843,   844,     0,   846,     0,     0,
    1152,   204,   138,   127,   120,   121,   122,   123,   124,   125,
     126,   141,   140,   112,   113,     0,     0,     0,   867,     0,
     608,     0,   609,     0,   679,   412,     0,     0,   406,     0,
     308,   306,   309,   311,   307,     0,     0,   383,   399,     0,
     379,   377,   388,     0,   419,     0,   390,   343,     0,   664,
     666,     0,     0,   249,   248,     0,  1168,     0,     0,  1190,
    1190,   414,     0,  1176,     0,   167,   183,     0,   153,   160,
     152,     0,     0,    90,     0,    97,   191,    83,   418,     0,
    1091,     0,   178,  1003,  1007,     0,   219,     0,   851,   849,
       0,     0,     0,   225,   207,   114,     0,   222,     0,     0,
     873,   610,   675,     0,     0,     0,   405,   408,     0,   381,
       0,     0,     0,   416,   417,   389,   340,     0,     0,   315,
    1163,  1188,  1187,  1189,   290,   290,  1167,  1196,     0,   191,
     139,     0,     0,   117,    83,     0,   108,     0,  1085,  1103,
     179,     0,   848,   850,     0,   164,   220,  1150,    73,   223,
     224,     0,   414,  1497,  1246,  1468,     0,   677,   680,   678,
     672,     0,   318,     0,   324,   398,   667,   668,   312,  1190,
     293,   293,   414,   108,   154,   159,     0,    98,   100,   188,
     189,   190,     0,   104,   101,   105,     0,   225,     0,     0,
     852,     0,   863,     0,   684,   683,   682,   686,   685,   409,
       0,     0,   316,   290,  1179,  1178,  1175,    74,   116,     0,
       0,     0,   106,     0,   107,    82,   221,     0,   839,     0,
     873,     0,   319,     0,   293,   185,    87,     0,    86,     0,
     170,   103,     0,   853,   414,   681,     0,  1180,    85,    89,
      88,     0,   864,   323,     0,     0,     0,     0,     0,     0,
     854
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -2360, -2360, -2360,  1668, -2360, -2360,  -331, -2360,  -376,  -365,
   -2360, -2360,    21,  -633,  1239, -2360,  -939, -1589, -2182,  -389,
   -2360,  -462, -2360,  -220, -1569,  -436,  -423, -2360, -2058,  -779,
   -2360,  1429,  -136, -2360,   631, -2360, -1893, -2360, -2360,   620,
   -2360,  -797, -2360, -2360, -1653,   271,  -373, -1557, -2098,   576,
    -609, -2360,  -421,   316, -1549, -2360,   640, -2360,  -364, -2360,
    -463, -1919,    84, -2070,  -945, -2360, -2360,   732,  -930, -2245,
      11,  1447,   357, -2360,    10,    19,   -33,    23,    42,    36,
      53,  1479,  1505, -2360,  -988,   656, -2360, -2360,  -551,   -46,
   -2360,   702, -2342, -1832,  -377,  1041,  1460,  1474,  -259,  -164,
   -2360,  -335, -2360,  -986, -2360, -2360,   701,  1083, -1036, -1082,
   -2360,   418, -2360,  -256, -2360,   167,  -367,  1067, -2360,  1500,
   -2360, -2360, -2360, -2360, -1059,   694, -1756,   438, -1728, -1660,
     210,   191,  -838,  -123,    33,   455,  -211, -2360, -2360,  -209,
   -1531, -2101,  -225,  -224, -2360, -2360, -1003,   946,  -823, -2360,
   -2360,  -648,   390, -2360, -2360, -2360,  1089,  1978, -2360, -2360,
    1995,  2019, -2360,   518,  2100,  -480,  -680,  1233, -1002,  1237,
   -1015, -1001, -1019,  1241,  1244, -1056,  2439, -1361,  -721,    38,
   -2360, -2148,  -809, -2360, -2360,    14, -2360,  -283, -2360,  -281,
   -2360, -2360, -2360,  -269, -2359, -2360,  1174, -2360, -1050, -2360,
    3505,   771, -2360, -1443,  -506,  -570,  -771, -1736, -2360, -2360,
   -2360, -2360, -2360, -2360, -1456, -1588,  -393,   825, -2360, -2360,
     934, -2360, -2360,  1696,  -550,  1047,  -516,  -702,   831, -2360,
    -541,  1184, -2360,    25,  -510,    90,  -827,    55, -2360,  2786,
     131,    -6, -2360,  2006,  -502, -1044,  -728, -2360,  -605, -2360,
   -2360, -2360, -2360, -2360,   -24, -1753,  -392, -2360, -2360,  -363,
   -2360, -2360, -2360, -2360, -2360,  -922, -2360,  -160, -2360, -2360,
   -1900, -2360, -2360,   666, -2360, -2360,  1173, -2360, -2360, -2360,
   -2360, -2360,  -952, -2360, -2360, -2360, -2360, -2360,  -769, -2360,
   -2360, -2360, -2360,  1373,  -630, -2360, -2360,  -599,  -829,  -624,
    -819, -2360,   189,  -917,   389, -2360, -2360, -2360, -2360, -2360,
    -437,   679, -2007, -2360,   650, -2360, -2360, -2360, -2360,   144,
     405, -2360, -2360, -2360, -2360, -2360, -2360, -2360,   451, -2360,
    1117, -2360,   440,  -433,   757, -2360, -2360,  1018, -2360,  1023,
   -2360,   580,  1197,    30, -2360,  1467, -2360, -1888, -2360,    41,
   -2360, -2360, -2360, -2360,   248,   488, -2360,  -165, -1687,    91,
   -2360, -2211, -2293, -2360,  -230, -2195, -1520,  1572,  -501,  -490,
   -1871
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    35,    36,    37,    38,    39,   577,  1012,   523,  1013,
    1014,   654,    40,  1024,   656,   657,    41,  1921,  2192,  2638,
    1942,  2730,  2344,  2345,  1637,  2683,  2684,  1923,  1990,  1263,
    2677,  1701,  2511,  1643,  1626,  2346,  1710,  2461,  2228,  1638,
    2163,  1702,  2331,  2567,  1333,  1703,  2568,  2324,  1704,  1306,
    1330,  2165,  2685,  1644,  1307,  2193,  1250,  1705,  2636,  1706,
     485,  2349,   525,  1982,   978,    43,    44,   554,    45,  2394,
     526,   819,  1894,  1602,   527,   734,    49,    50,    51,   573,
     567,   568,  1170,  1553,  1854,   799,   548,   549,   588,  1300,
    1200,  1201,  1574,  1883,  1225,  1226,   808,   809,  2421,  2553,
    2422,  2423,  2282,  2283,  2702,  1213,  1217,  1218,  1587,  1580,
    1206,  2125,  2440,  2441,  2442,  2303,  1221,  1222,   811,   812,
     813,  1230,  1597,    53,  1557,  1861,  1862,  1863,  2103,  2104,
    2118,  2114,  2288,  2429,  1864,  1865,  2414,  2415,  2528,  2121,
    1871,  2433,  2434,  2481,  1743,  1052,  1053,  1378,  1054,   735,
    1055,  1407,   736,  1091,  1057,   737,   738,   739,  1060,   740,
     741,   742,   743,  1074,   744,   745,  1108,  1396,  1397,  1398,
    1399,  1400,  1401,  1402,  1403,  1404,   785,  1461,   747,   748,
     749,  1867,   750,  1163,  1541,  2446,  2549,  2550,  1847,  2087,
    2268,  2413,  2605,  2657,  2658,   751,   752,  1538,  1158,  1159,
     753,  2195,  1161,  1454,  1481,   865,   866,  1065,  1431,  1432,
    1457,  1775,  1464,  1470,  1802,  1803,  1482,  1506,   754,  1414,
    1415,  1759,  1076,   755,   609,   870,   610,  1072,  1500,   763,
     756,   757,  1593,   560,  2425,   645,   960,   758,   759,   760,
     761,   762,  2280,   466,  2623,   992,   790,   868,  1639,  1496,
      54,  1315,  2496,  2217,  2218,  2376,  2493,  2589,  2689,  2690,
      55,   535,    56,    57,    58,    59,  2397,  2235,   982,  1335,
    1712,   486,    60,   973,  1321,    61,   781,   564,   782,   784,
      62,   667,   613,    63,   543,   544,    64,    65,  1254,    66,
      67,   515,   516,   642,   996,   517,    68,  1325,  1281,  1025,
     849,  1271,  1019,    69,  1326,    70,  1689,  2371,  1998,  2372,
    1732,  1683,  1022,  1728,  1358,  1310,  1023,   473,  1371,  1999,
    1968,  1359,    71,   487,   984,    72,  1930,  1931,  1932,  1640,
     830,  2580,  1641,   831,   832,  1934,    73,   555,   556,  1026,
    1181,  1027,    74,   528,    76,    83,    77,   649,    78,   529,
    1608,  1236,  2315,    80,  1901,  1611,  1904,  2454,  2138,  1899,
    1905,  2559,  2624,  1902,  1612,  2455,  1613,   493,   468,   469,
     965
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     465,   572,   848,   961,   589,   492,   644,   969,   764,   492,
      47,    46,  1268,   641,   999,   536,   492,   542,  1284,    48,
     542,   659,  1408,   561,  1015,  1249,   492,   492,  1873,  1285,
      75,  1119,   660,  1018,  1318,    48,    52,   524,   542,  1924,
     814,    79,  1110,  1319,   463,   775,  1085,  1086,  1260,  2131,
    1453,  1320,    52,   571,   583,  1256,  1322,   650,  1349,   786,
     966,   464,   559,    48,  1099,  1939,  1196,  1941,  1487,  1488,
    1428,   590,  2215,  1834,  1426,   591,  1920,  2199,   561,   492,
     561,   561,   561,  1289,    42,  1220,   570,  1424,  1427,  1906,
    1296,  2229,  2225,  -481,   592,  1028,  2074,  1777,  1778,  -448,
    1780,   491,  1797,  2100,  -486,   519,   471,   963,  -486,   598,
     533,   601,   537,   605,   676,  1559,  1409,  -800,   964,   993,
     603,  -822,   569,   569,  -823,  1489,  2384,   993,  2416,  -822,
    -822,   533,  -823,  -823,   676,  -461,  1592,  2117,  1821,  1822,
    -694, -1551,  1002,  1556,  1180,   651,  1976,  -694,  -476, -1551,
   -1551,   534,   533,   533,  2558,  2385,   659,   653,   970,  2332,
    1128,  -489,   562,   659,  1340,   769,  2452,   660,   850,  1535,
     854,  2389,   858,  2503,   660,   599,  1536,   635,  -713,  -235,
    1589,  1757,  -238,  2484,  1168,  -713,  1064,  2004,  2006,  1006,
    1134,  1164,  -489,   661,   676,  1498,   584,  1498,  2437,  1241,
    1687,  1261,  1519,  2519,  2115,  2369,  2335,  1175,  1006,   533,
    1252,   807,  1269,   676,  2055,  1272,  1273,  2144,  1120,  2494,
    1287,   810,  1136,  1375,  2504,   966,  1118,  1207,  2313,  1128,
    1313,   586,  2505,  2328,   676,   776, -1012,  1252,  1986,  -975,
     586,  2563,  2560,   594,  -975,  2586,  1173,  1952,  1627,  1780,
    2452,   986,  2739,  2709,  1311,  2354,  2695,  1274,  1543,  1134,
     546,  2506,   585,     3,     4,  2337,  2157,  2625,  2679,   659,
     659,  -235,  1208,  2532,  -238,  2132,  2530,  1387,  1388,  1194,
     660,   660,  2670,  2671,  1595,  1020,  1381,  1382,  1178,  1294,
    1295,  1136,   803,  1571,  2693,  1128,   987,  1128,  1244,   993,
    2325,  1870,  1279,  2470,  1948,   664,  1353,  1897,  2387,   584,
    1233,   676,  2226,  2501,  1299,  1624,   665,  1949,  1176,  2034,
    1283,  2381,  -282,  2533,  1780,  1134,  1280,  -282,  1520,  2156,
    2032,  1105,   595,  1624,  2507,  2545,    81,  2257,  2133,   586,
    2233,  1898,   531,  2472,  1521,  2508,  1908,  2056,  2646,  1522,
    2285,  1387,  1388,  1106,  2289,  1064,  2388,  1136,  2347,  1136,
    2572,  2724,  2735,   547,   805,  2340,  2153,  1107,  2155,  2117,
    1110,  1331,  1312,  1625,  2326,   585,  2703,  2471,  2416,  1572,
      82,  1462,  2348,  1210,  1523,  2390,   961,  1085,  1086,  1391,
    1392,  1917,  1596,  1262,  -282,  1099,   530,  1275,  1544,  2680,
     777,  2391,   778,  1752,  2696,  1276,  2564,   994,  2341,   770,
    2669,  2740,  1314,  1337,  2452,   994,  1357,  1040,  2469,  2495,
    2036,  2037,  2038,  2039,  2726,  2342,  2043,  2044,  2045,  2046,
    2047,  2048,  2049,  2050,  2051,  2052,  2274,  1231,  1177,  2314,
    1298,  1211,  2716,  -282,  1688,  1619,  2248,  1232,  1246,  1374,
    2675,  1259,   586,  1190,  2240,  1259,  2691,  2534,     3,     4,
    2531,  2318,  -235,  1391,  1392,  -238,  1453,   561,  1169,   988,
    1165,  2227,  1908,   636,   624,  2078,  2079,  2681,   587,   771,
    2583,   561,   612,   611,   492,  1581,   563,  1343,   641,   572,
     963,    48,   670,  1342,  2199,  1413,  -694,  1886,   616,  1346,
    2473,   964,   614,  2452,   659,  1875,  1285,  2661,    52,   640,
     492,   492,   630,   615,  1718,   660,  2406,  1965,  1966,   520,
     963,  2343,  1411,  1880,  2647,  1537,  -235,  1676,  1495,  -238,
    2426,   964,  1524,  1073,  -713,  2430,  2509,  2648,  2432,  2510,
      48,   571,  1589,   655,   542,   815,   542,  2384,  1288,  2417,
     472,  2370,   561,  1909,  1499,  2329,  1836,    52,   596,   995,
     492,  1247,  2319,  1855,  1856,  1410,  1064,   998,  2710,  1411,
     966,   561,  1925,   607,  1417,  1953,   989,   608,  1421,  1795,
     632,  2392,  -481,   773,   780,    47,    46,   994,  1084,  2585,
     561,   587,   590,  -486,    48,  2330,   591,  1467,  1469,  1123,
    1120,  1558,   794,  1676,   607,    75,  -800,   647,   608,  2595,
    -822,    52,  2594,  -823,  1105,   592,    79,  1877,  2014,   787,
     561,   561,   561,   966,  1090,   617,  2317,   618,  1351,   820,
   -1551,  2727,   963,   532,  1501,  -235,  1106,  -476,  -238,  1157,
     653,  1171,  1560,   964,  1928,  1105,  1507,  1653,  1064,   533,
    1107,   976,   979,   980,  1645,  2167,   569,  1656,  1698,    42,
    1659,   662,  2250,   663,  1070,  2373,   565,  1106,  1651,  2521,
    1010,  1011,  2180,  1508,  -235,  2540,  -235,  -238,   779,  -238,
      48,  1109,   766,  1261,  1926,  2603,  1440,  2307,   797,  1010,
    1011,  1279,   822,  2515,  1441,  1442,  1443,    52,   823,   572,
    2652,  2516,  1094,  1095,  1627,  1154,  1155,  1156,  1157,  1717,
    2356,  2357,  2728,  1719,  2604,  1280,  1721,  1088,  1105,  1004,
    -975,  -975,  1005,  1453,  1726,  1792,  1793,  1794,  1795,  2168,
    2020,  2022,  2023,  1727,  2018,  2462,   961,  1462,  1462,  2729,
    1106,  2012,  1462,  1672,  1673,  1674,  2017,  1868,  2019,  2021,
    1188,  1116,  1978,  1189,   475,   541,   963,  2028,   963,  1355,
    1753,  2199,  2159,  2065,   676,  2459,   561,   964,  1261,   964,
     619,  1064,   620,    84,  1204,  1654,   582,  2035,  1462,  1462,
    1657,  1816,   492,   492,  1509,  1084,  2476,   991,  1017,  1510,
    2040,   798,  1868,    25,  1511,  1017,   574,  1187,  1790,  1791,
    1792,  1793,  1794,  1795,   824,  1191,  2059,  1616,  1192,  2169,
    2251,   561,   561,   476,  1239,   561,  1251,  1128,   590,   590,
    2734,   590,  1198,  1199,   575,  1203,   520,  1252,   561,    29,
    1347,   576,  1285,  1192,  1652,  1876,   825,  1253,  2704,  2705,
     963,   592,   592,  1235,   592,   561,  1240,  1134,  2160,   561,
     820,   964,  1735,  1662,  1694,  1252,   659,  1736,  1669,  1267,
    2089,  2090,  2091,  2092,   606,  1255,  1121,   660,  2517,    31,
    2566,   659,   593,   521,    25,  1262,  1125,  1205,   569,  1136,
    1291,   622,   660,    32,  1286,   803,   621,  1290,  2403,  1172,
     804,  1954,  2737,  1927,  1928,  2570,   629,  1261,  1880,  1179,
     803,  1017,  1017,   634,  1963,    25,  1755,    33,  1907,  1737,
      29,  2161,  -831,  -831,  2162,  1127,  1826,  2575,  1128,   633,
    1261,   522,  1929,  1129,  1130,  1131,  1064,  1734,  2041,  1987,
     638,  1738,  1991,  1739,    85,  2717,  1512,  1259,  2042,  1105,
    1132,    29,    86,  1827,   675,  2194,  1513,  1780,  1134,  1708,
      31,  1709,  1781,  1782,  1783,  1135,   825,   805,  1301,  1302,
    1262,  1106,  1308,  1879,    32,  1884,  1373,   648,   561,  1374,
     676,  1811,   805,  2419,  2468,  1109,  1334,    87,  2420,  2741,
    1136,    31,  1590,  1591,   640,   481,  1207,   482,    33,   640,
     666,   492,   492,  2747,   492,   640,   607,   561,  1824,  1323,
     608,  1936,    34,  1938,   637,  1405,   806,  1872,  1406,   826,
    2483,   484,   668,   827,   822,  1084,  1293,  1341,  -328,  -328,
     823,   806,  1259,    48,    88,   669,   655,  2581,  1350,   670,
    2626,  1208,  1084,    34,  1341,  1318,  -332,  -332,  1118,  1951,
      52,   671,   828,  2520,  1319,   607,   768,  -800,  1868,   608,
    1868,  2237,  1320,  -331,  -331,  1568,  1056,  1322,   998,  1828,
    1462,  1462,  1462,  1462,  1829,   774,  1462,  1462,  1462,  1462,
    1462,  1462,  1462,  1462,  1462,  1462,  1389,  1390,   612,   611,
    1453,  1137,  1972,  1810,   783,  1812,  1813,    48,  1344,  1262,
    1345,   788,  1997,  1209,  1455,   822,   789,  1138,   614,  2171,
      25,   823,  1139,  1600,    52,  1084,  1192,  1341,   829,   615,
    2179,  1684,  1262,   791,  1685,  1462,  1462,  1715,  2725,  2154,
    1374,  2692,   792,  1140,  1141,  1357,   824,  2057,  2058,  2295,
     640,  1784,  2298,   963,   963,   963,    29,  1142,   796,  2212,
    1729,  2706,  1210,  1730,   964,   964,   964,   795,  2170,   822,
    2178,  1259,  1785,  2364,  1127,   823,   801,  1128,  1505,  1444,
    1445,  1446,   561,  1447,  1448,  1449,  1450,  1451,  1452,  1754,
    1761,   816,  1192,  1192,  1259,  1143,    31,   817,  1144,  2360,
    1261,  1848,   561,  1849,   561,  1765,  2382,  1134,  1192,  1850,
      32,  1851,  1145,  1554, -1552,  1146,  1391,  1392,  2140,  1261,
    1211,  1078,  1079,  2742,  2108,   822,  1830,   824,   625,  1799,
     780,   823,  1192,  1563,    33,  1565,  1831,   821,  1995,  1136,
    1433,  1786,   833,   561,   659,  1056,  1096,  1064,    34,   963,
    1944,  1610,  1614,  1945,   818,   660,  1251,   492,  2109,  2402,
     964,   800,  1946,   802,   626,  1947,  1607,   492,  1629,   492,
    1633,   834,   492,  2291,  1594,    48,  2010,   967,   492,  2011,
     492,   824,  2111,   851,  1064,  2024,  1411,  2070,  1192,   625,
    1192,   640,   492,  2290,   855,  2293,   640,   492,   825,   627,
    1064,   492,   492,   492,   492,  1147,   492,   492,   968,   971,
    1823,  1152,  1153,  1154,  1155,  1156,  1157,  1868,   972,  1955,
    1064,  1868,   974,   981,   675,   626,   561,  1780,  2063,  1561,
    1693,   983,  1781,  1782,  1783,  1880,   985,   824,  1959,  2482,
   -1552,   990,  2141,  1707,  2198,  2142,   628,  2145,   822,  1064,
    2146,   852,   991,  1620,   823,   827, -1552,  1691,  1699,  1604,
    1975, -1552,  1645,  1628,  2200,  1631,  2158,    48,  1642,  1685,
    1184,  1186,  1064,  2122,  1646,  2320,  1648,  1411,   997,   825,
    2221,  2179,  2194,  1685,   853,  2236,  1375,  1000,  1655,  -281,
    1744,  1068,  1262,  1658,  -281,  1001, -1552,  1663,  1664,  1665,
    1666,  1003,  1670,  1671,  2113,  1148,  1021,   628,  1149,  1150,
    1151,  1262,  1152,  1153,  1154,  1155,  1156,  1157,  2238,  1071,
    1069,  2239,    25,  2107,  2258,  1771,  2321,  1406,  2322,  1685,
    -452,  1685,  2211,   825,  -459,  1077,   827,  1787,  1788,  1789,
    1080,  1790,  1791,  1792,  1793,  1794,  1795,   572,  1081,  1082,
     829,  1145,  2544,  1083,  1259,  2544,  1056,   835,    29,  2377,
     824,  -281,  2378,  1087,   963,   828,   963,    34,   963,  2407,
    2107,  2463,  1406,  1259,  2464,   964,   836,   964,  2489,   964,
    1127,  1685,  2522,  1128,  1089,  1406,   856,  1868,  1064,   825,
     827,   572,    89,  2525,  -449,   470,  2526,  1868,    31,  1116,
    2108,   518,  1868,  2537,  2542,  1868,   998,  2543,  1017,  -450,
    -281,   545,    32,  1134,  1733,   557,  1092,  -453,  2546,   857,
   -1552,  2543,  -451,  1017,  2561,  1868,   837,  2562,  1093,  1098,
    1455,   829,  1785,  1100,  2109,  1101,    33,  2600,  1056,  1102,
    2562,  1605,  1615,  1116, -1552,  1136,   827,  2108,  1462,  2110,
      34,  1162,  2601,  2609,  2615,  1406,   998,  2543,  2111,  1103,
    1104,  1505,  2487,   561,  1167,  2630,  2642,  2352,  2631,   998,
    1869,  1078,  1079,  2361,  2362,   828,   822,  1843,  1111,  1112,
    1096,  2109,   823,  2662,   475,   829,  2663,  2310,   765,  1122,
     767,  2112,   966,   572,  1852,  1860,  2110,  1168,   467,   612,
     611,  1786,  1880,  2665,  1169,  2111,   998,  -875,    48,  1868,
    1411,    25,   825,  1064,  1866,  1869,  2308,  1895,   838,   614,
    1900,  2699,  1182,  1610,  2543,    52,  1997,  1195,  1197,   804,
     615,   464,  1437,  1438,  1462,  1227,   806,  1229,  2112,  1308,
    1860,   829,  1868,   476, -1552,   571, -1552,    29,  1237,  2194,
    1257,  1152,  1153,  1154,  1155,  1156,  1157,    25,  1259,  1866,
    2427,  1056, -1552,  1258,  1264,  1660,   839, -1552,  2718,   827,
    2720,  2719,  1265,  2562,   840,  1266,   464,  1270,  1277,  1278,
    2113,  1282,  1292,   963,  1297,  1304,   841,    31,   824,  1305,
    1309,  1316,  1317,    29,   964,  1324,  1327,   478,  1661,  1308,
    1328,    32, -1552,  1462,   561,  1329,  1338,  1372,  1341,  1308,
     561,   561,   492,  1073,   561,  1084,  1090,  1376,   842,  1377,
    1412,   676,  1064,  1413,  1471,    33,  1418,  2113,   561,  1064,
    1472,    25,  1128,    31,   640,  1971,  1753,  1868,  1484,  1606,
    1497,  1977,  1979,  1504,  1518,  1983,  1515,    32,  1516,  1539,
    1308,  1308,  1556,  1699,  1540,  1562,   585,  1145,   659,  1994,
    1582,  2198,    48,  1570,   829,  1583,   844,    29,  1569,   660,
    1584,    33,  1601,  1868,  1603,  1058,  1585,  1617,  1621,  1622,
    1623,   586,  1064,  1677,  1682,    34,  1686,  1455,   845,  1943,
    1690,  1692,  1064,  1695,  1696,  1697,  1711,  1787,  1788,  1789,
    1713,  1790,  1791,  1792,  1793,  1794,  1795,    31,  1980,   847,
    1714,  1720,  1723,  2428,  1722,   481,  1056,   482,  2084,  1731,
    1741,    32,  1763,  1748,  1745,  1746,  1749,  1750,  1751,   572,
    1764,  1767,  1766,  1768,  1967,  1773,  1825,  1769,   483,  1770,
     825,   484,  1772,  1776,  1798,    33,   572,  1804,  1192,  1805,
   -1552,  2466,  1806,  1807,  1753,  1808,  1815,  1818,  1820,    34,
    2088,  1832,  1868,  1841,  1842,  1844,  1846,  1845,   561,   561,
     561,   465,  1870,  1869,  2105,  2569,  1017,  1882,  2105,  2119,
    -333,  1116,  2524,  2001,  1890,  2002,  2576,  1285,  -334,  2007,
    2008,  1887,  1888,  1667,  1891,  1893,  2096,   827,  2099,  2093,
    2094,  2095,  1896,  1903,   561,  1064,  1911,  1910,  1913,  1916,
    1915,  1919,  1922,  1935,  1937,  1866,  2715,  1866,  1981,  1950,
    1956,  1957,  1610,  1958,  1964,   492,  1668,  1960,  2529,  1308,
    1251,  1308,   464,  1334,   464,  2135,  1961,  2332,  1962,  1973,
    1988,  1984,  1985,  2333,  1058,  1064,  2529,  1992,  1989,   492,
   -1552,  2184,  1993,  1118,  1996,  2334,  2003,  1152,  1153,  1154,
    1155,  1156,  1157,  2016,   492,   492,   492,   492,   492,   492,
     492,   492,   492,   492,  2009,  1064,  2629,  2027,  1064,   963,
    1801,  1780,  1800,   963,  2335,   835,  2336,   561,  2072,   561,
     964,  2060,   829,  2061,   964,  2062,  2073,  1853,  2578,  1251,
    2085,  2587,  2098,  2120,   836,  2124,  2134,  1334,  2076,  2130,
     561,  2126,  2106,  2128,  2129,  2137,  2139,  1308,  2216,  2143,
    2220,  2150,  2232,  2152,  2164,  2242,  2166,  2214,  2198,  2182,
    2223,    48,  2224,  2231,  2234,  1685,  2243,  2602,  2249,  2281,
    2286,  1350,  2252,  2337,  2244,  2183,  2569,  2246,  2276,  2612,
    2253,  2266,  2277,  2284,   837,  2294,  2287,  2299,  2686,  2300,
    2201,  2202,  2203,  2204,  2205,  2206,  2207,  2208,  2209,  2210,
    2301,  2302,  2338,  2316,  2323,  2327,  2622,  2351,  2350,  2355,
    2365,  2368,  2366,  2374,  2367,  2375,  2386,  2380,   675,  2393,
    2379,  1780,  2395,  2398,  2399,  2401,  1781,  1782,  1783,  2196,
    2269,  2404,  2405,   561,   561,   561,   561,  2412,  2418,  2431,
    2105,  2119,  2445,  2105,   658,  2436,  2279,  1056,  2450,  2456,
    1869,  1967,  2174,  2448,  1869,  2458,  2460,  2474,  2465,  2478,
    2297,  2477,  2479,  2480,  2270,  2271,  2272,  2273,  2339,  2488,
     467,   467,  2491,  2340,  1455,  1860,   838,  2492,  2498,  1860,
     963,  2499,  2513,  2502,  1056,  1058,  1900,   467,  2523,  2527,
    1610,   964,  2514,  2552,  1866,  2555,  1251,  2535,  1866,  2309,
    1056,  2311,  1064,  2536,  2539,  2548,  2558,  2574,    48,  2577,
      48,   464,   835,  2579,  2582,   464,  2341,  2588,  2590,  2591,
    1056,  2359,  2596,  2598,   839,  2597,  2608,  2617,   467,   467,
     962,   836,   840,  2342,  2618,  2619,  2632,  2628,  2473,  2634,
    2640,  2635,  2637,  2641,   841,  2643,  2649,  2650,  2676,  1056,
    2644,  2682,  2645,  2651,  2700,  2660,  2664,  2086,  1308,  2708,
    2694,  2711,  2701,  2713,  2721,  2722,  2723,  1058,  1707,  2732,
     467,  -247,  1056,  2709,  2710,  2736,   842,  2738,  2396,   658,
    2743,   837,  2172,  2383,  -247,  2744,   658,   467,  1067,  -247,
    2173,  2746,    48,   793,  1352,  2678,  2748,  2573,  2731,  2714,
    2707,  1248,  2512,   467,  1918,  1940,  2230,  2304,  2674,  2306,
    1914,  1969,  2712,  2186,  1234,  2673,  2148,  1193,  1174,  1224,
     465,  2105,  1878,  1599,   844,  2424, -1552,  2611,   492,  2343,
    1869,   467,  1223,  2554,  2668,  1869,  1889,  -247,  1869,  1579,
    2435,  2127,  2616,  2438,  2305,  1892,   845,  2101,  1598,  2174,
     467,   467,   467,  2292,   467,  1860,  -247,  2275,  2453,  2541,
    1860,  1228,  2097,  1860,  1866,  2607,  2606,   847,  2613,  2447,
    2614,  1742,  1423,   838,  1866,   467,  1425,   640,   492,  1866,
    1429,   464,  1866,  1430,  2666,  2659,   561,  2667,  1056,  1545,
    1058,   464,   658,   658,  1881,  1786,   464,  1839,  1758,   464,
    1837,  1681,  1866,  1555,  2497,  -247,  2733,  2750,  2599,  1974,
     492,   492,  1564,  1339,  -247,  2358,  2222,  2475,  1970,   464,
    1017,   839,   561,   467,  1251,  2213,   492,   467,   467,   840,
    2000,  2181,  1647,  2400,  2490,  2185,  1933,  1566,   467,   561,
    2312,   841,  2453,    48,  2175,  1740,  2147,  2627,  2672,     0,
       0,  2449,  1127,  2216,     0,  1128,   572,  1067,     0,  2383,
       0,     0,   492,     0,     0,     0,     0,  1360,    48,     0,
    2518,     0,     0,   842,  2467,  1869,     0,     0,     0,     0,
    2438,   467,   467,   467,     0,  1134,  1866,     0,     0,  2551,
       0,     0, -1552,     0,   492,     0,     0,     0,     0,     0,
    1860,     0,   561,   464,     0,     0,  2485,  2486,  1116,     0,
       0,  1361,     0,  1056,     0,     0,     0,  1136,     0,  1866,
       0,   844,  2500,     0,   640,     0,     0,     0,     0,     0,
       0,     0,     0,  2565,     0,   492,   464,  1362,     0,     0,
       0,     0,   561,   845,     0,  1058,  2196,     0,     0,     0,
       0,     0,     0,  -247,     0,     0,     0,  1363,     0,  2593,
       0,  1364,     0,     0,   847,     0,  2176,     0,    48,  2177,
     465,     0,     0,  2592,     0,     0,     0,     0,     0,  2610,
       0,     0,  1365,   492,     0,  1366,     0,  2435,  1833,     0,
    2556,  1787,  1788,  1789,     0,  1790,  1791,  1792,  1793,  1794,
    1795,  1367,   640,   640,   640,   467,  2453,     0,     0,     0,
       0,     0,     0,   962,  1866,  2620,     0,   607, -1552,     0,
     791,   608,  1056,     0,    48,     0,     0,   658,     0,  1056,
       0,   464,     0,     0, -1552,     0,     0,     0,     0, -1552,
       0,     0,     0,   962,     0,     0,     0,     0,     0,     0,
    1866,     0,  2435,     0,     0,     0, -1457,     0,     0,     0,
       0,  2551,   867,  2424,     0,     0,     0,   464,  1067,  2584,
    1259,     0,  1610,     0, -1552,     0,     0,     0,     0,     0,
       0,     0,  1056,     0,     0,     0,     0,     0,   561,  1251,
    1368,     0,  1056,   467,  1059,  2453,   835,     0,  1369,   467,
       0,  2687,   467,     0,     0,     0,   467,     0,     0,     0,
      48,  1061,     0,   640,     0,   836,     0,     0,     0,  2688,
     467,   867,  1066,   467,   467,   467,   467,     0,     0,  1145,
       0,     0,     0,   467,   467,  1062,     0,     0,     0,  1866,
       0,     0,  1370,     0,     0,   467,     0,     0, -1457,     0,
    1067,   467,   467,   467,   467,   962,   464,     0,     0,   467,
     467,     0,     0,   561,   467,   837,     0,     0,   467,     0,
       0,   467,   467,   467,   467,   467,   467,   467,   467,   467,
       0,     0,   467,     0,     0,     0,   467,     0,   561,   467,
       0,   467,   561,   467,  2688,     0,     0,     0,     0,     0,
       0,     0, -1457,     0,     0,  1056,     0,     0,     0,     0,
       0,     0,     0,  2196,   467, -1457,  1063,     0,     0,  2745,
   -1457,     0, -1552,  2749,     0, -1457,     0,     0,   467,     0,
       0,  1127,     0,     0,  1128,     0, -1457,   467,   467, -1457,
       0,     0,     0,     0,     0,  1056,  1058,     0,  1465,     0,
       0,     0,     0,     0,     0,     0,     0,   838,     0,     0,
       0,     0,     0,  1059,  1134,     0,     0,     0, -1457,     0,
       0, -1552,     0,  1067,     0,  1056,     0,     0,  1056,   962,
    1061,   962,     0,  1058,     0,     0,     0, -1457,     0,     0,
       0,  1066,     0,     0,     0,     0,  1136,     0,     0,  1058,
       0,     0,     0,     0,  1062,   839,     0,     0,     0,     0,
       0,     0,     0,   840,     0,   867,   867,   867,     0,  1058,
     467,     0, -1552,   467,   467,   841,   467,     0,     0,  1152,
    1153,  1154,  1155,  1156,  1157,     0, -1457,     0,     0, -1457,
       0,     0,     0,     0,     0, -1457,     0,     0,  1058,     0,
       0,     0,  1465,     0,     0,     0,     0,   842,     0,     0,
     467,     0,     0,   962,     0,     0,     0,  2077,     0,     0,
       0,  1058,     0,   474,     0,     0,     0,   475,     0,   658,
       0,     0,     0,     0,     0,  1063,     0,     0,     0,     0,
       0,     0,     0,     0,   658,     0,   467, -1552,     0,     0,
    -875,     0,     0, -1457,     0,   844,     0,     0,     0,     0,
       0,     0,     0, -1552,     0,     0,     0,     0, -1552,     0,
       0,     0,     0,     0,     0,     0,     0,   845,  1067,     0,
       0,     0,     0,     0,   467,   467,   476,   746,   746,   867,
     467,     0,     0,   477,     0,     0,     0,     0,   847,     0,
       0,     0,     0, -1552,     0,     0,     0,     0,  1853,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1056,     0,  1059,     0,     0,     0,     0,     0,
     467,   467,   467,     0, -1457,   467,     0,  1058,     0,     0,
     478,  1061, -1457,     0,     0,   864,   869,     0,   467,   467,
     467,   467,  1066,     0,     0,     0,   467,     0,  1145, -1457,
       0, -1457, -1457,     0,     0,  1062,     0,     0,     0,     0,
       0,   467,   467,     0,     0,   479,   467,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     467,     0,     0,   467,     0,   467,     0,     0, -1457,     0,
       0, -1457, -1457, -1457,   864,     0,  1059,     0,     0,     0,
       0,   480,     0,     0,     0,     0,   467,     0,     0,     0,
    1075,     0,     0,  1061,     0,     0,     0,     0,   467,     0,
       0,     0,     0,     0,  1066,     0,     0,     0,     0,     0,
       0,     0,   467,     0,  1379,  1380,  1063,  1062,  1097,     0,
       0, -1552,     0,     0,  1465,  1465,     0,   467,   481,  1465,
     482,     0,  1058,     0,     0,     0,     0,  1113,  1114,  1115,
       0,  1117,     0,   467,     0,     0,     0,   867,     0,     0,
       0,   483,     0,     0,   484,     0,     0,     0,     0,   467,
       0,   675,  1166,     0,  1780,  1465,  1465,     0,     0, -1552,
   -1552, -1552,     0,     0,     0,     0,   962,   962,   962,     0,
       0,     0,     0,     0,     0,     0,  1127,     0,     0,  1128,
       0,     0,  1381,  1382, -1552, -1552, -1552,     0,  1063,  1059,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1202,     0,     0,     0,  1214,  1219,  1061,   467,     0,  1134,
       0, -1552,     0,     0,     0,     0,  1135,  1066,  1152,  1153,
    1154,  1155,  1156,  1157,     0,     0,     0,     0,     0,     0,
    1062,  1058,     0,     0,     0,     0,     0,     0,  1058,  1067,
       0,  1136,     0,  1383,  1384,  1385,  1386,  1387,  1388,     0,
       0,  1389,  1390,     0,     0,     0,     0,   658,   864,   864,
     864,     0,   962,     0,   867,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1067,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   467,
       0,  1058,  1067,     0,     0,     0,     0,     0,     0,   467,
       0,  1058,     0,   467,     0,     0,   467,     0,     0,     0,
       0,  1063,  1067,   467,   467,   467,   467,     0,     0,   467,
     467,   467,   467,   467,   467,   467,   467,   467,   467,     0,
       0,     0,   467,   467,     0,     0,     0,     0,     0,     0,
     867,  1067,  1137,     0,  1059,     0,   467,     0,     0,     0,
       0,     0,   467,     0,     0,   467,     0,   467,  1138,  1391,
    1392,  1061,     0,  1139,  1067,   467,     0,     0,   467,   467,
       0,     0,  1066,   467,   467,     0,     0,     0,     0,     0,
       0,     0,   864,     0,     0,  1062,     0,     0,     0,   467,
       0,   467,     0,     0,     0,     0,     0,     0,  1142,     0,
       0,     0,   467,  1016,     0,     0,     0,     0,     0,     0,
    1016,     0,     0,     0,  1058,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   467,     0,     0,  1786,     0,
       0,     0,     0,     0,     0,     0,     0,  1465,  1465,  1465,
    1465,     0,   467,  1465,  1465,  1465,  1465,  1465,  1465,  1465,
    1465,  1465,  1465,  1145,  1058,     0,     0,     0,     0,     0,
       0,  1127,     0,     0,  1128,     0,  1063,     0,     0,     0,
    1393,  1394,     0,     0,     0,     0,  1416,   962,     0,   962,
    1067,   962,     0,     0,  1058,     0,     0,  1058,     0,     0,
    1395,  1124,  1465,  1465,  1134,     0,     0,  1439,     0,   675,
    1456, -1552,  1780,  1468,     0,     0,     0,  1781,  1782,  1783,
    1475,  1480,     0,     0,  1016,     0,  1016,  1016,     0,     0,
       0,     0,  1486,     0,  2067,     0,  1136,     0,  1490,  1491,
    1492,  1493,     0,     0,     0,     0,  1502,  1503,     0,     0,
       0,  1514,     0,     0,     0,  1517,  1147,     0,  1525,  1526,
    1527,  1528,  1529,  1530,  1531,  1532,  1533,   467,     0,  1534,
       0,     0,     0,  1542,     0,     0,  1546,     0,   746,     0,
     864,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1016,     0,     0,  1016,  1016,     0,     0,     0,
       0,  1567,     0,     0,     0,     0,     0,  2080,     0,   467,
     467,     0,     0,     0,   467,  1067,     0,     0,     0,   467,
       0,     0,   467,   467,  1114,  1115,     0,   467,     0,  1127,
       0,     0,  1128,     0, -1552, -1552, -1552, -1552,  1790,  1791,
    1792,  1793,  1794,  1795,     0,     0,     0,     0,   467,     0,
       0,   867,   467, -1552,     0,  1059,  1148,     0, -1552, -1552,
   -1552, -1552,  1134,  1152,  1153,  1154,  1155,  1156,  1157, -1552,
       0,     0,  1061,     0,     0,     0,     0,     0,     0,   467,
       0,     0,     0,  1066,     0,     0,     0,     0,     0,     0,
       0,  1058,  1059, -1552,  1136,     0,  1062,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   962,   864,  1059,  1061,
    1678,  1679,     0,  1680,     0,   467,     0,  1785,     0,     0,
    1066,     0,     0,     0,  1067,  1061,     0,     0,  1059,     0,
       0,  1067,     0,  1062,     0,     0,  1066,     0,     0,     0,
       0,     0,     0,     0,     0,  1061,     0,  1716,  1145,  1062,
       0,     0,     0,     0,     0,     0,  1066,  1059,     0,     0,
       0,     0,     0,     0,     0,  2081,  1354,  1356,     0,  1062,
       0,     0,     0,     0,  1061,     0,     0,  1063,     0,     0,
    1059,   658,     0,   864,  1067,  1066,  1786,     0,     0,     0,
       0,   467,     0,     0,  1067, -1552,     0,  1061,  1062,     0,
       0,     0,   467,   467,     0,     0,   467,     0,  1066,     0,
       0, -1552,     0,     0,  1063,     0, -1552,     0,   467,     0,
       0,  1062,  1756,     0,     0,     0,  1127,  1762,   467,  1128,
    1063,     0,     0,   467,     0,     0,   467,     0,  1419,  1420,
       0, -1552,     0,   467,   467,     0,  1434,     0,  1435,  1436,
    1063, -1552,     0,     0,     0,     0,   467,     0,   467,  1134,
       0,     0,     0,  1473,     0,  1474, -1552,     0,     0,  1779,
       0,     0,     0,     0,     0,     0,     0,   467,  1485,  1063,
       0,     0,     0,     0,     0,  1480,     0,  1480,  1480,     0,
       0,  1136,     0,  1817,     0,     0,  1059,     0,     0,     0,
       0,     0,  1063,     0,     0,     0,  1145,  1067,     0,     0,
       0,     0,     0,  1061,     0,  1465,     0,     0,     0,     0,
       0,     0,     0,     0,  2197,     0,     0,  1835,     0,     0,
    1838,     0,  1840,  1379,  1380,     0,     0,  1062,     0,     0,
     467, -1552,     0,     0,     0,     0,   467,  1067,  1152,  1153,
    1154,  1155,  1156,  1157,     0,     0,     0,     0,     0,     0,
       0,     0,  2264,     0,     0,     0,     0,     0,     0,   467,
       0,  1588,  1588,   467,     0,     0,     0,  1067,     0,  1202,
    1067,   467,  1787,  1788,  1789,     0,  1790,  1791,  1792,  1793,
    1794,  1795, -1552,   467,  1219,     0,     0,     0,     0, -1552,
       0,  1465,   962,     0,     0,     0,   962,   467, -1552,     0,
       0,  1381,  1382, -1552,     0,     0,     0,     0,  1063,     0,
       0,  1059,     0,     0,     0,     0,  1912,  1016,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1016,  1061,     0,
    1016,     0,     0,     0,     0,     0,     0,     0, -1552,  1066,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1062,     0,     0,   467,     0,     0,   467,     0,
    1465,     0,  1383,  1384,  1385,  1386,  1387,  1388,     0,     0,
    1389,  1390,     0,     0,   864,     0,     0,     0,     0, -1459,
     467,     0,     0,     0,     0,     0,     0,     0,     0, -1552,
       0,     0,     0,  1145,   467,     0,  1152,  1153,  1154,  1155,
    1156,  1157,     0,  1016,     0,     0,     0,     0,     0,     0,
       0,   467,     0,     0,     0,     0,     0,     0,  1016,     0,
    1059,     0,     0,     0,     0,     0,     0,  1059,     0,     0,
       0,     0,     0,  1063,     0,   467,   467,  1061,     0,     0,
       0,  1747,     0,     0,  1061,     0,     0,     0,  1066,     0,
       0,     0,     0,     0,     0,  2363,  2026,     0,     0,     0,
       0,  1062,     0,   962,  1067,     0,  2030,     0,  1062,     0,
    2031, -1459,     0,  2033,     0,     0,     0,     0,  1391,  1392,
    1059,     0,     0,   467,     0,   467, -1552,     0,     0,     0,
    1059,     0,     0,     0,     0,     0,     0,  1061,     0,  2053,
    2054,     0,     0,     0,     0,     0,     0,  1061,  1066,     0,
       0,  1160,     0,     0,     0,     0,     0,     0,  1066,  2066,
       0,  1062,  2069,     0,  2071, -1459,     0,     0,     0,     0,
       0,  1062,  2075,     0,     0,     0,     0,     0, -1459,     0,
    2082,  2083,  1063, -1459,     0,     0,     0,     0, -1459,  1063,
    1160,     0,     0,   467,     0,     0,     0,     0,     0, -1459,
       0,     0, -1459,     0,     0,     0,     0,     0,     0,  2123,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1552,     0,     0,  1393,
    1394, -1459,  2136,  1152,  1153,  1154,  1155,  1156,  1157,     0,
       0,     0,  1063,  1059,     0,     0,  1874,     0,     0,  2149,
   -1459,     0,  1063,     0,     0,     0,     0,     0,     0,     0,
    1061,     0,     0,  1885,  1885,     0,     0,     0,     0,  1160,
       0,  2197,     0,     0,  1160,     0,     0,     0,     0,     0,
       0,     0,     0,  1059,  1062,     0,     0,     0,     0,     0,
       0,   -39,     0,     0,     0,     0,     0,     0,     0, -1459,
    1061,     0, -1459,     0,     0,     0,     0,     0, -1459,     0,
       1,  1066,     0,  1059,     0,     0,  1059,     0,     0,     0,
       2,     0,     3,     4,  1062,     0,     0,     0,     0,     0,
    1061,     0,     0,  1061,     0,     0,     0,     0,     5,     0,
       0,  1066,     0,     0,  1066,     0,     0,     6,     0,     0,
       0,     0,     0,     0,  1062,     0,     0,  1062,     0,     7,
       0,     0,     0,     0,  2245,  1063, -1459,     0,     0,     0,
       8,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     9,     0,    10,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1473,     0,     0,
       0,    11,     0,     0,     0,  1063,  2254,  2255,     0,     0,
       0,  2256,     0,     0,     0,    12,  2259,     0,     0,  2262,
    2263,  1853,     0,     0,  2267,     0,    13,     0,     0,     0,
       0,  2013,  2015,    14,     0,  1063,     0,     0,  1063,     0,
       0,    15,     0,    16,    17,     0,     0, -1459,     0,     0,
       0,     0,     0,     0,     0, -1459,    18,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1459,     0, -1459, -1459,   746,     0,     0,     0,
    1160,     0,     0,   675,     0,    19,  1780,     0,     0, -1473,
       0,  1781,  1782,  1783,     0,     0,   675,     0,     0,  1780,
       0,     0,  1160,     0,  1781,  1782,  1783,  1463,  2068,     0,
    1059, -1459,  2353,     0, -1459, -1459, -1459,     0,  1160,  1160,
    1160,  2260,  1160,     0,    20,     0,     0,  1061,     0,     0,
       0,     0,  1127,     0,     0,  1128,     0,     0,  2197,     0,
    1129,  1130,  1131, -1473,     0,  1126,     0,     0,     0,     0,
    1127,  1062,     0,  1128,     0,     0, -1473,  1132,  1129,  1130,
    1131, -1473,     0,     0,     0,  1134, -1473,     0,     0,     0,
       0,  1160,  1135,     0,     0,  1132,     0, -1473,  1133,     0,
   -1473,     0,     0,  1134,     0,     0,     0,     0,     0,     0,
    1135,     0,     0,     0,     0,     0,     0,  1136,     0,  2408,
    2409,    21,     0,  2410,    22,     0,     0,  1160,     0, -1473,
       0,     0,     0,     0,     0,  1136,     0,     0,     0,  1160,
       0,     0,     0,     0,  1160,     0,     0,     0, -1473,     0,
       0,     0,  1063,     0,  1016,    23,     0,     0,     0,     0,
    2443,  2444,     0,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2457,     0,    25,     0,     0,
       0,     0,     0,     0,    26,     0,     0,     0,    27,     0,
       0,     0,     0,     0,     0,     0,     0, -1473,     0,    28,
   -1473,     0,     0,     0,     0,     0, -1473,     0,     0,     0,
       0,  1785,     0,    29,     0,  2241,     0,     0,  1137,     0,
       0,     0,     0,     0,  1785,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1138,     0,  1137,     0,     0,  1139,
       0,     0,     0,     0,     0,     0,     0,     0,    30,     0,
       0,     0,  1138,    31,     0,     0,     0,  1139,     0,     0,
    1140,  1141,     0,     0, -1473,     0,     0,    32,     0,     0,
       0,     0,     0,     0,  1142,     0,     0,     0,  1140,  1141,
    1786,     0,     0,     0,     0,     0,  2538,     0,     0,     0,
       0,    33,  1142,  1786,     0,     0,     0,     0,  1117,     0,
       0,     0,     0,     0,     0,    34,     0,     0,   -39,     0,
    2557,     0,  1143,   675,     0,  1144,  1780,     0,     0,  1853,
       0,  1781,  1782,  1783,  2571,     0,     0,     0,     0,  1145,
    1143,     0,  1146,  1144,     0,     0,     0,     0,  2261,     0,
       0,  1160,     0,     0,     0, -1473,     0,  1145,     0,     0,
    1146,     0,     0, -1473,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1160,     0,     0,     0,     0,     0,
   -1473,     0, -1473, -1473,     0,     0,     0,  1016,     0,     0,
       0,  1160,  1016,  1463,  1463,     0,  1796,     0,  1463,     0,
       0,     0,     0,  1160,     0,     0,  1354,  1356,     0,     0,
    1160,     0,     0,     0,     0,  1160,     0,  2443,     0, -1473,
       0,  1160, -1473, -1473, -1473,  1160,  1160,  1160,  1160,     0,
       0,     0,  1147,     0,  1463,  1463,     0,  1160,  1160,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2639,  1160,
    1147,     0,  1160,     0,     0,     0,     0,     0,     0,     0,
    1160,  1160,  1160,  1160,  1160,  1160,  1160,  1160,  1160,  1160,
       0,     0,  2656,  2656,     0,     0,     0,  1160,     0,     0,
       0,  1160,     0,     0,     0,     0,  1787,  1788,  1789,     0,
    1790,  1791,  1792,  1793,  1794,  1795,     0,     0,     0,  1787,
    1788,  1789,  1160,  1790,  1791,  1792,  1793,  1794,  1795,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2656,     0,     0,     0,     0,     0,     0,     0,
       0,  1785,  1148,     0,     0,  1149,  1150,  1151,     0,  1152,
    1153,  1154,  1155,  1156,  1157,     0,     0,     0,     0,  1483,
    1148,     0,     0,  1149,  1150,  1151,     0,  1152,  1153,  1154,
    1155,  1156,  1157,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1354,  1356,     0,     0,     0,     0,     0,     0,
       0,  1016,     0,     0,     0,     0,     0,     0,     0,     0,
    2656,     0,     0,  1422,     0,   533,     0,     0,     0,  1127,
    1786,     0,  1128,     0,     0,     0,     0,  1129,  1130,  1131,
       0,     0,     0,  1160,  1160,  1160,     0,     0,     0,     0,
       0,     0,     0,     0,  1132,     0,     0,  1127,     0,     0,
    1128,     0,  1134,     0,     0,  1129,  1130,  1131,     0,  1135,
       0,     0,     0,     0,     0,  1127,     0,     0,  1128,     0,
       0,  1160,  1132,  1129,  1130,  1131,     0,     0,     0,     0,
    1134,     0,     0,     0,  1136,     0,     0,  1135,     0,     0,
    1132,     0,     0,     0,     0,     0,     0,     0,  1134,     0,
       0,     0,     0,     0,     0,  1135,     0,     0,     0,     0,
       0,  1160,  1136,     0,     0,     0,     0,  1160,  1379,  1380,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1136,     0,  1796,  1796,  1160,     0,  1463,  1463,  1463,  1463,
       0,     0,  1463,  1463,  1463,  1463,  1463,  1463,  1463,  1463,
    1463,  1463,  1796,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1160,     0,     0,     0,  1796,  1796,     0,     0,
       0,     0,     0,     0,     0,  1137,     0,     0,     0,     0,
    1160,  1463,  1463,  1160,     0,  1160,  1381,  1382,     0,     0,
       0,  1138,     0,     0,     0,     0,  1139,     0,     0,     0,
       0,     0,     0,  1137,     0,     0,  1787,  1788,  1789,     0,
    1790,  1791,  1792,  1793,  1794,  1795,     0,  1140,  1141,  1138,
       0,  1137,     0,     0,  1139,     0,     0,     0,     0,     0,
       0,  1142,     0,     0,     0,     0,     0,  1138,     0,     0,
       0,     0,  1139,     0,     0,  1140,  1141,  1383,  1384,  1385,
    1386,  1387,  1388,     0,     0,  1389,  1390,  1160,  1016,  1142,
       0,     0,     0,  1140,  1141,     0,     0,     0,     0,  1143,
       0,     0,  1144,     0,     0,     0,     0,  1142,     0,     0,
       0,     0,     0,     0,     0,     0,  1145,     0,     0,  1146,
       0,     0,     0,     0,     0,     0,     0,  1143,     0,     0,
    1144,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1145,  1143,     0,  1146,  1144,     0,
       0,   822,     0,   822,     0,     0,     0,   823,     0,   823,
       0,     0,  1145,     0,   835,  1146,   835,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   836,     0,   836,     0,     0,     0,     0,
       0,     0,     0,  1391,  1392,     0,     0,     0,     0,     0,
       0,  1160,     0,     0,     0,  1160,  1160,     0,  1160,  1147,
       0,  1796,  1796,  1796,  1796,     0,     0,     0,  1796,  1796,
    1796,  1796,  1796,  1796,  1796,  1796,  1796,  1796,  1160,  1160,
       0,     0,     0,   837,     0,   837,     0,  1147,     0,     0,
       0,  1160,     0,     0,  1160,     0,  1160,     0,     0,     0,
    1160,     0,     0,  1796,  1796,  1147,     0,  1160,  1160,     0,
       0,     0,     0,   824,     0,   824,     0,     0,     0,     0,
    1127,     0,     0,  1128,     0,     0,     0,     0,  1129,  1130,
    1131,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1132,     0,     0,  1160,     0,
       0,     0,     0,  1134,  1393,  1394,     0,     0,     0,  1148,
    1135,  1160,  1149,  1150,  1151,     0,  1152,  1153,  1154,  1155,
    1156,  1157,     0,     0,  1160,   838,  1819,   838,     0,     0,
       0,     0,     0,     0,     0,  1136,   494,  1148,     0,     0,
    1149,  1150,  1151,     0,  1152,  1153,  1154,  1155,  1156,  1157,
       0,     0,     0,     0,  2029,  1148,     0,     0,  1149,  1150,
    1151,     0,  1152,  1153,  1154,  1155,  1156,  1157,     0,     0,
       0,     0,  2064,   839,     0,   839,     0,     0,     0,     0,
       0,   840,     0,   840,     0,     0,     0,     0,     0,   495,
       0,     0,     0,   841,     0,   841,     0,     0,     0,     0,
       0,     0,     0,     0,   496,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   825,     0,   825,     0,     0,
    1160,     0,     0,     0,  1463,   842,     0,   842,     0,  1160,
    1160,  1160,     0,     0,  1160,     0,  1137,  1160,  1160,     0,
       0,     0,  1160,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1138,     0,     0,     0,     0,  1139,     0,     0,
     497,     0,     0,     0,     0,     0,     0,     0,   843,   498,
    1649,     0,   827,   844,   827,   844,     0,     0,  1140,  1141,
       0,   499,     0,     0,     0,     0,   500,     0,     0,     0,
       0,     0,  1142,     0,     0,   845,     0,   845,     0,     0,
       0,   846,     0,  1650,     0,     0,     0,     0,     0,     0,
    1463,     0,     0,   501,     0,     0,   847,     0,   847,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1160,     0,
    1143,     0,     0,  1144,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1145,     0,     0,
    1146,     0,     0,     0,     0,     0,   502,     0,     0,   503,
       0,     0,     0,     0,     0,     0,     0,   829,     0,   829,
       0,     0,     0,     0,     0,     0,     0,     0,  1796,  1463,
       0,     0,     0,  1160,  1160,  1160,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1160,  1160,
       0,     0,     0,   504,     0,     0,     0,     0,     0,     0,
       0,     0,  1160,     0,     0,     0,     0,     0,     0,   505,
    1147,     0,     0,  1796,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   506,     0,     0,   507,     0,     0,     0,     0,     0,
       0,     0,   508,     0,     0,   509,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1796,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   510,     0,     0,     0,     0,
       0,     0,     0,  1160,     0,     0,     0,   511,     0,     0,
       0,     0,     0,     0,   512,     0,     0,     0,     0,     0,
       0,     0,  1160,   513,     0,     0,     0,     0,     0,     0,
    1148,     0,     0,  1149,  1150,  1151,  1160,  1152,  1153,  1154,
    1155,  1156,  1157,     0,     0,     0,     0,  2151,     0,     0,
       0,     0,     0,     0,   514,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    90,   672,   533,   673,   674,   675,   676,   677,     0,
       0,     0,     0,     0,     0,     0,     0,    91,    92,    93,
      94,    95,    96,    97,    98,   859,    99,   100,   101,     0,
       0,     0,     0,     0,  1160,     0,   102,   103,     0,   104,
     105,   106,   107,   108,   109,   110,   111,   678,   113,   679,
     680,  1160,   116,   117,   118,   119,   120,   121,   681,   682,
     122,   123,   683,   684,   126,     0,   127,   128,   129,   130,
     685,     0,   686,     0,   133,   134,   135,   136,   137,   138,
     139,   140,   141,     0,   142,   143,   144,   145,   146,   147,
       0,   148,   149,   150,   151,   687,   688,   689,   690,   691,
     692,   693,   153,   154,   155,   156,   157,   158,   159,   694,
     695,   162,   696,   163,     0,   164,   165,   166,   167,   168,
     169,     0,   170,     0,   171,   172,   173,   174,   860,     0,
     175,   176,   697,   178,   179,     0,     0,   180,   181,   182,
       0,   183,   184,   185,     0,   186,   187,   188,   189,   698,
     191,   192,   193,   194,   699,   700,   196,     0,   197,   198,
     701,   200,     0,   201,     0,   202,   203,     0,   204,   205,
     206,   207,   208,   209,     0,   210,     0,     0,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,   230,   231,   232,   233,   234,   235,   236,   702,   703,
       0,   704,     0,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,     0,     0,   250,   251,   252,   253,     0,
     254,   255,   256,   705,   706,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   707,   281,
     708,   283,   284,   285,     0,   286,   709,   287,   288,   289,
     290,   710,   711,   292,   712,   294,   295,   296,     0,   297,
     298,     0,     0,   713,   300,   301,     0,     0,   302,   303,
     304,   305,   306,   714,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,     0,   318,   319,   715,   321,   322,
     323,   324,   325,   326,     0,   327,   328,   329,   330,   331,
       0,     0,   332,   333,   334,   335,   716,   337,   338,   339,
     340,     0,   341,   342,   343,     0,   344,   345,   346,   347,
     348,   349,   350,   351,   352,     0,   353,   354,   355,   356,
     357,   358,   717,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,     0,   371,   372,   373,   374,   375,
     718,   376,   377,   378,   379,   380,   381,   382,   383,   719,
     385,     0,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   720,     0,   400,   401,
       0,   402,   403,   404,   405,   406,   407,   408,     0,   721,
     722,     0,     0,   411,   412,   723,   414,   724,   725,   416,
     417,   418,   419,   420,   421,   422,     0,     0,   423,   424,
     425,   426,   427,   726,     0,   428,   429,   430,   431,   432,
     433,   727,   861,   435,   436,   437,     0,   438,   439,   440,
       0,     0,   441,     0,     0,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   728,     0,     0,     0,
       0,     0,     0,   729,   730,   862,     0,     0,     0,     0,
       0,     0,   732,   863,     0,     0,     0,   733,    90,   672,
     533,   673,   674,   675,   676,   677,     0,     0,     0,     0,
       0,     0,     0,     0,    91,    92,    93,    94,    95,    96,
      97,    98,     0,    99,   100,   101,     0,     0,     0,     0,
       0,     0,     0,   102,   103,     0,   104,   105,   106,   107,
     108,   109,   110,   111,   678,   113,   679,   680,     0,   116,
     117,   118,   119,   120,   121,   681,   682,   122,   123,   683,
     684,   126,     0,   127,   128,   129,   130,   685,     0,   686,
       0,   133,   134,   135,   136,   137,   138,   139,   140,   141,
       0,   142,   143,   144,   145,   146,   147,     0,   148,   149,
     150,   151,   687,   688,   689,   690,   691,   692,   693,   153,
     154,   155,   156,   157,   158,   159,   694,   695,   162,   696,
     163,     0,   164,   165,   166,   167,   168,   169,     0,   170,
       0,   171,   172,   173,   174,     0,     0,   175,   176,   697,
     178,   179,     0,     0,   180,   181,   182,     0,   183,   184,
     185,     0,   186,   187,   188,   189,   698,   191,   192,   193,
     194,   699,   700,   196,     0,   197,   198,   701,   200,     0,
     201,     0,   202,   203,     0,   204,   205,   206,   207,   208,
     209,     0,   210,     0,     0,     0,   211,   212,     0,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,     0,   230,   231,
     232,   233,   234,   235,   236,   702,   703,     0,   704,     0,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
       0,     0,   250,   251,   252,   253,     0,   254,   255,   256,
     705,   706,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   707,   281,   708,   283,   284,
     285,     0,   286,   709,   287,   288,   289,   290,   710,   711,
     292,   712,   294,   295,   296,     0,   297,   298,     0,     0,
     713,   300,   301,     0,     0,   302,   303,   304,   305,   306,
     714,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,     0,   318,   319,   715,   321,   322,   323,   324,   325,
     326,     0,   327,   328,   329,   330,   331,     0,     0,   332,
     333,   334,   335,   716,   337,   338,   339,   340,     0,   341,
     342,   343,     0,   344,   345,   346,   347,   348,   349,   350,
     351,   352,     0,   353,   354,   355,   356,   357,   358,   717,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,    25,   371,   372,   373,   374,   375,   718,   376,   377,
     378,   379,   380,   381,   382,   383,   719,   385,     0,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   720,     0,   400,   401,    29,   402,   403,
     404,   405,   406,   407,   408,     0,   721,   722,     0,     0,
     411,   412,   723,   414,   724,   725,   416,   417,   418,   419,
     420,   421,   422,     0,     0,   423,   424,   425,   426,   427,
     726,     0,   428,   429,   430,   431,   432,   581,   727,     0,
     435,   436,   437,     0,   438,   439,   440,     0,     0,   441,
       0,    32,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   728,     0,    33,     0,     0,     0,     0,
     729,   730,     0,     0,     0,     0,     0,     0,     0,   732,
    2547,     0,     0,     0,   733,    90,   672,   533,   673,   674,
     675,   676,   677,     0,     0,     0,     0,     0,     0,     0,
       0,    91,    92,    93,    94,    95,    96,    97,    98,     0,
      99,   100,   101,     0,     0,     0,     0,     0,     0,     0,
     102,   103,     0,   104,   105,   106,   107,   108,   109,   110,
     111,   678,   113,   679,   680,     0,   116,   117,   118,   119,
     120,   121,   681,   682,   122,   123,   683,   684,   126,     0,
     127,   128,   129,   130,   685,     0,   686,     0,   133,   134,
     135,   136,   137,   138,   139,   140,   141,     0,   142,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   687,
     688,   689,   690,   691,   692,   693,   153,   154,   155,   156,
     157,   158,   159,   694,   695,   162,   696,   163,     0,   164,
     165,   166,   167,   168,   169,     0,   170,     0,   171,   172,
     173,   174,     0,     0,   175,   176,   697,   178,   179,     0,
       0,   180,   181,   182,     0,   183,   184,   185,     0,   186,
     187,   188,   189,   698,   191,   192,   193,   194,   699,   700,
     196,     0,   197,   198,   701,   200,     0,   201,     0,   202,
     203,     0,   204,   205,   206,   207,   208,   209,     0,   210,
       0,     0,     0,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,   225,
     226,   227,   228,   229,     0,   230,   231,   232,   233,   234,
     235,   236,   702,   703,     0,   704,     0,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,     0,     0,   250,
     251,   252,   253,     0,   254,   255,   256,   705,   706,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   707,   281,   708,   283,   284,   285,     0,   286,
     709,   287,   288,   289,   290,   710,   711,   292,   712,   294,
     295,   296,     0,   297,   298,     0,     0,   713,   300,   301,
       0,     0,   302,   303,   304,   305,   306,   714,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,     0,   318,
     319,   715,   321,   322,   323,   324,   325,   326,     0,   327,
     328,   329,   330,   331,     0,     0,   332,   333,   334,   335,
     716,   337,   338,   339,   340,     0,   341,   342,   343,     0,
     344,   345,   346,   347,   348,   349,   350,   351,   352,     0,
     353,   354,   355,   356,   357,   358,   717,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    25,   371,
     372,   373,   374,   375,   718,   376,   377,   378,   379,   380,
     381,   382,   383,   719,   385,     0,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     720,     0,   400,   401,    29,   402,   403,   404,   405,   406,
     407,   408,     0,   721,   722,     0,     0,   411,   412,   723,
     414,   724,   725,   416,   417,   418,   419,   420,   421,   422,
       0,     0,   423,   424,   425,   426,   427,   726,     0,   428,
     429,   430,   431,   432,   581,   727,     0,   435,   436,   437,
       0,   438,   439,   440,     0,     0,   441,     0,    32,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     728,     0,    33,     0,     0,     0,     0,   729,   730,     0,
       0,     0,     0,     0,     0,     0,   732,     0,     0,     0,
       0,   733,    90,   672,   533,   673,   674,   675,   676,   677,
       0,     0,     0,     0,     0,     0,     0,     0,    91,    92,
      93,    94,    95,    96,    97,    98,     0,    99,   100,   101,
       0,     0,     0,     0,     0,     0,     0,   102,   103,     0,
     104,   105,   106,   107,   108,   109,   110,   111,   678,   113,
     679,   680,  1476,   116,   117,   118,   119,   120,   121,   681,
     682,   122,   123,   683,   684,   126,     0,   127,   128,   129,
     130,   685,     0,   686,     0,   133,   134,   135,   136,   137,
     138,   139,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,   148,   149,   150,   151,   687,   688,   689,   690,
     691,   692,   693,   153,   154,   155,   156,   157,   158,   159,
     694,   695,   162,   696,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,     0,   171,   172,   173,   174,     0,
       0,   175,   176,   697,   178,   179,     0,     0,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,   189,
     698,   191,   192,   193,   194,   699,   700,   196,     0,   197,
     198,   701,   200,     0,   201,     0,   202,   203,  1477,   204,
     205,   206,   207,   208,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,   231,   232,   233,   234,   235,   236,   702,
     703,     0,   704,     0,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,     0,  1478,   250,   251,   252,   253,
       0,   254,   255,   256,   705,   706,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   707,
     281,   708,   283,   284,   285,     0,   286,   709,   287,   288,
     289,   290,   710,   711,   292,   712,   294,   295,   296,     0,
     297,   298,     0,     0,   713,   300,   301,     0,     0,   302,
     303,   304,   305,   306,   714,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,     0,   318,   319,   715,   321,
     322,   323,   324,   325,   326,     0,   327,   328,   329,   330,
     331,     0,     0,   332,   333,   334,   335,   716,   337,   338,
     339,   340,     0,   341,   342,   343,     0,   344,   345,   346,
     347,   348,   349,   350,   351,   352,     0,   353,   354,   355,
     356,   357,   358,   717,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,     0,   371,   372,   373,   374,
     375,   718,   376,   377,   378,   379,   380,   381,   382,   383,
     719,   385,     0,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   720,     0,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,     0,
     721,   722,     0,  1479,   411,   412,   723,   414,   724,   725,
     416,   417,   418,   419,   420,   421,   422,     0,     0,   423,
     424,   425,   426,   427,   726,     0,   428,   429,   430,   431,
     432,   433,   727,     0,   435,   436,   437,     0,   438,   439,
     440,     0,     0,   441,     0,     0,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   728,     0,     0,
       0,     0,     0,     0,   729,   730,     0,     0,     0,     0,
       0,     0,     0,   732,     0,     0,     0,     0,   733,    90,
     672,   533,   673,   674,   675,   676,   677,     0,     0,     0,
       0,     0,     0,     0,     0,    91,    92,    93,    94,    95,
      96,    97,    98,     0,    99,   100,   101,     0,     0,     0,
       0,     0,     0,     0,   102,   103,     0,   104,   105,   106,
     107,   108,   109,   110,   111,   678,   113,   679,   680,     0,
     116,   117,   118,   119,   120,   121,   681,   682,   122,   123,
     683,   684,   126,     0,   127,   128,   129,   130,   685,     0,
     686,     0,   133,   134,   135,   136,   137,   138,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,   148,
     149,   150,   151,   687,   688,   689,   690,   691,   692,   693,
     153,   154,   155,   156,   157,   158,   159,   694,   695,   162,
     696,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     697,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   698,   191,   192,
     193,   194,   699,   700,   196,     0,   197,   198,   701,   200,
       0,   201,     0,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
     231,   232,   233,   234,   235,   236,   702,   703,     0,   704,
       0,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,     0,     0,   250,   251,   252,   253,     0,   254,   255,
     256,   705,   706,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   707,   281,   708,   283,
     284,   285,     0,   286,   709,   287,   288,   289,   290,   710,
     711,   292,   712,   294,   295,   296,     0,   297,   298,     0,
       0,   713,   300,   301,     0,     0,   302,   303,   304,   305,
     306,   714,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,     0,   318,   319,   715,   321,   322,   323,   324,
     325,   326,     0,   327,   328,   329,   330,   331,     0,     0,
     332,   333,   334,   335,   716,   337,   338,   339,   340,     0,
     341,   342,   343,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,     0,   353,   354,   355,   356,   357,   358,
     717,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,   718,   376,
     377,   378,   379,   380,   381,   382,   383,   719,   385,     0,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   720,     0,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,     0,   721,   722,     0,
       0,   411,   412,   723,   414,   724,   725,   416,   417,   418,
     419,   420,   421,   422,     0,     0,   423,   424,   425,   426,
     427,   726,     0,   428,   429,   430,   431,   432,   433,   727,
       0,   435,   436,   437,     0,   438,   439,   440,     0,     0,
     441,     0,     0,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   728,     0,     0,     0,     0,     0,
       0,   729,   730,   731,     0,     0,     0,     0,     0,     0,
     732,     0,     0,     0,     0,   733,    90,   672,   533,   673,
     674,   675,   676,   677,     0,     0,     0,     0,     0,     0,
       0,     0,    91,    92,    93,    94,    95,    96,    97,    98,
    1212,    99,   100,   101,     0,     0,     0,     0,     0,     0,
       0,   102,   103,     0,   104,   105,   106,   107,   108,   109,
     110,   111,   678,   113,   679,   680,     0,   116,   117,   118,
     119,   120,   121,   681,   682,   122,   123,   683,   684,   126,
       0,   127,   128,   129,   130,   685,     0,   686,     0,   133,
     134,   135,   136,   137,   138,   139,   140,   141,     0,   142,
     143,   144,   145,   146,   147,     0,   148,   149,   150,   151,
     687,   688,   689,   690,   691,   692,   693,   153,   154,   155,
     156,   157,   158,   159,   694,   695,   162,   696,   163,     0,
     164,   165,   166,   167,   168,   169,     0,   170,     0,   171,
     172,   173,   174,     0,     0,   175,   176,   697,   178,   179,
       0,     0,   180,   181,   182,     0,   183,   184,   185,     0,
     186,   187,   188,   189,   698,   191,   192,   193,   194,   699,
     700,   196,     0,   197,   198,   701,   200,     0,   201,     0,
     202,   203,     0,   204,   205,   206,   207,   208,   209,     0,
     210,     0,     0,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,   230,   231,   232,   233,
     234,   235,   236,   702,   703,     0,   704,     0,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,     0,     0,
     250,   251,   252,   253,     0,   254,   255,   256,   705,   706,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   707,   281,   708,   283,   284,   285,     0,
     286,   709,   287,   288,   289,   290,   710,   711,   292,   712,
     294,   295,   296,     0,   297,   298,     0,     0,   713,   300,
     301,     0,     0,   302,   303,   304,   305,   306,   714,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     318,   319,   715,   321,   322,   323,   324,   325,   326,     0,
     327,   328,   329,   330,   331,     0,     0,   332,   333,   334,
     335,   716,   337,   338,   339,   340,     0,   341,   342,   343,
       0,   344,   345,   346,   347,   348,   349,   350,   351,   352,
       0,   353,   354,   355,   356,   357,   358,   717,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,     0,
     371,   372,   373,   374,   375,   718,   376,   377,   378,   379,
     380,   381,   382,   383,   719,   385,     0,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   720,     0,   400,   401,     0,   402,   403,   404,   405,
     406,   407,   408,     0,   721,   722,     0,     0,   411,   412,
     723,   414,   724,   725,   416,   417,   418,   419,   420,   421,
     422,     0,     0,   423,   424,   425,   426,   427,   726,     0,
     428,   429,   430,   431,   432,   433,   727,     0,   435,   436,
     437,     0,   438,   439,   440,     0,     0,   441,     0,     0,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   728,     0,     0,     0,     0,     0,     0,   729,   730,
       0,     0,     0,     0,     0,     0,     0,   732,     0,     0,
       0,     0,   733,    90,   672,   533,   673,   674,   675,   676,
     677,     0,     0,     0,     0,     0,     0,     0,     0,    91,
      92,    93,    94,    95,    96,    97,    98,     0,    99,   100,
     101,     0,     0,     0,     0,     0,     0,     0,   102,   103,
       0,   104,   105,   106,   107,   108,   109,   110,   111,   678,
     113,   679,   680,     0,   116,   117,   118,   119,   120,   121,
     681,   682,   122,   123,   683,   684,   126,     0,   127,   128,
     129,   130,   685,     0,   686,     0,   133,   134,   135,   136,
     137,   138,   139,   140,   141,     0,   142,   143,   144,   145,
     146,   147,     0,   148,   149,   150,   151,   687,   688,   689,
     690,   691,   692,   693,   153,   154,   155,   156,   157,   158,
     159,   694,   695,   162,   696,   163,     0,   164,   165,   166,
     167,   168,   169,     0,   170,     0,   171,   172,   173,   174,
       0,     0,   175,   176,   697,   178,   179,     0,     0,   180,
     181,   182,     0,   183,   184,   185,     0,   186,   187,   188,
     189,   698,   191,   192,   193,   194,   699,   700,   196,     0,
     197,   198,   701,   200,     0,   201,     0,   202,   203,     0,
     204,   205,   206,   207,   208,   209,     0,   210,     0,     0,
       0,   211,   212,     0,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,     0,   224,   225,   226,   227,
     228,   229,     0,   230,   231,   232,   233,   234,   235,   236,
     702,   703,     0,   704,     0,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,     0,     0,   250,   251,   252,
     253,     0,   254,   255,   256,   705,   706,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     707,   281,   708,   283,   284,   285,     0,   286,   709,   287,
     288,   289,   290,   710,   711,   292,   712,   294,   295,   296,
       0,   297,   298,     0,     0,   713,   300,   301,     0,     0,
     302,   303,   304,   305,   306,   714,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,     0,   318,   319,   715,
     321,   322,   323,   324,   325,   326,     0,   327,   328,   329,
     330,   331,     0,     0,   332,   333,   334,   335,   716,   337,
     338,   339,   340,     0,   341,   342,   343,     0,   344,   345,
     346,   347,   348,   349,   350,   351,   352,     0,   353,   354,
     355,   356,   357,   358,   717,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,     0,   371,   372,   373,
     374,   375,   718,   376,   377,   378,   379,   380,   381,   382,
     383,   719,   385,     0,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   720,     0,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
       0,   721,   722,     0,     0,   411,   412,   723,   414,   724,
     725,   416,   417,   418,   419,   420,   421,   422,     0,     0,
     423,   424,   425,   426,   427,   726,     0,   428,   429,   430,
     431,   432,   433,   727,     0,   435,   436,   437,     0,   438,
     439,   440,     0,     0,   441,     0,     0,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   728,     0,
       0,     0,     0,     0,     0,   729,   730,     0,     0,     0,
       0,     0,     0,     0,   732,  1336,     0,     0,     0,   733,
      90,   672,   533,   673,   674,   675,   676,   677,     0,     0,
       0,     0,     0,     0,     0,     0,    91,    92,    93,    94,
      95,    96,    97,    98,     0,    99,   100,   101,     0,     0,
       0,     0,     0,     0,     0,   102,   103,     0,   104,   105,
     106,   107,   108,   109,   110,   111,   678,   113,   679,   680,
       0,   116,   117,   118,   119,   120,   121,   681,   682,   122,
     123,   683,   684,   126,     0,   127,   128,   129,   130,   685,
       0,   686,     0,   133,   134,   135,   136,   137,   138,   139,
     140,   141,     0,   142,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   687,   688,   689,   690,   691,   692,
     693,   153,   154,   155,   156,   157,   158,   159,   694,   695,
     162,   696,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,     0,   171,   172,   173,   174,     0,     0,   175,
     176,   697,   178,   179,     0,     0,   180,   181,   182,     0,
     183,   184,   185,     0,   186,   187,   188,   189,   698,   191,
     192,   193,   194,   699,   700,   196,     0,   197,   198,   701,
     200,     0,   201,     0,   202,   203,     0,   204,   205,   206,
     207,   208,   209,     0,   210,     0,     0,     0,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,   225,   226,   227,   228,   229,     0,
     230,   231,   232,   233,   234,   235,   236,   702,   703,     0,
     704,     0,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,     0,     0,   250,   251,   252,   253,     0,   254,
     255,   256,   705,   706,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   707,   281,   708,
     283,   284,   285,     0,   286,   709,   287,   288,   289,   290,
     710,   711,   292,   712,   294,   295,   296,     0,   297,   298,
       0,     0,   713,   300,   301,     0,     0,   302,   303,   304,
     305,   306,   714,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,     0,   318,   319,   715,   321,   322,   323,
     324,   325,   326,     0,   327,   328,   329,   330,   331,     0,
       0,   332,   333,   334,   335,   716,   337,   338,   339,   340,
       0,   341,   342,   343,     0,   344,   345,   346,   347,   348,
     349,   350,   351,   352,     0,   353,   354,   355,   356,   357,
     358,   717,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,     0,   371,   372,   373,   374,   375,   718,
     376,   377,   378,   379,   380,   381,   382,   383,   719,   385,
       0,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   720,     0,   400,   401,     0,
     402,   403,   404,   405,   406,   407,   408,     0,   721,   722,
       0,     0,   411,   412,   723,   414,   724,   725,   416,   417,
     418,   419,   420,   421,   422,     0,     0,   423,   424,   425,
     426,   427,   726,     0,   428,   429,   430,   431,   432,   433,
     727,     0,   435,   436,   437,     0,   438,   439,   440,     0,
       0,   441,     0,     0,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   728,     0,     0,     0,     0,
       0,     0,   729,   730,     0,     0,     0,     0,     0,     0,
       0,   732,  1466,     0,     0,     0,   733,    90,   672,   533,
     673,   674,   675,   676,   677,     0,     0,     0,     0,     0,
       0,     0,     0,    91,    92,    93,    94,    95,    96,    97,
      98,     0,    99,   100,   101,     0,     0,     0,     0,     0,
       0,     0,   102,   103,     0,   104,   105,   106,   107,   108,
     109,   110,   111,   678,   113,   679,   680,     0,   116,   117,
     118,   119,   120,   121,   681,   682,   122,   123,   683,   684,
     126,     0,   127,   128,   129,   130,   685,     0,   686,     0,
     133,   134,   135,   136,   137,   138,   139,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,   148,   149,   150,
     151,   687,   688,   689,   690,   691,   692,   693,   153,   154,
     155,   156,   157,   158,   159,   694,   695,   162,   696,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,     0,
     171,   172,   173,   174,     0,     0,   175,   176,   697,   178,
     179,     0,     0,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,   189,   698,   191,   192,   193,   194,
     699,   700,   196,     0,   197,   198,   701,   200,     0,   201,
       0,   202,   203,     0,   204,   205,   206,   207,   208,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,   231,   232,
     233,   234,   235,   236,   702,   703,     0,   704,     0,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,     0,
       0,   250,   251,   252,   253,     0,   254,   255,   256,   705,
     706,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   707,   281,   708,   283,   284,   285,
       0,   286,   709,   287,   288,   289,   290,   710,   711,   292,
     712,   294,   295,   296,     0,   297,   298,     0,     0,   713,
     300,   301,     0,     0,   302,   303,   304,   305,   306,   714,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
       0,   318,   319,   715,   321,   322,   323,   324,   325,   326,
       0,   327,   328,   329,   330,   331,     0,     0,   332,   333,
     334,   335,   716,   337,   338,   339,   340,     0,   341,   342,
     343,     0,   344,   345,   346,   347,   348,   349,   350,   351,
     352,     0,   353,   354,   355,   356,   357,   358,   717,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
       0,   371,   372,   373,   374,   375,   718,   376,   377,   378,
     379,   380,   381,   382,   383,   719,   385,     0,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   720,     0,   400,   401,     0,   402,   403,   404,
     405,   406,   407,   408,     0,   721,   722,     0,     0,   411,
     412,   723,   414,   724,   725,   416,   417,   418,   419,   420,
     421,   422,     0,     0,   423,   424,   425,   426,   427,   726,
       0,   428,   429,   430,   431,   432,   433,   727,  1675,   435,
     436,   437,     0,   438,   439,   440,     0,     0,   441,     0,
       0,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   728,     0,     0,     0,     0,     0,     0,   729,
     730,     0,     0,     0,     0,     0,     0,     0,   732,     0,
       0,     0,     0,   733,    90,   672,   533,   673,   674,   675,
     676,   677,     0,     0,     0,     0,     0,     0,     0,     0,
      91,    92,    93,    94,    95,    96,    97,    98,     0,    99,
     100,   101,     0,     0,     0,     0,     0,     0,     0,   102,
     103,     0,   104,   105,   106,   107,   108,   109,   110,   111,
     678,   113,   679,   680,     0,   116,   117,   118,   119,   120,
     121,   681,   682,   122,   123,   683,   684,   126,     0,   127,
     128,   129,   130,   685,     0,   686,     0,   133,   134,   135,
     136,   137,   138,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,   148,   149,   150,   151,   687,   688,
     689,   690,   691,   692,   693,   153,   154,   155,   156,   157,
     158,   159,   694,   695,   162,   696,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   697,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   698,   191,   192,   193,   194,   699,   700,   196,
       0,   197,   198,   701,   200,     0,   201,     0,   202,   203,
    1477,   204,   205,   206,   207,   208,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
     236,   702,   703,     0,   704,     0,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,     0,     0,   250,   251,
     252,   253,     0,   254,   255,   256,   705,   706,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   707,   281,   708,   283,   284,   285,     0,   286,   709,
     287,   288,   289,   290,   710,   711,   292,   712,   294,   295,
     296,     0,   297,   298,     0,     0,   713,   300,   301,     0,
       0,   302,   303,   304,   305,   306,   714,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,     0,   318,   319,
     715,   321,   322,   323,   324,   325,   326,     0,   327,   328,
     329,   330,   331,     0,     0,   332,   333,   334,   335,   716,
     337,   338,   339,   340,     0,   341,   342,   343,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,     0,   353,
     354,   355,   356,   357,   358,   717,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,   718,   376,   377,   378,   379,   380,   381,
     382,   383,   719,   385,     0,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   720,
       0,   400,   401,     0,   402,   403,   404,   405,   406,   407,
     408,     0,   721,   722,     0,     0,   411,   412,   723,   414,
     724,   725,   416,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,   427,   726,     0,   428,   429,
     430,   431,   432,   433,   727,     0,   435,   436,   437,     0,
     438,   439,   440,     0,     0,   441,     0,     0,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   728,
       0,     0,     0,     0,     0,     0,   729,   730,     0,     0,
       0,     0,     0,     0,     0,   732,     0,     0,     0,     0,
     733,    90,   672,   533,   673,   674,   675,   676,   677,     0,
       0,     0,     0,     0,     0,     0,     0,    91,    92,    93,
      94,    95,    96,    97,    98,     0,    99,   100,   101,     0,
       0,     0,     0,     0,     0,     0,   102,   103,     0,   104,
     105,   106,   107,   108,   109,   110,   111,   678,   113,   679,
     680,     0,   116,   117,   118,   119,   120,   121,   681,   682,
     122,   123,   683,   684,   126,     0,   127,   128,   129,   130,
     685,     0,   686,     0,   133,   134,   135,   136,   137,   138,
     139,   140,   141,     0,   142,   143,   144,   145,   146,   147,
       0,   148,   149,   150,   151,   687,   688,   689,   690,   691,
     692,   693,   153,   154,   155,   156,   157,   158,   159,   694,
     695,   162,   696,   163,     0,   164,   165,   166,   167,   168,
     169,     0,   170,     0,   171,   172,   173,   174,     0,     0,
     175,   176,   697,   178,   179,     0,     0,   180,   181,   182,
       0,   183,   184,   185,     0,   186,   187,   188,   189,   698,
     191,   192,   193,   194,   699,   700,   196,     0,   197,   198,
     701,   200,     0,   201,     0,   202,   203,     0,   204,   205,
     206,   207,   208,   209,     0,   210,     0,     0,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,   230,   231,   232,   233,   234,   235,   236,   702,   703,
       0,   704,     0,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,     0,     0,   250,   251,   252,   253,     0,
     254,   255,   256,   705,   706,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   707,   281,
     708,   283,   284,   285,     0,   286,   709,   287,   288,   289,
     290,   710,   711,   292,   712,   294,   295,   296,     0,   297,
     298,     0,     0,   713,   300,   301,     0,     0,   302,   303,
     304,   305,   306,   714,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,     0,   318,   319,   715,   321,   322,
     323,   324,   325,   326,     0,   327,   328,   329,   330,   331,
       0,     0,   332,   333,   334,   335,   716,   337,   338,   339,
     340,     0,   341,   342,   343,     0,   344,   345,   346,   347,
     348,   349,   350,   351,   352,     0,   353,   354,   355,   356,
     357,   358,   717,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,     0,   371,   372,   373,   374,   375,
     718,   376,   377,   378,   379,   380,   381,   382,   383,   719,
     385,     0,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   720,     0,   400,   401,
       0,   402,   403,   404,   405,   406,   407,   408,     0,   721,
     722,     0,     0,   411,   412,   723,   414,   724,   725,   416,
     417,   418,   419,   420,   421,   422,     0,     0,   423,   424,
     425,   426,   427,   726,     0,   428,   429,   430,   431,   432,
     433,   727,     0,   435,   436,   437,     0,   438,   439,   440,
       0,     0,   441,     0,     0,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   728,     0,     0,     0,
       0,     0,     0,   729,   730,     0,     0,     0,     0,     0,
       0,     0,   732,     0,     0,     0,     0,   733,    90,   672,
     533,   673,   674,   675,   676,   677,     0,     0,     0,     0,
       0,     0,     0,     0,    91,    92,    93,    94,    95,    96,
      97,    98,     0,    99,   100,   101,     0,     0,     0,     0,
       0,     0,     0,   102,   103,     0,   104,   105,   106,   107,
     108,   109,   110,   111,   678,   113,   679,   680,     0,   116,
     117,   118,   119,   120,   121,   681,   682,   122,   123,   683,
     684,   126,     0,   127,   128,   129,   130,   685,     0,   686,
       0,   133,   134,   135,   136,   137,   138,   139,   140,   141,
       0,   142,   143,   144,   145,   146,   147,     0,   148,   149,
     150,   151,   687,   688,   689,   690,   691,   692,   693,   153,
     154,   155,   156,   157,   158,   159,   694,   695,   162,   696,
     163,     0,   164,   165,   166,   167,   168,   169,     0,   170,
       0,   171,   172,   173,   174,     0,     0,   175,   176,   697,
     178,   179,     0,     0,   180,   181,   182,     0,   183,   184,
     185,     0,   186,   187,   188,   189,   698,   191,   192,   193,
     194,   699,   700,   196,     0,   197,   198,   701,   200,     0,
     201,     0,   202,   203,     0,   204,   205,   206,   207,   208,
     209,     0,   210,     0,     0,     0,   211,   212,     0,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,     0,   230,   231,
     232,   233,   234,   235,   236,   702,   703,     0,   704,     0,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
       0,     0,   250,   251,   252,   253,     0,   254,   255,   256,
     705,   706,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   707,   281,   708,   283,   284,
     285,     0,   286,   709,   287,   288,   289,   290,   710,   711,
     292,   712,   294,   295,   296,     0,   297,   298,     0,     0,
     713,   300,   301,     0,     0,   302,   303,   304,   305,   306,
     714,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,     0,   318,   319,   715,   321,   322,   323,   324,   325,
     326,     0,   327,   328,   329,   330,   331,     0,     0,   332,
     333,   334,   335,   716,   337,   338,   339,   340,     0,   341,
     342,   343,     0,   344,   345,   346,   347,   348,   349,   350,
     351,   352,     0,   353,   354,   355,   356,   357,   358,   717,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,     0,   371,   372,   373,   374,   375,   718,   376,   377,
     378,   379,   380,   381,   382,   383,   719,   385,     0,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   720,     0,   400,   401,     0,   402,   403,
     404,   405,   406,   407,   408,     0,   721,   722,     0,     0,
     411,   412,   723,   414,   724,   725,   416,   417,   418,   419,
     420,   421,   422,     0,     0,   423,   424,   425,   426,   427,
     726,     0,   428,   429,   430,   431,   432,   433,   727,     0,
     435,   436,   437,     0,   438,   439,   440,     0,     0,   441,
       0,     0,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   728,     0,     0,     0,     0,     0,     0,
    1215,  1216,     0,     0,     0,     0,     0,     0,     0,   732,
       0,     0,     0,     0,   733,    90,  1586,   533,   673,   674,
     675,   676,   677,     0,     0,     0,     0,     0,     0,     0,
       0,    91,    92,    93,    94,    95,    96,    97,    98,     0,
      99,   100,   101,     0,     0,     0,     0,     0,     0,     0,
     102,   103,     0,   104,   105,   106,   107,   108,   109,   110,
     111,   678,   113,   679,   680,     0,   116,   117,   118,   119,
     120,   121,   681,   682,   122,   123,   683,   684,   126,     0,
     127,   128,   129,   130,   685,     0,   686,     0,   133,   134,
     135,   136,   137,   138,   139,   140,   141,     0,   142,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   687,
     688,   689,   690,   691,   692,   693,   153,   154,   155,   156,
     157,   158,   159,   694,   695,   162,   696,   163,     0,   164,
     165,   166,   167,   168,   169,     0,   170,     0,   171,   172,
     173,   174,     0,     0,   175,   176,   697,   178,   179,     0,
       0,   180,   181,   182,     0,   183,   184,   185,     0,   186,
     187,   188,   189,   698,   191,   192,   193,   194,   699,   700,
     196,     0,   197,   198,   701,   200,     0,   201,     0,   202,
     203,     0,   204,   205,   206,   207,   208,   209,     0,   210,
       0,     0,     0,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,   225,
     226,   227,   228,   229,     0,   230,   231,   232,   233,   234,
     235,   236,   702,   703,     0,   704,     0,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,     0,     0,   250,
     251,   252,   253,     0,   254,   255,   256,   705,   706,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   707,   281,   708,   283,   284,   285,     0,   286,
     709,   287,   288,   289,   290,   710,   711,   292,   712,   294,
     295,   296,     0,   297,   298,     0,     0,   713,   300,   301,
       0,     0,   302,   303,   304,   305,   306,   714,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,     0,   318,
     319,   715,   321,   322,   323,   324,   325,   326,     0,   327,
     328,   329,   330,   331,     0,     0,   332,   333,   334,   335,
     716,   337,   338,   339,   340,     0,   341,   342,   343,     0,
     344,   345,   346,   347,   348,   349,   350,   351,   352,     0,
     353,   354,   355,   356,   357,   358,   717,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,     0,   371,
     372,   373,   374,   375,   718,   376,   377,   378,   379,   380,
     381,   382,   383,   719,   385,     0,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     720,     0,   400,   401,     0,   402,   403,   404,   405,   406,
     407,   408,     0,   721,   722,     0,     0,   411,   412,   723,
     414,   724,   725,   416,   417,   418,   419,   420,   421,   422,
       0,     0,   423,   424,   425,   426,   427,   726,     0,   428,
     429,   430,   431,   432,   433,   727,     0,   435,   436,   437,
       0,   438,   439,   440,     0,     0,   441,     0,     0,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     728,     0,     0,     0,     0,     0,     0,   729,   730,     0,
       0,     0,     0,     0,     0,     0,   732,     0,     0,     0,
       0,   733,    90,   672,   533,   673,   674,   675,   676,   677,
       0,     0,     0,     0,     0,     0,     0,     0,    91,    92,
      93,    94,    95,    96,    97,    98,     0,    99,   100,   101,
       0,     0,     0,     0,     0,     0,     0,   102,   103,     0,
     104,   105,   106,   107,   108,   109,   110,   111,   678,   113,
     679,   680,     0,   116,   117,   118,   119,   120,   121,   681,
     682,   122,   123,   683,   684,   126,     0,   127,   128,   129,
     130,   685,     0,   686,     0,   133,   134,   135,   136,   137,
     138,   139,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,   148,   149,   150,   151,   687,   688,   689,   690,
     691,   692,   693,   153,   154,   155,   156,   157,   158,   159,
     694,   695,   162,   696,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,     0,   171,   172,   173,   174,     0,
       0,   175,   176,   697,   178,   179,     0,     0,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,   189,
     698,   191,   192,   193,   194,   699,   700,   196,     0,   197,
     198,   701,   200,     0,   201,     0,   202,   203,     0,   204,
     205,   206,   207,   208,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,   231,   232,   233,   234,   235,   236,   702,
     703,     0,   704,     0,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,     0,     0,   250,   251,   252,   253,
       0,   254,   255,   256,   705,   706,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   707,
     281,   708,   283,   284,   285,     0,   286,   709,   287,   288,
     289,   290,   710,   711,   292,   712,   294,   295,   296,     0,
     297,   298,     0,     0,   713,   300,   301,     0,     0,   302,
     303,   304,   305,   306,   714,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,     0,   318,   319,   715,   321,
     322,   323,   324,   325,   326,     0,   327,   328,   329,   330,
     331,     0,     0,   332,   333,   334,   335,   716,   337,   338,
     339,   340,     0,   341,   342,   343,     0,   344,   345,   346,
     347,   348,   349,   350,   351,   352,     0,   353,   354,   355,
     356,   357,   358,   717,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,     0,   371,   372,   373,   374,
     375,   718,   376,   377,   378,   379,   380,   381,   382,   383,
     719,   385,     0,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   720,     0,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,     0,
     721,   722,     0,     0,   411,   412,   723,   414,   724,   725,
     416,   417,   418,   419,   420,   421,   422,     0,     0,   423,
     424,   425,   426,   427,   726,     0,   428,   429,   430,   431,
     432,   433,   727,     0,   435,   436,   437,     0,   438,   439,
     440,     0,     0,   441,     0,     0,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   728,     0,     0,
       0,     0,     0,     0,   729,   730,     0,     0,     0,     0,
       0,     0,     0,  2439,     0,     0,     0,     0,   733,    90,
     672,   533,   673,   674,   675,   676,   677,     0,     0,     0,
       0,     0,     0,     0,     0,    91,    92,    93,    94,    95,
      96,    97,    98,     0,    99,   100,   101,     0,     0,     0,
       0,     0,     0,     0,   102,   103,     0,   104,   105,   106,
     107,   108,   109,   110,  2653,   678,   113,   679,   680,     0,
     116,   117,   118,   119,   120,   121,   681,   682,   122,   123,
     683,   684,   126,     0,   127,   128,   129,   130,   685,     0,
     686,     0,   133,   134,   135,   136,   137,   138,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,   148,
     149,   150,  2654,   687,   688,   689,   690,   691,   692,   693,
     153,   154,   155,   156,   157,   158,   159,   694,   695,   162,
     696,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     697,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   698,   191,   192,
     193,   194,   699,   700,   196,     0,   197,   198,   701,   200,
       0,   201,     0,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
     231,   232,   233,   234,   235,   236,   702,   703,     0,   704,
       0,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,     0,     0,   250,   251,   252,   253,     0,   254,   255,
     256,   705,   706,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   707,   281,   708,   283,
     284,   285,     0,   286,   709,   287,   288,   289,   290,   710,
     711,   292,   712,   294,   295,   296,     0,   297,   298,     0,
       0,   713,   300,   301,     0,     0,   302,   303,   304,   305,
     306,   714,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,     0,   318,   319,   715,   321,   322,   323,   324,
     325,   326,     0,   327,   328,   329,   330,   331,     0,     0,
     332,   333,   334,   335,   716,   337,   338,   339,   340,     0,
     341,   342,   343,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,     0,   353,   354,   355,   356,   357,   358,
     717,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,   718,   376,
     377,   378,   379,   380,   381,   382,   383,   719,   385,     0,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   720,     0,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,     0,   721,   722,     0,
       0,   411,   412,   723,   414,   724,   725,   416,   417,   418,
     419,  2655,   421,   422,     0,     0,   423,   424,   425,   426,
     427,   726,     0,   428,   429,   430,   431,   432,   433,   727,
       0,   435,   436,   437,     0,   438,   439,   440,     0,     0,
     441,     0,     0,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   728,     0,     0,     0,     0,     0,
       0,   729,   730,     0,     0,     0,     0,     0,     0,     0,
     732,     0,     0,     0,     0,   733,    90,   672,   533,   673,
     674,   675,   676,   677,     0,     0,     0,     0,     0,     0,
       0,     0,    91,    92,    93,    94,    95,    96,    97,    98,
       0,    99,   100,   101,     0,     0,     0,     0,     0,     0,
       0,   102,   103,     0,   104,   105,   106,   107,   108,   109,
     110,   111,   678,   113,   679,   680,     0,   116,   117,   118,
     119,   120,   121,   681,   682,   122,   123,   683,   684,   126,
       0,   127,   128,   129,   130,   685,     0,   686,     0,   133,
     134,   135,   136,   137,   138,   139,   140,   141,     0,   142,
     143,   144,   145,   146,   147,     0,   148,   149,   150,  2654,
     687,   688,   689,   690,   691,   692,   693,   153,   154,   155,
     156,   157,   158,   159,   694,   695,   162,   696,   163,     0,
     164,   165,   166,   167,   168,   169,     0,   170,     0,   171,
     172,   173,   174,     0,     0,   175,   176,   697,   178,   179,
       0,     0,   180,   181,   182,     0,   183,   184,   185,     0,
     186,   187,   188,   189,   698,   191,   192,   193,   194,   699,
     700,   196,     0,   197,   198,   701,   200,     0,   201,     0,
     202,   203,     0,   204,   205,   206,   207,   208,   209,     0,
     210,     0,     0,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,   230,   231,   232,   233,
     234,   235,   236,   702,   703,     0,   704,     0,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,     0,     0,
     250,   251,   252,   253,     0,   254,   255,   256,   705,   706,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   707,   281,   708,   283,   284,   285,     0,
     286,   709,   287,   288,   289,   290,   710,   711,   292,   712,
     294,   295,   296,     0,   297,   298,     0,     0,   713,   300,
     301,     0,     0,   302,   303,   304,   305,   306,   714,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     318,   319,   715,   321,   322,   323,   324,   325,   326,     0,
     327,   328,   329,   330,   331,     0,     0,   332,   333,   334,
     335,   716,   337,   338,   339,   340,     0,   341,   342,   343,
       0,   344,   345,   346,   347,   348,   349,   350,   351,   352,
       0,   353,   354,   355,   356,   357,   358,   717,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,     0,
     371,   372,   373,   374,   375,   718,   376,   377,   378,   379,
     380,   381,   382,   383,   719,   385,     0,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   720,     0,   400,   401,     0,   402,   403,   404,   405,
     406,   407,   408,     0,   721,   722,     0,     0,   411,   412,
     723,   414,   724,   725,   416,   417,   418,   419,  2655,   421,
     422,     0,     0,   423,   424,   425,   426,   427,   726,     0,
     428,   429,   430,   431,   432,   433,   727,     0,   435,   436,
     437,     0,   438,   439,   440,     0,     0,   441,     0,     0,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   728,     0,     0,     0,     0,     0,     0,   729,   730,
       0,     0,     0,     0,     0,     0,     0,   732,     0,     0,
       0,     0,   733,    90,   672,   533,   673,   674,   675,   676,
     677,     0,     0,     0,     0,     0,     0,     0,     0,    91,
      92,    93,    94,    95,    96,    97,    98,     0,    99,   100,
     101,     0,     0,     0,     0,     0,     0,     0,   102,   103,
       0,   104,   105,   106,   107,   108,   109,   110,   111,   678,
     113,   679,   680,     0,   116,   117,   118,   119,   120,   121,
     681,   682,   122,   123,   683,   684,   126,     0,   127,   128,
     129,   130,   685,     0,   686,     0,   133,   134,   135,   136,
     137,   138,   139,   140,   141,     0,   142,   143,   144,   145,
     146,   147,     0,   148,   149,   150,   151,   687,   688,   689,
     690,   691,   692,   693,   153,   154,   155,   156,   157,   158,
     159,   694,   695,   162,     0,   163,     0,   164,   165,   166,
     167,   168,   169,     0,   170,     0,   171,   172,   173,   174,
       0,     0,   175,   176,   697,   178,   179,     0,     0,   180,
     181,   182,     0,   183,   184,   185,     0,   186,   187,   188,
     189,   698,   191,   192,   193,   194,   699,   700,   196,     0,
     197,   198,   701,   200,     0,   201,     0,   202,   203,     0,
     204,   205,   206,   207,   208,   209,     0,   210,     0,     0,
       0,   211,   212,     0,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,     0,   224,   225,   226,   227,
     228,   229,     0,   230,   231,   232,   233,   234,   235,   236,
     702,   703,     0,   704,     0,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,     0,     0,   250,   251,   252,
     253,     0,   254,   255,   256,   705,   706,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     707,   281,   708,   283,   284,   285,     0,   286,     0,   287,
     288,   289,   290,   710,   711,   292,   712,   294,   295,   296,
       0,   297,   298,     0,     0,   713,   300,   301,     0,     0,
     302,   303,   304,   305,   306,   714,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,     0,   318,   319,   715,
     321,   322,   323,   324,   325,   326,     0,   327,   328,   329,
     330,   331,     0,     0,   332,   333,   334,   335,   716,   337,
     338,   339,   340,     0,   341,   342,   343,     0,   344,   345,
     346,   347,   348,   349,   350,   351,   352,     0,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,     0,   371,   372,   373,
     374,   375,   718,   376,   377,   378,   379,   380,   381,   382,
     383,   719,   385,     0,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   720,     0,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
       0,   721,   722,     0,     0,   411,   412,   723,   414,   724,
     725,   416,   417,   418,   419,   420,   421,   422,     0,     0,
     423,   424,   425,   426,   427,   726,     0,   428,   429,   430,
     431,   432,   433,   727,     0,   435,   436,   437,     0,   438,
     439,   440,     0,     0,   441,     0,     0,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,     0,     0,
       0,     0,     0,     0,     0,  1458,  1459,     0,     0,    90,
     672,   533,   673,   674,  1460,   676,   677,     0,     0,   733,
       0,     0,     0,     0,     0,    91,    92,    93,    94,    95,
      96,    97,    98,     0,    99,   100,   101,     0,     0,     0,
       0,     0,     0,     0,   102,   103,     0,   104,   105,   106,
     107,   108,   109,   110,   111,   678,   113,   679,   680,     0,
     116,   117,   118,   119,   120,   121,   681,   682,   122,   123,
     683,   684,   126,     0,   127,   128,   129,   130,   685,     0,
     686,     0,   133,   134,   135,   136,   137,   138,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,   148,
     149,   150,   151,   687,   688,   689,   690,   691,   692,   693,
     153,   154,   155,   156,   157,   158,   159,   694,   695,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     697,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   698,   191,   192,
     193,   194,   699,   700,   196,     0,   197,   198,   701,   200,
       0,   201,     0,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
     231,   232,   233,   234,   235,   236,   702,   703,     0,   704,
       0,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,     0,     0,   250,   251,   252,   253,     0,   254,   255,
     256,   705,   706,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   707,   281,   708,   283,
     284,   285,     0,   286,     0,   287,   288,   289,   290,   710,
     711,   292,   712,   294,   295,   296,     0,   297,   298,     0,
       0,   299,   300,   301,     0,     0,   302,   303,   304,   305,
     306,   714,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,     0,   318,   319,   715,   321,   322,   323,   324,
     325,   326,     0,   327,   328,   329,   330,   331,     0,     0,
     332,   333,   334,   335,   716,   337,   338,   339,   340,     0,
     341,   342,   343,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,     0,   353,   354,   355,   356,   357,   358,
    1575,  1576,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,   718,   376,
     377,   378,   379,   380,   381,   382,   383,   719,   385,     0,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   720,     0,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,     0,   721,   722,     0,
       0,   411,   412,   723,   414,   724,   725,   416,   417,   418,
     419,   420,   421,   422,     0,     0,   423,   424,   425,   426,
     427,   726,     0,   428,   429,   430,   431,   432,   433,   727,
       0,   435,   436,   437,     0,   438,   439,   440,     0,     0,
     441,     0,     0,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,     0,     0,     0,     0,     0,     0,
       0,  1577,  1578,     0,     0,     0,     0,     0,     0,     0,
    1460,     0,     0,     0,     0,   733,    90,   672,   533,   673,
     674,   675,   676,   677,     0,     0,     0,     0,     0,     0,
       0,     0,    91,    92,    93,    94,    95,    96,    97,    98,
       0,    99,   100,   101,     0,     0,     0,     0,     0,     0,
       0,   102,   103,     0,   104,   105,   106,   107,   108,   109,
     110,   111,   678,   113,   679,   680,     0,   116,   117,   118,
     119,   120,   121,   681,   682,   122,   123,   683,   684,   126,
       0,   127,   128,   129,   130,   685,     0,   686,     0,   133,
     134,   135,   136,   137,   138,   139,   140,   141,     0,   142,
     143,   144,   145,   146,   147,     0,   148,   149,   150,   151,
     687,   688,   689,   690,   691,   692,   693,   153,   154,   155,
     156,   157,   158,   159,   694,   695,   162,     0,   163,     0,
     164,   165,   166,   167,   168,   169,     0,   170,     0,   171,
     172,   173,   174,     0,     0,   175,   176,   697,   178,   179,
       0,     0,   180,   181,   182,     0,   183,   184,   185,     0,
     186,   187,   188,   189,   698,   191,   192,   193,   194,   699,
     700,   196,     0,   197,   198,   701,   200,     0,   201,     0,
     202,   203,     0,   204,   205,   206,   207,   208,   209,     0,
     210,     0,     0,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,   230,   231,   232,   233,
     234,   235,   236,   702,   703,     0,   704,     0,   240,     0,
     242,   243,   244,   245,   246,   247,   248,   249,     0,     0,
     250,   251,   252,   253,     0,   254,   255,   256,   705,   706,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   707,   281,   708,   283,   284,   285,     0,
     286,     0,   287,   288,   289,   290,   710,   711,   292,   712,
     294,   295,   296,     0,   297,   298,     0,     0,   713,   300,
     301,     0,     0,   302,   303,   304,   305,   306,   714,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     318,   319,   715,   321,   322,   323,   324,   325,   326,     0,
     327,   328,   329,   330,   331,     0,     0,   332,   333,   334,
     335,   716,   337,   338,   339,   340,     0,   341,   342,   343,
       0,   344,   345,   346,   347,   348,   349,   350,   351,   352,
       0,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,     0,
     371,   372,   373,   374,   375,   718,   376,   377,   378,   379,
     380,   381,   382,   383,   719,   385,     0,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   720,     0,   400,   401,     0,   402,   403,   404,   405,
     406,   407,   408,     0,   721,   722,     0,     0,   411,   412,
     723,   414,   724,   725,   416,   417,   418,   419,   420,   421,
     422,     0,     0,   423,   424,   425,   426,   427,   726,     0,
     428,   429,   430,   431,   432,   433,   727,     0,   435,   436,
     437,     0,   438,   439,   440,     0,     0,   441,     0,     0,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,     0,     0,     0,     0,     0,     0,     0,  1458,  1459,
       0,     0,     0,     0,     0,     0,     0,  1460,     0,     0,
       0,     0,   733,    90,   672,   533,   673,   674,   675,   676,
     677,     0,     0,     0,     0,     0,     0,     0,     0,    91,
      92,    93,    94,    95,    96,    97,    98,     0,    99,   100,
     101,     0,     0,     0,     0,     0,     0,     0,   102,   103,
       0,   104,   105,   106,   107,   108,   109,   110, -1552,   678,
     113,   679,   680,     0,   116,   117,   118,   119,   120,   121,
     681,   682,   122,   123,   683,   684,   126,     0,   127,   128,
     129,   130,   685,     0,   686,     0,   133,   134,   135,   136,
     137,   138,   139,   140,   141,     0,   142,   143,   144,   145,
     146,   147,     0,   148,   149,   150,  2654,   687,   688,   689,
     690,   691,   692,   693,   153,   154,   155,   156,   157,   158,
     159,   694,   695,   162,   696,   163,     0,   164,   165,   166,
     167,   168,   169,     0,   170,     0,   171,   172,   173,   174,
       0,     0,   175,   176,   697,   178,   179,     0,     0,   180,
     181,   182,     0,   183,   184,   185,     0,   186,   187,   188,
     189,   698,   191,   192,   193,   194,   699,   700,   196,     0,
     197,   198,   701,   200,     0,   201,     0,   202,   203,     0,
     204,   205,   206,   207, -1552,   209,     0,   210,     0,     0,
       0,   211,   212,     0,   213,   214,   215,   216,   217,   218,
   -1552,   220,   221,   222,   223,     0,   224,   225,   226,   227,
     228,   229,     0,   230,   231,   232,   233,   234,   235,   236,
     702,   703,     0,   704,     0,   240,     0,     0,   243,   244,
     245,   246,   247,   248,   249,     0,     0,   250,   251,   252,
   -1552,     0,   254,   255,   256,   705,   706,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     707,   281,   708,   283,   284,   285,     0,   286,     0,   287,
     288,     0,   290,   710,   711,   292,   712,   294,   295,   296,
       0,   297,   298,     0,     0,   713,   300,   301,     0,     0,
     302,   303,   304,   305,   306,   714,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,     0,   318,   319,   715,
     321,   322,   323,   324,   325,   326,     0,   327,   328,   329,
     330,   331,     0,     0,   332,   333,   334,   335,   716,   337,
     338,   339,   340,     0,   341,   342,   343,     0,   344,   345,
     346,   347,   348,   349,   350,   351,   352,     0,   353,   354,
     355,   356,   357,   358,   717,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,     0,   371,   372,   373,
     374,   375,   718,   376,   377,   378,   379,   380, -1552,   382,
     383,   719,   385,     0,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   720,     0,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
       0,   721,   722,     0,     0,   411,   412,   723,   414,   724,
     725,   416,   417,   418,   419,  2655,   421,   422,     0,     0,
     423,   424,   425,   426,   427,   726,     0,   428,   429,   430,
     431,   432,   433,   727,     0,   435,   436,   437,     0,   438,
     439,   440,     0,     0,   441,     0,     0,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462, -1552,     0,
       0,     0,     0,     0,     0,   729,   730,     0,     0,     0,
       0,     0,     0,     0,   732,     0,     0,     0,     0,   733,
      90,   672,   533,   673,   674,   675,   676,   677,     0,     0,
       0,     0,     0,     0,     0,     0,    91,    92,    93,    94,
      95,    96,    97,    98,     0,    99,   100,   101,     0,     0,
       0,     0,     0,     0,     0,   102,   103,     0,   104,   105,
     106,   107,   108,   109,   110,     0,   678,   113,   679,   680,
       0,   116,   117,   118,   119,   120,   121,   681,   682,   122,
     123,   683,   684,   126,     0,   127,   128,   129,   130,   685,
       0,   686,     0,   133,   134,   135,   136,   137,   138,   139,
     140,   141,     0,   142,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   687,   688,   689,   690,   691,   692,
     693,   153,   154,   155,   156,   157,   158,   159,   694,   695,
     162,   696,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,     0,   171,   172,   173,   174,     0,     0,   175,
     176,   697,   178,   179,     0,     0,   180,   181,   182,     0,
     183,     0,   185,     0,   186,   187,   188,   189,   698,   191,
     192,   193,   194,   699,   700,   196,     0,   197,   198,   701,
     200,     0,   201,     0,   202,   203,     0,   204,   205,   206,
     207,     0,   209,     0,   210,     0,     0,     0,   211,   212,
       0,   213,   214,   215,   216,   217,   218,     0,   220,   221,
     222,   223,     0,   224,   225,   226,   227,   228,   229,     0,
     230,   231,   232,   233,   234,   235,   236,   702,   703,     0,
     704,     0,   240,     0,     0,   243,   244,   245,   246,   247,
     248,   249,     0,     0,   250,   251,   252,     0,     0,   254,
     255,   256,   705,   706,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   707,   281,   708,
     283,   284,   285,     0,   286,     0,   287,   288,     0,   290,
     710,   711,   292,   712,   294,   295,   296,     0,   297,   298,
       0,     0,   713,   300,   301,     0,     0,   302,   303,   304,
     305,   306,   714,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,     0,   318,   319,   715,   321,   322,   323,
     324,   325,   326,     0,   327,   328,   329,   330,   331,     0,
       0,   332,   333,   334,   335,   716,   337,   338,   339,   340,
       0,   341,   342,   343,     0,   344,   345,   346,   347,   348,
     349,   350,   351,   352,     0,   353,   354,   355,   356,   357,
     358,   717,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,     0,   371,   372,   373,   374,   375,   718,
     376,   377,   378,   379,   380,     0,   382,   383,   719,   385,
       0,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   720,     0,   400,   401,     0,
     402,   403,   404,   405,   406,   407,   408,     0,   721,   722,
       0,     0,   411,   412,   723,   414,   724,   725,   416,   417,
     418,   419,   420,   421,   422,     0,     0,   423,   424,   425,
     426,   427,   726,     0,   428,   429,   430,   431,   432,   433,
     727,     0,   435,   436,   437,     0,   438,   439,   440,     0,
       0,   441,     0,     0,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,     0,     0,     0,     0,     0,
       0,   488,   729,   730,     0,     0,     0,     0,     0,     0,
       0,   732,     0,     0,     0,     0,   733,    91,    92,    93,
      94,    95,    96,    97,    98,     0,    99,   100,   101,     0,
       0,     0,     0,     0,  2102,     0,   102,   103,     0,   104,
     105,   106,     0,   108,   109,   110,   111,   112,     0,   114,
     115,     0,   116,   117,   118,   119,   120,   121,     0,     0,
     122,   123,   124,   125,   126,     0,   127,   128,   129,   130,
     131,     0,     0,     0,   133,   134,   135,   136,   137,     0,
     139,   140,   141,     0,   142,   143,   144,   145,   146,   147,
       0,  -386,   149,   150,   151,     0,     0,     0,     0,     0,
       0,     0,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,     0,   163,     0,   164,   165,   166,   167,   168,
     169,     0,   170,     0,   171,   172,   173,   174,     0,     0,
     175,   176,   177,   178,   179,     0,     0,   180,   181,   182,
       0,   183,   184,   185,     0,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,     0,   197,   198,
     199,   200,     0,   201,     0,   202,     0,     0,  -386,   205,
     206,   207,     0,   209,     0,   210,     0,     0,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,     0,   220,
     221,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,   230,  -386,   232,   233,   234,   235,   236,   237,   238,
       0,   239,     0,   240,     0,     0,   243,  -386,   245,   246,
     247,   248,   249,     0,     0,   250,  -386,   252,     0,     0,
     254,   255,   256,     0,     0,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,  -386,
     282,   283,   284,   285,     0,   286,     0,   287,   288,     0,
     290,     0,   291,   292,   293,   294,   295,   296,     0,   297,
     298,     0,     0,   299,   300,   301,     0,     0,   302,   303,
       0,   305,     0,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,     0,   318,   319,   320,   321,   322,
     323,   324,   325,   326,     0,   327,   328,   329,   330,   331,
       0,     0,   332,   333,   334,   335,   336,   337,   338,   339,
     340,     0,   341,   342,   343,     0,   344,   345,   346,   347,
     348,   349,   350,   351,   352,     0,   353,   354,  -386,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,     0,   371,   372,   373,   374,   375,
       0,   376,   377,   378,   379,   380,     0,   382,   383,   384,
     385,     0,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,     0,   400,   401,
       0,   402,  -386,   404,   405,   406,   407,   408,     0,   409,
     410,     0,     0,   411,   412,   413,   414,   415,     0,   416,
     417,   418,   419,   420,   421,   422,     0,     0,   423,   424,
     425,   426,   427,     0,     0,   428,   429,   430,   431,   432,
     433,   434,     0,   435,     0,   437,     0,   438,   439,   440,
       0,     0,   441,     0,     0,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,     0,     0,    90,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   791,    91,    92,    93,    94,    95,    96,
      97,    98,     0,    99,   100,   101,     0,     0,     0,     0,
       0,     0,     0,   102,   103,     0,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,     0,   116,
     117,   118,   119,   120,   121,     0,   682,   122,   123,   124,
     125,   126,     0,   127,   128,   129,   130,   685,     0,   686,
       0,   133,   134,   135,   136,   137,   138,   139,   140,   141,
       0,   142,   143,   144,   145,   146,   147,     0,   148,   149,
     150,   151,   687,   688,   689,   690,   691,   692,   693,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,     0,
     163,     0,   164,   165,   166,   167,   168,   169,     0,   170,
       0,   171,   172,   173,   174,     0,     0,   175,   176,   177,
     178,   179,     0,     0,   180,   181,   182,     0,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   699,     0,   196,     0,   197,   198,   199,   200,     0,
     201,     0,   202,   203,     0,   204,   205,   206,   207,   208,
     209,     0,   210,     0,     0,     0,   211,   212,     0,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,     0,   230,   231,
     232,   233,   234,   235,   236,   237,   238,     0,   239,     0,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
    1857,     0,   250,   251,   252,   253,     0,   254,   255,   256,
     705,   706,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,     0,   286,     0,   287,   288,   289,   290,     0,   711,
     292,   293,   294,   295,   296,     0,   297,   298,     0,   558,
     299,   300,   301,     0,     0,   302,   303,   304,   305,   306,
     714,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,     0,   318,   319,   715,   321,   322,   323,   324,   325,
     326,     0,   327,   328,   329,   330,   331,     0,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,     0,   344,   345,   346,   347,   348,   349,   350,
     351,   352,     0,   353,   354,   355,   356,   357,   358,   359,
    1858,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,    25,   371,   372,   373,   374,   375,   718,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,     0,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   720,     0,   400,   401,    29,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,     0,
     411,   412,   723,   414,   724,     0,   416,   417,   418,   419,
     420,   421,   422,     0,     0,   423,   424,   425,   426,   427,
     726,     0,   428,   429,   430,   431,   432,   581,   434,     0,
     435,   436,   437,     0,   438,   439,   440,     0,     0,   441,
       0,    32,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,     0,    90,    33,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1859,
      91,    92,    93,    94,    95,    96,    97,    98,     0,    99,
     100,   101,     0,     0,     0,     0,     0,     0,     0,   102,
     103,     0,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,     0,   116,   117,   118,   119,   120,
     121,     0,   682,   122,   123,   124,   125,   126,     0,   127,
     128,   129,   130,   685,     0,   686,     0,   133,   134,   135,
     136,   137,   138,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,   148,   149,   150,   151,   687,   688,
     689,   690,   691,   692,   693,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   699,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,  1857,     0,   250,   251,
     252,   253,     0,   254,   255,   256,   705,   706,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,     0,   286,     0,
     287,   288,   289,   290,     0,   711,   292,   293,   294,   295,
     296,     0,   297,   298,     0,   558,   299,   300,   301,     0,
       0,   302,   303,   304,   305,   306,   714,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,     0,   318,   319,
     715,   321,   322,   323,   324,   325,   326,     0,   327,   328,
     329,   330,   331,     0,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,     0,   353,
     354,   355,   356,   357,   358,   359,  1858,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,   718,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   720,
       0,   400,   401,     0,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,   411,   412,   723,   414,
     724,     0,   416,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,   427,   726,     0,   428,   429,
     430,   431,   432,   433,   434,     0,   435,   436,   437,     0,
     438,   439,   440,     0,     0,   441,     0,     0,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,     0,
      90,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1859,    91,    92,    93,    94,
      95,    96,    97,    98,     0,    99,   100,   101,     0,     0,
       0,     0,     0,     0,     0,   102,   103,     0,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
       0,   116,   117,   118,   119,   120,   121,     0,   682,   122,
     123,   124,   125,   126,     0,   127,   128,   129,   130,   685,
       0,   686,     0,   133,   134,   135,   136,   137,   138,   139,
     140,   141,     0,   142,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   687,   688,   689,   690,   691,   692,
     693,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,     0,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,     0,   171,   172,   173,   174,     0,     0,   175,
     176,   177,   178,   179,     0,     0,   180,   181,   182,     0,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   699,     0,   196,     0,   197,   198,   199,
     200,     0,   201,     0,   202,   203,     0,   204,   205,   206,
     207,   208,   209,     0,   210,     0,     0,     0,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,   225,   226,   227,   228,   229,     0,
     230,   231,   232,   233,   234,   235,   236,   237,   238,     0,
     239,     0,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,     0,     0,   250,   251,   252,   253,     0,   254,
     255,   256,   705,   706,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,     0,   286,     0,   287,   288,   289,   290,
       0,   711,   292,   293,   294,   295,   296,     0,   297,   298,
       0,     0,   299,   300,   301,     0,     0,   302,   303,   304,
     305,   306,   714,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,     0,   318,   319,   715,   321,   322,   323,
     324,   325,   326,     0,   327,   328,   329,   330,   331,     0,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,     0,   344,   345,   346,   347,   348,
     349,   350,   351,   352,     0,   353,   354,   355,   356,   357,
     358,   359,  1858,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,     0,   371,   372,   373,   374,   375,   718,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
       0,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   720,     0,   400,   401,     0,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,     0,   411,   412,   723,   414,   724,     0,   416,   417,
     418,   419,   420,   421,   422,     0,     0,   423,   424,   425,
     426,   427,   726,     0,   428,   429,   430,   431,   432,   433,
     434,     0,   435,   436,   437,     0,   438,   439,   440,     0,
       0,   441,     0,     0,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,     0,    90,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    34,    91,    92,    93,    94,    95,    96,    97,    98,
       0,    99,   100,   101,     0,     0,     0,     0,     0,     0,
       0,   102,   103,     0,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,     0,   116,   117,   118,
     119,   120,   121,     0,   682,   122,   123,   124,   125,   126,
       0,   127,   128,   129,   130,   685,     0,   686,     0,   133,
     134,   135,   136,   137,   138,   139,   140,   141,     0,   142,
     143,   144,   145,   146,   147,     0,   148,   149,   150,   151,
     687,   688,   689,   690,   691,   692,   693,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,     0,   163,     0,
     164,   165,   166,   167,   168,   169,     0,   170,     0,   171,
     172,   173,   174,     0,     0,   175,   176,   177,   178,   179,
       0,     0,   180,   181,   182,     0,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   699,
       0,   196,     0,   197,   198,   199,   200,     0,   201,     0,
     202,   203,     0,   204,   205,   206,   207,   208,   209,     0,
     210,     0,     0,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,   230,   231,   232,   233,
     234,   235,   236,   237,   238,     0,   239,     0,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,     0,     0,
     250,   251,   252,   253,     0,   254,   255,   256,   705,   706,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,     0,
     286,     0,   287,   288,   289,   290,     0,   711,   292,   293,
     294,   295,   296,     0,   297,   298,     0,     0,   299,   300,
     301,     0,     0,   302,   303,   304,   305,   306,   714,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     318,   319,   715,   321,   322,   323,   324,   325,   326,     0,
     327,   328,   329,   330,   331,     0,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
       0,   344,   345,   346,   347,   348,   349,   350,   351,   352,
       0,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,     0,
     371,   372,   373,   374,   375,   718,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,     0,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   720,     0,   400,   401,     0,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,     0,   411,   412,
     723,   414,   724,     0,   416,   417,   418,   419,   420,   421,
     422,     0,     0,   423,   424,   425,   426,   427,   726,     0,
     428,   429,   430,   431,   432,   433,   434,     0,   435,   436,
     437,     0,   438,   439,   440,     0,     0,   441,     0,     0,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,     0,   652,  1006,   533,     0,     0,     0,   676,     0,
       0,     0,     0,     0,     0,     0,     0,  2451,    91,    92,
      93,    94,    95,    96,    97,    98,     0,    99,   100,   101,
       0,     0,     0,     0,     0,     0,     0,   102,   103,     0,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,     0,   116,   117,   118,   119,   120,   121,     0,
       0,   122,   123,   124,   125,   126,     0,   127,   128,   129,
     130,   131,     0,   132,     0,   133,   134,   135,   136,   137,
     138,   139,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,   148,   149,   150,   151,     0,     0,     0,   152,
       0,     0,     0,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,     0,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,     0,   171,   172,   173,   174,     0,
       0,   175,   176,   177,   178,   179,     0,     0,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,  1007,   196,     0,   197,
     198,   199,   200,     0,   201,     0,   202,   203,     0,   204,
     205,   206,   207,   208,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,   231,   232,   233,   234,   235,   236,   237,
     238,     0,   239,     0,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,     0,     0,   250,   251,   252,   253,
       0,   254,   255,   256,     0,     0,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,     0,   286,     0,   287,   288,
     289,   290,     0,   291,   292,   293,   294,   295,   296,     0,
     297,   298,  1008,     0,   299,   300,   301,     0,     0,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,     0,   327,   328,   329,   330,
     331,     0,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,     0,   344,   345,   346,
     347,   348,   349,   350,   351,   352,     0,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,     0,   371,   372,   373,   374,
     375,     0,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,     0,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,     0,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,     0,   411,   412,   413,   414,   415,  1009,
     416,   417,   418,   419,   420,   421,   422,     0,     0,   423,
     424,   425,   426,   427,     0,     0,   428,   429,   430,   431,
     432,   433,   434,     0,   435,   436,   437,     0,   438,   439,
     440,     0,     0,   441,     0,     0,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,     0,   652,     0,
       0,     0,     0,     0,  1010,  1011,  1724,     0,     0,     0,
       0,     0,     0,  1725,    91,    92,    93,    94,    95,    96,
      97,    98,     0,    99,   100,   101,     3,     4,     0,     0,
       0,     0,     0,   102,   103,     0,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,     0,   116,
     117,   118,   119,   120,   121,     0,     0,   122,   123,   124,
     125,   126,     0,   127,   128,   129,   130,   131,     0,   132,
       0,   133,   134,   135,   136,   137,   138,   139,   140,   141,
       0,   142,   143,   144,   145,   146,   147,     0,   148,   149,
     150,   151,     0,     0,     0,   152,     0,     0,     0,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,     0,
     163,     0,   164,   165,   166,   167,   168,   169,     0,   170,
       0,   171,   172,   173,   174,     0,     0,   175,   176,   177,
     178,   179,     0,     0,   180,   181,   182,     0,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,     0,   196,     0,   197,   198,   199,   200,     0,
     201,     0,   202,   203,     0,   204,   205,   206,   207,   208,
     209,     0,   210,     0,     0,     0,   211,   212,     0,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,     0,   230,   231,
     232,   233,   234,   235,   236,   237,   238,     0,   239,     0,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
       0,     0,   250,   251,   252,   253,     0,   254,   255,   256,
       0,     0,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,     0,   286,     0,   287,   288,   289,   290,     0,   291,
     292,   293,   294,   295,   296,     0,   297,   298,     0,     0,
     299,   300,   301,     0,     0,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,     0,   318,   319,   320,   321,   322,   323,   324,   325,
     326,     0,   327,   328,   329,   330,   331,     0,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,     0,   344,   345,   346,   347,   348,   349,   350,
     351,   352,     0,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,    25,   371,   372,   373,   374,   375,     0,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,     0,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,     0,   400,   401,    29,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,     0,
     411,   412,   413,   414,   415,     0,   416,   417,   418,   419,
     420,   421,   422,     0,     0,   423,   424,   425,   426,   427,
       0,     0,   428,   429,   430,   431,   432,   581,   434,     0,
     435,   436,   437,     0,   438,   439,   440,     0,     0,   441,
       0,    32,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,     0,   488,    33,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    34,
      91,    92,    93,    94,    95,    96,    97,    98,   578,    99,
     100,   101,     0,     0,     0,     0,     0,     0,     0,   102,
     103,     0,   104,   105,   106,     0,   108,   109,   110,   111,
     112,     0,   114,   115,     0,   116,   117,   118,   119,   120,
     121,     0,     0,   122,   123,   124,   125,   126,     0,   127,
     128,   129,   130,   131,     0,     0,     0,   133,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,     0,   282,   283,   284,   285,     0,   286,     0,
     287,   288,     0,   290,     0,   291,   292,   293,   294,   295,
     296,     0,   297,   298,     0,     0,   299,   300,   301,     0,
       0,   302,   303,     0,   305,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,     0,   318,   319,
     320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
     329,   330,   331,     0,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,     0,   353,
     354,     0,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,    25,   371,   372,
     373,   374,   375,     0,   376,   377,   378,   379,   380,     0,
     382,   383,   384,   385,     0,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,    29,   402,     0,   404,   405,   406,   407,
     408,     0,   579,   410,     0,     0,   580,   412,   413,   414,
     415,     0,   416,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,   427,     0,     0,   428,   429,
     430,   431,   432,   581,   434,     0,   435,     0,   437,     0,
     438,   439,   440,     0,     0,   441,     0,    32,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,     0,
     488,    33,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    34,    91,    92,    93,    94,
      95,    96,    97,    98,     0,    99,   100,   101,     0,     0,
       0,     0,     0,     0,     0,   102,   103,     0,   104,   105,
     106,     0,   108,   109,   110,   111,   112,     0,   114,   115,
       0,   116,   117,   118,   119,   120,   121,     0,     0,   122,
     123,   124,   125,   126,     0,   127,   128,   129,   130,   131,
       0,     0,     0,   133,   134,   135,   136,   137,     0,   139,
     140,   141,     0,   142,   143,   144,   145,   146,   147,     0,
       0,   149,   150,   151,     0,     0,     0,     0,     0,     0,
       0,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,     0,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,     0,   171,   172,   173,   174,     0,     0,   175,
     176,   177,   178,   179,     0,     0,   180,   181,   182,     0,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,     0,   196,     0,   197,   198,   199,
     200,     0,   201,     0,   202,     0,     0,     0,   205,   206,
     207,     0,   209,     0,   210,     0,     0,     0,   211,   212,
       0,   213,   214,   215,   216,   217,   218,     0,   220,   221,
     222,   223,     0,   224,   225,   226,   227,   228,   229,     0,
     230,     0,   232,   233,   234,   235,   236,   237,   238,     0,
     239,     0,   240,     0,     0,   243,     0,   245,   246,   247,
     248,   249,     0,     0,   250,     0,   252,     0,     0,   254,
     255,   256,     0,     0,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,     0,   282,
     283,   284,   285,     0,   286,     0,   287,   288,     0,   290,
       0,   291,   292,   293,   294,   295,   296,     0,   297,   298,
       0,     0,   299,   300,   301,     0,     0,   302,   303,     0,
     305,     0,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,     0,   327,   328,   329,   330,   331,     0,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,     0,   344,   345,   346,   347,   348,
     349,   350,   351,   352,     0,   353,   354,     0,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    25,   371,   372,   373,   374,   375,     0,
     376,   377,   378,   379,   380,     0,   382,   383,   384,   385,
       0,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,     0,   400,   401,    29,
     402,     0,   404,   405,   406,   407,   408,     0,   409,   410,
       0,     0,   411,   412,   413,   414,   415,     0,   416,   417,
     418,   419,   420,   421,   422,     0,     0,   423,   424,   425,
     426,   427,     0,     0,   428,   429,   430,   431,   432,   581,
     434,     0,   435,     0,   437,     0,   438,   439,   440,     0,
       0,   441,     0,    32,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,     0,   488,    33,  2278,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    34,    91,    92,    93,    94,    95,    96,    97,    98,
       0,    99,   100,   101,     0,     0,     0,     0,     0,     0,
       0,   102,   103,     0,   104,   105,   106,     0,   108,   109,
     110,   111,   112,     0,   114,   115,     0,   116,   117,   118,
     119,   120,   121,     0,     0,   122,   123,   124,   125,   126,
       0,   127,   128,   129,   130,   131,     0,     0,     0,   133,
     134,   135,   136,   137,     0,   139,   140,   141,     0,   142,
     143,   144,   145,   146,   147,     0,     0,   149,   150,   151,
       0,     0,     0,     0,     0,     0,     0,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,     0,   163,     0,
     164,   165,   166,   167,   168,   169,     0,   170,     0,   171,
     172,   173,   174,     0,     0,   175,   176,   177,   178,   179,
       0,     0,   180,   181,   182,     0,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,     0,   201,     0,
     202,     0,     0,     0,   205,   206,   207,     0,   209,     0,
     210,     0,     0,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,     0,   220,   221,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,   230,     0,   232,   233,
     234,   235,   236,   237,   238,     0,   239,     0,   240,     0,
       0,   243,     0,   245,   246,   247,   248,   249,     0,     0,
     250,     0,   252,     0,     0,   254,   255,   256,     0,     0,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,     0,   282,   283,   284,   285,     0,
     286,     0,   287,   288,     0,   290,     0,   291,   292,   293,
     294,   295,   296,     0,   297,   298,     0,     0,   299,   300,
     301,     0,     0,   302,   303,     0,   305,     0,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
     318,   319,   320,   321,   322,   323,   324,   325,   326,     0,
     327,   328,   329,   330,   331,     0,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
       0,   344,   345,   346,   347,   348,   349,   350,   351,   352,
       0,   353,   354,     0,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,     0,
     371,   372,   373,   374,   375,     0,   376,   377,   378,   379,
     380,     0,   382,   383,   384,   385,     0,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,     0,   400,   401,     0,   402,     0,   404,   405,
     406,   407,   408,     0,   409,   410,     0,     0,   411,   412,
     413,   414,   415,     0,   416,   417,   418,   419,   420,   421,
     422,     0,     0,   423,   424,   425,   426,   427,     0,     0,
     428,   429,   430,   431,   432,   433,   434,     0,   435,     0,
     437,     0,   438,   439,   440,     0,     0,   441,     0,     0,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,     0,   488,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2296,    91,    92,
      93,    94,    95,    96,    97,    98,     0,    99,   100,   101,
       0,     0,     0,     0,     0,     0,     0,   102,   103,     0,
     104,   105,   106,     0,   108,   109,   110,   111,   112,     0,
     114,   115,     0,   116,   117,   118,   119,   120,   121,     0,
       0,   122,   123,   124,   125,   126,     0,   127,   128,   129,
     130,   131,     0,     0,     0,   133,   134,   135,   136,   137,
       0,   139,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,     0,   149,   150,   151,     0,     0,     0,     0,
       0,     0,     0,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,     0,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,     0,   171,   172,   173,   174,     0,
       0,   175,   176,   177,   178,   179,     0,     0,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,     0,   196,     0,   197,
     198,   199,   200,     0,   201,     0,   202,     0,     0,     0,
     205,   206,   207,     0,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,   214,   215,   216,   217,   218,     0,
     220,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,     0,   232,   233,   234,   235,   236,   237,
     238,     0,   239,     0,   240,     0,     0,   243,     0,   245,
     246,   247,   248,   249,     0,     0,   250,     0,   252,     0,
       0,   254,   255,   256,     0,     0,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
       0,   282,   283,   284,   285,     0,   286,     0,   287,   288,
       0,   290,     0,   291,   292,   293,   294,   295,   296,     0,
     297,   298,     0,     0,   299,   300,   301,     0,     0,   302,
     303,     0,   305,     0,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,     0,   327,   328,   329,   330,
     331,     0,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,     0,   344,   345,   346,
     347,   348,   349,   350,   351,   352,     0,   353,   354,     0,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,     0,   371,   372,   373,   374,
     375,     0,   376,   377,   378,   379,   380,     0,   382,   383,
     384,   385,     0,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,     0,   400,
     401,     0,   402,     0,   404,   405,   406,   407,   408,     0,
     409,   410,     0,     0,   411,   412,   413,   414,   415,     0,
     416,   417,   418,   419,   420,   421,   422,     0,     0,   423,
     424,   425,   426,   427,     0,     0,   428,   429,   430,   431,
     432,   433,   434,     0,   435,     0,   437,     0,   438,   439,
     440,     0,     0,   441,     0,     0,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,     0,   488,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   772,    91,    92,    93,    94,    95,    96,
      97,    98,     0,    99,   100,   101,     0,     0,     0,     0,
       0,     0,     0,   102,   103,     0,   104,   105,   106,     0,
     108,   109,   110,   111,   112,     0,   114,   115,     0,   116,
     117,   118,   119,   120,   121,     0,     0,   122,   123,   124,
     125,   126,     0,   127,   128,   129,   130,   131,     0,     0,
       0,   133,   134,   135,   136,   137,     0,   139,   140,   141,
       0,   142,   143,   144,   145,   146,   147,     0,     0,   149,
     150,   151,     0,     0,     0,     0,     0,     0,     0,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,     0,
     163,     0,   164,   165,   166,   167,   168,   169,     0,   170,
       0,   171,   172,   173,   174,     0,     0,   175,   176,   177,
     178,   179,     0,     0,   180,   181,   182,     0,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,     0,   196,     0,   197,   198,   199,   200,     0,
     201,     0,   202,     0,     0,     0,   205,   206,   207,     0,
     209,     0,   210,     0,     0,     0,   211,   212,     0,   213,
     214,   215,   216,   217,   218,     0,   220,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,     0,   230,     0,
     232,   233,   234,   235,   236,   237,   238,     0,   239,     0,
     240,     0,     0,   243,     0,   245,   246,   247,   248,   249,
       0,     0,   250,     0,   252,     0,     0,   254,   255,   256,
       0,     0,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,     0,   282,   283,   284,
     285,     0,   286,     0,   287,   288,     0,   290,     0,   291,
     292,   293,   294,   295,   296,     0,   297,   298,     0,     0,
     299,   300,   301,     0,     0,   302,   303,     0,   305,     0,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,     0,   318,   319,   320,   321,   322,   323,   324,   325,
     326,     0,   327,   328,   329,   330,   331,     0,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,     0,   344,   345,   346,   347,   348,   349,   350,
     351,   352,     0,   353,   354,     0,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,     0,   371,   372,   373,   374,   375,     0,   376,   377,
     378,   379,   380,     0,   382,   383,   384,   385,     0,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,     0,   400,   401,     0,   402,     0,
     404,   405,   406,   407,   408,     0,   409,   410,     0,     0,
     411,   412,   413,   414,   415,     0,   416,   417,   418,   419,
     420,   421,   422,     0,     0,   423,   424,   425,   426,   427,
       0,     0,   428,   429,   430,   431,   432,   433,   434,     0,
     435,     0,   437,     0,   438,   439,   440,     0,     0,   441,
       0,     0,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,     0,   488,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1609,
      91,    92,    93,    94,    95,    96,    97,    98,     0,    99,
     100,   101,     0,     0,     0,     0,     0,     0,     0,   102,
     103,     0,   104,   105,   106,     0,   108,   109,   110,   111,
     112,     0,   114,   115,     0,   116,   117,   118,   119,   120,
     121,     0,     0,   122,   123,   124,   125,   126,     0,   127,
     128,   129,   130,   131,     0,     0,     0,   133,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,     0,   282,   283,   284,   285,     0,   286,     0,
     287,   288,     0,   290,     0,   291,   292,   293,   294,   295,
     296,     0,   297,   298,     0,     0,   299,   300,   301,     0,
       0,   302,   303,     0,   305,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,     0,   318,   319,
     320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
     329,   330,   331,     0,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,     0,   353,
     354,     0,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,     0,   376,   377,   378,   379,   380,     0,
     382,   383,   384,   385,     0,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,     0,   402,     0,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,   411,   412,   413,   414,
     415,     0,   416,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,   427,     0,     0,   428,   429,
     430,   431,   432,   433,   434,     0,   435,     0,   437,     0,
     438,   439,   440,     0,     0,   441,     0,     0,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,     0,
       0,     0,     0,  1029,  1006,   533,     0,     0,  1440,   676,
       0,     0,     0,     0,     0,  2086,  1441,  1442,  1443,    91,
      92,    93,    94,    95,    96,    97,    98,   872,    99,   100,
     101,   873,   874,   875,   876,   877,   878,   879,   102,   103,
     880,   104,   105,   106,   107,   108,   109,   110,     0,  1030,
     113,  1031,  1032,   881,   116,   117,   118,   119,   120,   121,
     882,   883,   122,   123,  1033,  1034,   126,   884,   127,   128,
     129,   130,     0,   885,   132,   886,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   887,   142,   143,   144,   145,
     146,   147,   888,   148,   149,   150,   151,   889,   890,   891,
     152,   892,   893,   894,   153,   154,   155,   156,   157,   158,
     159,  1035,  1036,   162,   895,   163,   896,   164,   165,   166,
     167,   168,   169,   897,   170,   898,   171,   172,   173,   174,
     899,   900,   175,   176,   697,   178,   179,   901,   902,   180,
     181,   182,   903,   183,   184,   185,   904,   186,   187,   188,
     189,     0,   191,   192,   193,   194,     0,   905,   196,   906,
     197,   198,  1037,   200,   907,   201,   908,   202,   203,   909,
     204,   205,   206,   207,   208,   209,   910,   210,   911,   912,
     913,     0,   212,   914,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   915,   224,   225,   226,   227,
     228,   229,   916,   230,   231,     0,   233,   234,   235,   236,
    1038,  1039,   917,  1040,   918,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   919,   920,   250,   251,   252,
     253,   921,   254,   255,   256,   922,   923,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
    1041,   281,  1042,   283,   284,   285,   924,  2187,   925,   287,
     288,   289,   290,   926,     0,   292,  1043,   294,   295,   296,
     927,   297,   298,   928,   929,  2188,   300,   301,   930,   931,
     302,     0,   304,   305,   306,     0,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   932,   318,   319,     0,
     321,   322,     0,   324,   325,   326,   933,   327,   328,   329,
     330,   331,   934,   935,   332,   333,   334,   335,  1044,   337,
     338,   339,   340,   936,   341,   342,   343,   937,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   938,   353,   354,
     355,   356,   357,   358,  1045,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   939,   371,   372,   373,
     374,   375,   940,   376,  2189,   378,   379,   380,   381,   382,
     383,  1047,   385,   941,   942,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,  1048,   398,     0,   943,
     400,   401,   944,   402,   403,   404,   405,   406,   407,   408,
     945,  1049,  1050,   946,   947,   411,   412,     0,   414,     0,
     948,   416,   417,   418,   419,   420,   421,   422,   949,   950,
     423,   424,   425,   426,   427,   951,   952,   428,   429,   430,
     431,   432,     0,  1051,   953,   435,   436,   437,   954,   438,
     439,   440,   955,   956,   441,   957,   958,   442,   443,   444,
     445,   446,   447,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   459,   460,   461,   462,     0,   488,
       0,  1444,  1445,  1446,  1440,  2190,  2191,  1449,  1450,  1451,
    1452,     0,  1441,  1442,  1443,    91,    92,    93,    94,    95,
      96,    97,    98,     0,    99,   100,   101,     0,     0,     0,
       0,     0,     0,     0,   102,   103,     0,   104,   105,   106,
       0,   108,   109,   110,   111,   112,     0,   114,   115,     0,
     116,   117,   118,   119,   120,   121,     0,     0,   122,   123,
     124,   125,   126,     0,   127,   128,   129,   130,   131,     0,
       0,     0,   133,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,     0,   282,   283,
     284,   285,     0,   286,     0,   287,   288,     0,   290,     0,
     291,   292,   293,   294,   295,   296,     0,   297,   298,     0,
       0,   299,   300,   301,     0,     0,   302,   303,     0,   305,
       0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,     0,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,   327,   328,   329,   330,   331,     0,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,     0,   353,   354,     0,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,     0,   376,
     377,   378,   379,   380,     0,   382,   383,   384,   385,     0,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,     0,   402,
       0,   404,   405,   406,   407,   408,     0,   409,   410,     0,
       0,   411,   412,   413,   414,   415,     0,   416,   417,   418,
     419,   420,   421,   422,     0,     0,   423,   424,   425,   426,
     427,     0,     0,   428,   429,   430,   431,   432,   433,   434,
       0,   435,     0,   437,     0,   438,   439,   440,     0,     0,
     441,     0,     0,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,     0,     0,     0,  1444,  1445,  1446,
       0,  1447,  1448,  1449,  1450,  1451,  1452,  1127,     0,     0,
    1128,     0,     0,     0,     0,  1129,  1130,  1131,     0,     0,
       0,     0,     0,     0,     0,  1127,     0,     0,  1128,     0,
       0,     0,  1132,  1129,  1130,  1131,     0,     0,     0,     0,
    1134,     0,     0,  1127,     0,     0,  1128,  1135,     0,     0,
    1132,  1129,  1130,  1131,     0,     0,     0,     0,  1134,     0,
       0,     0,     0,     0,     0,  1135,     0,     0,  1132,     0,
       0,  1127,  1136,     0,  1128,     0,  1134,     0,     0,  1129,
    1130,  1131,     0,  1135,     0,     0,     0,     0,     0,  1127,
    1136,     0,  1128,     0,     0,     0,  1132,  1129,  1130,  1131,
       0,     0,     0,     0,  1134,     0,     0,     0,  1136,     0,
       0,  1135,     0,     0,  1132,     0,     0,     0,     0,     0,
       0,     0,  1134,     0,     0,     0,     0,     0,     0,  1135,
       0,     0,     0,     0,     0,     0,  1136,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1136,     0,     0,     0,     0,  1127,
       0,     0,  1128,     0,     0,     0,     0,  1129,  1130,  1131,
       0,     0,     0,  1137,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1132,     0,     0,     0,     0,  1138,
       0,  1137,  1134,     0,  1139,     0,     0,     0,     0,  1135,
       0,     0,     0,     0,     0,     0,     0,  1138,     0,  1137,
       0,     0,  1139,     0,     0,  1140,  1141,     0,     0,     0,
       0,     0,     0,     0,  1136,  1138,     0,     0,     0,  1142,
    1139,     0,     0,  1140,  1141,     0,     0,  1137,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1142,     0,     0,
       0,  1140,  1141,  1138,     0,  1137,     0,     0,  1139,     0,
       0,     0,     0,     0,     0,  1142,     0,  1143,     0,     0,
    1144,  1138,     0,     0,     0,     0,  1139,     0,     0,  1140,
    1141,     0,     0,     0,  1145,  1143,     0,  1146,  1144,     0,
       0,     0,     0,  1142,     0,     0,     0,  1140,  1141,     0,
       0,     0,  1145,  1143,     0,  1146,  1144,     0,     0,     0,
       0,  1142,     0,     0,     0,     0,     0,     0,     0,     0,
    1145,     0,     0,  1146,     0,  1137,     0,     0,     0,     0,
       0,  1143,     0,     0,  1144,     0,     0,     0,     0,     0,
       0,  1138,     0,     0,     0,     0,  1139,     0,  1145,  1143,
       0,  1146,  1144,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1145,  1140,  1141,  1146,
       0,     0,     0,     0,     0,     0,     0,  1147,     0,     0,
       0,  1142,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1147,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1147,     0,     0,     0,     0,     0,  1143,
       0,     0,  1144,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1145,     0,     0,  1146,
       0,  1147,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1147,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1148,     0,     0,
    1149,  1150,  1151,     0,  1152,  1153,  1154,  1155,  1156,  1157,
       0,     0,     0,     0,  2247,  1148,     0,     0,  1149,  1150,
    1151,     0,  1152,  1153,  1154,  1155,  1156,  1157,     0,     0,
       0,     0,  2265,  1148,     0,     0,  1149,  1150,  1151,     0,
    1152,  1153,  1154,  1155,  1156,  1157,     0,     0,     0,  1147,
    2411,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1148,     0,     0,  1149,  1150,  1151,     0,  1152,  1153,
    1154,  1155,  1156,  1157,     0,     0,     0,     0,  2621,  1148,
       0,     0,  1149,  1150,  1151,     0,  1152,  1153,  1154,  1155,
    1156,  1157,     0,     0,     0,     0,  2633,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1148,
     871,     0,  1149,  1150,  1151,     0,  1152,  1153,  1154,  1155,
    1156,  1157,     0,     0,  1303,     0,    91,    92,    93,    94,
      95,    96,    97,    98,   872,    99,   100,   101,   873,   874,
     875,   876,   877,   878,   879,   102,   103,   880,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     881,   116,   117,   118,   119,   120,   121,   882,   883,   122,
     123,   124,   125,   126,   884,   127,   128,   129,   130,   131,
     885,   132,   886,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   887,   142,   143,   144,   145,   146,   147,   888,
     148,   149,   150,   151,   889,   890,   891,   152,   892,   893,
     894,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   895,   163,   896,   164,   165,   166,   167,   168,   169,
     897,   170,   898,   171,   172,   173,   174,   899,   900,   175,
     176,   177,   178,   179,   901,   902,   180,   181,   182,   903,
     183,   184,   185,   904,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   905,   196,   906,   197,   198,   199,
     200,   907,   201,   908,   202,   203,   909,   204,   205,   206,
     207,   208,   209,   910,   210,   911,   912,   913,   211,   212,
     914,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   915,   224,   225,   226,   227,   228,   229,   916,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   917,
     239,   918,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   919,   920,   250,   251,   252,   253,   921,   254,
     255,   256,   922,   923,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   924,   286,   925,   287,   288,   289,   290,
     926,   291,   292,   293,   294,   295,   296,   927,   297,   298,
     928,   929,   299,   300,   301,   930,   931,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   932,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   933,   327,   328,   329,   330,   331,   934,
     935,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     936,   341,   342,   343,   937,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   938,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   939,   371,   372,   373,   374,   375,   940,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     941,   942,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   943,   400,   401,   944,
     402,   403,   404,   405,   406,   407,   408,   945,   409,   410,
     946,   947,   411,   412,   413,   414,   415,   948,   416,   417,
     418,   419,   420,   421,   422,   949,   950,   423,   424,   425,
     426,   427,   951,   952,   428,   429,   430,   431,   432,   433,
     434,   953,   435,   436,   437,   954,   438,   439,   440,   955,
     956,   441,   957,   958,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   488,     0,     0,     0,     0,
       0,     0,     0,     0,   959,     0,     0,     0,     0,     0,
       0,    91,    92,    93,    94,    95,    96,    97,    98,     0,
      99,   100,   101,     0,     0,     0,     0,     0,     0,     0,
     102,   103,     0,   104,   105,   106,     0,   108,   109,   110,
     111,   112,     0,   114,   115,     0,   116,   117,   118,   119,
     120,   121,     0,     0,   122,   123,   124,   125,   126,     0,
     127,   128,   129,   130,   131,     0,     0,     0,   133,   134,
     135,   136,   137,     0,   139,   140,   141,     0,   142,   143,
     144,   145,   146,   147,     0,     0,   149,   150,   151,     0,
       0,     0,     0,     0,     0,     0,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,     0,   163,     0,   164,
     165,   166,   167,   168,   169,     0,   170,     0,   171,   172,
     173,   174,     0,     0,   175,   176,   177,   178,   179,     0,
       0,   180,   181,   182,     0,   183,   184,   185,     0,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,     0,   197,   198,   199,   200,     0,   201,     0,   202,
       0,     0,     0,   205,   206,   207,     0,   209,     0,   210,
       0,     0,     0,   211,   212,     0,   213,   214,   215,   216,
     217,   218,     0,   220,   221,   222,   223,     0,   224,   225,
     226,   227,   228,   229,     0,   230,     0,   232,   233,   234,
     235,   236,   237,   238,     0,   239,     0,   240,     0,     0,
     243,     0,   245,   246,   247,   248,   249,     0,     0,   250,
       0,   252,     0,     0,   254,   255,   256,     0,     0,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,     0,   282,   283,   284,   285,     0,   286,
       0,   287,   288,     0,   290,     0,   291,   292,   293,   294,
     295,   296,     0,   297,   298,     0,     0,   299,   300,   301,
       0,     0,   302,   303,     0,   305,     0,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
     328,   329,   330,   331,     0,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,     0,
     344,   345,   346,   347,   348,   349,   350,   351,   352,     0,
     353,   354,     0,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,     0,   371,
     372,   373,   374,   375,     0,   376,   377,   378,   379,   380,
       0,   382,   383,   384,   385,     0,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,     0,   400,   401,     0,   402,     0,   404,   405,   406,
     407,   408,     0,   409,   410,     0,     0,   411,   412,   413,
     414,   415,     0,   416,   417,   418,   419,   420,   421,   422,
       0,     0,   423,   424,   425,   426,   427,     0,     0,   428,
     429,   430,   431,   432,   433,   434,     0,   435,     0,   437,
       0,   438,   439,   440,     0,     0,   441,     0,     0,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     652,  1006,   533,     0,     0,     0,   676,     0,     0,  2005,
       0,     0,     0,     0,     0,     0,    91,    92,    93,    94,
      95,    96,    97,    98,     0,    99,   100,   101,     0,     0,
       0,     0,     0,     0,     0,   102,   103,     0,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
       0,   116,   117,   118,   119,   120,   121,     0,     0,   122,
     123,   124,   125,   126,     0,   127,   128,   129,   130,   131,
       0,   132,     0,   133,   134,   135,   136,   137,   138,   139,
     140,   141,     0,   142,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,     0,     0,     0,   152,     0,     0,
       0,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,  1183,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,     0,   171,   172,   173,   174,     0,     0,   175,
     176,   177,   178,   179,     0,     0,   180,   181,   182,     0,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,  1007,   196,     0,   197,   198,   199,
     200,     0,   201,     0,   202,   203,     0,   204,   205,   206,
     207,   208,   209,     0,   210,     0,     0,     0,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,   225,   226,   227,   228,   229,     0,
     230,   231,   232,   233,   234,   235,   236,   237,   238,     0,
     239,     0,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,     0,     0,   250,   251,   252,   253,     0,   254,
     255,   256,     0,     0,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,     0,   286,     0,   287,   288,   289,   290,
       0,   291,   292,   293,   294,   295,   296,     0,   297,   298,
    1008,     0,   299,   300,   301,     0,     0,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,     0,   327,   328,   329,   330,   331,     0,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,     0,   344,   345,   346,   347,   348,
     349,   350,   351,   352,     0,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,     0,   371,   372,   373,   374,   375,     0,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
       0,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,     0,   400,   401,     0,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,     0,   411,   412,   413,   414,   415,  1009,   416,   417,
     418,   419,   420,   421,   422,     0,     0,   423,   424,   425,
     426,   427,     0,     0,   428,   429,   430,   431,   432,   433,
     434,     0,   435,   436,   437,     0,   438,   439,   440,     0,
       0,   441,     0,     0,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   652,  1006,   533,     0,     0,
       0,   676,  1010,  1011,     0,     0,     0,     0,     0,     0,
       0,    91,    92,    93,    94,    95,    96,    97,    98,     0,
      99,   100,   101,     0,     0,     0,     0,     0,     0,     0,
     102,   103,     0,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,     0,   116,   117,   118,   119,
     120,   121,     0,     0,   122,   123,   124,   125,   126,     0,
     127,   128,   129,   130,   131,     0,   132,     0,   133,   134,
     135,   136,   137,   138,   139,   140,   141,     0,   142,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,     0,
       0,     0,   152,     0,     0,     0,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,  1185,   163,     0,   164,
     165,   166,   167,   168,   169,     0,   170,     0,   171,   172,
     173,   174,     0,     0,   175,   176,   177,   178,   179,     0,
       0,   180,   181,   182,     0,   183,   184,   185,     0,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,  1007,
     196,     0,   197,   198,   199,   200,     0,   201,     0,   202,
     203,     0,   204,   205,   206,   207,   208,   209,     0,   210,
       0,     0,     0,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,   225,
     226,   227,   228,   229,     0,   230,   231,   232,   233,   234,
     235,   236,   237,   238,     0,   239,     0,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,     0,     0,   250,
     251,   252,   253,     0,   254,   255,   256,     0,     0,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,     0,   286,
       0,   287,   288,   289,   290,     0,   291,   292,   293,   294,
     295,   296,     0,   297,   298,  1008,     0,   299,   300,   301,
       0,     0,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
     328,   329,   330,   331,     0,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,     0,
     344,   345,   346,   347,   348,   349,   350,   351,   352,     0,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,     0,   371,
     372,   373,   374,   375,     0,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,     0,   400,   401,     0,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,     0,     0,   411,   412,   413,
     414,   415,  1009,   416,   417,   418,   419,   420,   421,   422,
       0,     0,   423,   424,   425,   426,   427,     0,     0,   428,
     429,   430,   431,   432,   433,   434,     0,   435,   436,   437,
       0,   438,   439,   440,     0,     0,   441,     0,     0,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     652,  1006,   533,     0,     0,     0,   676,  1010,  1011,     0,
       0,     0,     0,     0,     0,     0,    91,    92,    93,    94,
      95,    96,    97,    98,     0,    99,   100,   101,     0,     0,
       0,     0,     0,     0,     0,   102,   103,     0,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
       0,   116,   117,   118,   119,   120,   121,     0,     0,   122,
     123,   124,   125,   126,     0,   127,   128,   129,   130,   131,
       0,   132,     0,   133,   134,   135,   136,   137,   138,   139,
     140,   141,     0,   142,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,     0,     0,     0,   152,     0,     0,
       0,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,     0,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,     0,   171,   172,   173,   174,     0,     0,   175,
     176,   177,   178,   179,     0,     0,   180,   181,   182,     0,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,  1007,   196,     0,   197,   198,   199,
     200,     0,   201,     0,   202,   203,     0,   204,   205,   206,
     207,   208,   209,     0,   210,     0,     0,     0,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,   225,   226,   227,   228,   229,     0,
     230,   231,   232,   233,   234,   235,   236,   237,   238,     0,
     239,     0,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,     0,     0,   250,   251,   252,   253,     0,   254,
     255,   256,     0,     0,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,     0,   286,     0,   287,   288,   289,   290,
       0,   291,   292,   293,   294,   295,   296,     0,   297,   298,
    1008,     0,   299,   300,   301,     0,     0,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,     0,   327,   328,   329,   330,   331,     0,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,     0,   344,   345,   346,   347,   348,
     349,   350,   351,   352,     0,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,     0,   371,   372,   373,   374,   375,     0,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
       0,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,     0,   400,   401,     0,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,     0,   411,   412,   413,   414,   415,  1009,   416,   417,
     418,   419,   420,   421,   422,     0,     0,   423,   424,   425,
     426,   427,     0,     0,   428,   429,   430,   431,   432,   433,
     434,     0,   435,   436,   437,     0,   438,   439,   440,     0,
       0,   441,     0,     0,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,     0,  1127,     0,     0,  1128,
       0,     0,  1010,  1011,  1129,  1130,  1131,     0,     0,     0,
       0,     0,     0,     0,  1127,     0,     0,  1128,     0,     0,
       0,  1132,  1129,  1130,  1131,  1571,     0,     0,     0,  1134,
       0,     0,  1127,     0,     0,  1128,  1135,     0,     0,  1132,
    1129,  1130,  1131,     0,     0,     0,     0,  1134,     0,     0,
       0,     0,     0,     0,  1135,     0,     0,  1132,     0,     0,
    1127,  1136,     0,  1128,     0,  1134,     0,     0,  1129,  1130,
    1131,     0,  1135,     0,     0,     0,     0,     0,     0,  1136,
       0,     0,     0,     0,     0,  1132,     0,     0,  1760,     0,
       0,     0,     0,  1134,     0,     0,     0,  1136,     0,     0,
    1135,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1572,     0,     0,     0,     0,     0,     0,     0,     0,
    1127,     0,     0,  1128,     0,  1136,     0,     0,  1129,  1130,
    1131,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1132,     0,     0,     0,     0,
       0,     0,     0,  1134,     0,     0,     0,     0,     0,     0,
    1135,     0,  1137,     0,     0,     0,     0,     0,     0,     0,
    1800,     0,     0,     0,     0,  1801,     0,     0,  1138,     0,
    1137,     0,     0,  1139,     0,  1136,     0,  2697,     0,     0,
       0,     0,     0,     0,     0,     0,  1138,     0,  1137,     0,
       0,  1139,     0,     0,  1140,  1141,     0,     0,     0,     0,
       0,     0,     0,     0,  1138,     0,     0,     0,  1142,  1139,
       0,     0,  1140,  1141,     0,     0,  1137,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1142,     0,     0,     0,
    1140,  1141,  1138,     0,     0,     0,     0,  1139,     0,     0,
       0,     0,     0,     0,  1142,     0,  1143,     0,     0,  1144,
       0,     0,     0,     0,     0,     0,     0,     0,  1140,  1141,
       0,     0,     0,  1145,  1143,     0,  1146,  1144,     0,     0,
       0,     0,  1142,     0,     0,     0,  1137,     0,     0,     0,
       0,  1145,  1143,     0,  1146,  1144,     0,     0,     0,     0,
       0,     0,  1138,     0,     0,     0,     0,  1139,     0,  1145,
       0,     0,  1146,     0,     0,     0,     0,     0,     0,     0,
    1143,     0,     0,  1144,     0,     0,     0,     0,  1140,  1141,
       0,     0,     0,     0,     0,  2698,     0,  1145,     0,     0,
    1146,     0,  1142,     0,     0,     0,     0,     0,     0,  1127,
       0,     0,  1128,     0,     0,     0,     0,  1129,  1130,  1131,
       0,     0,     0,     0,     0,     0,  1147,     0,     0,     0,
       0,     0,     0,     0,  1132,     0,     0,  1809,     0,     0,
    1143,     0,  1134,  1144,  1147,     0,     0,     0,     0,  1135,
       0,     0,     0,     0,     0,  1127,     0,  1145,  1128,     0,
    1146,     0,  1147,  1129,  1130,  1131,     0,     0,     0,     0,
       0,     0,     0,     0,  1136,     0,     0,     0,  1774,     0,
    1132,     0,     0,     0,  1573,     0,     0,     0,  1134,     0,
    1147,     0,     0,     0,     0,  1135,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1136,     0,     0,     0,     0,     0,  1148,     0,     0,  1149,
    1150,  1151,     0,  1152,  1153,  1154,  1155,  1156,  1157,     0,
       0,     0,     0,     0,  1148,     0,     0,  1149,  1150,  1151,
    1147,  1152,  1153,  1154,  1155,  1156,  1157,     0,     0,     0,
       0,     0,  1148,     0,     0,  1149,  1150,  1151,     0,  1152,
    1153,  1154,  1155,  1156,  1157,  1137,     0,     0,     0,  1127,
       0,     0,  1128,     0,     0,     0,     0,  1129,  1130,  1131,
    1148,  1138,     0,  1149,  1150,  1151,  1139,  1152,  1153,  1154,
    1155,  1156,  1157,     0,  1132,     0,     0,     0,     0,     0,
       0,     0,  1134,     0,     0,     0,  1814,  1140,  1141,  1135,
       0,  1137,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1142,     0,     0,     0,     0,     0,  1138,     0,     0,
       0,     0,  1139,     0,  1136,     0,     0,     0,     0,     0,
    1148,     0,     0,  1149,  1150,  1151,     0,  1152,  1153,  1154,
    1155,  1156,  1157,  1140,  1141,     0,     0,     0,     0,  1143,
       0,     0,  1144,     0,     0,     0,     0,  1142,     0,     0,
       0,     0,     0,     0,     0,     0,  1145,     0,     0,  1146,
       0,     0,     0,     0,  1127,     0,     0,  1128,     0,     0,
       0,     0,  1129,  1130,  1131,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1143,     0,     0,  1144,  1132,
       0,     0,     0,     0,     0,     0,     0,  1134,     0,     0,
    1127,     0,  1145,  1128,  1135,  1146,     0,     0,  1129,  1130,
    1131,     0,     0,     0,     0,  1137,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1132,     0,     0,     0,  1136,
       0,  1138,     0,  1134,     0,     0,  1139,     0,     0,     0,
    1135,     0,     0,     0,     0,     0,     0,     0,     0,  1147,
       0,     0,     0,     0,     0,     0,     0,  1140,  1141,     0,
       0,     0,     0,     0,     0,  1136,     0,     0,     0,     0,
       0,  1142,     0,     0,     0,     0,     0,  1127,     0,     0,
    1128,     0,     0,     0,     0,  1129,  1130,  1131,     0,     0,
       0,     0,     0,     0,     0,  1147,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1143,
    1134,     0,  1144,     0,     0,     0,     0,  1135,     0,     0,
       0,     0,     0,     0,     0,     0,  1145,     0,     0,  1146,
    1137,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1136,     0,     0,     0,  1138,     0,     0,  1148,
       0,  1139,  1149,  1150,  1151,     0,  1152,  1153,  1154,  1155,
    1156,  1157,     0,     0,     0,     0,  1137,     0,     0,     0,
       0,     0,  1140,  1141,     0,     0,     0,     0,     0,     0,
       0,     0,  1138,     0,     0,     0,  1142,  1139,     0,     0,
       0,     0,     0,     0,     0,  1148,     0,     0,  1149,  1150,
    1151,     0,  1152,  1153,  1154,  1155,  1156,  1157,  1140,  1141,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1147,
       0,     0,  1142,     0,  1143,     0,     0,  1144,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1145,     0,  1137,  1146,     0,     0,     0,     0,     0,
       0,  2025,     0,     0,     0,     0,     0,     0,     0,  1138,
    1143,     0,     0,  1144,  1139,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1145,     0,     0,
       0,     0,     0,     0,     0,  1140,  1141,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1142,
       0,     0,  1127,     0,     0,  1128,     0,     0,     0,     0,
    1129,  1130,  1131,     0,     0,     0,     0,     0,     0,  1148,
       0,     0,  1149,  1150,  1151,     0,  1152,  1153,  1154,  1155,
    1156,  1157,     0,     0,  1147,  1134,     0,  1143,     0,     0,
    1144,     0,  1135,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1145,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1136,     0,     0,
    1147,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1148,     0,     0,  1149,  1150,  1151,
       0,  1152,  1153,  1154,  1155,  1156,  1157,  1147,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1137,     0,
    1148,     0,     0,  1149,  1150,  1151,     0,  1152,  1153,  1154,
    1155,  1156,  1157,     0,  1138,     0,     0,     0,     0,  1139,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1552, -1552,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1142,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1148,     0,     0,
    1149,  1150,  1151,     0,  1152,  1153,  1154,  1155,  1156,  1157,
       0,     0,     0,     0,     0, -1552,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1145,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1147,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   871,
       0,  1494,  1148,     0,     0,  1149,  1150,  1151,     0,  1152,
    1153,  1154,  1155,  1156,  1157,    91,    92,    93,    94,    95,
      96,    97,    98,   872,    99,   100,   101,   873,   874,   875,
     876,   877,   878,   879,   102,   103,   880,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   881,
     116,   117,   118,   119,   120,   121,   882,   883,   122,   123,
     124,   125,   126,   884,   127,   128,   129,   130,   131,   885,
     132,   886,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   887,   142,   143,   144,   145,   146,   147,   888,   148,
     149,   150,   151,   889,   890,   891,   152,   892,   893,   894,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     895,   163,   896,   164,   165,   166,   167,   168,   169,   897,
     170,   898,   171,   172,   173,   174,   899,   900,   175,   176,
     177,   178,   179,   901,   902,   180,   181,   182,   903,   183,
     184,   185,   904,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   905,   196,   906,   197,   198,   199,   200,
     907,   201,   908,   202,   203,   909,   204,   205,   206,   207,
     208,   209,   910,   210,   911,   912,   913,   211,   212,   914,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   915,   224,   225,   226,   227,   228,   229,   916,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   917,   239,
     918,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   919,   920,   250,   251,   252,   253,   921,   254,   255,
     256,   922,   923,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   924,   286,   925,   287,   288,   289,   290,   926,
     291,   292,   293,   294,   295,   296,   927,   297,   298,   928,
     929,   299,   300,   301,   930,   931,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   932,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   933,   327,   328,   329,   330,   331,   934,   935,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   936,
     341,   342,   343,   937,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   938,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   939,   371,   372,   373,   374,   375,   940,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   941,
     942,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   943,   400,   401,   944,   402,
     403,   404,   405,   406,   407,   408,   945,   409,   410,   946,
     947,   411,   412,   413,   414,   415,   948,   416,   417,   418,
     419,   420,   421,   422,   949,   950,   423,   424,   425,   426,
     427,   951,   952,   428,   429,   430,   431,   432,   433,   434,
     953,   435,   436,   437,   954,   438,   439,   440,   955,   956,
     441,   957,   958,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   871,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      91,    92,    93,    94,    95,    96,    97,    98,   872,    99,
     100,   101,   873,   874,   875,   876,   877,   878,   879,   102,
     103,   880,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   881,   116,   117,   118,   119,   120,
     121,   882,   883,   122,   123,   124,   125,   126,   884,   127,
     128,   129,   130,   131,   885,   132,   886,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   887,   142,   143,   144,
     145,   146,   147,   888,   148,   149,   150,   151,   889,   890,
     891,   152,   892,   893,   894,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   895,   163,   896,   164,   165,
     166,   167,   168,   169,   897,   170,   898,   171,   172,   173,
     174,   899,   900,   175,   176,   177,   178,   179,   901,   902,
     180,   181,   182,   903,   183,   184,   185,   904,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   905,   196,
     906,   197,   198,   199,   200,   907,   201,   908,   202,   203,
     909,   204,   205,   206,   207,   208,   209,   910,   210,   911,
     912,   913,   211,   212,   914,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   915,   224,   225,   226,
     227,   228,   229,   916,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   917,   239,   918,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   919,   920,   250,   251,
     252,   253,   921,   254,   255,   256,   922,   923,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   924,   286,   925,
     287,   288,   289,   290,   926,   291,   292,   293,   294,   295,
     296,   927,   297,   298,   928,   929,   299,   300,   301,   930,
     931,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   932,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   933,   327,   328,
     329,   330,   331,   934,   935,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   936,   341,   342,   343,   937,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   938,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   939,   371,   372,
     373,   374,   375,   940,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   941,   942,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     943,   400,   401,   944,   402,   403,   404,   405,   406,   407,
     408,   945,   409,   410,   946,   947,   411,   412,   413,   414,
     415,   948,   416,   417,   418,   419,   420,   421,   422,   949,
     950,   423,   424,   425,   426,   427,   951,   952,   428,   429,
     430,   431,   432,   433,   434,   953,   435,   436,   437,   954,
     438,   439,   440,   955,   956,   441,   957,   958,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   871,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    91,    92,    93,    94,  1634,
      96,    97,    98,   872,    99,   100,   101,   873,   874,   875,
     876,   877,   878,   879,   102,   103,   880,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   881,
     116,   117,   118,   119,   120,   121,   882,   883,   122,   123,
     124,   125,   126,   884,   127,   128,   129,   130,   131,   885,
     132,   886,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   887,   142,   143,   144,   145,   146,   147,   888,   148,
     149,   150,   151,   889,   890,   891,   152,   892,   893,   894,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     895,   163,   896,   164,   165,   166,   167,   168,   169,   897,
     170,   898,   171,   172,   173,   174,   899,   900,   175,   176,
     177,  1635,   179,   901,   902,   180,   181,   182,   903,   183,
     184,   185,   904,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   905,   196,   906,   197,   198,   199,   200,
     907,   201,   908,   202,   203,   909,   204,   205,   206,   207,
     208,   209,   910,   210,   911,   912,   913,   211,   212,   914,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   915,   224,   225,   226,   227,   228,   229,   916,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   917,   239,
     918,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   919,   920,   250,   251,   252,   253,   921,   254,   255,
     256,   922,   923,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   924,   286,   925,   287,   288,   289,   290,   926,
     291,   292,   293,   294,   295,   296,   927,   297,   298,   928,
     929,   299,   300,   301,   930,   931,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   932,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   933,   327,   328,   329,   330,   331,   934,   935,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   936,
     341,   342,   343,   937,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   938,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   939,   371,   372,   373,   374,   375,   940,  1636,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   941,
     942,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   943,   400,   401,   944,   402,
     403,   404,   405,   406,   407,   408,   945,   409,   410,   946,
     947,   411,   412,   413,   414,   415,   948,   416,   417,   418,
     419,   420,   421,   422,   949,   950,   423,   424,   425,   426,
     427,   951,   952,   428,   429,   430,   431,   432,   433,   434,
     953,   435,   436,   437,   954,   438,   439,   440,   955,   956,
     441,   957,   958,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,    90,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      91,    92,    93,    94,    95,    96,    97,    98,     0,    99,
     100,   101,     0,     0,     0,     0,     0,     0,     0,   102,
     103,     0,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,     0,   116,   117,   118,   119,   120,
     121,     0,   682,   122,   123,   124,   125,   126,     0,   127,
     128,   129,   130,   685,     0,   686,     0,   133,   134,   135,
     136,   137,   138,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,   148,   149,   150,   151,   687,   688,
     689,   690,   691,   692,   693,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   699,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,     0,     0,   250,   251,
     252,   253,     0,   254,   255,   256,   705,   706,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,     0,   286,     0,
     287,   288,   289,   290,     0,   711,   292,   293,   294,   295,
     296,     0,   297,   298,     0,     0,   299,   300,   301,     0,
       0,   302,   303,   304,   305,   306,   714,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,     0,   318,   319,
     715,   321,   322,   323,   324,   325,   326,     0,   327,   328,
     329,   330,   331,     0,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,     0,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,   718,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   720,
       0,   400,   401,     0,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,   411,   412,   723,   414,
     724,     0,   416,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,   427,   726,     0,   428,   429,
     430,   431,   432,   433,   434,     0,   435,   436,   437,     0,
     438,   439,   440,     0,     0,   441,     0,     0,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   652,
       0,   533,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    91,    92,    93,    94,    95,
      96,    97,    98,     0,    99,   100,   101,     0,     0,     0,
       0,     0,     0,     0,   102,   103,     0,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,     0,
     116,   117,   118,   119,   120,   121,     0,     0,   122,   123,
     124,   125,   126,     0,   127,   128,   129,   130,   131,     0,
     132,     0,   133,   134,   135,   136,   137,   138,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,   148,
     149,   150,   151,     0,     0,     0,   152,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,  1007,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
     231,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,     0,     0,   250,   251,   252,   253,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,     0,   286,     0,   287,   288,   289,   290,     0,
     291,   292,   293,   294,   295,   296,     0,   297,   298,  1008,
       0,   299,   300,   301,     0,     0,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,     0,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,   327,   328,   329,   330,   331,     0,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,     0,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,     0,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,     0,
       0,   411,   412,   413,   414,   415,  1009,   416,   417,   418,
     419,   420,   421,   422,     0,     0,   423,   424,   425,   426,
     427,     0,     0,   428,   429,   430,   431,   432,   433,   434,
       0,   435,   436,   437,     0,   438,   439,   440,     0,     0,
     441,     0,     0,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   652,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      91,    92,    93,    94,    95,    96,    97,    98,     0,    99,
     100,   101,     3,     4,     0,     0,     0,     0,     0,   102,
     103,     0,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,     0,   116,   117,   118,   119,   120,
     121,     0,     0,   122,   123,   124,   125,   126,     0,   127,
     128,   129,   130,   131,     0,   132,     0,   133,   134,   135,
     136,   137,   138,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,   148,   149,   150,   151,     0,     0,
       0,   152,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,     0,     0,   250,   251,
     252,   253,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,     0,   286,     0,
     287,   288,   289,   290,     0,   291,   292,   293,   294,   295,
     296,     0,   297,   298,     0,     0,   299,   300,   301,     0,
       0,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,     0,   318,   319,
     320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
     329,   330,   331,     0,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,     0,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,     0,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,     0,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,   411,   412,   413,   414,
     415,     0,   416,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,   427,     0,     0,   428,   429,
     430,   431,   432,   433,   434,     0,   435,   436,   437,     0,
     438,   439,   440,     0,     0,   441,     0,     0,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,    90,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    91,    92,    93,    94,    95,
      96,    97,    98,     0,    99,   100,   101,     0,     0,     0,
       0,     0,     0,     0,   102,   103,     0,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,     0,
     116,   117,   118,   119,   120,   121,     0,     0,   122,   123,
     124,   125,   126,     0,   127,   128,   129,   130,   131,     0,
     132,     0,   133,   134,   135,   136,   137,   138,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,   148,
     149,   150,   151,     0,     0,     0,   152,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
     231,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,     0,     0,   250,   251,   252,   253,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,     0,   286,     0,   287,   288,   289,   290,     0,
     291,   292,   293,   294,   295,   296,     0,   297,   298,     0,
       0,   299,   300,   301,     0,     0,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,     0,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,   327,   328,   329,   330,   331,     0,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,     0,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,     0,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,     0,
       0,   411,   412,   413,   414,   415,     0,   416,   417,   418,
     419,   420,   421,   422,     0,     0,   423,   424,   425,   426,
     427,     0,     0,   428,   429,   430,   431,   432,   433,   434,
       0,   435,   436,   437,     0,   438,   439,   440,     0,     0,
     441,     0,     0,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   488,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      91,    92,    93,    94,    95,    96,    97,    98,     0,    99,
     100,   101,     0,     0,     0,     0,     0,     0,     0,   102,
     103,     0,   104,   105,   106,     0,   108,   109,   110,   111,
     112,     0,   114,   115,     0,   116,   117,   118,   119,   120,
     121,     0,     0,   122,   123,   124,   125,   126,  1241,   127,
     128,   129,   130,   131,     0,     0,  1242,   133,   134,   135,
     136,   137,     0,   139,   140,   141,  1243,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,  1244,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
    1245,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,     0,   282,   283,   284,   285,     0,   286,     0,
     287,   288,     0,   290,     0,   291,   292,   293,   294,   295,
     296,     0,   297,   298,     0,     0,   299,   300,   301,     0,
       0,   302,   303,     0,   305,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,     0,   318,   319,
     320,   321,   322,   323,   324,   325,   326,  1246,   327,   328,
     329,   330,   331,     0,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,     0,   353,
     354,     0,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,     0,   376,   377,   378,   379,   380,     0,
     382,   383,   384,   385,     0,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,     0,   402,     0,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,   411,   412,   413,   414,
     415,     0,   416,   417,   418,   419,   420,   421,   422,     0,
    1247,   423,   424,   425,   426,   427,     0,     0,   428,   429,
     430,   431,   432,   433,   434,     0,   435,     0,   437,     0,
     438,   439,   440,     0,     0,   441,     0,     0,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   488,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    91,    92,    93,    94,    95,
      96,    97,    98,     0,    99,   100,   101,     0,     0,     0,
       0,     0,     0,     0,   102,   103,     0,   104,   105,   106,
       0,   108,   109,   110,   111,   112,     0,   114,   115,     0,
     116,   117,   118,   119,   120,   121,     0,     0,   122,   123,
     124,   125,   126,  1241,   127,   128,   129,   130,   131,     0,
       0,     0,   133,   134,   135,   136,   137,     0,   139,   140,
     141,  1243,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,  1244,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,  1700,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,     0,   282,   283,
     284,   285,     0,   286,     0,   287,   288,     0,   290,     0,
     291,   292,   293,   294,   295,   296,     0,   297,   298,     0,
       0,   299,   300,   301,     0,     0,   302,   303,     0,   305,
       0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,     0,   318,   319,   320,   321,   322,   323,   324,
     325,   326,  1246,   327,   328,   329,   330,   331,     0,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,     0,   353,   354,     0,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,     0,   376,
     377,   378,   379,   380,     0,   382,   383,   384,   385,     0,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,     0,   402,
       0,   404,   405,   406,   407,   408,     0,   409,   410,     0,
       0,   411,   412,   413,   414,   415,     0,   416,   417,   418,
     419,   420,   421,   422,     0,  1247,   423,   424,   425,   426,
     427,     0,     0,   428,   429,   430,   431,   432,   433,   434,
       0,   435,     0,   437,     0,   438,   439,   440,     0,     0,
     441,     0,     0,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   488,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      91,    92,    93,    94,    95,    96,    97,    98,     0,    99,
     100,   101,     3,     4,     0,     0,     0,     0,     0,   102,
     103,     0,   104,   105,   106,     0,   108,   109,   110,   111,
     112,     0,   114,   115,     0,   116,   117,   118,   119,   120,
     121,     0,     0,   122,   123,   124,   125,   126,     0,   127,
     128,   129,   130,   131,     0,     0,     0,   133,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,     0,   282,   283,   284,   285,     0,   286,     0,
     287,   288,     0,   290,     0,   291,   292,   293,   294,   295,
     296,     0,   297,   298,     0,     0,   299,   300,   301,     0,
       0,   302,   303,     0,   305,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,     0,   318,   319,
     320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
     329,   330,   331,     0,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,     0,   353,
     354,     0,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,     0,   376,   377,   378,   379,   380,     0,
     382,   383,   384,   385,     0,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,     0,   402,     0,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,   411,   412,   413,   414,
     415,     0,   416,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,   427,     0,     0,   428,   429,
     430,   431,   432,   433,   434,     0,   435,     0,   437,     0,
     438,   439,   440,     0,     0,   441,     0,     0,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   488,
    2419,     0,     0,     0,     0,  2420,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    91,    92,    93,    94,    95,
      96,    97,    98,     0,    99,   100,   101,     0,     0,     0,
       0,     0,     0,     0,   102,   103,     0,   104,   105,   106,
       0,   108,   109,   110,   111,   112,     0,   114,   115,     0,
     116,   117,   118,   119,   120,   121,     0,     0,   122,   123,
     124,   125,   126,     0,   127,   128,   129,   130,   131,     0,
       0,     0,   133,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,     0,   282,   283,
     284,   285,     0,   286,     0,   287,   288,     0,   290,     0,
     291,   292,   293,   294,   295,   296,     0,   297,   298,     0,
       0,   299,   300,   301,     0,     0,   302,   303,     0,   305,
       0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,     0,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,   327,   328,   329,   330,   331,     0,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,     0,   353,   354,     0,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,     0,   376,
     377,   378,   379,   380,     0,   382,   383,   384,   385,     0,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,     0,   402,
       0,   404,   405,   406,   407,   408,     0,   409,   410,     0,
       0,   411,   412,   413,   414,   415,     0,   416,   417,   418,
     419,   420,   421,   422,     0,     0,   423,   424,   425,   426,
     427,     0,     0,   428,   429,   430,   431,   432,   433,   434,
       0,   435,     0,   437,     0,   438,   439,   440,     0,     0,
     441,     0,     0,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   488,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      91,    92,    93,    94,    95,    96,    97,    98,   489,    99,
     100,   101,     0,     0,     0,     0,     0,     0,     0,   102,
     103,     0,   104,   105,   106,     0,   108,   109,   110,   111,
     112,     0,   114,   115,     0,   116,   117,   118,   119,   120,
     121,     0,     0,   122,   123,   124,   125,   126,     0,   127,
     128,   129,   130,   131,     0,     0,     0,   133,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,     0,   282,   283,   284,   285,     0,   286,     0,
     287,   288,     0,   290,     0,   291,   292,   293,   294,   295,
     296,     0,   297,   298,     0,     0,   299,   300,   301,     0,
       0,   302,   303,     0,   305,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,     0,   318,   319,
     320,   321,   322,   323,   490,   325,   326,     0,   327,   328,
     329,   330,   331,     0,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,     0,   353,
     354,     0,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,     0,   376,   377,   378,   379,   380,     0,
     382,   383,   384,   385,     0,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,     0,   402,     0,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,   411,   412,   413,   414,
     415,     0,   416,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,   427,     0,     0,   428,   429,
     430,   431,   432,   433,   434,     0,   435,     0,   437,     0,
     438,   439,   440,     0,     0,   441,     0,     0,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   488,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    91,    92,    93,    94,    95,
      96,    97,    98,   538,    99,   100,   101,     0,     0,     0,
       0,     0,     0,     0,   102,   103,     0,   104,   105,   106,
       0,   108,   109,   110,   111,   112,     0,   114,   115,     0,
     116,   117,   118,   119,   120,   121,     0,     0,   122,   123,
     124,   125,   126,     0,   127,   128,   129,   130,   131,     0,
       0,     0,   133,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,     0,   282,   283,
     284,   285,     0,   286,     0,   287,   288,     0,   290,     0,
     291,   292,   293,   294,   295,   296,     0,   297,   298,     0,
       0,   299,   300,   301,     0,     0,   302,   303,     0,   305,
       0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,     0,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,   327,   328,   329,   330,   331,     0,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,     0,   353,   354,     0,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,     0,   376,
     377,   378,   379,   380,     0,   382,   383,   384,   385,     0,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,     0,   402,
       0,   404,   405,   406,   407,   408,     0,   539,   410,     0,
       0,   540,   412,   413,   414,   415,     0,   416,   417,   418,
     419,   420,   421,   422,     0,     0,   423,   424,   425,   426,
     427,     0,     0,   428,   429,   430,   431,   432,   433,   434,
       0,   435,     0,   437,     0,   438,   439,   440,     0,     0,
     441,     0,     0,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   488,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      91,    92,    93,    94,    95,    96,    97,    98,     0,    99,
     100,   101,     0,     0,     0,     0,     0,     0,     0,   102,
     103,     0,   104,   105,   106,     0,   108,   109,   110,   111,
     112,     0,   114,   115,     0,   116,   117,   118,   119,   120,
     121,     0,     0,   122,   123,   124,   125,   126,     0,   127,
     128,   129,   130,   131,     0,     0,     0,   133,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,     0,   282,   283,   284,   285,     0,   286,     0,
     287,   288,     0,   290,     0,   291,   292,   293,   294,   295,
     296,     0,   297,   298,     0,   558,   299,   300,   301,     0,
       0,   302,   303,     0,   305,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,     0,   318,   319,
     320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
     329,   330,   331,     0,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,     0,   353,
     354,     0,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,     0,   376,   377,   378,   379,   380,     0,
     382,   383,   384,   385,     0,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,     0,   402,     0,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,   411,   412,   413,   414,
     415,     0,   416,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,   427,     0,     0,   428,   429,
     430,   431,   432,   433,   434,     0,   435,     0,   437,     0,
     438,   439,   440,     0,     0,   441,     0,     0,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   488,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    91,    92,    93,    94,    95,
      96,    97,    98,     0,    99,   100,   101,     0,     0,     0,
       0,     0,     0,     0,   102,   103,     0,   104,   105,   106,
       0,   108,   109,   110,   111,   112,     0,   114,   115,     0,
     116,   117,   118,   119,   120,   121,     0,     0,   122,   123,
     124,   125,   126,     0,   127,   128,   129,   130,   131,     0,
       0,     0,   133,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   602,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,     0,   282,   283,
     284,   285,     0,   286,     0,   287,   288,     0,   290,     0,
     291,   292,   293,   294,   295,   296,     0,   297,   298,     0,
     558,   299,   300,   301,     0,     0,   302,   303,     0,   305,
       0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,     0,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,   327,   328,   329,   330,   331,     0,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,     0,   353,   354,     0,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,     0,   376,
     377,   378,   379,   380,     0,   382,   383,   384,   385,     0,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,     0,   402,
       0,   404,   405,   406,   407,   408,     0,   409,   410,     0,
       0,   411,   412,   413,   414,   415,     0,   416,   417,   418,
     419,   420,   421,   422,     0,     0,   423,   424,   425,   426,
     427,     0,     0,   428,   429,   430,   431,   432,   433,   434,
       0,   435,     0,   437,     0,   438,   439,   440,     0,     0,
     441,     0,     0,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   488,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      91,    92,    93,    94,    95,    96,    97,    98,   631,    99,
     100,   101,     0,     0,     0,     0,     0,     0,     0,   102,
     103,     0,   104,   105,   106,     0,   108,   109,   110,   111,
     112,     0,   114,   115,     0,   116,   117,   118,   119,   120,
     121,     0,     0,   122,   123,   124,   125,   126,     0,   127,
     128,   129,   130,   131,     0,     0,     0,   133,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,     0,   282,   283,   284,   285,     0,   286,     0,
     287,   288,     0,   290,     0,   291,   292,   293,   294,   295,
     296,     0,   297,   298,     0,     0,   299,   300,   301,     0,
       0,   302,   303,     0,   305,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,     0,   318,   319,
     320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
     329,   330,   331,     0,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,     0,   353,
     354,     0,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,     0,   376,   377,   378,   379,   380,     0,
     382,   383,   384,   385,     0,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,     0,   402,     0,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,   411,   412,   413,   414,
     415,     0,   416,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,   427,     0,     0,   428,   429,
     430,   431,   432,   433,   434,     0,   435,     0,   437,     0,
     438,   439,   440,     0,     0,   441,     0,     0,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   488,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    91,    92,    93,    94,    95,
      96,    97,    98,     0,    99,   100,   101,     0,     0,     0,
       0,     0,     0,     0,   102,   103,     0,   104,   105,   106,
       0,   108,   109,   110,   111,   112,     0,   114,   115,     0,
     116,   117,   118,   119,   120,   121,     0,     0,   122,   123,
     124,   125,   126,     0,   127,   128,   129,   130,   131,     0,
       0,     0,   133,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,  1547,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
    1548,     0,     0,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,     0,   282,   283,
     284,   285,     0,   286,     0,   287,   288,     0,   290,     0,
     291,   292,   293,   294,   295,   296,     0,   297,   298,     0,
       0,   299,   300,   301,     0,     0,   302,   303,     0,   305,
       0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,     0,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,   327,   328,   329,   330,   331,     0,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,     0,   353,   354,     0,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,     0,   376,
     377,   378,   379,   380,     0,   382,   383,   384,   385,     0,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,  1549,   402,
       0,   404,  1550,   406,  1551,   408,     0,   409,   410,     0,
       0,   411,   412,   413,   414,   415,     0,   416,   417,   418,
     419,   420,   421,   422,     0,     0,   423,   424,  1552,   426,
     427,     0,     0,   428,   429,   430,   431,   432,   433,   434,
       0,   435,     0,   437,     0,   438,   439,   440,     0,     0,
     441,     0,     0,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   488,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      91,    92,    93,    94,    95,    96,    97,    98,     0,    99,
     100,   101,     0,     0,     0,     0,     0,  2102,     0,   102,
     103,     0,   104,   105,   106,     0,   108,   109,   110,   111,
     112,     0,   114,   115,     0,   116,   117,   118,   119,   120,
     121,     0,     0,   122,   123,   124,   125,   126,     0,   127,
     128,   129,   130,   131,     0,     0,     0,   133,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,     0,   282,   283,   284,   285,     0,   286,     0,
     287,   288,     0,   290,     0,   291,   292,   293,   294,   295,
     296,     0,   297,   298,     0,     0,   299,   300,   301,     0,
       0,   302,   303,     0,   305,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,     0,   318,   319,
     320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
     329,   330,   331,     0,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,     0,   353,
     354,     0,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,     0,   376,   377,   378,   379,   380,     0,
     382,   383,   384,   385,     0,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,     0,   402,     0,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,   411,   412,   413,   414,
     415,     0,   416,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,   427,     0,     0,   428,   429,
     430,   431,   432,   433,   434,     0,   435,     0,   437,     0,
     438,   439,   440,     0,     0,   441,     0,     0,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   488,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    91,    92,    93,    94,    95,
      96,    97,    98,     0,    99,   100,   101,     0,     0,     0,
       0,     0,  2116,     0,   102,   103,     0,   104,   105,   106,
       0,   108,   109,   110,   111,   112,     0,   114,   115,     0,
     116,   117,   118,   119,   120,   121,     0,     0,   122,   123,
     124,   125,   126,     0,   127,   128,   129,   130,   131,     0,
       0,     0,   133,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,     0,   282,   283,
     284,   285,     0,   286,     0,   287,   288,     0,   290,     0,
     291,   292,   293,   294,   295,   296,     0,   297,   298,     0,
       0,   299,   300,   301,     0,     0,   302,   303,     0,   305,
       0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,     0,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,   327,   328,   329,   330,   331,     0,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,     0,   353,   354,     0,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,     0,   376,
     377,   378,   379,   380,     0,   382,   383,   384,   385,     0,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,     0,   402,
       0,   404,   405,   406,   407,   408,     0,   409,   410,     0,
       0,   411,   412,   413,   414,   415,     0,   416,   417,   418,
     419,   420,   421,   422,     0,     0,   423,   424,   425,   426,
     427,     0,     0,   428,   429,   430,   431,   432,   433,   434,
       0,   435,     0,   437,     0,   438,   439,   440,     0,     0,
     441,     0,     0,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   488,     0,  2278,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      91,    92,    93,    94,    95,    96,    97,    98,     0,    99,
     100,   101,     0,     0,     0,     0,     0,     0,     0,   102,
     103,     0,   104,   105,   106,     0,   108,   109,   110,   111,
     112,     0,   114,   115,     0,   116,   117,   118,   119,   120,
     121,     0,     0,   122,   123,   124,   125,   126,     0,   127,
     128,   129,   130,   131,     0,     0,     0,   133,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,     0,   282,   283,   284,   285,     0,   286,     0,
     287,   288,     0,   290,     0,   291,   292,   293,   294,   295,
     296,     0,   297,   298,     0,     0,   299,   300,   301,     0,
       0,   302,   303,     0,   305,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,     0,   318,   319,
     320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
     329,   330,   331,     0,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,     0,   353,
     354,     0,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,     0,   376,   377,   378,   379,   380,     0,
     382,   383,   384,   385,     0,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,     0,   402,     0,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,   411,   412,   413,   414,
     415,     0,   416,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,   427,     0,     0,   428,   429,
     430,   431,   432,   433,   434,     0,   435,     0,   437,     0,
     438,   439,   440,     0,     0,   441,     0,     0,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   488,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    91,    92,    93,    94,    95,
      96,    97,    98,     0,    99,   100,   101,     0,     0,     0,
       0,     0,     0,     0,   102,   103,     0,   104,   105,   106,
       0,   108,   109,   110,   111,   112,     0,   114,   115,     0,
     116,   117,   118,   119,   120,   121,     0,     0,   122,   123,
     124,   125,   126,     0,   127,   128,   129,   130,   131,     0,
       0,     0,   133,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,     0,   282,   283,
     284,   285,     0,   286,     0,   287,   288,     0,   290,     0,
     291,   292,   293,   294,   295,   296,     0,   297,   298,     0,
       0,   299,   300,   301,     0,     0,   302,   303,     0,   305,
       0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,     0,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,   327,   328,   329,   330,   331,     0,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,     0,   353,   354,     0,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,     0,   376,
     377,   378,   379,   380,     0,   382,   383,   384,   385,     0,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,     0,   402,
       0,   404,   405,   406,   407,   408,     0,   409,   410,     0,
       0,   411,   412,   413,   414,   415,     0,   416,   417,   418,
     419,   420,   421,   422,     0,     0,   423,   424,   425,   426,
     427,     0,     0,   428,   429,   430,   431,   432,   433,   434,
       0,   435,     0,   437,     0,   438,   439,   440,     0,     0,
     441,     0,     0,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   488,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      91,    92,    93,    94,    95,    96,    97,    98,     0,    99,
     100,   101,     0,     0,     0,     0,     0,     0,     0,   102,
     103,     0,   104,   105,   106,     0,   108,   109,   110,   111,
     112,     0,   114,   115,     0,   116,   117,   118,   119,   120,
     121,     0,     0,   122,   123,   124,   125,   126,     0,   127,
     128,   129,   130,   131,     0,     0,     0,   133,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,   550,     0,     0,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,     0,   282,   283,   284,   285,     0,   286,     0,
     287,   288,     0,   290,     0,   291,   292,   293,   294,   295,
     296,     0,   297,   298,     0,     0,   299,   300,   301,     0,
       0,   302,   303,     0,   305,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,     0,   318,   319,
     320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
     329,   330,   331,     0,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,     0,   353,
     354,     0,   356,   357,   358,   359,   360,   361,   362,   363,
     551,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   552,     0,   376,   377,   378,   379,   380,     0,
     382,   383,   384,   385,     0,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,     0,   402,     0,   404,   405,   406,   407,
     408,     0,   553,   410,     0,     0,   411,   412,   413,   414,
     415,     0,   416,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,   427,     0,     0,   428,   429,
     430,   431,   432,   433,   434,     0,   435,     0,   437,     0,
     438,   439,   440,     0,     0,   441,     0,     0,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   488,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    91,    92,    93,    94,    95,
      96,    97,    98,     0,    99,   100,   101,     0,     0,     0,
       0,     0,     0,     0,   102,   103,     0,   104,   105,   106,
       0,   108,   109,   110,   111,   112,     0,   114,   115,     0,
     116,   117,   118,   119,   120,   121,     0,     0,   122,   123,
     124,   125,   126,     0,   127,   128,   129,   130,   131,     0,
       0,     0,   133,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,     0,   282,   283,
     284,   285,     0,   286,     0,   287,   288,     0,   290,     0,
     291,   292,   293,   294,   295,   296,     0,   297,   298,     0,
       0,   299,   300,   301,     0,     0,   302,   303,     0,   305,
       0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,     0,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,   327,   328,   329,   330,   331,     0,     0,
     332,   333,   334,   335,   336,   337,   338,   566,   340,     0,
     341,   342,   343,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,     0,   353,   354,     0,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,     0,   376,
     377,   378,   379,   380,     0,   382,   383,   384,   385,     0,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,     0,   402,
       0,   404,   405,   406,   407,   408,     0,   409,   410,     0,
       0,   411,   412,   413,   414,   415,     0,   416,   417,   418,
     419,   420,   421,   422,     0,     0,   423,   424,   425,   426,
     427,     0,     0,   428,   429,   430,   431,   432,   433,   434,
       0,   435,     0,   437,     0,   438,   439,   440,     0,     0,
     441,     0,     0,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   488,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      91,    92,    93,    94,    95,    96,    97,    98,     0,    99,
     100,   101,     0,     0,     0,     0,     0,     0,     0,   102,
     103,     0,   104,   105,   106,     0,   108,   109,   110,   111,
     112,     0,   114,   115,     0,   116,   117,   118,   119,   120,
     121,     0,     0,   122,   123,   124,   125,   126,     0,   127,
     128,   129,   130,   131,     0,     0,     0,   133,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     597,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,     0,   282,   283,   284,   285,     0,   286,     0,
     287,   288,     0,   290,     0,   291,   292,   293,   294,   295,
     296,     0,   297,   298,     0,     0,   299,   300,   301,     0,
       0,   302,   303,     0,   305,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,     0,   318,   319,
     320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
     329,   330,   331,     0,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,     0,   353,
     354,     0,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,     0,   376,   377,   378,   379,   380,     0,
     382,   383,   384,   385,     0,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,     0,   402,     0,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,   411,   412,   413,   414,
     415,     0,   416,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,   427,     0,     0,   428,   429,
     430,   431,   432,   433,   434,     0,   435,     0,   437,     0,
     438,   439,   440,     0,     0,   441,     0,     0,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   488,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    91,    92,    93,    94,    95,
      96,    97,    98,     0,    99,   100,   101,     0,     0,     0,
       0,     0,     0,     0,   102,   103,     0,   104,   105,   106,
       0,   108,   109,   110,   111,   112,     0,   114,   115,     0,
     116,   117,   118,   119,   120,   121,     0,     0,   122,   123,
     124,   125,   126,     0,   127,   128,   129,   130,   131,     0,
       0,     0,   133,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   600,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,     0,   282,   283,
     284,   285,     0,   286,     0,   287,   288,     0,   290,     0,
     291,   292,   293,   294,   295,   296,     0,   297,   298,     0,
       0,   299,   300,   301,     0,     0,   302,   303,     0,   305,
       0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,     0,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,   327,   328,   329,   330,   331,     0,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,     0,   353,   354,     0,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,     0,   376,
     377,   378,   379,   380,     0,   382,   383,   384,   385,     0,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,     0,   402,
       0,   404,   405,   406,   407,   408,     0,   409,   410,     0,
       0,   411,   412,   413,   414,   415,     0,   416,   417,   418,
     419,   420,   421,   422,     0,     0,   423,   424,   425,   426,
     427,     0,     0,   428,   429,   430,   431,   432,   433,   434,
       0,   435,     0,   437,     0,   438,   439,   440,     0,     0,
     441,     0,     0,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   488,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      91,    92,    93,    94,    95,    96,    97,    98,     0,    99,
     100,   101,     0,     0,     0,     0,     0,     0,     0,   102,
     103,     0,   104,   105,   106,     0,   108,   109,   110,   111,
     112,     0,   114,   115,     0,   116,   117,   118,   119,   120,
     121,     0,     0,   122,   123,   124,   125,   126,     0,   127,
     128,   129,   130,   131,     0,     0,     0,   133,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     604,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,     0,   282,   283,   284,   285,     0,   286,     0,
     287,   288,     0,   290,     0,   291,   292,   293,   294,   295,
     296,     0,   297,   298,     0,     0,   299,   300,   301,     0,
       0,   302,   303,     0,   305,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,     0,   318,   319,
     320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
     329,   330,   331,     0,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,     0,   353,
     354,     0,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,     0,   376,   377,   378,   379,   380,     0,
     382,   383,   384,   385,     0,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,     0,   402,     0,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,   411,   412,   413,   414,
     415,     0,   416,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,   427,     0,     0,   428,   429,
     430,   431,   432,   433,   434,     0,   435,     0,   437,     0,
     438,   439,   440,     0,     0,   441,     0,     0,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   488,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    91,    92,    93,    94,    95,
      96,    97,    98,     0,    99,   100,   101,     0,     0,     0,
       0,     0,     0,     0,   102,   103,     0,   104,   105,   106,
       0,   108,   109,   110,   111,   112,     0,   114,   115,     0,
     116,   117,   118,   119,   120,   121,     0,     0,   122,   123,
     124,   125,   126,     0,   127,   128,   129,   130,   131,     0,
       0,     0,   133,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   623,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,     0,   282,   283,
     284,   285,     0,   286,     0,   287,   288,     0,   290,     0,
     291,   292,   293,   294,   295,   296,     0,   297,   298,     0,
       0,   299,   300,   301,     0,     0,   302,   303,     0,   305,
       0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,     0,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,   327,   328,   329,   330,   331,     0,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,     0,   353,   354,     0,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,     0,   376,
     377,   378,   379,   380,     0,   382,   383,   384,   385,     0,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,     0,   402,
       0,   404,   405,   406,   407,   408,     0,   409,   410,     0,
       0,   411,   412,   413,   414,   415,     0,   416,   417,   418,
     419,   420,   421,   422,     0,     0,   423,   424,   425,   426,
     427,     0,     0,   428,   429,   430,   431,   432,   433,   434,
       0,   435,     0,   437,     0,   438,   439,   440,     0,     0,
     441,     0,     0,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   488,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      91,    92,    93,    94,    95,    96,    97,    98,     0,    99,
     100,   101,     0,     0,     0,     0,     0,     0,     0,   102,
     103,     0,   104,   105,   106,     0,   108,   109,   110,   111,
     112,     0,   114,   115,     0,   116,   117,   118,   119,   120,
     121,     0,     0,   122,   123,   124,   125,   126,     0,   127,
     128,   129,   130,   131,     0,     0,     0,   133,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     639,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,     0,   282,   283,   284,   285,     0,   286,     0,
     287,   288,     0,   290,     0,   291,   292,   293,   294,   295,
     296,     0,   297,   298,     0,     0,   299,   300,   301,     0,
       0,   302,   303,     0,   305,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,     0,   318,   319,
     320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
     329,   330,   331,     0,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,     0,   353,
     354,     0,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,     0,   376,   377,   378,   379,   380,     0,
     382,   383,   384,   385,     0,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,     0,   402,     0,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,   411,   412,   413,   414,
     415,     0,   416,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,   427,     0,     0,   428,   429,
     430,   431,   432,   433,   434,     0,   435,     0,   437,     0,
     438,   439,   440,     0,     0,   441,     0,     0,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   488,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    91,    92,    93,    94,    95,
      96,    97,    98,     0,    99,   100,   101,     0,     0,     0,
       0,     0,     0,     0,   102,   103,     0,   104,   105,   106,
       0,   108,   109,   110,   111,   112,     0,   114,   115,     0,
     116,   117,   118,   119,   120,   121,     0,     0,   122,   123,
     124,   125,   126,     0,   127,   128,   129,   130,   131,     0,
       0,     0,   133,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   643,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,     0,   282,   283,
     284,   285,     0,   286,     0,   287,   288,     0,   290,     0,
     291,   292,   293,   294,   295,   296,     0,   297,   298,     0,
       0,   299,   300,   301,     0,     0,   302,   303,     0,   305,
       0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,     0,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,   327,   328,   329,   330,   331,     0,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,     0,   353,   354,     0,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,     0,   376,
     377,   378,   379,   380,     0,   382,   383,   384,   385,     0,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,     0,   402,
       0,   404,   405,   406,   407,   408,     0,   409,   410,     0,
       0,   411,   412,   413,   414,   415,     0,   416,   417,   418,
     419,   420,   421,   422,     0,     0,   423,   424,   425,   426,
     427,     0,     0,   428,   429,   430,   431,   432,   433,   434,
       0,   435,     0,   437,     0,   438,   439,   440,     0,     0,
     441,     0,     0,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   488,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      91,    92,    93,    94,    95,    96,    97,    98,     0,    99,
     100,   101,     0,     0,     0,     0,     0,     0,     0,   102,
     103,     0,   104,   105,   106,     0,   108,   109,   110,   111,
     112,     0,   114,   115,     0,   116,   117,   118,   119,   120,
     121,     0,     0,   122,   123,   124,   125,   126,     0,   127,
     128,   129,   130,   131,     0,     0,     0,   133,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     646,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,     0,   282,   283,   284,   285,     0,   286,     0,
     287,   288,     0,   290,     0,   291,   292,   293,   294,   295,
     296,     0,   297,   298,     0,     0,   299,   300,   301,     0,
       0,   302,   303,     0,   305,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,     0,   318,   319,
     320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
     329,   330,   331,     0,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,     0,   353,
     354,     0,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,     0,   376,   377,   378,   379,   380,     0,
     382,   383,   384,   385,     0,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,     0,   402,     0,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,   411,   412,   413,   414,
     415,     0,   416,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,   427,     0,     0,   428,   429,
     430,   431,   432,   433,   434,     0,   435,     0,   437,     0,
     438,   439,   440,     0,     0,   441,     0,     0,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   488,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    91,    92,    93,    94,    95,
      96,    97,    98,     0,    99,   100,   101,     0,     0,     0,
       0,     0,     0,     0,   102,   103,     0,   104,   105,   106,
       0,   108,   109,   110,   111,   112,     0,   114,   115,     0,
     116,   117,   118,   119,   120,   121,     0,     0,   122,   123,
     124,   125,   126,     0,   127,   128,   129,   130,   131,     0,
       0,     0,   133,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,     0,   282,   283,
     284,   285,     0,   286,     0,   287,   288,     0,   290,     0,
     291,   292,   293,   294,   295,   296,     0,   297,   298,     0,
       0,   299,   300,   301,     0,     0,   302,   303,     0,   305,
       0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,     0,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,   327,   328,   329,   330,   331,     0,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,     0,   353,   354,     0,   356,   357,   358,
     359,   360,   361,   362,   363,   551,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,     0,   376,
     377,   378,   379,   380,     0,   382,   383,   384,   385,     0,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,     0,   402,
       0,   404,   405,   406,   407,   408,     0,   553,   410,     0,
       0,   411,   412,   413,   414,   415,     0,   416,   417,   418,
     419,   420,   421,   422,     0,     0,   423,   424,   425,   426,
     427,     0,     0,   428,   429,   430,   431,   432,   433,   434,
       0,   435,     0,   437,     0,   438,   439,   440,     0,     0,
     441,     0,     0,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   488,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      91,    92,    93,    94,    95,    96,    97,    98,     0,    99,
     100,   101,     0,     0,     0,     0,     0,     0,     0,   102,
     103,     0,   104,   105,   106,     0,   108,   109,   110,   111,
     112,     0,   114,   115,     0,   116,   117,   118,   119,   120,
     121,     0,     0,   122,   123,   124,   125,   126,     0,   127,
     128,   129,   130,   131,     0,     0,     0,   133,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     975,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,     0,   282,   283,   284,   285,     0,   286,     0,
     287,   288,     0,   290,     0,   291,   292,   293,   294,   295,
     296,     0,   297,   298,     0,     0,   299,   300,   301,     0,
       0,   302,   303,     0,   305,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,     0,   318,   319,
     320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
     329,   330,   331,     0,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,     0,   353,
     354,     0,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,     0,   376,   377,   378,   379,   380,     0,
     382,   383,   384,   385,     0,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,     0,   402,     0,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,   411,   412,   413,   414,
     415,     0,   416,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,   427,     0,     0,   428,   429,
     430,   431,   432,   433,   434,     0,   435,     0,   437,     0,
     438,   439,   440,     0,     0,   441,     0,     0,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   488,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    91,    92,    93,    94,    95,
      96,    97,    98,     0,    99,   100,   101,     0,     0,     0,
       0,     0,     0,     0,   102,   103,     0,   104,   105,   106,
       0,   108,   109,   110,   111,   112,     0,   114,   115,     0,
     116,   117,   118,   119,   120,   121,     0,     0,   122,   123,
     124,   125,   126,     0,   127,   128,   129,   130,   131,     0,
       0,     0,   133,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   977,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,     0,   282,   283,
     284,   285,     0,   286,     0,   287,   288,     0,   290,     0,
     291,   292,   293,   294,   295,   296,     0,   297,   298,     0,
       0,   299,   300,   301,     0,     0,   302,   303,     0,   305,
       0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,     0,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,   327,   328,   329,   330,   331,     0,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,     0,   353,   354,     0,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,     0,   376,
     377,   378,   379,   380,     0,   382,   383,   384,   385,     0,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,     0,   402,
       0,   404,   405,   406,   407,   408,     0,   409,   410,     0,
       0,   411,   412,   413,   414,   415,     0,   416,   417,   418,
     419,   420,   421,   422,     0,     0,   423,   424,   425,   426,
     427,     0,     0,   428,   429,   430,   431,   432,   433,   434,
       0,   435,     0,   437,     0,   438,   439,   440,     0,     0,
     441,     0,     0,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   488,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      91,    92,    93,    94,    95,    96,    97,    98,     0,    99,
     100,   101,     0,     0,     0,     0,     0,  1238,     0,   102,
     103,     0,   104,   105,   106,     0,   108,   109,   110,   111,
     112,     0,   114,   115,     0,   116,   117,   118,   119,   120,
     121,     0,     0,   122,   123,   124,   125,   126,     0,   127,
     128,   129,   130,   131,     0,     0,     0,   133,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,     0,   282,   283,   284,   285,     0,   286,     0,
     287,   288,     0,   290,     0,   291,   292,   293,   294,   295,
     296,     0,   297,   298,     0,     0,   299,   300,   301,     0,
       0,   302,   303,     0,   305,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,     0,   318,   319,
     320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
     329,   330,   331,     0,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,     0,   353,
     354,     0,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,     0,     0,   377,   378,   379,   380,     0,
     382,   383,   384,   385,     0,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,     0,   402,     0,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,   411,   412,   413,   414,
     415,     0,   416,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,   427,     0,     0,   428,   429,
     430,   431,   432,   433,   434,     0,   435,     0,   437,     0,
     438,   439,   440,     0,     0,   441,     0,     0,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   488,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    91,    92,    93,    94,    95,
      96,    97,    98,     0,    99,   100,   101,     0,     0,     0,
       0,     0,     0,     0,   102,   103,     0,   104,   105,   106,
       0,   108,   109,   110,   111,   112,     0,   114,   115,     0,
     116,   117,   118,   119,   120,   121,     0,     0,   122,   123,
     124,   125,   126,     0,   127,   128,   129,   130,   131,     0,
       0,     0,   133,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,  1332,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,     0,   282,   283,
     284,   285,     0,   286,     0,   287,   288,     0,   290,     0,
     291,   292,   293,   294,   295,   296,     0,   297,   298,     0,
       0,   299,   300,   301,     0,     0,   302,   303,     0,   305,
       0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,     0,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,   327,   328,   329,   330,   331,     0,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,     0,   353,   354,     0,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,     0,   376,
     377,   378,   379,   380,     0,   382,   383,   384,   385,     0,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,     0,   402,
       0,   404,   405,   406,   407,   408,     0,   409,   410,     0,
       0,   411,   412,   413,   414,   415,     0,   416,   417,   418,
     419,   420,   421,   422,     0,     0,   423,   424,   425,   426,
     427,     0,     0,   428,   429,   430,   431,   432,   433,   434,
       0,   435,     0,   437,     0,   438,   439,   440,     0,     0,
     441,     0,     0,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   488,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      91,    92,    93,    94,    95,    96,    97,    98,     0,    99,
     100,   101,     0,     0,     0,     0,     0,     0,     0,   102,
     103,     0,   104,   105,   106,     0,   108,   109,   110,   111,
     112,     0,   114,   115,     0,   116,   117,   118,   119,   120,
     121,     0,     0,   122,   123,   124,   125,   126,     0,   127,
     128,   129,   130,   131,     0,     0,     0,   133,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
    1348,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,     0,   282,   283,   284,   285,     0,   286,     0,
     287,   288,     0,   290,     0,   291,   292,   293,   294,   295,
     296,     0,   297,   298,     0,     0,   299,   300,   301,     0,
       0,   302,   303,     0,   305,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,     0,   318,   319,
     320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
     329,   330,   331,     0,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,     0,   353,
     354,     0,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,     0,   376,   377,   378,   379,   380,     0,
     382,   383,   384,   385,     0,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,     0,   402,     0,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,   411,   412,   413,   414,
     415,     0,   416,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,   427,     0,     0,   428,   429,
     430,   431,   432,   433,   434,     0,   435,     0,   437,     0,
     438,   439,   440,     0,     0,   441,     0,     0,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   488,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    91,    92,    93,    94,    95,
      96,    97,    98,     0,    99,   100,   101,     0,     0,     0,
       0,     0,     0,     0,   102,   103,     0,   104,   105,   106,
       0,   108,   109,   110,   111,   112,     0,   114,   115,     0,
     116,   117,   118,   119,   120,   121,     0,     0,   122,   123,
     124,   125,   126,     0,   127,   128,   129,   130,   131,     0,
       0,     0,   133,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,  1618,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,     0,   282,   283,
     284,   285,     0,   286,     0,   287,   288,     0,   290,     0,
     291,   292,   293,   294,   295,   296,     0,   297,   298,     0,
       0,   299,   300,   301,     0,     0,   302,   303,     0,   305,
       0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,     0,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,   327,   328,   329,   330,   331,     0,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,     0,   353,   354,     0,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,     0,   376,
     377,   378,   379,   380,     0,   382,   383,   384,   385,     0,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,     0,   402,
       0,   404,   405,   406,   407,   408,     0,   409,   410,     0,
       0,   411,   412,   413,   414,   415,     0,   416,   417,   418,
     419,   420,   421,   422,     0,     0,   423,   424,   425,   426,
     427,     0,     0,   428,   429,   430,   431,   432,   433,   434,
       0,   435,     0,   437,     0,   438,   439,   440,     0,     0,
     441,     0,     0,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   488,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      91,    92,    93,    94,    95,    96,    97,    98,     0,    99,
     100,   101,     0,     0,     0,     0,     0,     0,     0,   102,
     103,     0,   104,   105,   106,     0,   108,   109,   110,   111,
     112,     0,   114,   115,     0,   116,   117,   118,   119,   120,
     121,     0,     0,   122,   123,   124,   125,   126,     0,   127,
     128,   129,   130,   131,     0,     0,     0,   133,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
    1630,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,     0,   282,   283,   284,   285,     0,   286,     0,
     287,   288,     0,   290,     0,   291,   292,   293,   294,   295,
     296,     0,   297,   298,     0,     0,   299,   300,   301,     0,
       0,   302,   303,     0,   305,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,     0,   318,   319,
     320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
     329,   330,   331,     0,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,     0,   353,
     354,     0,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,     0,   376,   377,   378,   379,   380,     0,
     382,   383,   384,   385,     0,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,     0,   402,     0,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,   411,   412,   413,   414,
     415,     0,   416,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,   427,     0,     0,   428,   429,
     430,   431,   432,   433,   434,     0,   435,     0,   437,     0,
     438,   439,   440,     0,     0,   441,     0,     0,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   488,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    91,    92,    93,    94,    95,
      96,    97,    98,     0,    99,   100,   101,     0,     0,     0,
       0,     0,     0,     0,   102,   103,     0,   104,   105,   106,
       0,   108,   109,   110,   111,   112,     0,   114,   115,     0,
     116,   117,   118,   119,   120,   121,     0,     0,   122,   123,
     124,   125,   126,     0,   127,   128,   129,   130,   131,     0,
       0,     0,   133,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,  1632,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,     0,   282,   283,
     284,   285,     0,   286,     0,   287,   288,     0,   290,     0,
     291,   292,   293,   294,   295,   296,     0,   297,   298,     0,
       0,   299,   300,   301,     0,     0,   302,   303,     0,   305,
       0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,     0,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,   327,   328,   329,   330,   331,     0,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,     0,   353,   354,     0,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,     0,   376,
     377,   378,   379,   380,     0,   382,   383,   384,   385,     0,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,     0,   402,
       0,   404,   405,   406,   407,   408,     0,   409,   410,     0,
       0,   411,   412,   413,   414,   415,     0,   416,   417,   418,
     419,   420,   421,   422,     0,     0,   423,   424,   425,   426,
     427,     0,     0,   428,   429,   430,   431,   432,   433,   434,
       0,   435,     0,   437,     0,   438,   439,   440,     0,     0,
     441,     0,     0,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   488,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      91,    92,    93,    94,    95,    96,    97,    98,     0,    99,
     100,   101,     0,     0,     0,     0,     0,     0,     0,   102,
     103,     0,   104,   105,   106,     0,   108,   109,   110,   111,
     112,     0,   114,   115,     0,   116,   117,   118,   119,   120,
     121,     0,     0,   122,   123,   124,   125,   126,     0,   127,
     128,   129,   130,   131,     0,     0,     0,   133,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
    2219,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,     0,   282,   283,   284,   285,     0,   286,     0,
     287,   288,     0,   290,     0,   291,   292,   293,   294,   295,
     296,     0,   297,   298,     0,     0,   299,   300,   301,     0,
       0,   302,   303,     0,   305,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,     0,   318,   319,
     320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
     329,   330,   331,     0,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,     0,   353,
     354,     0,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,     0,   376,   377,   378,   379,   380,     0,
     382,   383,   384,   385,     0,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,     0,   402,     0,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,   411,   412,   413,   414,
     415,     0,   416,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,   427,     0,     0,   428,   429,
     430,   431,   432,   433,   434,     0,   435,     0,   437,     0,
     438,   439,   440,     0,     0,   441,     0,     0,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,  1029,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    91,    92,    93,    94,    95,
      96,    97,    98,     0,    99,   100,   101,     0,     0,     0,
       0,     0,     0,     0,   102,   103,     0,   104,   105,   106,
     107,   108,   109,   110,     0,  1030,   113,  1031,  1032,     0,
     116,   117,   118,   119,   120,   121,     0,     0,   122,   123,
    1033,  1034,   126,     0,   127,   128,   129,   130,     0,     0,
     132,     0,   133,   134,   135,   136,   137,   138,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,   148,
     149,   150,   151,     0,     0,     0,   152,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,  1035,  1036,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     697,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,     0,   191,   192,
     193,   194,     0,     0,   196,     0,   197,   198,  1037,   200,
       0,   201,     0,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,   210,     0,     0,     0,     0,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
     231,     0,   233,   234,   235,   236,  1038,  1039,     0,  1040,
       0,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,     0,     0,   250,   251,   252,   253,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,  1041,   281,  1042,   283,
     284,   285,     0,     0,     0,   287,   288,   289,   290,     0,
       0,   292,  1043,   294,   295,   296,     0,   297,   298,     0,
       0,   299,   300,   301,     0,     0,   302,     0,   304,   305,
     306,     0,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,     0,   318,   319,     0,   321,   322,     0,   324,
     325,   326,     0,   327,   328,   329,   330,   331,     0,     0,
     332,   333,   334,   335,  1044,   337,   338,   339,   340,     0,
     341,   342,   343,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,     0,   353,   354,   355,   356,   357,   358,
    1045,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,     0,   376,
    1046,   378,   379,   380,   381,   382,   383,  1047,   385,     0,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,  1048,   398,     0,     0,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,     0,  1049,  1050,     0,
       0,   411,   412,     0,   414,     0,     0,   416,   417,   418,
     419,   420,   421,   422,     0,     0,   423,   424,   425,   426,
     427,     0,     0,   428,   429,   430,   431,   432,     0,  1051,
       0,   435,   436,   437,     0,   438,   439,   440,     0,     0,
     441,     0,     0,   442,   443,   444,   445,   446,   447,   488,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     459,   460,   461,   462,     0,    91,    92,    93,    94,    95,
      96,    97,    98,     0,    99,   100,   101,     0,     0,     0,
       0,     0,     0,     0,   102,   103,     0,   104,   105,   106,
       0,   108,   109,   110,   111,   112,     0,   114,   115,     0,
     116,   117,   118,   119,   120,   121,     0,     0,   122,   123,
     124,   125,   126,     0,   127,   128,   129,   130,   131,     0,
       0,     0,   133,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,     0,   282,   283,
     284,   285,     0,   286,     0,   287,   288,     0,   290,     0,
     291,   292,   293,   294,   295,   296,     0,   297,   298,     0,
       0,   299,   300,   301,     0,     0,   302,   303,     0,   305,
       0,   307,   308,   309,   310,   311,   312,   313,     0,   315,
     316,   317,     0,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,   327,   328,   329,   330,   331,     0,     0,
     332,   333,     0,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,     0,   353,   354,     0,   356,   357,   358,
     359,     0,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,     0,   376,
     377,   378,   379,   380,     0,   382,   383,   384,   385,     0,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,     0,   402,
       0,   404,   405,   406,   407,   408,     0,   409,   410,     0,
       0,   411,   412,   413,   414,   415,     0,   416,   417,   418,
     419,   420,   421,   422,     0,     0,   423,   424,   425,   426,
     427,     0,     0,   428,   429,   430,   431,   432,   433,   434,
       0,   435,     0,   437,     0,   438,   439,   440,     0,     0,
     441,     0,     0,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,  1029,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      91,    92,    93,    94,    95,    96,    97,    98,     0,    99,
     100,   101,     0,     0,     0,     0,     0,     0,     0,   102,
     103,     0,   104,   105,   106,   107,   108,   109,   110,     0,
    1030,   113,  1031,  1032,     0,   116,   117,   118,   119,   120,
     121,     0,     0,   122,   123,  1033,  1034,   126,     0,   127,
     128,   129,   130,     0,     0,   132,     0,   133,   134,   135,
     136,   137,   138,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,   148,   149,   150,   151,     0,     0,
       0,   152,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,  1035,  1036,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   697,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,     0,   191,   192,   193,   194,     0,     0,   196,
       0,   197,   198,  1037,   200,     0,   201,     0,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,   210,     0,
       0,     0,     0,   212,     0,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,   231,     0,   233,   234,   235,
     236,  1038,  1039,     0,  1040,     0,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,     0,     0,   250,   251,
     252,   253,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,  1041,   281,  1042,   283,   284,   285,     0,     0,     0,
     287,   288,   289,   290,     0,     0,   292,  1043,   294,   295,
     296,     0,   297,   298,     0,     0,   299,   300,   301,     0,
       0,   302,     0,   304,   305,   306,     0,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,     0,   318,   319,
       0,   321,   322,     0,   324,   325,   326,     0,   327,   328,
     329,   330,   331,     0,     0,   332,   333,   334,   335,  1044,
     337,   338,   339,   340,     0,   341,   342,   343,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,     0,   353,
     354,   355,   356,   357,   358,     0,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,     0,   376,     0,   378,   379,   380,   381,
     382,   383,  1047,   385,     0,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   398,     0,
       0,   400,   401,     0,   402,   403,   404,   405,   406,   407,
     408,     0,  1049,  1050,     0,     0,   411,   412,     0,   414,
       0,     0,   416,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,   427,     0,     0,   428,   429,
     430,   431,   432,     0,  1051,     0,   435,   436,   437,     0,
     438,   439,   440,     0,     0,   441,     0,     0,   442,   443,
     444,   445,   446,   447,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   459,   460,   461,   462
};

static const yytype_int16 yycheck[] =
{
       6,    34,   601,   608,    50,    11,   516,   616,   549,    15,
       0,     0,   835,   515,   644,    21,    22,    23,   847,     0,
      26,   522,  1066,    29,   657,   822,    32,    33,  1559,   848,
       0,   733,   522,   657,   973,    16,     0,    16,    44,  1628,
     591,     0,   722,   973,     6,   561,   694,   695,   827,  1881,
    1100,   973,    16,    34,    44,   824,   973,   520,  1003,   565,
     610,     6,    29,    44,   712,  1634,   794,  1636,  1124,  1125,
    1089,    52,  1972,  1516,  1089,    52,  1625,  1948,    84,    85,
      86,    87,    88,   852,     0,   806,    33,  1089,  1089,  1609,
     861,  1984,  1980,     5,    52,   665,  1832,  1458,  1459,     5,
      11,    11,  1463,  1859,     5,    15,    50,   608,     9,    84,
       5,    86,    22,    88,     9,  1174,  1068,     5,   608,    58,
      87,     5,    32,    33,     5,  1128,  2224,    58,  2276,    13,
      14,     5,    13,    14,     9,     5,  1218,  1865,  1499,  1500,
      27,     5,   648,   169,   768,   521,  1695,    34,     5,    13,
      14,    20,     5,     5,    73,  2225,   657,   522,   621,    67,
      11,     5,   170,   664,   991,   169,  2314,   657,   601,    27,
     603,  2229,   605,    27,   664,    85,    34,   106,    27,     0,
    1216,   138,     0,  2365,   214,    34,   666,  1736,  1737,     4,
      41,    15,     5,   524,     9,    40,   146,    40,  2299,    67,
     169,   240,    48,  2398,  1864,  2212,   114,     3,     4,     5,
      75,   588,   836,     9,  1802,   839,   840,  1904,   734,   137,
      85,   588,    73,  1046,    78,   775,   732,   220,   283,    11,
     266,   289,    86,   116,     9,     3,   121,    75,   281,     4,
     289,   269,  2453,   119,     9,  2490,   762,    85,  1251,    11,
    2398,    82,   114,   119,   331,  2174,   163,   105,   354,    41,
      27,   115,   212,    31,    32,   173,  1919,  2560,   170,   770,
     771,    92,   265,   305,    92,   161,   305,   251,   252,   789,
     770,   771,  2624,  2625,   272,   661,   186,   187,   768,   859,
     860,    73,   159,    37,  2653,    11,   127,    11,   166,    58,
     117,   453,   456,   117,   483,   483,     4,   401,   148,   146,
     816,     9,   106,  2383,   865,   436,   494,   496,   114,  1775,
     359,  2221,   159,   355,    11,    41,   480,   164,   174,  1918,
    1773,   458,   208,   436,   188,  2436,   415,  2073,   224,   289,
    1993,   435,    68,   116,   190,   199,   498,  1803,  2593,   195,
    2106,   251,   252,   480,  2110,   835,   196,    73,    30,    73,
     268,  2703,  2721,   130,   231,   273,  1915,   494,  1917,  2097,
    1050,   980,   449,   494,   191,   212,  2669,   191,  2526,   123,
     459,  1102,    54,   376,   230,   119,   991,  1035,  1036,   363,
     364,   494,   380,   432,   231,  1043,   107,   245,   494,   301,
     168,   135,   170,  1406,   311,   253,   434,   346,   316,   413,
    2621,   273,   448,   983,  2562,   346,  1021,   213,  2337,   337,
    1781,  1782,  1783,  1784,    58,   333,  1787,  1788,  1789,  1790,
    1791,  1792,  1793,  1794,  1795,  1796,  2096,   814,   234,   494,
     498,   434,  2687,   280,   413,  1242,  2034,   814,   316,   498,
    2632,   494,   289,   784,  2003,   494,  2651,   489,    31,    32,
     489,  2148,   283,   363,   364,   283,  1516,   473,   498,   300,
     294,   265,   498,   402,   480,  1836,  1837,   379,   428,   483,
    2487,   487,   472,   472,   490,  1206,   494,   997,   990,   522,
     991,   472,   496,   995,  2365,   452,   383,  1579,   473,  1001,
     273,   991,   472,  2651,  1005,  1561,  1325,  2608,   472,   515,
     516,   517,   487,   472,  1341,  1005,  2252,   391,   392,    92,
    1021,   429,  1072,  1573,  2594,   383,   347,  1298,  1133,   347,
    2286,  1021,   378,   445,   383,  2291,   390,  2595,  2294,   393,
     521,   522,  1578,   522,   550,   591,   552,  2645,   413,  2277,
     494,   436,   558,  1612,   399,   438,   399,   521,   434,   498,
     566,   429,  2151,  1551,  1552,  1071,  1046,   498,   434,  1119,
    1120,   577,    23,   492,  1080,   413,   407,   496,  1084,   490,
     490,   315,   494,   558,   563,   575,   575,   346,   494,  2489,
     596,   428,   573,   494,   575,  2164,   573,  1103,  1104,   494,
    1116,  1171,   577,  1374,   492,   575,   494,   517,   496,  2502,
     494,   575,  2500,   494,   458,   573,   575,  1569,   493,   566,
     626,   627,   628,  1173,   494,   406,  2146,   408,  1004,   596,
     494,   265,  1133,   107,  1136,   456,   480,   494,   456,   490,
    1005,   494,   494,  1133,   345,   458,   130,  1271,  1128,     5,
     494,   626,   627,   628,  1259,   114,   566,  1281,   150,   575,
    1284,   530,   130,   532,   670,  2214,   494,   480,  1267,  2405,
     485,   486,   373,   157,   495,  2431,   497,   495,   446,   497,
     661,   494,   551,   240,   135,   326,     8,  2130,    27,   485,
     486,   456,    23,    59,    16,    17,    18,   661,    29,   732,
    2600,    67,    64,    65,  1707,   487,   488,   489,   490,  1339,
     485,   486,   346,  1343,   355,   480,  1346,   698,   458,   495,
     485,   486,   498,  1773,  1357,   487,   488,   489,   490,   188,
    1749,  1750,  1751,  1357,  1749,  2324,  1341,  1458,  1459,   373,
     480,  1744,  1463,  1294,  1295,  1296,  1748,  1556,  1749,  1750,
     495,   732,  1697,   498,   175,    23,  1257,  1760,  1259,     4,
    1408,  2632,   116,  1819,     9,  2322,   772,  1257,   240,  1259,
     406,  1251,   408,   198,   161,  1277,    44,  1780,  1499,  1500,
    1282,  1483,   788,   789,   268,   494,  2343,   496,   657,   273,
     130,   130,  1601,   366,   278,   664,     0,   772,   485,   486,
     487,   488,   489,   490,   135,   495,  1809,  1240,   498,   268,
     278,   817,   818,   234,   820,   821,   822,    11,   799,   800,
    2720,   802,   799,   800,   497,   802,    92,    75,   834,   402,
     495,   446,  1651,   498,  1267,  1563,   287,    85,  2670,  2671,
    1341,   799,   800,   818,   802,   851,   821,    41,   202,   855,
     817,  1341,   268,  1286,  1317,    75,  1357,   273,  1291,   834,
    1848,  1849,  1850,  1851,   494,    85,   735,  1357,   234,   442,
    2459,  1372,   498,   446,   366,   432,   745,   264,   788,    73,
     855,   178,  1372,   456,   851,   159,   342,   359,  2249,   758,
     164,  1660,  2724,   344,   345,  2464,   198,   240,  1948,   768,
     159,   770,   771,   418,  1675,   366,  1412,   480,  1610,   325,
     402,   265,    13,    14,   268,     8,   130,  2474,    11,   246,
     240,   494,   373,    16,    17,    18,  1406,  1364,   268,  1708,
     362,  1368,  1711,  1370,   359,  2688,   420,   494,   278,   458,
      33,   402,   367,   157,     8,  1948,   430,    11,    41,   456,
     442,   458,    16,    17,    18,    48,   287,   231,    13,    14,
     432,   480,   968,   285,   456,     4,   495,   494,   974,   498,
       9,  1477,   231,     4,  2335,   494,   982,   402,     9,  2732,
      73,   442,   354,   355,   990,   406,   220,   408,   480,   995,
     494,   997,   998,  2746,  1000,  1001,   492,  1003,  1504,   974,
     496,  1631,   494,  1633,   449,   495,   280,  1558,   498,   340,
     489,   432,   477,   344,    23,   494,   359,   496,   354,   355,
      29,   280,   494,  1004,   449,   218,  1005,   489,  1003,   496,
    2561,   265,   494,   494,   496,  1974,   354,   355,  1544,   359,
    1004,   283,   373,  2404,  1974,   492,   477,   494,  1857,   496,
    1859,  1996,  1974,   354,   355,   495,   666,  1974,   498,   273,
    1781,  1782,  1783,  1784,   278,   487,  1787,  1788,  1789,  1790,
    1791,  1792,  1793,  1794,  1795,  1796,   255,   256,  1068,  1068,
    2130,   174,  1691,  1476,   168,  1478,  1479,  1068,   998,   432,
    1000,   498,  1725,   327,  1100,    23,   494,   190,  1068,  1928,
     366,    29,   195,   495,  1068,   494,   498,   496,   439,  1068,
    1929,   495,   432,   495,   498,  1836,  1837,   495,  2707,  1916,
     498,  2652,   495,   216,   217,  1730,   135,  1807,  1808,  2115,
    1136,   195,  2118,  1634,  1635,  1636,   402,   230,   218,  1968,
     495,  2672,   376,   498,  1634,  1635,  1636,   477,  1927,    23,
    1929,   494,   216,  2197,     8,    29,    54,    11,  1139,   481,
     482,   483,  1168,   485,   486,   487,   488,   489,   490,   495,
     495,   494,   498,   498,   494,   268,   442,   169,   271,  2182,
     240,   406,  1188,   408,  1190,   495,   150,    41,   498,   406,
     456,   408,   285,  1168,    48,   288,   363,   364,  1900,   240,
     434,   683,   684,  2734,   170,    23,   420,   135,   331,   495,
    1189,    29,   498,  1188,   480,  1190,   430,   151,  1720,    73,
    1089,   285,   340,  1229,  1725,   835,   708,  1707,   494,  1730,
     495,  1237,  1238,   498,   214,  1725,  1242,  1243,   204,  2242,
    1730,   585,   495,   587,   367,   498,  1236,  1253,  1254,  1255,
    1256,   151,  1258,   219,  1229,  1236,   495,   495,  1264,   498,
    1266,   135,   228,   151,  1744,   495,  1816,   495,   498,   331,
     498,  1277,  1278,  2111,   151,  2113,  1282,  1283,   287,   402,
    1760,  1287,  1288,  1289,  1290,   378,  1292,  1293,   494,     3,
     144,   485,   486,   487,   488,   489,   490,  2106,   268,   359,
    1780,  2110,   449,    81,     8,   367,  1312,    11,  1814,  1178,
    1316,   494,    16,    17,    18,  2365,   460,   135,   359,  2363,
     174,   151,   495,  1329,  1948,   498,   449,   495,    23,  1809,
     498,   340,   496,  1243,    29,   344,   190,  1312,  1328,   114,
     402,   195,  1947,  1253,  1949,  1255,   495,  1328,  1258,   498,
     770,   771,  1832,  1869,  1264,  2152,  1266,  1907,   151,   287,
     495,  2180,  2365,   498,   373,  1995,  2189,   151,  1278,   159,
    1376,    36,   432,  1283,   164,   283,   230,  1287,  1288,  1289,
    1290,   402,  1292,  1293,   350,   478,   494,   449,   481,   482,
     483,   432,   485,   486,   487,   488,   489,   490,   495,   494,
     229,   498,   366,    93,   495,   498,   495,   498,   495,   498,
       5,   498,  1963,   287,     5,   494,   344,   481,   482,   483,
     494,   485,   486,   487,   488,   489,   490,  1460,   164,   494,
     439,   285,  2435,   494,   494,  2438,  1046,    36,   402,   495,
     135,   231,   498,   312,  1945,   373,  1947,   494,  1949,   495,
      93,   495,   498,   494,   498,  1945,    55,  1947,   495,  1949,
       8,   498,   495,    11,   494,   498,   340,  2276,  1948,   287,
     344,  1504,     5,   495,     5,     8,   498,  2286,   442,  1460,
     170,    14,  2291,   495,   495,  2294,   498,   498,  1357,     5,
     280,    24,   456,    41,  1363,    28,   494,     5,   495,   373,
      48,   498,     5,  1372,   495,  2314,   105,   498,   494,   494,
    1516,   439,   216,   494,   204,   494,   480,   495,  1128,   494,
     498,   296,   340,  1504,   378,    73,   344,   170,  2249,   219,
     494,   457,   495,   495,   495,   498,   498,   498,   228,   494,
     494,  1522,  2371,  1549,    15,   495,   495,  2171,   498,   498,
    1556,  1033,  1034,  2183,  2184,   373,    23,  1538,   494,   494,
    1042,   204,    29,   495,   175,   439,   498,   296,   550,   494,
     552,   261,  2122,  1606,  1549,  1556,   219,   214,     6,  1569,
    1569,   285,  2632,   495,   498,   228,   498,   198,  1569,  2398,
    2140,   366,   287,  2073,  1556,  1601,  2137,  1603,   197,  1569,
    1606,   495,    96,  1609,   498,  1569,  2239,    36,   229,   164,
    1569,  1556,  1094,  1095,  2335,   164,   280,   278,   261,  1625,
    1601,   439,  2431,   234,   478,  1606,   174,   402,   373,  2632,
     494,   485,   486,   487,   488,   489,   490,   366,   494,  1601,
     283,  1251,   190,   413,    85,   340,   245,   195,   495,   344,
     495,   498,   498,   498,   253,   413,  1601,    54,    54,   413,
     350,   258,   413,  2164,   495,   500,   265,   442,   135,   413,
     456,   151,    92,   402,  2164,   268,   268,   288,   373,  1685,
      36,   456,   230,  2404,  1690,   494,    36,   498,   496,  1695,
    1696,  1697,  1698,   445,  1700,   494,   494,   494,   297,    35,
     494,     9,  2182,   452,   411,   480,   494,   350,  1714,  2189,
     411,   366,    11,   442,  1720,  1690,  2364,  2526,   498,   494,
     411,  1696,  1697,   494,   413,  1700,   273,   456,   494,   180,
    1736,  1737,   169,  1723,   160,   495,   212,   285,  2239,  1714,
     376,  2365,  1723,   498,   439,   220,   345,   402,   494,  2239,
     284,   480,   436,  2562,    36,   666,   498,   494,   220,   268,
     220,   289,  2242,   495,   321,   494,   281,  1773,   367,  1638,
     449,   403,  2252,   494,   151,   151,   456,   481,   482,   483,
     268,   485,   486,   487,   488,   489,   490,   442,  1698,   388,
     283,   283,    36,   436,   268,   406,  1406,   408,  1844,    36,
      35,   456,   495,   413,   492,   492,   413,   413,   413,  1842,
     495,   169,   495,   495,  1683,   496,   169,   495,   429,   495,
     287,   432,   495,   495,   495,   480,  1859,   495,   498,   477,
     378,  2333,   477,   495,  2482,   495,   495,   495,   477,   494,
    1846,   494,  2651,   413,   494,   494,   293,   494,  1854,  1855,
    1856,  1857,   453,  1859,  1860,  2460,  1725,   479,  1864,  1865,
     284,  1842,  2413,  1732,   498,  1734,  2475,  2686,   284,  1738,
    1739,   284,   434,   340,   239,   453,  1857,   344,  1859,  1854,
    1855,  1856,   442,   283,  1890,  2365,   413,   483,   268,   151,
     494,   198,   287,   151,   151,  1857,   495,  1859,   456,   413,
     413,   413,  1908,   413,   493,  1911,   373,   495,  2418,  1915,
    1916,  1917,  1857,  1919,  1859,  1890,   495,    67,   495,   494,
     281,   495,   498,    73,   835,  2405,  2436,    36,   283,  1935,
     478,  1937,   151,  2439,   151,    85,   273,   485,   486,   487,
     488,   489,   490,   495,  1950,  1951,  1952,  1953,  1954,  1955,
    1956,  1957,  1958,  1959,   492,  2435,  2565,   142,  2438,  2460,
     169,    11,   164,  2464,   114,    36,   116,  1973,   169,  1975,
    2460,   495,   439,   495,  2464,   495,   494,   402,  2480,  1985,
     453,  2491,   169,   480,    55,   180,   284,  1993,   495,   494,
    1996,   495,   498,   495,   495,   347,   441,  2003,  1973,    83,
    1975,  1911,  1992,   151,   494,  2011,   173,   494,  2632,   423,
      36,  1992,   494,    79,   436,   498,   493,  2523,   169,   404,
     219,  1996,   494,   173,   493,  1935,  2631,   495,   494,  2539,
     495,   495,   495,   494,   105,   219,   292,   494,  2637,   290,
    1950,  1951,  1952,  1953,  1954,  1955,  1956,  1957,  1958,  1959,
      54,   183,   202,   483,   456,   200,  2558,   273,   189,   273,
     483,   495,   413,    36,   413,   220,   106,   494,     8,   456,
     268,    11,   283,   494,    36,   493,    16,    17,    18,  1948,
    2086,   169,   494,  2089,  2090,  2091,  2092,   302,   494,   219,
    2096,  2097,   455,  2099,   522,   494,  2102,  1707,    85,   131,
    2106,  1970,   173,   495,  2110,   333,   494,   220,   494,    36,
    2116,   114,   151,    73,  2089,  2090,  2091,  2092,   268,   121,
     548,   549,   494,   273,  2130,  2106,   197,   221,   151,  2110,
    2631,    36,   355,   495,  1744,  1046,  2142,   565,    54,    36,
    2146,  2631,   355,   436,  2106,   441,  2152,   494,  2110,  2139,
    1760,  2141,  2632,   494,   494,   498,    73,    36,  2139,   188,
    2141,  2106,    36,   436,   423,  2110,   316,     3,   221,   403,
    1780,  2177,    67,    67,   245,   286,   494,   498,   606,   607,
     608,    55,   253,   333,    36,   357,   483,   373,   273,   188,
     423,   243,   494,    36,   265,     3,   286,   286,   265,  1809,
     494,   283,   494,   494,     9,   495,   495,   494,  2214,   200,
     354,   283,   341,   283,    33,   495,   494,  1128,  2224,   384,
     648,   146,  1832,   119,   434,     9,   297,    22,  2234,   657,
     495,   105,   106,  2223,   159,   333,   664,   665,   666,   164,
     114,   125,  2223,   575,  1005,  2634,   333,  2467,  2710,  2685,
    2673,   822,  2388,   681,  1623,  1635,  1985,  2126,  2631,  2128,
    1620,  1685,  2683,  1947,   817,  2629,  1909,   788,   763,   809,
    2276,  2277,  1570,  1232,   345,  2281,   216,  2536,  2284,   429,
    2286,   709,   808,  2447,  2619,  2291,  1585,   212,  2294,  1206,
    2296,  1873,  2548,  2299,  2127,  1601,   367,  1859,  1231,   173,
     728,   729,   730,  2112,   732,  2286,   231,  2097,  2314,  2432,
    2291,   811,  1857,  2294,  2276,  2526,  2525,   388,  2543,  2305,
    2544,  1375,  1089,   197,  2286,   753,  1089,  2333,  2334,  2291,
    1089,  2276,  2294,  1089,  2617,  2604,  2342,  2618,  1948,  1165,
    1251,  2286,   770,   771,  1573,   285,  2291,  1522,  1414,  2294,
    1519,  1304,  2314,  1169,  2378,   280,  2719,  2749,  2518,  1693,
    2366,  2367,  1189,   990,   289,  2176,  1977,  2342,  1689,  2314,
    2239,   245,  2378,   801,  2380,  1970,  2382,   805,   806,   253,
    1730,  1930,  1265,  2239,  2374,  1945,  1629,  1190,   816,  2395,
    2142,   265,  2398,  2374,   268,  1372,  1908,  2562,  2628,    -1,
      -1,  2310,     8,  2378,    -1,    11,  2439,   835,    -1,  2399,
      -1,    -1,  2418,    -1,    -1,    -1,    -1,    50,  2399,    -1,
    2395,    -1,    -1,   297,  2334,  2431,    -1,    -1,    -1,    -1,
    2436,   859,   860,   861,    -1,    41,  2398,    -1,    -1,  2445,
      -1,    -1,    48,    -1,  2450,    -1,    -1,    -1,    -1,    -1,
    2431,    -1,  2458,  2398,    -1,    -1,  2366,  2367,  2439,    -1,
      -1,    94,    -1,  2073,    -1,    -1,    -1,    73,    -1,  2431,
      -1,   345,  2382,    -1,  2480,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2458,    -1,  2491,  2431,   120,    -1,    -1,
      -1,    -1,  2498,   367,    -1,  1406,  2365,    -1,    -1,    -1,
      -1,    -1,    -1,   428,    -1,    -1,    -1,   140,    -1,  2499,
      -1,   144,    -1,    -1,   388,    -1,   390,    -1,  2499,   393,
    2526,    -1,    -1,  2498,    -1,    -1,    -1,    -1,    -1,  2535,
      -1,    -1,   165,  2539,    -1,   168,    -1,  2543,   144,    -1,
    2450,   481,   482,   483,    -1,   485,   486,   487,   488,   489,
     490,   184,  2558,  2559,  2560,   983,  2562,    -1,    -1,    -1,
      -1,    -1,    -1,   991,  2526,  2555,    -1,   492,   174,    -1,
     495,   496,  2182,    -1,  2555,    -1,    -1,  1005,    -1,  2189,
      -1,  2526,    -1,    -1,   190,    -1,    -1,    -1,    -1,   195,
      -1,    -1,    -1,  1021,    -1,    -1,    -1,    -1,    -1,    -1,
    2562,    -1,  2608,    -1,    -1,    -1,     0,    -1,    -1,    -1,
      -1,  2617,   606,  2619,    -1,    -1,    -1,  2562,  1046,  2488,
     494,    -1,  2628,    -1,   230,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2242,    -1,    -1,    -1,    -1,    -1,  2644,  2645,
     273,    -1,  2252,  1071,   666,  2651,    36,    -1,   281,  1077,
      -1,  2641,  1080,    -1,    -1,    -1,  1084,    -1,    -1,    -1,
    2641,   666,    -1,  2669,    -1,    55,    -1,    -1,    -1,  2644,
    1098,   665,   666,  1101,  1102,  1103,  1104,    -1,    -1,   285,
      -1,    -1,    -1,  1111,  1112,   666,    -1,    -1,    -1,  2651,
      -1,    -1,   325,    -1,    -1,  1123,    -1,    -1,    92,    -1,
    1128,  1129,  1130,  1131,  1132,  1133,  2651,    -1,    -1,  1137,
    1138,    -1,    -1,  2719,  1142,   105,    -1,    -1,  1146,    -1,
      -1,  1149,  1150,  1151,  1152,  1153,  1154,  1155,  1156,  1157,
      -1,    -1,  1160,    -1,    -1,    -1,  1164,    -1,  2744,  1167,
      -1,  1169,  2748,  1171,  2719,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   146,    -1,    -1,  2365,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2632,  1192,   159,   666,    -1,    -1,  2744,
     164,    -1,   378,  2748,    -1,   169,    -1,    -1,  1206,    -1,
      -1,     8,    -1,    -1,    11,    -1,   180,  1215,  1216,   183,
      -1,    -1,    -1,    -1,    -1,  2405,  1707,    -1,  1102,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,
      -1,    -1,    -1,   835,    41,    -1,    -1,    -1,   212,    -1,
      -1,    48,    -1,  1251,    -1,  2435,    -1,    -1,  2438,  1257,
     835,  1259,    -1,  1744,    -1,    -1,    -1,   231,    -1,    -1,
      -1,   835,    -1,    -1,    -1,    -1,    73,    -1,    -1,  1760,
      -1,    -1,    -1,    -1,   835,   245,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   253,    -1,   859,   860,   861,    -1,  1780,
    1298,    -1,   478,  1301,  1302,   265,  1304,    -1,    -1,   485,
     486,   487,   488,   489,   490,    -1,   280,    -1,    -1,   283,
      -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,  1809,    -1,
      -1,    -1,  1206,    -1,    -1,    -1,    -1,   297,    -1,    -1,
    1338,    -1,    -1,  1341,    -1,    -1,    -1,   144,    -1,    -1,
      -1,  1832,    -1,   171,    -1,    -1,    -1,   175,    -1,  1357,
      -1,    -1,    -1,    -1,    -1,   835,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1372,    -1,  1374,   174,    -1,    -1,
     198,    -1,    -1,   347,    -1,   345,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   190,    -1,    -1,    -1,    -1,   195,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   367,  1406,    -1,
      -1,    -1,    -1,    -1,  1412,  1413,   234,   548,   549,   983,
    1418,    -1,    -1,   241,    -1,    -1,    -1,    -1,   388,    -1,
      -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,   402,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2632,    -1,  1046,    -1,    -1,    -1,    -1,    -1,
    1458,  1459,  1460,    -1,   428,  1463,    -1,  1948,    -1,    -1,
     288,  1046,   436,    -1,    -1,   606,   607,    -1,  1476,  1477,
    1478,  1479,  1046,    -1,    -1,    -1,  1484,    -1,   285,   453,
      -1,   455,   456,    -1,    -1,  1046,    -1,    -1,    -1,    -1,
      -1,  1499,  1500,    -1,    -1,   323,  1504,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1518,    -1,    -1,  1521,    -1,  1523,    -1,    -1,   492,    -1,
      -1,   495,   496,   497,   665,    -1,  1128,    -1,    -1,    -1,
      -1,   359,    -1,    -1,    -1,    -1,  1544,    -1,    -1,    -1,
     681,    -1,    -1,  1128,    -1,    -1,    -1,    -1,  1556,    -1,
      -1,    -1,    -1,    -1,  1128,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1570,    -1,   108,   109,  1046,  1128,   709,    -1,
      -1,   378,    -1,    -1,  1458,  1459,    -1,  1585,   406,  1463,
     408,    -1,  2073,    -1,    -1,    -1,    -1,   728,   729,   730,
      -1,   732,    -1,  1601,    -1,    -1,    -1,  1171,    -1,    -1,
      -1,   429,    -1,    -1,   432,    -1,    -1,    -1,    -1,  1617,
      -1,     8,   753,    -1,    11,  1499,  1500,    -1,    -1,    16,
      17,    18,    -1,    -1,    -1,    -1,  1634,  1635,  1636,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,   186,   187,    16,    17,    18,    -1,  1128,  1251,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     801,    -1,    -1,    -1,   805,   806,  1251,  1675,    -1,    41,
      -1,   478,    -1,    -1,    -1,    -1,    48,  1251,   485,   486,
     487,   488,   489,   490,    -1,    -1,    -1,    -1,    -1,    -1,
    1251,  2182,    -1,    -1,    -1,    -1,    -1,    -1,  2189,  1707,
      -1,    73,    -1,   247,   248,   249,   250,   251,   252,    -1,
      -1,   255,   256,    -1,    -1,    -1,    -1,  1725,   859,   860,
     861,    -1,  1730,    -1,  1298,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1744,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1757,
      -1,  2242,  1760,    -1,    -1,    -1,    -1,    -1,    -1,  1767,
      -1,  2252,    -1,  1771,    -1,    -1,  1774,    -1,    -1,    -1,
      -1,  1251,  1780,  1781,  1782,  1783,  1784,    -1,    -1,  1787,
    1788,  1789,  1790,  1791,  1792,  1793,  1794,  1795,  1796,    -1,
      -1,    -1,  1800,  1801,    -1,    -1,    -1,    -1,    -1,    -1,
    1374,  1809,   174,    -1,  1406,    -1,  1814,    -1,    -1,    -1,
      -1,    -1,  1820,    -1,    -1,  1823,    -1,  1825,   190,   363,
     364,  1406,    -1,   195,  1832,  1833,    -1,    -1,  1836,  1837,
      -1,    -1,  1406,  1841,  1842,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   983,    -1,    -1,  1406,    -1,    -1,    -1,  1857,
      -1,  1859,    -1,    -1,    -1,    -1,    -1,    -1,   230,    -1,
      -1,    -1,  1870,   657,    -1,    -1,    -1,    -1,    -1,    -1,
     664,    -1,    -1,    -1,  2365,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1893,    -1,    -1,   285,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1781,  1782,  1783,
    1784,    -1,  1910,  1787,  1788,  1789,  1790,  1791,  1792,  1793,
    1794,  1795,  1796,   285,  2405,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,  1406,    -1,    -1,    -1,
     474,   475,    -1,    -1,    -1,    -1,  1077,  1945,    -1,  1947,
    1948,  1949,    -1,    -1,  2435,    -1,    -1,  2438,    -1,    -1,
     494,   745,  1836,  1837,    41,    -1,    -1,  1098,    -1,     8,
    1101,    48,    11,  1104,    -1,    -1,    -1,    16,    17,    18,
    1111,  1112,    -1,    -1,   768,    -1,   770,   771,    -1,    -1,
      -1,    -1,  1123,    -1,    33,    -1,    73,    -1,  1129,  1130,
    1131,  1132,    -1,    -1,    -1,    -1,  1137,  1138,    -1,    -1,
      -1,  1142,    -1,    -1,    -1,  1146,   378,    -1,  1149,  1150,
    1151,  1152,  1153,  1154,  1155,  1156,  1157,  2025,    -1,  1160,
      -1,    -1,    -1,  1164,    -1,    -1,  1167,    -1,  1169,    -1,
    1171,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   836,    -1,    -1,   839,   840,    -1,    -1,    -1,
      -1,  1192,    -1,    -1,    -1,    -1,    -1,   144,    -1,  2067,
    2068,    -1,    -1,    -1,  2072,  2073,    -1,    -1,    -1,  2077,
      -1,    -1,  2080,  2081,  1215,  1216,    -1,  2085,    -1,     8,
      -1,    -1,    11,    -1,   481,   482,   483,   174,   485,   486,
     487,   488,   489,   490,    -1,    -1,    -1,    -1,  2106,    -1,
      -1,  1675,  2110,   190,    -1,  1707,   478,    -1,   195,   481,
     482,   483,    41,   485,   486,   487,   488,   489,   490,    48,
      -1,    -1,  1707,    -1,    -1,    -1,    -1,    -1,    -1,  2137,
      -1,    -1,    -1,  1707,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2632,  1744,   230,    73,    -1,  1707,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2164,  1298,  1760,  1744,
    1301,  1302,    -1,  1304,    -1,  2173,    -1,   216,    -1,    -1,
    1744,    -1,    -1,    -1,  2182,  1760,    -1,    -1,  1780,    -1,
      -1,  2189,    -1,  1744,    -1,    -1,  1760,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1780,    -1,  1338,   285,  1760,
      -1,    -1,    -1,    -1,    -1,    -1,  1780,  1809,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   144,  1010,  1011,    -1,  1780,
      -1,    -1,    -1,    -1,  1809,    -1,    -1,  1707,    -1,    -1,
    1832,  2239,    -1,  1374,  2242,  1809,   285,    -1,    -1,    -1,
      -1,  2249,    -1,    -1,  2252,   174,    -1,  1832,  1809,    -1,
      -1,    -1,  2260,  2261,    -1,    -1,  2264,    -1,  1832,    -1,
      -1,   190,    -1,    -1,  1744,    -1,   195,    -1,  2276,    -1,
      -1,  1832,  1413,    -1,    -1,    -1,     8,  1418,  2286,    11,
    1760,    -1,    -1,  2291,    -1,    -1,  2294,    -1,  1082,  1083,
      -1,   378,    -1,  2301,  2302,    -1,  1090,    -1,  1092,  1093,
    1780,   230,    -1,    -1,    -1,    -1,  2314,    -1,  2316,    41,
      -1,    -1,    -1,  1107,    -1,  1109,    48,    -1,    -1,  1460,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2335,  1122,  1809,
      -1,    -1,    -1,    -1,    -1,  1476,    -1,  1478,  1479,    -1,
      -1,    73,    -1,  1484,    -1,    -1,  1948,    -1,    -1,    -1,
      -1,    -1,  1832,    -1,    -1,    -1,   285,  2365,    -1,    -1,
      -1,    -1,    -1,  1948,    -1,  2249,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1948,    -1,    -1,  1518,    -1,    -1,
    1521,    -1,  1523,   108,   109,    -1,    -1,  1948,    -1,    -1,
    2398,   478,    -1,    -1,    -1,    -1,  2404,  2405,   485,   486,
     487,   488,   489,   490,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   144,    -1,    -1,    -1,    -1,    -1,    -1,  2427,
      -1,  1215,  1216,  2431,    -1,    -1,    -1,  2435,    -1,  1570,
    2438,  2439,   481,   482,   483,    -1,   485,   486,   487,   488,
     489,   490,   174,  2451,  1585,    -1,    -1,    -1,    -1,   378,
      -1,  2335,  2460,    -1,    -1,    -1,  2464,  2465,   190,    -1,
      -1,   186,   187,   195,    -1,    -1,    -1,    -1,  1948,    -1,
      -1,  2073,    -1,    -1,    -1,    -1,  1617,  1271,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1281,  2073,    -1,
    1284,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   230,  2073,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2073,    -1,    -1,  2523,    -1,    -1,  2526,    -1,
    2404,    -1,   247,   248,   249,   250,   251,   252,    -1,    -1,
     255,   256,    -1,    -1,  1675,    -1,    -1,    -1,    -1,     0,
    2548,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   478,
      -1,    -1,    -1,   285,  2562,    -1,   485,   486,   487,   488,
     489,   490,    -1,  1357,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2579,    -1,    -1,    -1,    -1,    -1,    -1,  1372,    -1,
    2182,    -1,    -1,    -1,    -1,    -1,    -1,  2189,    -1,    -1,
      -1,    -1,    -1,  2073,    -1,  2603,  2604,  2182,    -1,    -1,
      -1,  1395,    -1,    -1,  2189,    -1,    -1,    -1,  2182,    -1,
      -1,    -1,    -1,    -1,    -1,  2189,  1757,    -1,    -1,    -1,
      -1,  2182,    -1,  2631,  2632,    -1,  1767,    -1,  2189,    -1,
    1771,    92,    -1,  1774,    -1,    -1,    -1,    -1,   363,   364,
    2242,    -1,    -1,  2651,    -1,  2653,   378,    -1,    -1,    -1,
    2252,    -1,    -1,    -1,    -1,    -1,    -1,  2242,    -1,  1800,
    1801,    -1,    -1,    -1,    -1,    -1,    -1,  2252,  2242,    -1,
      -1,   746,    -1,    -1,    -1,    -1,    -1,    -1,  2252,  1820,
      -1,  2242,  1823,    -1,  1825,   146,    -1,    -1,    -1,    -1,
      -1,  2252,  1833,    -1,    -1,    -1,    -1,    -1,   159,    -1,
    1841,  1842,  2182,   164,    -1,    -1,    -1,    -1,   169,  2189,
     785,    -1,    -1,  2721,    -1,    -1,    -1,    -1,    -1,   180,
      -1,    -1,   183,    -1,    -1,    -1,    -1,    -1,    -1,  1870,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   478,    -1,    -1,   474,
     475,   212,  1893,   485,   486,   487,   488,   489,   490,    -1,
      -1,    -1,  2242,  2365,    -1,    -1,  1560,    -1,    -1,  1910,
     231,    -1,  2252,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2365,    -1,    -1,  1577,  1578,    -1,    -1,    -1,    -1,   864,
      -1,  2365,    -1,    -1,   869,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2405,  2365,    -1,    -1,    -1,    -1,    -1,
      -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   280,
    2405,    -1,   283,    -1,    -1,    -1,    -1,    -1,   289,    -1,
      19,  2405,    -1,  2435,    -1,    -1,  2438,    -1,    -1,    -1,
      29,    -1,    31,    32,  2405,    -1,    -1,    -1,    -1,    -1,
    2435,    -1,    -1,  2438,    -1,    -1,    -1,    -1,    47,    -1,
      -1,  2435,    -1,    -1,  2438,    -1,    -1,    56,    -1,    -1,
      -1,    -1,    -1,    -1,  2435,    -1,    -1,  2438,    -1,    68,
      -1,    -1,    -1,    -1,  2025,  2365,   347,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    90,    -1,    92,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,    -1,    -1,
      -1,   110,    -1,    -1,    -1,  2405,  2067,  2068,    -1,    -1,
      -1,  2072,    -1,    -1,    -1,   124,  2077,    -1,    -1,  2080,
    2081,   402,    -1,    -1,  2085,    -1,   135,    -1,    -1,    -1,
      -1,  1745,  1746,   142,    -1,  2435,    -1,    -1,  2438,    -1,
      -1,   150,    -1,   152,   153,    -1,    -1,   428,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   436,   165,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   453,    -1,   455,   456,  2137,    -1,    -1,    -1,
    1075,    -1,    -1,     8,    -1,   194,    11,    -1,    -1,    92,
      -1,    16,    17,    18,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,  1097,    -1,    16,    17,    18,  1102,    33,    -1,
    2632,   492,  2173,    -1,   495,   496,   497,    -1,  1113,  1114,
    1115,    33,  1117,    -1,   233,    -1,    -1,  2632,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,  2632,    -1,
      16,    17,    18,   146,    -1,     3,    -1,    -1,    -1,    -1,
       8,  2632,    -1,    11,    -1,    -1,   159,    33,    16,    17,
      18,   164,    -1,    -1,    -1,    41,   169,    -1,    -1,    -1,
      -1,  1166,    48,    -1,    -1,    33,    -1,   180,    36,    -1,
     183,    -1,    -1,    41,    -1,    -1,    -1,    -1,    -1,    -1,
      48,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,  2260,
    2261,   310,    -1,  2264,   313,    -1,    -1,  1202,    -1,   212,
      -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,  1214,
      -1,    -1,    -1,    -1,  1219,    -1,    -1,    -1,   231,    -1,
      -1,    -1,  2632,    -1,  1948,   344,    -1,    -1,    -1,    -1,
    2301,  2302,    -1,   352,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2316,    -1,   366,    -1,    -1,
      -1,    -1,    -1,    -1,   373,    -1,    -1,    -1,   377,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   280,    -1,   388,
     283,    -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,    -1,
      -1,   216,    -1,   402,    -1,  2009,    -1,    -1,   174,    -1,
      -1,    -1,    -1,    -1,   216,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   190,    -1,   174,    -1,    -1,   195,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   437,    -1,
      -1,    -1,   190,   442,    -1,    -1,    -1,   195,    -1,    -1,
     216,   217,    -1,    -1,   347,    -1,    -1,   456,    -1,    -1,
      -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,   216,   217,
     285,    -1,    -1,    -1,    -1,    -1,  2427,    -1,    -1,    -1,
      -1,   480,   230,   285,    -1,    -1,    -1,    -1,  2439,    -1,
      -1,    -1,    -1,    -1,    -1,   494,    -1,    -1,   497,    -1,
    2451,    -1,   268,     8,    -1,   271,    11,    -1,    -1,   402,
      -1,    16,    17,    18,  2465,    -1,    -1,    -1,    -1,   285,
     268,    -1,   288,   271,    -1,    -1,    -1,    -1,    33,    -1,
      -1,  1416,    -1,    -1,    -1,   428,    -1,   285,    -1,    -1,
     288,    -1,    -1,   436,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1439,    -1,    -1,    -1,    -1,    -1,
     453,    -1,   455,   456,    -1,    -1,    -1,  2171,    -1,    -1,
      -1,  1456,  2176,  1458,  1459,    -1,  1461,    -1,  1463,    -1,
      -1,    -1,    -1,  1468,    -1,    -1,  2190,  2191,    -1,    -1,
    1475,    -1,    -1,    -1,    -1,  1480,    -1,  2548,    -1,   492,
      -1,  1486,   495,   496,   497,  1490,  1491,  1492,  1493,    -1,
      -1,    -1,   378,    -1,  1499,  1500,    -1,  1502,  1503,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2579,  1514,
     378,    -1,  1517,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1525,  1526,  1527,  1528,  1529,  1530,  1531,  1532,  1533,  1534,
      -1,    -1,  2603,  2604,    -1,    -1,    -1,  1542,    -1,    -1,
      -1,  1546,    -1,    -1,    -1,    -1,   481,   482,   483,    -1,
     485,   486,   487,   488,   489,   490,    -1,    -1,    -1,   481,
     482,   483,  1567,   485,   486,   487,   488,   489,   490,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2653,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   216,   478,    -1,    -1,   481,   482,   483,    -1,   485,
     486,   487,   488,   489,   490,    -1,    -1,    -1,    -1,   495,
     478,    -1,    -1,   481,   482,   483,    -1,   485,   486,   487,
     488,   489,   490,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2356,  2357,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2365,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2721,    -1,    -1,     3,    -1,     5,    -1,    -1,    -1,     8,
     285,    -1,    11,    -1,    -1,    -1,    -1,    16,    17,    18,
      -1,    -1,    -1,  1678,  1679,  1680,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    33,    -1,    -1,     8,    -1,    -1,
      11,    -1,    41,    -1,    -1,    16,    17,    18,    -1,    48,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,  1716,    33,    16,    17,    18,    -1,    -1,    -1,    -1,
      41,    -1,    -1,    -1,    73,    -1,    -1,    48,    -1,    -1,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,
      -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,
      -1,  1756,    73,    -1,    -1,    -1,    -1,  1762,   108,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      73,    -1,  1777,  1778,  1779,    -1,  1781,  1782,  1783,  1784,
      -1,    -1,  1787,  1788,  1789,  1790,  1791,  1792,  1793,  1794,
    1795,  1796,  1797,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1817,    -1,    -1,    -1,  1821,  1822,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   174,    -1,    -1,    -1,    -1,
    1835,  1836,  1837,  1838,    -1,  1840,   186,   187,    -1,    -1,
      -1,   190,    -1,    -1,    -1,    -1,   195,    -1,    -1,    -1,
      -1,    -1,    -1,   174,    -1,    -1,   481,   482,   483,    -1,
     485,   486,   487,   488,   489,   490,    -1,   216,   217,   190,
      -1,   174,    -1,    -1,   195,    -1,    -1,    -1,    -1,    -1,
      -1,   230,    -1,    -1,    -1,    -1,    -1,   190,    -1,    -1,
      -1,    -1,   195,    -1,    -1,   216,   217,   247,   248,   249,
     250,   251,   252,    -1,    -1,   255,   256,  1912,  2632,   230,
      -1,    -1,    -1,   216,   217,    -1,    -1,    -1,    -1,   268,
      -1,    -1,   271,    -1,    -1,    -1,    -1,   230,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,    -1,    -1,
     271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,   268,    -1,   288,   271,    -1,
      -1,    23,    -1,    23,    -1,    -1,    -1,    29,    -1,    29,
      -1,    -1,   285,    -1,    36,   288,    36,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    55,    -1,    55,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   363,   364,    -1,    -1,    -1,    -1,    -1,
      -1,  2026,    -1,    -1,    -1,  2030,  2031,    -1,  2033,   378,
      -1,  2036,  2037,  2038,  2039,    -1,    -1,    -1,  2043,  2044,
    2045,  2046,  2047,  2048,  2049,  2050,  2051,  2052,  2053,  2054,
      -1,    -1,    -1,   105,    -1,   105,    -1,   378,    -1,    -1,
      -1,  2066,    -1,    -1,  2069,    -1,  2071,    -1,    -1,    -1,
    2075,    -1,    -1,  2078,  2079,   378,    -1,  2082,  2083,    -1,
      -1,    -1,    -1,   135,    -1,   135,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    -1,    16,    17,
      18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,  2123,    -1,
      -1,    -1,    -1,    41,   474,   475,    -1,    -1,    -1,   478,
      48,  2136,   481,   482,   483,    -1,   485,   486,   487,   488,
     489,   490,    -1,    -1,  2149,   197,   495,   197,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    73,    21,   478,    -1,    -1,
     481,   482,   483,    -1,   485,   486,   487,   488,   489,   490,
      -1,    -1,    -1,    -1,   495,   478,    -1,    -1,   481,   482,
     483,    -1,   485,   486,   487,   488,   489,   490,    -1,    -1,
      -1,    -1,   495,   245,    -1,   245,    -1,    -1,    -1,    -1,
      -1,   253,    -1,   253,    -1,    -1,    -1,    -1,    -1,    74,
      -1,    -1,    -1,   265,    -1,   265,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    89,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   287,    -1,   287,    -1,    -1,
    2245,    -1,    -1,    -1,  2249,   297,    -1,   297,    -1,  2254,
    2255,  2256,    -1,    -1,  2259,    -1,   174,  2262,  2263,    -1,
      -1,    -1,  2267,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   190,    -1,    -1,    -1,    -1,   195,    -1,    -1,
     145,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   340,   154,
     340,    -1,   344,   345,   344,   345,    -1,    -1,   216,   217,
      -1,   166,    -1,    -1,    -1,    -1,   171,    -1,    -1,    -1,
      -1,    -1,   230,    -1,    -1,   367,    -1,   367,    -1,    -1,
      -1,   373,    -1,   373,    -1,    -1,    -1,    -1,    -1,    -1,
    2335,    -1,    -1,   198,    -1,    -1,   388,    -1,   388,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2353,    -1,
     268,    -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,
     288,    -1,    -1,    -1,    -1,    -1,   241,    -1,    -1,   244,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   439,    -1,   439,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2403,  2404,
      -1,    -1,    -1,  2408,  2409,  2410,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2443,  2444,
      -1,    -1,    -1,   308,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2457,    -1,    -1,    -1,    -1,    -1,    -1,   324,
     378,    -1,    -1,  2468,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   356,    -1,    -1,   359,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   367,    -1,    -1,   370,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2520,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   390,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2538,    -1,    -1,    -1,   402,    -1,    -1,
      -1,    -1,    -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2557,   418,    -1,    -1,    -1,    -1,    -1,    -1,
     478,    -1,    -1,   481,   482,   483,  2571,   485,   486,   487,
     488,   489,   490,    -1,    -1,    -1,    -1,   495,    -1,    -1,
      -1,    -1,    -1,    -1,   449,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,  2639,    -1,    38,    39,    -1,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,  2656,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
      -1,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,   124,    -1,   126,   127,   128,   129,   130,    -1,
     132,   133,   134,   135,   136,    -1,    -1,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,    -1,   170,   171,
     172,   173,   174,   175,    -1,   177,    -1,    -1,    -1,   181,
     182,    -1,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,    -1,    -1,   227,   228,   229,   230,    -1,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,    -1,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,    -1,   307,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,   317,   318,   319,   320,   321,
      -1,    -1,   324,   325,   326,   327,   328,   329,   330,   331,
     332,    -1,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
      -1,   403,   404,   405,   406,   407,   408,   409,    -1,   411,
     412,    -1,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,   435,    -1,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,    -1,   449,   450,   451,
      -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,    -1,    -1,    -1,
      -1,    -1,    -1,   485,   486,   487,    -1,    -1,    -1,    -1,
      -1,    -1,   494,   495,    -1,    -1,    -1,   499,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    74,
      -1,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    90,    91,    -1,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
      -1,   126,   127,   128,   129,    -1,    -1,   132,   133,   134,
     135,   136,    -1,    -1,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,    -1,   170,   171,   172,   173,   174,
     175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
      -1,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
      -1,    -1,   227,   228,   229,   230,    -1,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,    -1,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,   317,   318,   319,   320,   321,    -1,    -1,   324,
     325,   326,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,    -1,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,    -1,   411,   412,    -1,    -1,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,    -1,    -1,   430,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,    -1,
     445,   446,   447,    -1,   449,   450,   451,    -1,    -1,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,    -1,   480,    -1,    -1,    -1,    -1,
     485,   486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,
     495,    -1,    -1,    -1,   499,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    -1,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    -1,
      68,    69,    70,    71,    72,    -1,    74,    -1,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    90,    91,    -1,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,   124,    -1,   126,   127,
     128,   129,    -1,    -1,   132,   133,   134,   135,   136,    -1,
      -1,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,    -1,   170,   171,   172,   173,   174,   175,    -1,   177,
      -1,    -1,    -1,   181,   182,    -1,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,    -1,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,    -1,    -1,   227,
     228,   229,   230,    -1,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,    -1,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,   317,
     318,   319,   320,   321,    -1,    -1,   324,   325,   326,   327,
     328,   329,   330,   331,   332,    -1,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,    -1,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,    -1,   411,   412,    -1,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,   432,   433,   434,   435,    -1,   437,
     438,   439,   440,   441,   442,   443,    -1,   445,   446,   447,
      -1,   449,   450,   451,    -1,    -1,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,    -1,   480,    -1,    -1,    -1,    -1,   485,   486,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   494,    -1,    -1,    -1,
      -1,   499,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    74,    -1,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,    -1,   126,   127,   128,   129,    -1,
      -1,   132,   133,   134,   135,   136,    -1,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,   169,   170,
     171,   172,   173,   174,   175,    -1,   177,    -1,    -1,    -1,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,    -1,   226,   227,   228,   229,   230,
      -1,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,    -1,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,    -1,   403,   404,   405,   406,   407,   408,   409,    -1,
     411,   412,    -1,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,   440,
     441,   442,   443,    -1,   445,   446,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,    -1,    -1,
      -1,    -1,    -1,    -1,   485,   486,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   494,    -1,    -1,    -1,    -1,   499,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,    -1,   170,   171,   172,   173,
     174,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,    -1,    -1,   227,   228,   229,   230,    -1,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
     404,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,   435,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,   446,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,    -1,    -1,    -1,
      -1,   485,   486,   487,    -1,    -1,    -1,    -1,    -1,    -1,
     494,    -1,    -1,    -1,    -1,   499,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    74,    -1,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    89,    90,    91,    -1,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,    -1,
     117,   118,   119,   120,   121,   122,    -1,   124,    -1,   126,
     127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
      -1,    -1,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,    -1,   170,   171,   172,   173,   174,   175,    -1,
     177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,    -1,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,    -1,    -1,
     227,   228,   229,   230,    -1,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,    -1,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,    -1,
     307,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
     317,   318,   319,   320,   321,    -1,    -1,   324,   325,   326,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
      -1,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,    -1,   403,   404,   405,   406,
     407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,   440,   441,   442,   443,    -1,   445,   446,
     447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,    -1,    -1,    -1,    -1,    -1,    -1,   485,   486,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,    -1,    -1,
      -1,    -1,   499,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
      30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    -1,    68,    69,
      70,    71,    72,    -1,    74,    -1,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      90,    91,    -1,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,   124,    -1,   126,   127,   128,   129,
      -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,    -1,
     170,   171,   172,   173,   174,   175,    -1,   177,    -1,    -1,
      -1,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,    -1,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,    -1,    -1,   227,   228,   229,
     230,    -1,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,    -1,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,    -1,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,   317,   318,   319,
     320,   321,    -1,    -1,   324,   325,   326,   327,   328,   329,
     330,   331,   332,    -1,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,    -1,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,    -1,
     400,   401,    -1,   403,   404,   405,   406,   407,   408,   409,
      -1,   411,   412,    -1,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,    -1,
     430,   431,   432,   433,   434,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,    -1,   445,   446,   447,    -1,   449,
     450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,    -1,
      -1,    -1,    -1,    -1,    -1,   485,   486,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   494,   495,    -1,    -1,    -1,   499,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,    -1,   117,   118,   119,   120,   121,   122,
      -1,   124,    -1,   126,   127,   128,   129,    -1,    -1,   132,
     133,   134,   135,   136,    -1,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,    -1,   170,   171,   172,
     173,   174,   175,    -1,   177,    -1,    -1,    -1,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,    -1,    -1,   227,   228,   229,   230,    -1,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,    -1,   307,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,   321,    -1,
      -1,   324,   325,   326,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    -1,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,   400,   401,    -1,
     403,   404,   405,   406,   407,   408,   409,    -1,   411,   412,
      -1,    -1,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,   440,   441,   442,
     443,    -1,   445,   446,   447,    -1,   449,   450,   451,    -1,
      -1,   454,    -1,    -1,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,    -1,    -1,    -1,    -1,
      -1,    -1,   485,   486,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   494,   495,    -1,    -1,    -1,   499,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,    -1,
     126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
     136,    -1,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
      -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,    -1,
      -1,   227,   228,   229,   230,    -1,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
      -1,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,   400,   401,    -1,   403,   404,   405,
     406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,   435,
      -1,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,    -1,    -1,    -1,    -1,    -1,    -1,   485,
     486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,    -1,
      -1,    -1,    -1,   499,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
     169,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,    -1,    -1,   227,   228,
     229,   230,    -1,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    -1,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,   435,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,   446,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
      -1,    -1,    -1,    -1,    -1,    -1,   485,   486,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   494,    -1,    -1,    -1,    -1,
     499,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
      -1,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,   124,    -1,   126,   127,   128,   129,    -1,    -1,
     132,   133,   134,   135,   136,    -1,    -1,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,    -1,   170,   171,
     172,   173,   174,   175,    -1,   177,    -1,    -1,    -1,   181,
     182,    -1,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,    -1,    -1,   227,   228,   229,   230,    -1,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,    -1,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,    -1,   307,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,   317,   318,   319,   320,   321,
      -1,    -1,   324,   325,   326,   327,   328,   329,   330,   331,
     332,    -1,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
      -1,   403,   404,   405,   406,   407,   408,   409,    -1,   411,
     412,    -1,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,   435,    -1,   437,   438,   439,   440,   441,
     442,   443,    -1,   445,   446,   447,    -1,   449,   450,   451,
      -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,    -1,    -1,    -1,
      -1,    -1,    -1,   485,   486,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   494,    -1,    -1,    -1,    -1,   499,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    74,
      -1,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    90,    91,    -1,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
      -1,   126,   127,   128,   129,    -1,    -1,   132,   133,   134,
     135,   136,    -1,    -1,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,    -1,   170,   171,   172,   173,   174,
     175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
      -1,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
      -1,    -1,   227,   228,   229,   230,    -1,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,    -1,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,   317,   318,   319,   320,   321,    -1,    -1,   324,
     325,   326,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,    -1,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,   400,   401,    -1,   403,   404,
     405,   406,   407,   408,   409,    -1,   411,   412,    -1,    -1,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,    -1,    -1,   430,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,    -1,
     445,   446,   447,    -1,   449,   450,   451,    -1,    -1,   454,
      -1,    -1,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,    -1,    -1,    -1,    -1,    -1,    -1,
     485,   486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,
      -1,    -1,    -1,    -1,   499,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    -1,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    -1,
      68,    69,    70,    71,    72,    -1,    74,    -1,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    90,    91,    -1,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,   124,    -1,   126,   127,
     128,   129,    -1,    -1,   132,   133,   134,   135,   136,    -1,
      -1,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,    -1,   170,   171,   172,   173,   174,   175,    -1,   177,
      -1,    -1,    -1,   181,   182,    -1,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,    -1,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,    -1,    -1,   227,
     228,   229,   230,    -1,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,    -1,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,   317,
     318,   319,   320,   321,    -1,    -1,   324,   325,   326,   327,
     328,   329,   330,   331,   332,    -1,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,    -1,   400,   401,    -1,   403,   404,   405,   406,   407,
     408,   409,    -1,   411,   412,    -1,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,   432,   433,   434,   435,    -1,   437,
     438,   439,   440,   441,   442,   443,    -1,   445,   446,   447,
      -1,   449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,    -1,    -1,    -1,    -1,    -1,    -1,   485,   486,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   494,    -1,    -1,    -1,
      -1,   499,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    74,    -1,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,    -1,   126,   127,   128,   129,    -1,
      -1,   132,   133,   134,   135,   136,    -1,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,    -1,   170,
     171,   172,   173,   174,   175,    -1,   177,    -1,    -1,    -1,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,    -1,    -1,   227,   228,   229,   230,
      -1,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,    -1,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,    -1,   403,   404,   405,   406,   407,   408,   409,    -1,
     411,   412,    -1,    -1,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,   440,
     441,   442,   443,    -1,   445,   446,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,    -1,    -1,
      -1,    -1,    -1,    -1,   485,   486,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   494,    -1,    -1,    -1,    -1,   499,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,    -1,   170,   171,   172,   173,
     174,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,    -1,    -1,   227,   228,   229,   230,    -1,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
     404,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,   435,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,   446,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,    -1,    -1,    -1,
      -1,   485,   486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     494,    -1,    -1,    -1,    -1,   499,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    74,    -1,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    89,    90,    91,    -1,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,    -1,
     117,   118,   119,   120,   121,   122,    -1,   124,    -1,   126,
     127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
      -1,    -1,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,    -1,   170,   171,   172,   173,   174,   175,    -1,
     177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,    -1,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,    -1,    -1,
     227,   228,   229,   230,    -1,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,    -1,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,    -1,
     307,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
     317,   318,   319,   320,   321,    -1,    -1,   324,   325,   326,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
      -1,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,    -1,   403,   404,   405,   406,
     407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,   440,   441,   442,   443,    -1,   445,   446,
     447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,    -1,    -1,    -1,    -1,    -1,    -1,   485,   486,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,    -1,    -1,
      -1,    -1,   499,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
      30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    -1,    68,    69,
      70,    71,    72,    -1,    74,    -1,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      90,    91,    -1,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,    -1,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,   124,    -1,   126,   127,   128,   129,
      -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,    -1,
     170,   171,   172,   173,   174,   175,    -1,   177,    -1,    -1,
      -1,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,    -1,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,    -1,    -1,   227,   228,   229,
     230,    -1,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,    -1,   267,    -1,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,    -1,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,   317,   318,   319,
     320,   321,    -1,    -1,   324,   325,   326,   327,   328,   329,
     330,   331,   332,    -1,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,    -1,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,    -1,
     400,   401,    -1,   403,   404,   405,   406,   407,   408,   409,
      -1,   411,   412,    -1,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,    -1,
     430,   431,   432,   433,   434,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,    -1,   445,   446,   447,    -1,   449,
     450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   485,   486,    -1,    -1,     3,
       4,     5,     6,     7,   494,     9,    10,    -1,    -1,   499,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,    -1,   170,   171,   172,   173,
     174,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,    -1,    -1,   227,   228,   229,   230,    -1,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
     404,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,   435,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,   446,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   485,   486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     494,    -1,    -1,    -1,    -1,   499,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    74,    -1,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    89,    90,    91,    -1,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,    -1,   115,    -1,
     117,   118,   119,   120,   121,   122,    -1,   124,    -1,   126,
     127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
      -1,    -1,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,    -1,   170,   171,   172,   173,   174,   175,    -1,
     177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,    -1,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,    -1,
     217,   218,   219,   220,   221,   222,   223,   224,    -1,    -1,
     227,   228,   229,   230,    -1,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,    -1,
     267,    -1,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,    -1,
     307,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
     317,   318,   319,   320,   321,    -1,    -1,   324,   325,   326,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
      -1,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,    -1,   403,   404,   405,   406,
     407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,   440,   441,   442,   443,    -1,   445,   446,
     447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   485,   486,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,    -1,    -1,
      -1,    -1,   499,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
      30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    -1,    68,    69,
      70,    71,    72,    -1,    74,    -1,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      90,    91,    -1,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,   124,    -1,   126,   127,   128,   129,
      -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,    -1,
     170,   171,   172,   173,   174,   175,    -1,   177,    -1,    -1,
      -1,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,    -1,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,   219,
     220,   221,   222,   223,   224,    -1,    -1,   227,   228,   229,
     230,    -1,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,    -1,   267,    -1,   269,
     270,    -1,   272,   273,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,    -1,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,   317,   318,   319,
     320,   321,    -1,    -1,   324,   325,   326,   327,   328,   329,
     330,   331,   332,    -1,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,    -1,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,    -1,
     400,   401,    -1,   403,   404,   405,   406,   407,   408,   409,
      -1,   411,   412,    -1,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,    -1,
     430,   431,   432,   433,   434,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,    -1,   445,   446,   447,    -1,   449,
     450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,    -1,
      -1,    -1,    -1,    -1,    -1,   485,   486,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   494,    -1,    -1,    -1,    -1,   499,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    44,    45,    46,    47,    -1,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,    -1,   117,   118,   119,   120,   121,   122,
      -1,   124,    -1,   126,   127,   128,   129,    -1,    -1,   132,
     133,   134,   135,   136,    -1,    -1,   139,   140,   141,    -1,
     143,    -1,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,    -1,   170,   171,   172,
     173,    -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,    -1,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,    -1,    -1,   218,   219,   220,   221,   222,
     223,   224,    -1,    -1,   227,   228,   229,    -1,    -1,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,    -1,   269,   270,    -1,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,    -1,   307,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,   321,    -1,
      -1,   324,   325,   326,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    -1,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,    -1,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,   400,   401,    -1,
     403,   404,   405,   406,   407,   408,   409,    -1,   411,   412,
      -1,    -1,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,   440,   441,   442,
     443,    -1,   445,   446,   447,    -1,   449,   450,   451,    -1,
      -1,   454,    -1,    -1,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,    -1,    -1,    -1,    -1,    -1,
      -1,     3,   485,   486,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   494,    -1,    -1,    -1,    -1,   499,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    36,    -1,    38,    39,    -1,    41,
      42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
      -1,    93,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,    -1,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,   124,    -1,   126,   127,   128,   129,    -1,    -1,
     132,   133,   134,   135,   136,    -1,    -1,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,    -1,   160,   161,
     162,   163,    -1,   165,    -1,   167,    -1,    -1,   170,   171,
     172,   173,    -1,   175,    -1,   177,    -1,    -1,    -1,   181,
     182,    -1,   184,   185,   186,   187,   188,   189,    -1,   191,
     192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,    -1,    -1,   218,   219,   220,   221,
     222,   223,   224,    -1,    -1,   227,   228,   229,    -1,    -1,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,    -1,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
      -1,   293,    -1,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,    -1,   307,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,   317,   318,   319,   320,   321,
      -1,    -1,   324,   325,   326,   327,   328,   329,   330,   331,
     332,    -1,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
      -1,   373,   374,   375,   376,   377,    -1,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
      -1,   403,   404,   405,   406,   407,   408,   409,    -1,   411,
     412,    -1,    -1,   415,   416,   417,   418,   419,    -1,   421,
     422,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,    -1,    -1,   437,   438,   439,   440,   441,
     442,   443,    -1,   445,    -1,   447,    -1,   449,   450,   451,
      -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,    -1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   495,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    74,
      -1,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    90,    91,    -1,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,    -1,
     115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
      -1,   126,   127,   128,   129,    -1,    -1,   132,   133,   134,
     135,   136,    -1,    -1,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,    -1,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,    -1,   170,   171,   172,   173,   174,
     175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
      -1,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,    -1,   227,   228,   229,   230,    -1,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,    -1,   269,   270,   271,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,   284,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,    -1,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,   317,   318,   319,   320,   321,    -1,    -1,   324,
     325,   326,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,    -1,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,    -1,   411,   412,    -1,    -1,
     415,   416,   417,   418,   419,    -1,   421,   422,   423,   424,
     425,   426,   427,    -1,    -1,   430,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,    -1,
     445,   446,   447,    -1,   449,   450,   451,    -1,    -1,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,    -1,     3,   480,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
      -1,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,    -1,   227,   228,
     229,   230,    -1,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,   271,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,   284,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,   435,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,   446,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   494,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,    -1,   115,    -1,   117,   118,   119,   120,   121,   122,
      -1,   124,    -1,   126,   127,   128,   129,    -1,    -1,   132,
     133,   134,   135,   136,    -1,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,    -1,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,    -1,   170,   171,   172,
     173,   174,   175,    -1,   177,    -1,    -1,    -1,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,    -1,    -1,   227,   228,   229,   230,    -1,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,    -1,   269,   270,   271,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,    -1,   307,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,   321,    -1,
      -1,   324,   325,   326,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    -1,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,   400,   401,    -1,
     403,   404,   405,   406,   407,   408,   409,    -1,   411,   412,
      -1,    -1,   415,   416,   417,   418,   419,    -1,   421,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,   440,   441,   442,
     443,    -1,   445,   446,   447,    -1,   449,   450,   451,    -1,
      -1,   454,    -1,    -1,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   494,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    74,    -1,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    89,    90,    91,    -1,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,    -1,   115,    -1,
     117,   118,   119,   120,   121,   122,    -1,   124,    -1,   126,
     127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
      -1,    -1,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,    -1,   170,   171,   172,   173,   174,   175,    -1,
     177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,    -1,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,    -1,    -1,
     227,   228,   229,   230,    -1,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,    -1,
     267,    -1,   269,   270,   271,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,    -1,
     307,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
     317,   318,   319,   320,   321,    -1,    -1,   324,   325,   326,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
      -1,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,    -1,   403,   404,   405,   406,
     407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
     417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,   440,   441,   442,   443,    -1,   445,   446,
     447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,     3,     4,     5,    -1,    -1,    -1,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    74,    -1,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    93,    94,    95,    96,    -1,    -1,    -1,   100,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,    -1,   126,   127,   128,   129,    -1,
      -1,   132,   133,   134,   135,   136,    -1,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,    -1,   170,
     171,   172,   173,   174,   175,    -1,   177,    -1,    -1,    -1,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,    -1,    -1,   227,   228,   229,   230,
      -1,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,    -1,   267,    -1,   269,   270,
     271,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,   283,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,    -1,   403,   404,   405,   406,   407,   408,   409,    -1,
     411,   412,    -1,    -1,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,    -1,   445,   446,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,    -1,     3,    -1,
      -1,    -1,    -1,    -1,   485,   486,   487,    -1,    -1,    -1,
      -1,    -1,    -1,   494,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    74,
      -1,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    90,    91,    -1,    93,    94,
      95,    96,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,    -1,
     115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
      -1,   126,   127,   128,   129,    -1,    -1,   132,   133,   134,
     135,   136,    -1,    -1,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,    -1,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,    -1,   170,   171,   172,   173,   174,
     175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
      -1,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
      -1,    -1,   227,   228,   229,   230,    -1,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,    -1,   269,   270,   271,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,    -1,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,   317,   318,   319,   320,   321,    -1,    -1,   324,
     325,   326,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,    -1,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,    -1,   411,   412,    -1,    -1,
     415,   416,   417,   418,   419,    -1,   421,   422,   423,   424,
     425,   426,   427,    -1,    -1,   430,   431,   432,   433,   434,
      -1,    -1,   437,   438,   439,   440,   441,   442,   443,    -1,
     445,   446,   447,    -1,   449,   450,   451,    -1,    -1,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,    -1,     3,   480,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,   402,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
       3,   480,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   494,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
      -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,    -1,   115,    -1,   117,   118,   119,   120,   121,   122,
      -1,   124,    -1,   126,   127,   128,   129,    -1,    -1,   132,
     133,   134,   135,   136,    -1,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,    -1,   160,   161,   162,
     163,    -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,
     173,    -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,    -1,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,
     223,   224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,    -1,   262,
     263,   264,   265,    -1,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,
     293,    -1,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,    -1,   307,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,   321,    -1,
      -1,   324,   325,   326,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    -1,   348,   349,    -1,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,    -1,
     373,   374,   375,   376,   377,    -1,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,   400,   401,   402,
     403,    -1,   405,   406,   407,   408,   409,    -1,   411,   412,
      -1,    -1,   415,   416,   417,   418,   419,    -1,   421,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,   440,   441,   442,
     443,    -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,
      -1,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,    -1,     3,   480,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   494,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
      47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    -1,    86,
      87,    88,    89,    90,    91,    -1,    -1,    94,    95,    96,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,    -1,   115,    -1,
     117,   118,   119,   120,   121,   122,    -1,   124,    -1,   126,
     127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
      -1,    -1,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
     167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,    -1,
     177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,   186,
     187,   188,   189,    -1,   191,   192,   193,   194,    -1,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,    -1,
      -1,   218,    -1,   220,   221,   222,   223,   224,    -1,    -1,
     227,    -1,   229,    -1,    -1,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,    -1,   262,   263,   264,   265,    -1,
     267,    -1,   269,   270,    -1,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,    -1,   293,    -1,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,    -1,
     307,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
     317,   318,   319,   320,   321,    -1,    -1,   324,   325,   326,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
      -1,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
     377,    -1,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,    -1,   403,    -1,   405,   406,
     407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
     417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,   440,   441,   442,   443,    -1,   445,    -1,
     447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,    -1,   126,   127,   128,   129,    -1,
      -1,   132,   133,   134,   135,   136,    -1,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
     161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
     171,   172,   173,    -1,   175,    -1,   177,    -1,    -1,    -1,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,    -1,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,
     221,   222,   223,   224,    -1,    -1,   227,    -1,   229,    -1,
      -1,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
      -1,   262,   263,   264,   265,    -1,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
     411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,    -1,   445,    -1,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   494,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,
      45,    46,    47,    48,    49,    -1,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    -1,
      -1,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      -1,    86,    87,    88,    89,    90,    91,    -1,    -1,    94,
      95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,    -1,
     115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
      -1,   126,   127,   128,   129,    -1,    -1,   132,   133,   134,
     135,   136,    -1,    -1,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,    -1,   160,   161,   162,   163,    -1,
     165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,
     175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,
     185,   186,   187,   188,   189,    -1,   191,   192,   193,   194,
      -1,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,    -1,    -1,   218,    -1,   220,   221,   222,   223,   224,
      -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,    -1,   262,   263,   264,
     265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,    -1,   293,    -1,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,    -1,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,   317,   318,   319,   320,   321,    -1,    -1,   324,
     325,   326,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,    -1,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,   369,   370,   371,    -1,   373,   374,
     375,   376,   377,    -1,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,   400,   401,    -1,   403,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,    -1,    -1,
     415,   416,   417,   418,   419,    -1,   421,   422,   423,   424,
     425,   426,   427,    -1,    -1,   430,   431,   432,   433,   434,
      -1,    -1,   437,   438,   439,   440,   441,   442,   443,    -1,
     445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,   454,
      -1,    -1,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
      -1,    -1,    -1,     3,     4,     5,    -1,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,   494,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    -1,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,    -1,   152,   153,   154,   155,    -1,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,    -1,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,    -1,   292,   293,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,    -1,
     310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,    -1,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,    -1,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   474,   475,   476,   477,    -1,     3,
      -1,   481,   482,   483,     8,   485,   486,   487,   488,   489,
     490,    -1,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,    -1,    -1,    -1,   481,   482,   483,
      -1,   485,   486,   487,   488,   489,   490,     8,    -1,    -1,
      11,    -1,    -1,    -1,    -1,    16,    17,    18,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    33,    16,    17,    18,    -1,    -1,    -1,    -1,
      41,    -1,    -1,     8,    -1,    -1,    11,    48,    -1,    -1,
      33,    16,    17,    18,    -1,    -1,    -1,    -1,    41,    -1,
      -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    33,    -1,
      -1,     8,    73,    -1,    11,    -1,    41,    -1,    -1,    16,
      17,    18,    -1,    48,    -1,    -1,    -1,    -1,    -1,     8,
      73,    -1,    11,    -1,    -1,    -1,    33,    16,    17,    18,
      -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    73,    -1,
      -1,    48,    -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    41,    -1,    -1,    -1,    -1,    -1,    -1,    48,
      -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    -1,    16,    17,    18,
      -1,    -1,    -1,   174,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,    -1,   190,
      -1,   174,    41,    -1,   195,    -1,    -1,    -1,    -1,    48,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   190,    -1,   174,
      -1,    -1,   195,    -1,    -1,   216,   217,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    73,   190,    -1,    -1,    -1,   230,
     195,    -1,    -1,   216,   217,    -1,    -1,   174,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   230,    -1,    -1,
      -1,   216,   217,   190,    -1,   174,    -1,    -1,   195,    -1,
      -1,    -1,    -1,    -1,    -1,   230,    -1,   268,    -1,    -1,
     271,   190,    -1,    -1,    -1,    -1,   195,    -1,    -1,   216,
     217,    -1,    -1,    -1,   285,   268,    -1,   288,   271,    -1,
      -1,    -1,    -1,   230,    -1,    -1,    -1,   216,   217,    -1,
      -1,    -1,   285,   268,    -1,   288,   271,    -1,    -1,    -1,
      -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     285,    -1,    -1,   288,    -1,   174,    -1,    -1,    -1,    -1,
      -1,   268,    -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,
      -1,   190,    -1,    -1,    -1,    -1,   195,    -1,   285,   268,
      -1,   288,   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,   216,   217,   288,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,    -1,    -1,
      -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   378,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   378,    -1,    -1,    -1,    -1,    -1,   268,
      -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,
      -1,   378,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   478,    -1,    -1,
     481,   482,   483,    -1,   485,   486,   487,   488,   489,   490,
      -1,    -1,    -1,    -1,   495,   478,    -1,    -1,   481,   482,
     483,    -1,   485,   486,   487,   488,   489,   490,    -1,    -1,
      -1,    -1,   495,   478,    -1,    -1,   481,   482,   483,    -1,
     485,   486,   487,   488,   489,   490,    -1,    -1,    -1,   378,
     495,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   478,    -1,    -1,   481,   482,   483,    -1,   485,   486,
     487,   488,   489,   490,    -1,    -1,    -1,    -1,   495,   478,
      -1,    -1,   481,   482,   483,    -1,   485,   486,   487,   488,
     489,   490,    -1,    -1,    -1,    -1,   495,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   478,
       3,    -1,   481,   482,   483,    -1,   485,   486,   487,   488,
     489,   490,    -1,    -1,   493,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   487,    -1,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    -1,    41,    42,    43,    -1,    45,    46,    47,
      48,    49,    -1,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    -1,    -1,    62,    63,    64,    65,    66,    -1,
      68,    69,    70,    71,    72,    -1,    -1,    -1,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    -1,    86,    87,
      88,    89,    90,    91,    -1,    -1,    94,    95,    96,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,    -1,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,   124,    -1,   126,   127,
     128,   129,    -1,    -1,   132,   133,   134,   135,   136,    -1,
      -1,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,    -1,   160,   161,   162,   163,    -1,   165,    -1,   167,
      -1,    -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,
      -1,    -1,    -1,   181,   182,    -1,   184,   185,   186,   187,
     188,   189,    -1,   191,   192,   193,   194,    -1,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,
     218,    -1,   220,   221,   222,   223,   224,    -1,    -1,   227,
      -1,   229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,    -1,   262,   263,   264,   265,    -1,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,    -1,   293,    -1,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,    -1,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,   317,
     318,   319,   320,   321,    -1,    -1,   324,   325,   326,   327,
     328,   329,   330,   331,   332,    -1,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
     348,   349,    -1,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,   369,   370,   371,    -1,   373,   374,   375,   376,   377,
      -1,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,    -1,   400,   401,    -1,   403,    -1,   405,   406,   407,
     408,   409,    -1,   411,   412,    -1,    -1,   415,   416,   417,
     418,   419,    -1,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,   432,   433,   434,    -1,    -1,   437,
     438,   439,   440,   441,   442,   443,    -1,   445,    -1,   447,
      -1,   449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
       3,     4,     5,    -1,    -1,    -1,     9,    -1,    -1,   487,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
      93,    94,    95,    96,    -1,    -1,    -1,   100,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,    -1,   117,   118,   119,   120,   121,   122,
      -1,   124,    -1,   126,   127,   128,   129,    -1,    -1,   132,
     133,   134,   135,   136,    -1,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,    -1,   170,   171,   172,
     173,   174,   175,    -1,   177,    -1,    -1,    -1,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,    -1,    -1,   227,   228,   229,   230,    -1,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,    -1,   269,   270,   271,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
     283,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,    -1,   307,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,   321,    -1,
      -1,   324,   325,   326,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    -1,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,   369,   370,   371,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,   400,   401,    -1,
     403,   404,   405,   406,   407,   408,   409,    -1,   411,   412,
      -1,    -1,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,   440,   441,   442,
     443,    -1,   445,   446,   447,    -1,   449,   450,   451,    -1,
      -1,   454,    -1,    -1,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,     3,     4,     5,    -1,    -1,
      -1,     9,   485,   486,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    -1,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    -1,    -1,    62,    63,    64,    65,    66,    -1,
      68,    69,    70,    71,    72,    -1,    74,    -1,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    90,    91,    -1,    93,    94,    95,    96,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,   124,    -1,   126,   127,
     128,   129,    -1,    -1,   132,   133,   134,   135,   136,    -1,
      -1,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,    -1,   170,   171,   172,   173,   174,   175,    -1,   177,
      -1,    -1,    -1,   181,   182,    -1,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,    -1,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,    -1,    -1,   227,
     228,   229,   230,    -1,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
      -1,   269,   270,   271,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,   283,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,    -1,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,   317,
     318,   319,   320,   321,    -1,    -1,   324,   325,   326,   327,
     328,   329,   330,   331,   332,    -1,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,   369,   370,   371,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,    -1,   400,   401,    -1,   403,   404,   405,   406,   407,
     408,   409,    -1,   411,   412,    -1,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,   432,   433,   434,    -1,    -1,   437,
     438,   439,   440,   441,   442,   443,    -1,   445,   446,   447,
      -1,   449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
       3,     4,     5,    -1,    -1,    -1,     9,   485,   486,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
      93,    94,    95,    96,    -1,    -1,    -1,   100,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,    -1,   115,    -1,   117,   118,   119,   120,   121,   122,
      -1,   124,    -1,   126,   127,   128,   129,    -1,    -1,   132,
     133,   134,   135,   136,    -1,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,    -1,   170,   171,   172,
     173,   174,   175,    -1,   177,    -1,    -1,    -1,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,    -1,    -1,   227,   228,   229,   230,    -1,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,    -1,   269,   270,   271,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
     283,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,    -1,   307,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,   321,    -1,
      -1,   324,   325,   326,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    -1,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,   369,   370,   371,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,   400,   401,    -1,
     403,   404,   405,   406,   407,   408,   409,    -1,   411,   412,
      -1,    -1,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,   440,   441,   442,
     443,    -1,   445,   446,   447,    -1,   449,   450,   451,    -1,
      -1,   454,    -1,    -1,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,    -1,     8,    -1,    -1,    11,
      -1,    -1,   485,   486,    16,    17,    18,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    33,    16,    17,    18,    37,    -1,    -1,    -1,    41,
      -1,    -1,     8,    -1,    -1,    11,    48,    -1,    -1,    33,
      16,    17,    18,    -1,    -1,    -1,    -1,    41,    -1,    -1,
      -1,    -1,    -1,    -1,    48,    -1,    -1,    33,    -1,    -1,
       8,    73,    -1,    11,    -1,    41,    -1,    -1,    16,    17,
      18,    -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,    73,
      -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,    36,    -1,
      -1,    -1,    -1,    41,    -1,    -1,    -1,    73,    -1,    -1,
      48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    73,    -1,    -1,    16,    17,
      18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,    -1,    -1,
      48,    -1,   174,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     164,    -1,    -1,    -1,    -1,   169,    -1,    -1,   190,    -1,
     174,    -1,    -1,   195,    -1,    73,    -1,   163,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   190,    -1,   174,    -1,
      -1,   195,    -1,    -1,   216,   217,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   190,    -1,    -1,    -1,   230,   195,
      -1,    -1,   216,   217,    -1,    -1,   174,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,
     216,   217,   190,    -1,    -1,    -1,    -1,   195,    -1,    -1,
      -1,    -1,    -1,    -1,   230,    -1,   268,    -1,    -1,   271,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   216,   217,
      -1,    -1,    -1,   285,   268,    -1,   288,   271,    -1,    -1,
      -1,    -1,   230,    -1,    -1,    -1,   174,    -1,    -1,    -1,
      -1,   285,   268,    -1,   288,   271,    -1,    -1,    -1,    -1,
      -1,    -1,   190,    -1,    -1,    -1,    -1,   195,    -1,   285,
      -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     268,    -1,    -1,   271,    -1,    -1,    -1,    -1,   216,   217,
      -1,    -1,    -1,    -1,    -1,   311,    -1,   285,    -1,    -1,
     288,    -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    -1,    16,    17,    18,
      -1,    -1,    -1,    -1,    -1,    -1,   378,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    33,    -1,    -1,    36,    -1,    -1,
     268,    -1,    41,   271,   378,    -1,    -1,    -1,    -1,    48,
      -1,    -1,    -1,    -1,    -1,     8,    -1,   285,    11,    -1,
     288,    -1,   378,    16,    17,    18,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,   306,    -1,
      33,    -1,    -1,    -1,   436,    -1,    -1,    -1,    41,    -1,
     378,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      73,    -1,    -1,    -1,    -1,    -1,   478,    -1,    -1,   481,
     482,   483,    -1,   485,   486,   487,   488,   489,   490,    -1,
      -1,    -1,    -1,    -1,   478,    -1,    -1,   481,   482,   483,
     378,   485,   486,   487,   488,   489,   490,    -1,    -1,    -1,
      -1,    -1,   478,    -1,    -1,   481,   482,   483,    -1,   485,
     486,   487,   488,   489,   490,   174,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    -1,    16,    17,    18,
     478,   190,    -1,   481,   482,   483,   195,   485,   486,   487,
     488,   489,   490,    -1,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    41,    -1,    -1,    -1,   169,   216,   217,    48,
      -1,   174,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   230,    -1,    -1,    -1,    -1,    -1,   190,    -1,    -1,
      -1,    -1,   195,    -1,    73,    -1,    -1,    -1,    -1,    -1,
     478,    -1,    -1,   481,   482,   483,    -1,   485,   486,   487,
     488,   489,   490,   216,   217,    -1,    -1,    -1,    -1,   268,
      -1,    -1,   271,    -1,    -1,    -1,    -1,   230,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    -1,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   268,    -1,    -1,   271,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,
       8,    -1,   285,    11,    48,   288,    -1,    -1,    16,    17,
      18,    -1,    -1,    -1,    -1,   174,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,    73,
      -1,   190,    -1,    41,    -1,    -1,   195,    -1,    -1,    -1,
      48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   216,   217,    -1,
      -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,
      -1,   230,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    -1,    16,    17,    18,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   378,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,
      41,    -1,   271,    -1,    -1,    -1,    -1,    48,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,
     174,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    73,    -1,    -1,    -1,   190,    -1,    -1,   478,
      -1,   195,   481,   482,   483,    -1,   485,   486,   487,   488,
     489,   490,    -1,    -1,    -1,    -1,   174,    -1,    -1,    -1,
      -1,    -1,   216,   217,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   190,    -1,    -1,    -1,   230,   195,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   478,    -1,    -1,   481,   482,
     483,    -1,   485,   486,   487,   488,   489,   490,   216,   217,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,
      -1,    -1,   230,    -1,   268,    -1,    -1,   271,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,   174,   288,    -1,    -1,    -1,    -1,    -1,
      -1,   410,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   190,
     268,    -1,    -1,   271,   195,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   230,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    -1,
      16,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,   478,
      -1,    -1,   481,   482,   483,    -1,   485,   486,   487,   488,
     489,   490,    -1,    -1,   378,    41,    -1,   268,    -1,    -1,
     271,    -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,
     378,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   478,    -1,    -1,   481,   482,   483,
      -1,   485,   486,   487,   488,   489,   490,   378,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   174,    -1,
     478,    -1,    -1,   481,   482,   483,    -1,   485,   486,   487,
     488,   489,   490,    -1,   190,    -1,    -1,    -1,    -1,   195,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     216,   217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   478,    -1,    -1,
     481,   482,   483,    -1,   485,   486,   487,   488,   489,   490,
      -1,    -1,    -1,    -1,    -1,   271,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   378,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
      -1,     5,   478,    -1,    -1,   481,   482,   483,    -1,   485,
     486,   487,   488,   489,   490,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
      -1,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,    -1,    -1,   227,   228,
     229,   230,    -1,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,   271,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,   435,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,   446,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    93,
      94,    95,    96,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,    -1,   170,   171,   172,   173,
     174,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,    -1,    -1,   227,   228,   229,   230,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,   271,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,   283,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
     404,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,   446,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    93,    94,    95,    96,    -1,    -1,
      -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
      -1,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,    -1,    -1,   227,   228,
     229,   230,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,   271,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,   446,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    93,
      94,    95,    96,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,    -1,   170,   171,   172,   173,
     174,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,    -1,    -1,   227,   228,   229,   230,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,   271,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
     404,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,   446,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    -1,    -1,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,   166,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
     429,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,   166,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,    -1,    -1,   227,    -1,   229,   230,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,   429,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
       4,    -1,    -1,    -1,    -1,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,   284,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
     284,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,   402,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    36,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    36,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    36,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,    -1,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      44,    45,    46,    47,    -1,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    -1,    -1,
      74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    93,
      94,    95,    96,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,    -1,   152,   153,
     154,   155,    -1,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,    -1,   170,   171,   172,   173,
     174,   175,    -1,   177,    -1,    -1,    -1,    -1,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,    -1,    -1,   227,   228,   229,   230,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,    -1,    -1,   269,   270,   271,   272,    -1,
      -1,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,    -1,   292,   293,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,    -1,   310,   311,    -1,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,    -1,    -1,   400,   401,    -1,   403,
     404,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,    -1,   418,    -1,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,    -1,   443,
      -1,   445,   446,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     474,   475,   476,   477,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    44,    45,    46,    47,    -1,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    -1,    -1,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    93,    94,    95,    96,    -1,    -1,
      -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,    -1,   152,   153,   154,   155,    -1,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
      -1,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
      -1,    -1,    -1,   182,    -1,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,    -1,    -1,   227,   228,
     229,   230,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    -1,    -1,    -1,
     269,   270,   271,   272,    -1,    -1,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,    -1,   292,   293,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
      -1,   310,   311,    -1,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,   350,   351,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,    -1,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,   397,    -1,
      -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,    -1,   418,
      -1,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,    -1,   443,    -1,   445,   446,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   474,   475,   476,   477
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    19,    29,    31,    32,    47,    56,    68,    79,    90,
      92,   110,   124,   135,   142,   150,   152,   153,   165,   194,
     233,   310,   313,   344,   352,   366,   373,   377,   388,   402,
     437,   442,   456,   480,   494,   502,   503,   504,   505,   506,
     513,   517,   563,   566,   567,   569,   571,   575,   576,   577,
     578,   579,   580,   624,   751,   761,   763,   764,   765,   766,
     773,   776,   781,   784,   787,   788,   790,   791,   797,   804,
     806,   823,   826,   837,   843,   844,   845,   847,   849,   850,
     854,   415,   459,   846,   198,   359,   367,   402,   449,   846,
       3,    19,    20,    21,    22,    23,    24,    25,    26,    28,
      29,    30,    38,    39,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    54,    55,    56,    57,
      58,    59,    62,    63,    64,    65,    66,    68,    69,    70,
      71,    72,    74,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    86,    87,    88,    89,    90,    91,    93,    94,
      95,    96,   100,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   115,   117,   118,   119,   120,   121,   122,
     124,   126,   127,   128,   129,   132,   133,   134,   135,   136,
     139,   140,   141,   143,   144,   145,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   158,   160,   161,   162,
     163,   165,   167,   168,   170,   171,   172,   173,   174,   175,
     177,   181,   182,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   196,   197,   198,   199,   200,   201,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   213,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     227,   228,   229,   230,   232,   233,   234,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   267,   269,   270,   271,
     272,   274,   275,   276,   277,   278,   279,   281,   282,   285,
     286,   287,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   317,   318,   319,
     320,   321,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   334,   335,   336,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   367,   368,   369,   370,   371,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     400,   401,   403,   404,   405,   406,   407,   408,   409,   411,
     412,   415,   416,   417,   418,   419,   421,   422,   423,   424,
     425,   426,   427,   430,   431,   432,   433,   434,   437,   438,
     439,   440,   441,   442,   443,   445,   446,   447,   449,   450,
     451,   454,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   680,   738,   742,   744,   868,   869,   870,
     846,    50,   494,   818,   171,   175,   234,   241,   288,   323,
     359,   406,   408,   429,   432,   561,   772,   824,     3,    27,
     313,   736,   742,   868,    21,    74,    89,   145,   154,   166,
     171,   198,   241,   244,   308,   324,   356,   359,   367,   370,
     390,   402,   409,   418,   449,   792,   793,   796,   846,   736,
      92,   446,   494,   509,   513,   563,   571,   575,   844,   850,
     107,    68,   107,     5,   741,   762,   742,   736,    27,   411,
     415,   568,   742,   785,   786,   846,    27,   130,   587,   588,
     234,   359,   371,   411,   568,   838,   839,   846,   284,   635,
     734,   742,   170,   494,   778,   494,   331,   581,   582,   736,
     581,   576,   577,   580,     0,   497,   446,   507,    27,   411,
     415,   442,   568,   575,   146,   212,   289,   428,   589,   590,
     576,   578,   579,   498,   119,   208,   434,   189,   734,   736,
     189,   734,   189,   635,   189,   734,   494,   492,   496,   725,
     727,   571,   575,   783,   844,   850,   734,   406,   408,   406,
     408,   342,   178,   189,   742,   331,   367,   402,   449,   198,
     734,    27,   736,   246,   418,   106,   402,   449,   362,   189,
     742,   745,   794,   189,   735,   736,   189,   736,   494,   848,
     561,   509,     3,   510,   512,   513,   515,   516,   868,   869,
     870,   507,   741,   741,   483,   494,   494,   782,   477,   218,
     496,   283,     4,     6,     7,     8,     9,    10,    49,    51,
      52,    60,    61,    64,    65,    72,    74,    97,    98,    99,
     100,   101,   102,   103,   111,   112,   114,   134,   151,   156,
     157,   162,   210,   211,   213,   235,   236,   260,   262,   268,
     273,   274,   276,   285,   295,   309,   328,   354,   372,   381,
     398,   411,   412,   417,   419,   420,   435,   443,   478,   485,
     486,   487,   494,   499,   576,   650,   653,   656,   657,   658,
     660,   661,   662,   663,   665,   666,   677,   679,   680,   681,
     683,   696,   697,   701,   719,   724,   731,   732,   738,   739,
     740,   741,   742,   730,   731,   838,   741,   838,   477,   169,
     413,   483,   494,   734,   487,   727,     3,   168,   170,   446,
     513,   777,   779,   168,   780,   677,   705,   581,   498,   494,
     747,   495,   495,   504,   734,   477,   218,    27,   130,   586,
     586,    54,   586,   159,   164,   231,   280,   595,   597,   598,
     617,   619,   620,   621,   589,   590,   494,   169,   214,   572,
     635,   151,    23,    29,   135,   287,   340,   344,   373,   439,
     831,   834,   835,   340,   151,    36,    55,   105,   197,   245,
     253,   265,   297,   340,   345,   367,   373,   388,   798,   801,
     834,   151,   340,   373,   834,   151,   340,   373,   834,    27,
     130,   444,   487,   495,   677,   706,   707,   744,   748,   677,
     726,     3,    27,    31,    32,    33,    34,    35,    36,    37,
      40,    53,    60,    61,    67,    73,    75,    85,    92,    97,
      98,    99,   101,   102,   103,   114,   116,   123,   125,   130,
     131,   137,   138,   142,   146,   157,   159,   164,   166,   169,
     176,   178,   179,   180,   183,   195,   202,   212,   214,   225,
     226,   231,   235,   236,   266,   268,   273,   280,   283,   284,
     288,   289,   306,   316,   322,   323,   333,   337,   347,   366,
     372,   383,   384,   399,   402,   410,   413,   414,   420,   428,
     429,   435,   436,   444,   448,   452,   453,   455,   456,   487,
     737,   749,   868,   869,   870,   871,   725,   495,   494,   551,
     561,     3,   268,   774,   449,   189,   734,   189,   565,   734,
     734,    81,   769,   494,   825,   460,    82,   127,   300,   407,
     151,   496,   746,    58,   346,   498,   795,   151,   498,   795,
     151,   283,   705,   402,   495,   498,     4,   157,   283,   420,
     485,   486,   508,   510,   511,   514,   740,   741,   800,   803,
     509,   494,   813,   817,   514,   800,   840,   842,   706,     3,
      49,    51,    52,    64,    65,   111,   112,   162,   210,   211,
     213,   260,   262,   276,   328,   354,   374,   381,   396,   411,
     412,   443,   646,   647,   649,   651,   653,   655,   657,   658,
     659,   661,   662,   665,   666,   708,   744,   868,    36,   229,
     742,   494,   728,   445,   664,   677,   723,   494,   664,   664,
     494,   164,   494,   494,   494,   652,   652,   312,   576,   494,
     494,   654,   494,   494,    64,    65,   664,   677,   494,   652,
     494,   494,   494,   494,   494,   458,   480,   494,   667,   494,
     667,   494,   494,   677,   677,   677,   576,   677,   705,   728,
     727,   741,   494,   494,   740,   741,     3,     8,    11,    16,
      17,    18,    33,    36,    41,    48,    73,   174,   190,   195,
     216,   217,   230,   268,   271,   285,   288,   378,   478,   481,
     482,   483,   485,   486,   487,   488,   489,   490,   699,   700,
     701,   703,   457,   684,    15,   294,   677,    15,   214,   498,
     583,   494,   741,   727,   583,     3,   114,   234,   666,   741,
     800,   841,    96,   114,   842,   114,   842,   734,   495,   498,
     507,   495,   498,   582,   735,    36,   747,   229,   578,   578,
     591,   592,   677,   578,   161,   264,   611,   220,   265,   327,
     376,   434,    27,   606,   677,   485,   486,   607,   608,   677,
     679,   617,   618,   598,   597,   595,   596,   164,   620,   278,
     622,   595,   617,   705,   572,   734,   852,   373,    36,   742,
     734,    67,    75,    85,   166,   189,   316,   429,   532,   542,
     557,   742,    75,    85,   789,    85,   789,   494,   413,   494,
     530,   240,   432,   530,    85,   498,   413,   734,   649,   800,
      54,   802,   800,   800,   105,   245,   253,    54,   413,   456,
     480,   799,   258,   359,   799,   801,   635,    85,   413,   789,
     359,   734,   413,   359,   706,   706,   707,   495,   498,   589,
     590,    13,    14,   493,   500,   413,   550,   555,   742,   456,
     816,   331,   449,   266,   448,   752,   151,    92,   517,   569,
     766,   775,   804,   734,   268,   798,   805,   268,    36,   494,
     551,   551,   189,   545,   742,   770,   495,   706,    36,   794,
     737,   496,   745,   735,   736,   736,   745,   495,   189,   565,
     734,   509,   515,     4,   740,     4,   740,   749,   815,   822,
      50,    94,   120,   140,   144,   165,   168,   184,   273,   281,
     325,   819,   498,   495,   498,   649,   494,    35,   648,   108,
     109,   186,   187,   247,   248,   249,   250,   251,   252,   255,
     256,   363,   364,   474,   475,   494,   668,   669,   670,   671,
     672,   673,   674,   675,   676,   495,   498,   652,   746,   783,
     705,   725,   494,   452,   720,   721,   677,   705,   494,   740,
     740,   705,     3,   668,   669,   670,   671,   672,   673,   674,
     675,   709,   710,   741,   740,   740,   740,   664,   664,   677,
       8,    16,    17,    18,   481,   482,   483,   485,   486,   487,
     488,   489,   490,   699,   704,   742,   677,   711,   485,   486,
     494,   678,   679,   701,   713,   724,   495,   705,   677,   705,
     714,   411,   411,   740,   740,   677,    53,   169,   226,   414,
     677,   705,   717,   495,   498,   740,   677,   676,   676,   647,
     677,   677,   677,   677,     5,   749,   750,   411,    40,   399,
     729,   745,   677,   677,   494,   576,   718,   130,   157,   268,
     273,   278,   420,   430,   677,   273,   494,   677,   413,    48,
     174,   190,   195,   230,   378,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,    27,    34,   383,   698,   180,
     160,   685,   677,   354,   494,   697,   677,   175,   234,   402,
     406,   408,   432,   584,   734,   732,   169,   625,   706,   625,
     494,   741,   495,   734,   777,   734,   843,   677,   495,   494,
     498,    37,   123,   436,   593,   354,   355,   485,   486,   608,
     610,   679,   376,   220,   284,   498,     4,   609,   740,   609,
     354,   355,   610,   733,   734,   272,   380,   623,   618,   596,
     495,   436,   574,    36,   114,   296,   494,   575,   851,   494,
     742,   856,   865,   867,   742,   340,   834,   494,   189,   542,
     736,   220,   268,   220,   436,   494,   535,   647,   736,   742,
     189,   736,   189,   742,    23,   135,   373,   525,   540,   749,
     830,   833,   736,   534,   554,   749,   736,   831,   736,   340,
     373,   798,   834,   800,   745,   736,   800,   745,   736,   800,
     340,   373,   834,   736,   736,   736,   736,   340,   373,   834,
     736,   736,   589,   589,   589,   444,   707,   495,   677,   677,
     677,   726,   321,   812,   495,   498,   281,   169,   413,   807,
     449,   734,   403,   742,   561,   494,   151,   151,   150,   575,
     230,   532,   542,   546,   549,   558,   560,   742,   456,   458,
     537,   456,   771,   268,   283,   495,   677,   795,   737,   795,
     283,   795,   268,    36,   487,   494,   514,   800,   814,   495,
     498,    36,   811,   741,   811,   268,   273,   325,   811,   811,
     840,    35,   648,   645,   742,   492,   492,   740,   413,   413,
     413,   413,   647,   652,   495,   705,   677,   138,   721,   722,
      36,   495,   677,   495,   495,   495,   495,   169,   495,   495,
     495,   498,   495,   496,   306,   712,   495,   678,   678,   677,
      11,    16,    17,    18,   195,   216,   285,   481,   482,   483,
     485,   486,   487,   488,   489,   490,   701,   678,   495,   495,
     164,   169,   715,   716,   495,   477,   477,   495,   495,    36,
     717,   705,   717,   717,   169,   495,   728,   677,   495,   495,
     477,   678,   678,   144,   705,   169,   130,   157,   273,   278,
     420,   430,   494,   144,   704,   677,   399,   729,   677,   718,
     677,   413,   494,   576,   494,   494,   293,   689,   406,   408,
     406,   408,   734,   402,   585,   585,   585,   225,   355,   494,
     576,   626,   627,   628,   635,   636,   680,   682,   683,   742,
     453,   641,   589,   641,   740,   676,   747,   783,   592,   285,
     699,   702,   479,   594,     4,   740,   610,   284,   434,   607,
     498,   239,   626,   453,   573,   742,   442,   401,   435,   860,
     742,   855,   864,   283,   857,   861,   867,   728,   498,   625,
     483,   413,   677,   268,   557,   494,   151,   494,   535,   198,
     555,   518,   287,   528,   518,    23,   135,   344,   345,   373,
     827,   828,   829,   835,   836,   151,   795,   151,   795,   525,
     540,   525,   521,   741,   495,   498,   495,   498,   483,   496,
     413,   359,    85,   413,   789,   359,   413,   413,   413,   359,
     495,   495,   495,   707,   493,   391,   392,   741,   821,   550,
     812,   734,   551,   494,   774,   402,   555,   734,   565,   734,
     736,   456,   564,   734,   495,   498,   281,   530,   281,   283,
     529,   530,    36,   151,   734,   745,   151,   514,   809,   820,
     815,   741,   741,   273,   555,   487,   555,   741,   741,   492,
     495,   498,   647,   740,   493,   740,   495,   669,   671,   672,
     673,   672,   673,   673,   495,   410,   677,   142,   647,   495,
     677,   677,   704,   677,   715,   647,   678,   678,   678,   678,
     130,   268,   278,   678,   678,   678,   678,   678,   678,   678,
     678,   678,   678,   677,   677,   716,   715,   667,   667,   647,
     495,   495,   495,   705,   495,   676,   677,    33,    33,   677,
     495,   677,   169,   494,   708,   677,   495,   144,   678,   678,
     144,   144,   677,   677,   590,   453,   494,   690,   742,   585,
     585,   585,   585,   734,   734,   734,   576,   636,   169,   576,
     627,   628,    36,   629,   630,   742,   498,    93,   170,   204,
     219,   228,   261,   350,   632,   630,    36,   629,   631,   742,
     480,   640,   727,   677,   180,   612,   495,   612,   495,   495,
     494,   594,   161,   224,   284,   734,   677,   347,   859,   441,
     728,   495,   498,    83,   859,   495,   498,   856,   573,   677,
     736,   495,   151,   555,   542,   555,   518,   545,   495,   116,
     202,   265,   268,   541,   494,   552,   173,   114,   188,   268,
     530,   799,   106,   114,   173,   268,   390,   393,   530,   801,
     373,   829,   423,   736,   742,   833,   554,   267,   285,   374,
     485,   486,   519,   556,   647,   702,   741,   744,   800,   871,
     749,   736,   736,   736,   736,   736,   736,   736,   736,   736,
     736,   589,   799,   821,   494,   771,   734,   754,   755,   189,
     734,   495,   805,    36,   494,   848,   106,   265,   539,   537,
     546,    79,   575,   545,   436,   768,   795,   565,   495,   498,
     555,   740,   742,   493,   493,   677,   495,   495,   716,   169,
     130,   278,   494,   495,   677,   677,   677,   708,   495,   677,
      33,    33,   677,   677,   144,   495,   495,   677,   691,   742,
     734,   734,   734,   734,   630,   631,   494,   495,     5,   742,
     743,   404,   603,   604,   494,   627,   219,   292,   633,   627,
     633,   219,   632,   633,   219,   604,   494,   742,   604,   494,
     290,    54,   183,   616,   741,   616,   741,   704,   731,   575,
     296,   575,   855,   283,   494,   853,   483,   867,   859,   518,
     542,   495,   495,   456,   548,   117,   191,   200,   116,   438,
     525,   543,    67,    73,    85,   114,   116,   173,   202,   268,
     273,   316,   333,   429,   523,   524,   536,    30,    54,   562,
     189,   273,   800,   677,   562,   273,   485,   486,   803,   742,
     647,   795,   795,   744,   746,   483,   413,   413,   495,   813,
     436,   808,   810,   555,    36,   220,   756,   495,   498,   268,
     494,   771,   150,   575,   549,   564,   106,   148,   196,   529,
     119,   135,   315,   456,   570,   283,   742,   767,   494,    36,
     820,   493,   647,   678,   169,   494,   708,   495,   677,   677,
     677,   495,   302,   692,   637,   638,   682,   629,   494,     4,
       9,   599,   601,   602,   742,   735,   627,   283,   436,   634,
     627,   219,   627,   642,   643,   742,   494,   642,   742,   494,
     613,   614,   615,   677,   677,   455,   686,   686,   495,   860,
      85,   494,   682,   742,   858,   866,   131,   677,   333,   548,
     494,   538,   518,   495,   498,   494,   745,   736,   678,   562,
     117,   191,   116,   273,   220,   734,   548,   114,    36,   151,
      73,   644,   746,   489,   519,   736,   736,   799,   121,   495,
     575,   494,   221,   757,   137,   337,   753,   755,   151,    36,
     736,   564,   495,    27,    78,    86,   115,   188,   199,   390,
     393,   533,   533,   355,   355,    59,    67,   234,   734,   866,
     678,   708,   495,    54,   589,   495,   498,    36,   639,   735,
     305,   489,   305,   355,   489,   494,   494,   495,   677,   494,
     627,   634,   495,   498,   647,   642,   495,   495,   498,   687,
     688,   742,   436,   600,   600,   441,   736,   677,    73,   862,
     862,   495,   498,   269,   434,   734,   518,   544,   547,   749,
     525,   677,   268,   524,    36,   548,   551,   188,   745,   436,
     832,   489,   423,   813,   741,   771,   570,   735,     3,   758,
     221,   403,   734,   575,   848,   537,    67,   286,    67,   768,
     495,   495,   705,   326,   355,   693,   640,   637,   494,   495,
     742,   599,   735,   643,   644,   495,   614,   498,    36,   357,
     575,   495,   745,   745,   863,   863,   641,   858,   373,   551,
     495,   498,   483,   495,   188,   243,   559,   494,   520,   677,
     423,    36,   495,     3,   494,   494,   570,   564,   529,   286,
     286,   494,   771,    48,    96,   425,   677,   694,   695,   694,
     495,   642,   495,   498,   495,   495,   688,   690,   602,   862,
     593,   593,   865,   559,   547,   519,   265,   531,   520,   170,
     301,   379,   283,   526,   527,   553,   798,   575,   734,   759,
     760,   866,   641,   695,   354,   163,   311,   163,   311,   495,
       9,   341,   605,   863,   594,   594,   641,   527,   200,   119,
     434,   283,   553,   283,   526,   495,   570,   756,   495,   498,
     495,    33,   495,   494,   593,   518,    58,   265,   346,   373,
     522,   522,   384,   760,   771,   695,     9,   594,    22,   114,
     273,   756,   641,   495,   333,   734,   125,   756,   333,   734,
     757
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   501,   502,   503,   503,   504,   504,   504,   504,   504,
     504,   504,   504,   504,   504,   504,   504,   504,   504,   504,
     504,   504,   504,   504,   504,   504,   504,   504,   504,   504,
     504,   504,   504,   504,   504,   504,   504,   504,   504,   504,
     505,   506,   506,   506,   506,   507,   507,   508,   508,   508,
     509,   509,   509,   509,   509,   510,   510,   510,   510,   511,
     511,   512,   512,   513,   513,   514,   514,   514,   514,   515,
     516,   516,   517,   517,   518,   518,   519,   519,   519,   519,
     519,   519,   520,   520,   521,   522,   522,   522,   522,   522,
     523,   523,   523,   523,   524,   524,   524,   524,   524,   524,
     524,   524,   525,   526,   527,   527,   527,   527,   527,   528,
     528,   529,   529,   529,   529,   530,   531,   531,   532,   532,
     533,   533,   533,   533,   533,   533,   533,   533,   534,   534,
     535,   536,   536,   536,   536,   537,   537,   537,   537,   538,
     539,   539,   539,   540,   541,   541,   541,   541,   541,   541,
     542,   543,   543,   544,   544,   545,   546,   546,   546,   547,
     547,   548,   548,   549,   549,   550,   551,   551,   552,   552,
     553,   554,   554,   554,   554,   555,   555,   556,   556,   556,
     557,   557,   557,   557,   557,   557,   558,   558,   559,   559,
     559,   559,   560,   561,   561,   561,   561,   561,   561,   561,
     561,   562,   562,   563,   563,   564,   564,   564,   565,   566,
     566,   566,   566,   566,   567,   567,   568,   568,   569,   569,
     569,   569,   570,   570,   570,   570,   571,   572,   572,   572,
     573,   573,   574,   574,   575,   575,   576,   576,   577,   577,
     577,   577,   577,   577,   577,   577,   578,   578,   579,   579,
     579,   579,   579,   579,   579,   580,   580,   580,   581,   581,
     582,   583,   583,   584,   584,   584,   584,   584,   584,   584,
     584,   584,   585,   585,   586,   586,   586,   587,   587,   588,
     588,   589,   589,   590,   591,   591,   592,   592,   593,   593,
     593,   594,   594,   594,   595,   595,   595,   595,   596,   596,
     597,   597,   597,   597,   598,   598,   599,   599,   599,   599,
     599,   599,   600,   600,   601,   601,   602,   602,   602,   602,
     603,   604,   604,   605,   605,   606,   606,   607,   608,   608,
     608,   609,   609,   610,   610,   611,   611,   612,   612,   613,
     613,   614,   614,   615,   616,   616,   617,   617,   618,   618,
     619,   619,   620,   621,   621,   621,   621,   622,   622,   623,
     623,   623,   624,   624,   625,   625,   626,   626,   627,   627,
     627,   627,   627,   627,   627,   628,   628,   628,   628,   628,
     628,   629,   629,   629,   629,   630,   630,   631,   631,   631,
     631,   631,   632,   632,   632,   632,   633,   633,   634,   634,
     635,   635,   635,   635,   636,   636,   637,   638,   638,   639,
     639,   640,   640,   641,   641,   642,   642,   643,   644,   644,
     645,   645,   646,   646,   647,   647,   647,   647,   647,   647,
     647,   648,   648,   648,   649,   649,   649,   649,   649,   649,
     649,   650,   650,   650,   650,   651,   651,   652,   652,   653,
     653,   653,   653,   653,   653,   653,   653,   653,   653,   653,
     654,   654,   655,   655,   656,   656,   657,   658,   659,   659,
     660,   660,   661,   662,   663,   663,   663,   663,   663,   663,
     664,   664,   665,   665,   665,   665,   666,   667,   667,   667,
     668,   668,   669,   669,   670,   670,   671,   671,   672,   672,
     673,   673,   674,   674,   675,   675,   676,   676,   676,   676,
     676,   676,   676,   676,   676,   676,   676,   676,   676,   676,
     676,   676,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   678,   678,
     678,   678,   678,   678,   678,   678,   678,   678,   678,   678,
     678,   678,   678,   678,   678,   678,   678,   678,   678,   678,
     678,   679,   679,   679,   679,   679,   679,   679,   679,   679,
     679,   680,   680,   680,   680,   680,   680,   680,   681,   681,
     682,   682,   683,   683,   683,   683,   683,   683,   683,   683,
     683,   683,   683,   683,   683,   683,   683,   683,   683,   683,
     683,   683,   683,   683,   683,   683,   683,   683,   683,   683,
     684,   684,   685,   685,   686,   686,   687,   687,   688,   689,
     689,   689,   690,   691,   691,   692,   692,   693,   693,   693,
     694,   694,   695,   695,   695,   695,   695,   696,   696,   697,
     697,   698,   698,   698,   699,   699,   700,   700,   700,   700,
     700,   700,   700,   700,   700,   700,   700,   700,   701,   701,
     702,   702,   703,   703,   703,   703,   703,   703,   703,   703,
     704,   704,   705,   705,   706,   706,   707,   707,   707,   708,
     708,   709,   709,   710,   710,   710,   710,   710,   710,   710,
     710,   710,   710,   711,   711,   712,   713,   713,   714,   714,
     714,   714,   714,   714,   715,   716,   717,   717,   717,   718,
     718,   719,   720,   720,   721,   722,   722,   723,   723,   724,
     724,   725,   725,   725,   725,   726,   726,   727,   727,   728,
     728,   729,   729,   730,   730,   731,   731,   732,   732,   732,
     732,   733,   733,   734,   734,   735,   735,   736,   737,   738,
     738,   739,   739,   739,   739,   739,   739,   739,   739,   739,
     739,   739,   739,   739,   739,   740,   741,   742,   742,   742,
     743,   743,   744,   744,   744,   745,   745,   746,   746,   747,
     747,   748,   749,   749,   749,   749,   749,   750,   750,   751,
     751,   752,   752,   753,   753,   754,   754,   755,   756,   757,
     757,   758,   759,   759,   760,   761,   762,   763,   764,   765,
     765,   765,   765,   766,   766,   767,   768,   768,   769,   769,
     770,   770,   771,   771,   772,   772,   773,   773,   774,   774,
     775,   775,   775,   775,   776,   776,   776,   776,   776,   777,
     777,   777,   777,   777,   778,   778,   779,   779,   780,   780,
     781,   782,   782,   783,   783,   783,   783,   784,   785,   785,
     786,   786,   786,   787,   787,   788,   788,   788,   788,   788,
     788,   788,   788,   788,   788,   788,   788,   788,   789,   789,
     790,   790,   790,   791,   791,   791,   791,   791,   791,   792,
     792,   792,   792,   792,   792,   792,   792,   792,   792,   792,
     792,   792,   792,   792,   793,   793,   793,   793,   793,   793,
     793,   794,   794,   795,   795,   795,   796,   796,   796,   797,
     797,   798,   798,   799,   799,   799,   800,   800,   800,   800,
     801,   801,   801,   801,   801,   801,   801,   801,   801,   801,
     801,   801,   801,   801,   802,   802,   803,   803,   803,   804,
     804,   805,   805,   806,   806,   807,   807,   808,   808,   809,
     809,   810,   810,   811,   811,   812,   812,   813,   813,   814,
     814,   814,   814,   814,   815,   816,   816,   817,   817,   818,
     818,   819,   819,   819,   819,   819,   819,   819,   819,   819,
     819,   819,   819,   819,   819,   820,   821,   821,   821,   822,
     822,   823,   824,   824,   825,   825,   826,   826,   826,   826,
     826,   826,   826,   826,   827,   827,   828,   828,   829,   829,
     829,   829,   830,   830,   831,   831,   831,   831,   831,   831,
     831,   831,   831,   831,   831,   831,   831,   831,   831,   831,
     831,   831,   831,   831,   831,   831,   831,   831,   831,   831,
     831,   831,   831,   832,   832,   833,   833,   833,   833,   834,
     834,   835,   836,   836,   837,   837,   837,   838,   838,   838,
     838,   839,   839,   839,   839,   840,   840,   841,   841,   841,
     841,   841,   841,   841,   842,   842,   843,   843,   844,   845,
     845,   845,   845,   845,   845,   846,   846,   846,   847,   847,
     847,   848,   848,   849,   849,   849,   849,   849,   849,   850,
     851,   851,   851,   851,   851,   852,   852,   853,   853,   853,
     854,   854,   855,   856,   856,   857,   857,   857,   858,   858,
     858,   859,   859,   860,   860,   861,   861,   862,   862,   863,
     863,   864,   864,   865,   865,   866,   866,   867,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   869,   869,   869,
     869,   869,   869,   869,   869,   869,   869,   869,   869,   869,
     869,   869,   869,   869,   869,   869,   869,   869,   869,   869,
     869,   869,   869,   869,   869,   869,   869,   869,   869,   869,
     869,   869,   869,   869,   869,   869,   869,   869,   869,   869,
     869,   869,   869,   869,   869,   869,   870,   870,   870,   870,
     870,   870,   870,   870,   870,   870,   870,   870,   870,   870,
     870,   870,   870,   870,   870,   870,   870,   870,   870,   870,
     871,   871,   871,   871,   871,   871,   871,   871,   871,   871,
     871,   871,   871,   871,   871,   871,   871,   871,   871,   871,
     871,   871,   871,   871,   871,   871,   871,   871,   871,   871,
     871,   871,   871,   871,   871,   871,   871,   871,   871,   871,
     871,   871,   871,   871,   871,   871,   871,   871,   871,   871,
     871,   871,   871,   871,   871,   871,   871,   871,   871,   871,
     871,   871,   871,   871,   871,   871,   871,   871,   871,   871,
     871,   871,   871,   871,   871,   871,   871,   871,   871,   871,
     871,   871,   871,   871,   871,   871,   871
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       2,     2,     4,     3,     5,     1,     0,     1,     1,     0,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     1,     1,     1,     1,     1,     1,     2,
       1,     1,     9,    12,     0,     2,     1,     1,     1,     1,
       1,     1,     3,     0,     1,     2,     1,     1,     2,     2,
       3,     1,     1,     2,     2,     1,     2,     3,     5,     2,
       5,     5,     2,     3,     1,     1,     2,     2,     0,     4,
       0,     3,     4,     4,     0,     3,     2,     0,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       3,     1,     2,     2,     2,     2,     2,     2,     0,     3,
       3,     3,     0,     1,     2,     1,     2,     2,     2,     2,
       4,     1,     3,     1,     3,     1,     1,     1,     1,     3,
       1,     2,     0,     1,     0,     1,     3,     0,     2,     0,
       3,     3,     1,     5,     3,     1,     3,     1,     4,     5,
       5,     6,     3,     7,     4,    11,     1,     3,     2,     2,
       2,     0,     3,     1,     1,     2,     2,     2,     2,     1,
       0,     1,     2,     7,    10,     2,     3,     0,     4,     2,
       2,     3,     4,     2,     1,     1,     1,     3,     9,    11,
      12,    14,     3,     4,     4,     0,     7,     1,     2,     3,
       2,     0,     2,     0,     1,     1,     3,     3,     1,     2,
       4,     4,     2,     3,     5,     5,     1,     1,    10,    10,
       1,     2,     4,     4,     4,     2,     2,     3,     1,     3,
       6,     2,     0,     3,     3,     4,     4,     4,     4,     3,
       2,     1,     1,     0,     1,     1,     0,     1,     5,     1,
       0,     1,     0,     3,     1,     3,     4,     3,     1,     1,
       0,     2,     2,     0,     2,     2,     1,     1,     1,     0,
       2,     4,     5,     4,     2,     3,     2,     2,     2,     2,
       1,     2,     3,     0,     1,     0,     5,     1,     4,     6,
       2,     1,     0,     4,     0,     1,     1,     1,     1,     2,
       2,     1,     1,     1,     1,     1,     1,     3,     0,     1,
       3,     1,     1,     2,     2,     0,     1,     3,     1,     0,
       1,     2,     3,     2,     4,     2,     3,     2,     0,     1,
       2,     0,     4,     5,     2,     0,     1,     3,     3,     3,
       3,     3,     3,     1,     4,     3,     4,     5,     4,     5,
       4,     5,     2,     4,     1,     1,     0,     1,     4,     5,
       4,     0,     2,     2,     2,     1,     1,     0,     4,     2,
       1,     2,     2,     4,     2,     6,     2,     1,     3,     4,
       0,     2,     0,     2,     0,     1,     3,     3,     2,     0,
       2,     4,     1,     1,     2,     3,     5,     6,     2,     3,
       4,     3,     4,     0,     1,     1,     1,     1,     1,     2,
       4,     1,     1,     1,     1,     2,     3,     3,     0,     1,
       1,     1,     1,     1,     2,     2,     2,     2,     2,     1,
       3,     0,     1,     1,     1,     1,     5,     2,     1,     1,
       1,     1,     4,     1,     2,     2,     1,     3,     3,     2,
       1,     0,     5,     2,     5,     2,     1,     3,     3,     0,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     3,     3,     3,     3,     3,
       3,     0,     1,     3,     3,     5,     2,     2,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     2,     2,     3,     3,     2,     2,     3,     3,     5,
       4,     6,     3,     5,     4,     6,     4,     6,     5,     7,
       3,     2,     4,     3,     2,     1,     3,     3,     3,     3,
       4,     3,     4,     3,     4,     5,     6,     6,     7,     6,
       7,     6,     7,     3,     4,     4,     6,     1,     1,     3,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     2,     2,     5,     6,     6,
       7,     1,     1,     2,     2,     4,     1,     1,     1,     2,
       2,     3,     5,     6,     8,     6,     6,     4,     4,     1,
       1,     1,     5,     1,     1,     4,     1,     4,     1,     4,
       1,     4,     1,     1,     1,     1,     1,     1,     6,     4,
       4,     4,     4,     6,     5,     5,     5,     4,     6,     4,
       5,     0,     5,     0,     2,     0,     1,     3,     3,     2,
       2,     0,     6,     1,     0,     3,     0,     2,     2,     0,
       1,     4,     2,     2,     2,     2,     2,     4,     3,     1,
       5,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     4,
       1,     4,     1,     4,     1,     2,     1,     2,     1,     2,
       1,     3,     1,     3,     1,     3,     1,     3,     3,     1,
       3,     3,     0,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     4,     3,     2,     3,     0,     3,     3,
       2,     2,     1,     0,     2,     2,     3,     2,     1,     1,
       3,     5,     1,     2,     4,     2,     0,     1,     0,     1,
       2,     2,     2,     3,     5,     1,     0,     1,     2,     0,
       2,     1,     0,     1,     0,     1,     3,     3,     2,     1,
       1,     1,     3,     1,     2,     1,     3,     1,     1,     1,
       2,     1,     1,     1,     1,     1,     2,     6,     2,     5,
       3,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     3,     3,
       0,     1,     1,     1,     1,     1,     1,     1,     1,    14,
       4,     1,     1,     1,     1,     1,     3,     3,     4,     2,
       3,     1,     1,     3,    11,     2,     1,     4,     3,     2,
       3,     2,     3,    13,    16,     1,     2,     0,     1,     0,
       1,     0,     2,     0,     1,     0,     4,     7,     2,     0,
       1,     1,     1,     1,     4,     5,     5,     4,     6,     1,
       1,     1,     1,     1,     1,     0,     1,     3,     1,     0,
       5,     3,     0,     1,     1,     1,     1,     2,     1,     1,
       1,     2,     3,     2,     1,     6,     6,     8,     6,     8,
       6,     8,     6,     8,     8,    10,     8,    10,     1,     0,
       2,     4,     5,     6,     4,     6,     4,     6,     8,     1,
       1,     1,     1,     1,     2,     1,     2,     1,     1,     1,
       3,     3,     3,     3,     2,     2,     1,     3,     1,     1,
       1,     1,     3,     1,     1,     0,     1,     1,     1,     4,
       6,     1,     2,     1,     1,     0,     1,     2,     2,     1,
       2,     2,     1,     2,     3,     2,     2,     2,     2,     3,
       3,     3,     1,     3,     1,     0,     1,     2,     2,     5,
       8,     1,     0,    11,     9,     1,     1,     3,     0,     1,
       3,     1,     0,     1,     0,     1,     0,     1,     3,     1,
       1,     1,     3,     0,     2,     2,     0,     2,     0,     1,
       0,     1,     1,     1,     3,     3,     1,     1,     3,     3,
       3,     3,     4,     3,     2,     1,     1,     1,     1,     1,
       3,     6,     1,     1,     2,     3,     4,     6,     4,     6,
       4,     6,     4,     6,     1,     2,     3,     2,     1,     3,
       2,     3,     1,     3,     2,     5,     3,     6,     4,     6,
       6,     6,     5,     5,     6,     9,     4,     5,     7,     6,
       4,     8,     4,     2,     4,     3,     6,     4,     2,     2,
       2,     2,     1,     2,     0,     1,     2,     2,     2,     1,
       3,     4,     2,     0,     2,     3,     3,     1,     3,     3,
       2,     3,     3,     3,     3,     1,     1,     1,     1,     3,
       5,     1,     1,     1,     1,     3,     2,     4,     8,     2,
       2,     2,     2,     2,     2,     1,     1,     0,     3,     9,
      12,     3,     0,     6,     8,     6,     8,     6,     8,     7,
       1,     4,     4,     7,     2,     1,     3,     4,     3,     0,
       1,     0,     2,     3,     5,     8,     5,     0,     5,     5,
       7,     2,     0,     1,     1,     1,     3,     2,     0,     1,
       0,     1,     3,     1,     3,     1,     3,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
      YYERROR;                                                  \
    }                                                           \
while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static unsigned
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  unsigned res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`----------------------------------------*/

static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  YYUSE (yylocationp);
  YYUSE (yyscanner);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyoutput, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule, core_yyscan_t yyscanner)
{
  unsigned long int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &(yyvsp[(yyi + 1) - (yynrhs)])
                       , &(yylsp[(yyi + 1) - (yynrhs)])                       , yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
yystrlen (const char *yystr)
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            /* Fall through.  */
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);
  YYUSE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.
       'yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yyls1, yysize * sizeof (*yylsp),
                    &yystacksize);

        yyls = yyls1;
        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 464 "third_party/libpg_query/grammar/grammar.y" /* yacc.c:1646  */
    {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 13377 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 3:
#line 480 "third_party/libpg_query/grammar/grammar.y" /* yacc.c:1646  */
    {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 13393 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 4:
#line 492 "third_party/libpg_query/grammar/grammar.y" /* yacc.c:1646  */
    {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 13404 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 39:
#line 535 "third_party/libpg_query/grammar/grammar.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 13410 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 40:
#line 7 "third_party/libpg_query/grammar/statements/call.y" /* yacc.c:1646  */
    {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 13420 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 41:
#line 10 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 13431 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 42:
#line 17 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 13445 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 43:
#line 27 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 13456 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 44:
#line 34 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 13467 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 45:
#line 44 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 13473 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 46:
#line 45 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 13479 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 47:
#line 50 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 13485 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 48:
#line 51 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 13491 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 49:
#line 52 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 13497 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 55:
#line 65 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 13503 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 56:
#line 66 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 13509 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 57:
#line 67 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 13515 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 58:
#line 68 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 13521 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 59:
#line 73 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 13527 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 60:
#line 74 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 13533 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 61:
#line 80 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 13541 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 62:
#line 84 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 13549 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 63:
#line 91 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    {}
#line 13555 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 64:
#line 92 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    {}
#line 13561 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 65:
#line 97 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) "true"; }
#line 13567 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 66:
#line 98 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) "false"; }
#line 13573 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 67:
#line 99 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) "on"; }
#line 13579 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 68:
#line 105 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 13585 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 69:
#line 111 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 13593 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 70:
#line 118 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 13599 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 71:
#line 119 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) "analyze"; }
#line 13605 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 72:
#line 9 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->if_not_exists = false;
					(yyval.node) = (PGNode *)n;
				}
#line 13622 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 73:
#line 24 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->if_not_exists = true;
					(yyval.node) = (PGNode *)n;
				}
#line 13639 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 74:
#line 41 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = 0; }
#line 13645 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 75:
#line 43 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 13673 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 76:
#line 69 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 13679 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 77:
#line 70 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 13685 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 78:
#line 71 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 13691 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 79:
#line 72 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 13697 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 80:
#line 73 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 13703 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 81:
#line 74 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 13709 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 82:
#line 78 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 13715 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 83:
#line 79 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 13721 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 84:
#line 84 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 13727 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 85:
#line 89 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 13733 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 86:
#line 90 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 13739 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 87:
#line 91 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 13745 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 88:
#line 92 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 13751 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 89:
#line 93 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 13757 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 90:
#line 99 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 13768 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 91:
#line 105 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 13774 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 92:
#line 106 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 13780 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 93:
#line 108 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 13797 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 94:
#line 125 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 13808 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 95:
#line 132 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 13819 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 96:
#line 139 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 13833 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 97:
#line 149 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 13847 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 98:
#line 159 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 13863 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 99:
#line 171 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 13876 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 100:
#line 180 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 13889 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 101:
#line 189 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 13908 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 102:
#line 208 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 13916 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 103:
#line 214 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = (yyvsp[0].ival); }
#line 13922 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 104:
#line 220 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 13928 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 105:
#line 222 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 13934 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 106:
#line 224 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 13940 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 107:
#line 226 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 13946 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 108:
#line 228 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 13952 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 109:
#line 233 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 13958 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 110:
#line 234 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 13964 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 111:
#line 238 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 13970 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 112:
#line 239 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 13976 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 113:
#line 240 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 13982 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 114:
#line 241 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 13988 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 115:
#line 246 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 13994 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 116:
#line 250 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {  (yyval.boolean) = true; }
#line 14000 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 117:
#line 251 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {  (yyval.boolean) = false; }
#line 14006 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 118:
#line 257 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 14017 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 119:
#line 263 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 14023 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 120:
#line 268 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 14029 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 121:
#line 269 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 14035 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 122:
#line 270 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 14041 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 123:
#line 271 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 14047 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 124:
#line 272 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 14053 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 125:
#line 273 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 14059 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 126:
#line 274 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 14065 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 127:
#line 275 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 14071 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 128:
#line 281 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 14077 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 129:
#line 282 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 14083 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 130:
#line 286 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 14089 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 131:
#line 292 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 14100 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 132:
#line 299 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 14111 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 133:
#line 306 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 14122 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 134:
#line 313 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 14133 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 135:
#line 324 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 14139 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 136:
#line 325 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 14145 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 137:
#line 326 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 14151 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 138:
#line 327 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 14157 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 139:
#line 331 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 14163 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 140:
#line 336 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 14169 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 141:
#line 337 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 14175 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 142:
#line 338 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = 0; }
#line 14181 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 143:
#line 343 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 14187 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 144:
#line 348 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 14193 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 145:
#line 349 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = CAS_DEFERRABLE; }
#line 14199 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 146:
#line 350 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 14205 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 147:
#line 351 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 14211 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 148:
#line 352 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = CAS_NOT_VALID; }
#line 14217 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 149:
#line 353 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = CAS_NO_INHERIT; }
#line 14223 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 150:
#line 359 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					n->fdwoptions = (yyvsp[-1].list);
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
				}
#line 14246 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 151:
#line 382 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 14254 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 152:
#line 386 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 14262 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 153:
#line 392 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 14268 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 154:
#line 393 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 14274 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 155:
#line 397 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 14280 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 156:
#line 401 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 14286 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 157:
#line 402 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 14292 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 158:
#line 403 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 14298 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 159:
#line 408 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 14306 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 160:
#line 412 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 14314 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 161:
#line 419 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 14320 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 162:
#line 420 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 14326 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 163:
#line 425 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 14332 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 164:
#line 426 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 14338 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 165:
#line 431 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 14346 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 166:
#line 438 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 14352 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 167:
#line 439 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 14358 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 168:
#line 444 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 14364 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 169:
#line 445 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 14370 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 170:
#line 449 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = (yyvsp[0].ival); }
#line 14376 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 171:
#line 455 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 14384 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 172:
#line 459 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 14392 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 173:
#line 463 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 14401 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 174:
#line 468 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 14409 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 175:
#line 475 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 14415 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 176:
#line 476 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 14421 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 177:
#line 480 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.typnam) = (yyvsp[0].typnam); }
#line 14427 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 178:
#line 482 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 14437 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 179:
#line 488 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 14448 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 180:
#line 499 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 14465 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 181:
#line 513 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 14482 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 182:
#line 526 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 14500 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 183:
#line 541 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 14517 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 184:
#line 554 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 14535 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 185:
#line 569 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 14557 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 186:
#line 591 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 14565 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 187:
#line 595 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 14573 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 188:
#line 602 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 14581 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 189:
#line 606 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 14593 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 190:
#line 614 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 14601 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 191:
#line 618 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 14609 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 192:
#line 626 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 14620 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 193:
#line 635 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 14626 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 194:
#line 636 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 14632 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 195:
#line 637 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 14638 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 196:
#line 638 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 14644 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 197:
#line 640 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 14655 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 198:
#line 647 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 14666 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 199:
#line 653 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 14672 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 200:
#line 654 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 14678 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 201:
#line 659 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 14684 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 202:
#line 660 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 14690 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 203:
#line 12 "third_party/libpg_query/grammar/statements/create_as.y" /* yacc.c:1646  */
    {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->if_not_exists = false;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 14707 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 204:
#line 25 "third_party/libpg_query/grammar/statements/create_as.y" /* yacc.c:1646  */
    {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->if_not_exists = true;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 14724 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 205:
#line 41 "third_party/libpg_query/grammar/statements/create_as.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 14730 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 206:
#line 42 "third_party/libpg_query/grammar/statements/create_as.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 14736 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 207:
#line 43 "third_party/libpg_query/grammar/statements/create_as.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 14742 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 208:
#line 49 "third_party/libpg_query/grammar/statements/create_as.y" /* yacc.c:1646  */
    {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 14756 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 209:
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y" /* yacc.c:1646  */
    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				(yyval.node) = (PGNode *) n;
			}
#line 14767 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 210:
#line 11 "third_party/libpg_query/grammar/statements/variable_show.y" /* yacc.c:1646  */
    {
					PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *) n;
				}
#line 14777 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 211:
#line 17 "third_party/libpg_query/grammar/statements/variable_show.y" /* yacc.c:1646  */
    {
					PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
					n->name = (char*) "timezone";
					(yyval.node) = (PGNode *) n;
				}
#line 14787 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 212:
#line 23 "third_party/libpg_query/grammar/statements/variable_show.y" /* yacc.c:1646  */
    {
					PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
					n->name = (char*) "transaction_isolation";
					(yyval.node) = (PGNode *) n;
				}
#line 14797 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 213:
#line 29 "third_party/libpg_query/grammar/statements/variable_show.y" /* yacc.c:1646  */
    {
					PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
					n->name = (char*) "all";
					(yyval.node) = (PGNode *) n;
				}
#line 14807 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 216:
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 14813 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 217:
#line 41 "third_party/libpg_query/grammar/statements/variable_show.y" /* yacc.c:1646  */
    { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 14819 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 218:
#line 10 "third_party/libpg_query/grammar/statements/view.y" /* yacc.c:1646  */
    {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->replace = false;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 14835 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 219:
#line 23 "third_party/libpg_query/grammar/statements/view.y" /* yacc.c:1646  */
    {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->replace = true;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 14851 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 220:
#line 36 "third_party/libpg_query/grammar/statements/view.y" /* yacc.c:1646  */
    {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->replace = false;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 14872 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 221:
#line 54 "third_party/libpg_query/grammar/statements/view.y" /* yacc.c:1646  */
    {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->replace = true;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 14893 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 222:
#line 74 "third_party/libpg_query/grammar/statements/view.y" /* yacc.c:1646  */
    { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 14899 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 223:
#line 75 "third_party/libpg_query/grammar/statements/view.y" /* yacc.c:1646  */
    { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 14905 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 224:
#line 76 "third_party/libpg_query/grammar/statements/view.y" /* yacc.c:1646  */
    { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 14911 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 225:
#line 77 "third_party/libpg_query/grammar/statements/view.y" /* yacc.c:1646  */
    { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 14917 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 226:
#line 9 "third_party/libpg_query/grammar/statements/delete.y" /* yacc.c:1646  */
    {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 14931 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 227:
#line 22 "third_party/libpg_query/grammar/statements/delete.y" /* yacc.c:1646  */
    {
					(yyval.range) = (yyvsp[0].range);
				}
#line 14939 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 228:
#line 26 "third_party/libpg_query/grammar/statements/delete.y" /* yacc.c:1646  */
    {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 14950 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 229:
#line 33 "third_party/libpg_query/grammar/statements/delete.y" /* yacc.c:1646  */
    {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 14961 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 230:
#line 43 "third_party/libpg_query/grammar/statements/delete.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 14967 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 231:
#line 44 "third_party/libpg_query/grammar/statements/delete.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 14973 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 232:
#line 50 "third_party/libpg_query/grammar/statements/delete.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 14979 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 233:
#line 51 "third_party/libpg_query/grammar/statements/delete.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 14985 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 236:
#line 52 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[-1].node); }
#line 14991 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 237:
#line 53 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[-1].node); }
#line 14997 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 238:
#line 68 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 15003 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 239:
#line 70 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 15014 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 240:
#line 77 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 15026 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 241:
#line 85 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 15038 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 242:
#line 93 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 15050 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 243:
#line 101 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 15062 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 244:
#line 109 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 15074 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 245:
#line 117 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 15086 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 246:
#line 127 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 15092 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 247:
#line 128 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 15098 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 248:
#line 158 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->intoClause = (yyvsp[-6].into);
					n->fromClause = (yyvsp[-5].list);
					n->whereClause = (yyvsp[-4].node);
					n->groupClause = (yyvsp[-3].list);
					n->havingClause = (yyvsp[-2].node);
					n->windowClause = (yyvsp[-1].list);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 15115 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 249:
#line 173 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-8].list);
					n->targetList = (yyvsp[-7].list);
					n->intoClause = (yyvsp[-6].into);
					n->fromClause = (yyvsp[-5].list);
					n->whereClause = (yyvsp[-4].node);
					n->groupClause = (yyvsp[-3].list);
					n->havingClause = (yyvsp[-2].node);
					n->windowClause = (yyvsp[-1].list);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 15133 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 250:
#line 186 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 15139 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 251:
#line 188 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 15162 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 252:
#line 207 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 15170 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 253:
#line 211 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 15178 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 254:
#line 215 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 15186 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 255:
#line 232 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 15197 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 256:
#line 239 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 15208 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 257:
#line 246 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 15219 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 258:
#line 255 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 15225 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 259:
#line 256 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 15231 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 260:
#line 260 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-5].str);
				n->aliascolnames = (yyvsp[-4].list);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-5]);
				(yyval.node) = (PGNode *) n;
			}
#line 15244 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 261:
#line 272 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 15258 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 262:
#line 282 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.into) = NULL; }
#line 15264 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 263:
#line 291 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 15273 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 264:
#line 296 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 15282 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 265:
#line 301 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 15291 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 266:
#line 306 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 15300 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 267:
#line 311 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 15312 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 268:
#line 319 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 15324 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 269:
#line 327 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 15333 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 270:
#line 332 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 15342 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 271:
#line 337 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 15351 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 272:
#line 343 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {}
#line 15357 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 273:
#line 344 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {}
#line 15363 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 274:
#line 348 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 15369 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 275:
#line 349 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 15375 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 276:
#line 350 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 15381 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 277:
#line 357 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(NIL); }
#line 15387 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 278:
#line 358 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 15393 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 279:
#line 362 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL;}
#line 15399 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 280:
#line 363 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 15405 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 281:
#line 367 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list);}
#line 15411 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 282:
#line 368 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 15417 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 283:
#line 372 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 15423 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 284:
#line 376 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 15429 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 285:
#line 377 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 15435 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 286:
#line 381 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 15448 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 287:
#line 390 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 15461 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 288:
#line 400 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 15467 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 289:
#line 401 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 15473 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 290:
#line 402 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 15479 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 291:
#line 405 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 15485 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 292:
#line 406 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 15491 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 293:
#line 407 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 15497 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 294:
#line 411 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 15503 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 295:
#line 412 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 15509 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 296:
#line 413 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 15515 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 297:
#line 414 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 15521 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 298:
#line 418 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 15527 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 299:
#line 419 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make2(NULL,NULL); }
#line 15533 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 300:
#line 424 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 15539 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 301:
#line 426 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 15552 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 302:
#line 442 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[-2].node); }
#line 15558 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 303:
#line 444 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = makeIntConst(1, -1); }
#line 15564 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 304:
#line 449 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 15570 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 305:
#line 452 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[-1].node); }
#line 15576 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 306:
#line 460 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 15584 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 307:
#line 464 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 15592 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 308:
#line 468 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 15600 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 309:
#line 472 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 15608 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 310:
#line 476 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 15616 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 311:
#line 480 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 15624 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 312:
#line 487 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (yyvsp[0].node);
				}
#line 15632 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 313:
#line 491 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 15638 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 314:
#line 498 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 15644 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 315:
#line 499 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = NULL; }
#line 15650 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 316:
#line 504 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), (yyvsp[0].ival), (yylsp[-4]));
				}
#line 15658 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 317:
#line 508 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, -1, (yylsp[0]));
		}
#line 15666 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 318:
#line 512 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), -1, (yylsp[-3]));
		}
#line 15674 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 319:
#line 516 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), (yyvsp[-1].ival), (yylsp[-5]));
		}
#line 15682 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 320:
#line 523 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (yyvsp[0].node);
				}
#line 15690 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 321:
#line 529 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 15696 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 322:
#line 530 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 15702 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 323:
#line 535 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.ival) = (yyvsp[-1].ival); }
#line 15708 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 324:
#line 536 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.ival) = -1; }
#line 15714 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 325:
#line 540 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 15720 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 326:
#line 542 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 15729 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 327:
#line 549 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 15735 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 328:
#line 569 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 15741 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 329:
#line 571 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 15747 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 330:
#line 573 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 15753 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 331:
#line 577 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 15759 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 332:
#line 578 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 15765 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 333:
#line 582 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.ival) = 0; }
#line 15771 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 334:
#line 583 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.ival) = 0; }
#line 15777 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 335:
#line 586 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.ival) = 0; }
#line 15783 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 336:
#line 587 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.ival) = 0; }
#line 15789 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 337:
#line 612 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 15795 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 338:
#line 613 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 15801 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 339:
#line 617 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 15807 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 340:
#line 618 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 15813 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 341:
#line 622 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 15819 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 342:
#line 623 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 15825 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 343:
#line 628 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 15833 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 344:
#line 640 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 15839 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 345:
#line 641 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 15845 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 346:
#line 645 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 15851 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 347:
#line 646 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 15857 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 348:
#line 650 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 15863 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 349:
#line 651 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 15869 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 350:
#line 655 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 15875 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 351:
#line 656 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 15881 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 352:
#line 661 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 15893 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 353:
#line 671 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 15899 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 354:
#line 672 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 15905 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 355:
#line 673 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 15911 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 356:
#line 674 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 15917 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 357:
#line 678 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 15923 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 358:
#line 679 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 15929 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 359:
#line 684 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.lockwaitpolicy) = LockWaitError; }
#line 15935 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 360:
#line 685 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 15941 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 361:
#line 686 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 15947 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 362:
#line 696 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 15957 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 363:
#line 702 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 15967 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 364:
#line 719 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 15973 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 365:
#line 720 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 15979 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 366:
#line 724 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 15985 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 367:
#line 725 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 15991 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 368:
#line 732 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 16001 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 369:
#line 738 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 16013 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 370:
#line 746 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 16025 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 371:
#line 754 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					/*
					 * The SQL spec does not permit a subselect
					 * (<derived_table>) without an alias clause,
					 * so we don't either.  This avoids the problem
					 * of needing to invent a unique refname for it.
					 * That could be surmounted if there's sufficient
					 * popular demand, but for now let's just implement
					 * the spec and see if anyone complains.
					 * However, it does seem like a good idea to emit
					 * an error message that's better than "syntax error".
					 */
					if ((yyvsp[-1].alias) == NULL)
					{
						if (IsA((yyvsp[-2].node), PGSelectStmt) &&
							((PGSelectStmt *) (yyvsp[-2].node))->valuesLists)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("VALUES in FROM must have an alias"),
									 errhint("For example, FROM (VALUES ...) [AS] foo."),
									 parser_errposition((yylsp[-2]))));
						else
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("subquery in FROM must have an alias"),
									 errhint("For example, FROM (SELECT ...) [AS] foo."),
									 parser_errposition((yylsp[-2]))));
					}
					(yyval.node) = (PGNode *) n;
				}
#line 16065 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 372:
#line 790 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					/* same comment as above */
					if ((yyvsp[0].alias) == NULL)
					{
						if (IsA((yyvsp[-1].node), PGSelectStmt) &&
							((PGSelectStmt *) (yyvsp[-1].node))->valuesLists)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("VALUES in FROM must have an alias"),
									 errhint("For example, FROM (VALUES ...) [AS] foo."),
									 parser_errposition((yylsp[-1]))));
						else
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("subquery in FROM must have an alias"),
									 errhint("For example, FROM (SELECT ...) [AS] foo."),
									 parser_errposition((yylsp[-1]))));
					}
					(yyval.node) = (PGNode *) n;
				}
#line 16095 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 373:
#line 816 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 16103 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 374:
#line 820 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 16112 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 375:
#line 846 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 16120 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 376:
#line 850 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 16137 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 377:
#line 863 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->isNatural = false;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 16155 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 378:
#line 877 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 16174 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 379:
#line 892 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->isNatural = true;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 16190 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 380:
#line 904 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = true;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 16207 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 381:
#line 920 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 16217 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 382:
#line 926 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 16226 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 383:
#line 931 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 16236 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 384:
#line 937 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 16245 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 385:
#line 943 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.alias) = (yyvsp[0].alias); }
#line 16251 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 386:
#line 944 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.alias) = NULL; }
#line 16257 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 387:
#line 953 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 16265 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 388:
#line 957 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 16273 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 389:
#line 961 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 16283 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 390:
#line 967 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 16293 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 391:
#line 973 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 16301 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 392:
#line 978 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.jtype) = PG_JOIN_FULL; }
#line 16307 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 393:
#line 979 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.jtype) = PG_JOIN_LEFT; }
#line 16313 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 394:
#line 980 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 16319 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 395:
#line 981 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.jtype) = PG_JOIN_INNER; }
#line 16325 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 396:
#line 985 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 16331 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 397:
#line 986 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 16337 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 398:
#line 998 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 16343 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 399:
#line 999 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 16349 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 400:
#line 1005 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 16360 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 401:
#line 1012 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 16371 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 402:
#line 1019 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 16382 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 403:
#line 1026 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 16393 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 404:
#line 1058 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 16408 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 405:
#line 1069 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 16423 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 406:
#line 1082 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 16429 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 407:
#line 1086 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 16435 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 408:
#line 1087 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 16441 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 409:
#line 1090 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 16447 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 410:
#line 1091 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 16453 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 411:
#line 1094 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 16459 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 412:
#line 1095 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 16465 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 413:
#line 1100 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 16471 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 414:
#line 1101 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 16477 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 415:
#line 1107 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 16485 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 416:
#line 1111 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 16493 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 417:
#line 1117 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 16515 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 418:
#line 1138 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 16527 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 419:
#line 1145 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 16533 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 420:
#line 1158 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 16541 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 421:
#line 1161 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 16549 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 424:
#line 1168 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 16558 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 425:
#line 1173 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 16568 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 426:
#line 1180 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 16577 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 427:
#line 1185 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 16587 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 428:
#line 1191 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 16596 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 429:
#line 1196 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 16606 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 430:
#line 1201 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
               (yyval.typnam) = SystemTypeName("struct");
               (yyval.typnam)->typmods = (yyvsp[-1].list);
               (yyval.typnam)->location = (yylsp[-3]);
			}
#line 16616 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 431:
#line 1210 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 16622 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 432:
#line 1212 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 16628 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 433:
#line 1214 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {  (yyval.list) = NIL; }
#line 16634 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 434:
#line 1218 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16640 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 435:
#line 1219 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16646 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 436:
#line 1220 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16652 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 437:
#line 1221 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16658 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 438:
#line 1222 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16664 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 439:
#line 1224 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 16673 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 440:
#line 1229 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 16683 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 441:
#line 1248 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16689 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 442:
#line 1249 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16695 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 443:
#line 1250 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16701 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 444:
#line 1251 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16707 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 445:
#line 1263 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 16717 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 446:
#line 1269 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-2].str)), (yyvsp[-1].list)));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-2]);
				}
#line 16727 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 447:
#line 1276 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 16733 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 448:
#line 1277 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 16739 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 449:
#line 1284 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 16748 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 450:
#line 1289 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 16757 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 451:
#line 1294 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 16766 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 452:
#line 1299 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 16775 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 453:
#line 1304 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 16784 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 454:
#line 1309 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 16793 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 455:
#line 1314 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 16802 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 456:
#line 1319 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 16812 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 457:
#line 1325 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 16822 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 458:
#line 1331 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 16832 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 459:
#line 1337 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 16841 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 460:
#line 1344 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 16866 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 461:
#line 1365 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 16874 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 462:
#line 1375 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 16882 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 463:
#line 1379 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 16890 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 464:
#line 1387 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 16898 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 465:
#line 1391 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 16907 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 466:
#line 1399 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 16920 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 467:
#line 1411 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 16938 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 468:
#line 1432 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 16946 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 469:
#line 1436 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 16954 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 470:
#line 1442 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 16962 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 471:
#line 1446 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 16977 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 472:
#line 1459 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 16987 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 473:
#line 1467 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 16999 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 474:
#line 1477 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 17005 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 475:
#line 1479 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 17011 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 476:
#line 1481 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = "varchar"; }
#line 17017 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 477:
#line 1483 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 17023 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 478:
#line 1485 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 17029 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 479:
#line 1487 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 17035 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 480:
#line 1491 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 17041 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 481:
#line 1492 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 17047 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 482:
#line 1500 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 17060 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 483:
#line 1509 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17072 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 484:
#line 1517 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 17085 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 485:
#line 1526 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17097 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 486:
#line 1537 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 17106 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 487:
#line 1544 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 17112 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 488:
#line 1545 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 17118 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 489:
#line 1546 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 17124 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 506:
#line 1575 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 17130 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 507:
#line 1577 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 17136 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 508:
#line 1579 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 17142 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 509:
#line 1581 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 17148 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 510:
#line 1583 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 17154 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 511:
#line 1585 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 17160 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 512:
#line 1587 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 17166 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 513:
#line 1589 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 17172 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 514:
#line 1591 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 17181 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 515:
#line 1596 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 17190 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 516:
#line 1601 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 17200 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 517:
#line 1607 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 17211 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 518:
#line 1614 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 17220 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 519:
#line 1619 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 17230 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 520:
#line 1625 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 17239 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 521:
#line 1630 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 17245 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 522:
#line 1661 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 17251 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 523:
#line 1664 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), (yylsp[-1])); }
#line 17257 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 524:
#line 1666 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 17269 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 525:
#line 1674 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 17279 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 526:
#line 1689 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 17285 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 527:
#line 1691 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 17291 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 528:
#line 1693 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17297 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 529:
#line 1695 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17303 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 530:
#line 1697 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17309 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 531:
#line 1699 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17315 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 532:
#line 1701 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17321 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 533:
#line 1703 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17327 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 534:
#line 1705 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17333 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 535:
#line 1707 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17339 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 536:
#line 1709 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17345 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 537:
#line 1711 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17351 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 538:
#line 1713 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17357 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 539:
#line 1715 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17363 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 540:
#line 1718 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17369 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 541:
#line 1720 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 17375 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 542:
#line 1722 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 17381 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 543:
#line 1725 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17387 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 544:
#line 1727 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17393 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 545:
#line 1729 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 17399 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 546:
#line 1731 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 17405 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 547:
#line 1734 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 17414 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 548:
#line 1739 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 17423 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 549:
#line 1744 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 17434 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 550:
#line 1751 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 17443 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 551:
#line 1756 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 17454 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 552:
#line 1763 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 17463 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 553:
#line 1768 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 17475 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 554:
#line 1776 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 17484 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 555:
#line 1781 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 17496 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 556:
#line 1790 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 17508 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 557:
#line 1798 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 17520 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 558:
#line 1806 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 17532 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 559:
#line 1814 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 17544 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 560:
#line 1832 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 17556 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 561:
#line 1840 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 17568 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 562:
#line 1848 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 17580 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 563:
#line 1856 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 17592 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 564:
#line 1864 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 17604 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 565:
#line 1871 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 17613 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 566:
#line 1876 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->parameters = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 17625 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 567:
#line 1884 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->parameters = list_make1((yyvsp[-2].node));
				n->function = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 17637 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 568:
#line 1892 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 17657 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 569:
#line 1908 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 17669 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 570:
#line 1916 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 17681 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 571:
#line 1924 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 17693 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 572:
#line 1932 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 17705 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 573:
#line 1940 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 17717 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 574:
#line 1948 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 17729 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 575:
#line 1956 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 17737 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 576:
#line 1960 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 17745 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 577:
#line 1964 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 17753 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 578:
#line 1968 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 17761 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 579:
#line 1972 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 17773 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 580:
#line 1980 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 17785 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 581:
#line 1988 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 17797 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 582:
#line 1996 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 17809 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 583:
#line 2004 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 17833 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 584:
#line 2024 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 17859 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 585:
#line 2046 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 17874 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 586:
#line 2057 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 17885 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 587:
#line 2064 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 17903 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 588:
#line 2089 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 17909 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 589:
#line 2091 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), (yylsp[-1])); }
#line 17915 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 590:
#line 2093 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 17921 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 591:
#line 2095 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 17927 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 592:
#line 2097 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17933 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 593:
#line 2099 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17939 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 594:
#line 2101 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17945 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 595:
#line 2103 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17951 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 596:
#line 2105 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17957 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 597:
#line 2107 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17963 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 598:
#line 2109 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17969 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 599:
#line 2111 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17975 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 600:
#line 2113 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17981 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 601:
#line 2115 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17987 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 602:
#line 2117 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17993 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 603:
#line 2119 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17999 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 604:
#line 2121 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18005 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 605:
#line 2123 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 18011 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 606:
#line 2125 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 18017 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 607:
#line 2127 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 18025 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 608:
#line 2131 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 18033 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 609:
#line 2135 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 18041 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 610:
#line 2139 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 18049 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 611:
#line 2152 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 18055 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 612:
#line 2153 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 18061 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 613:
#line 2155 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeParamRef(0, (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeParamRef(0, (yylsp[-1]));
				}
#line 18077 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 614:
#line 2167 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[-1].ival);
					p->location = (yylsp[-1]);
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) p;
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) p;
				}
#line 18096 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 615:
#line 2182 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (yyvsp[-2].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *)n;
					}
					else
						(yyval.node) = (yyvsp[-2].node);
				}
#line 18112 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 616:
#line 2194 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 18118 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 617:
#line 2196 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 18124 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 618:
#line 2198 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 18139 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 619:
#line 2209 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 18167 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 620:
#line 2233 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 18182 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 621:
#line 2246 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 18190 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 622:
#line 2250 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall((yyvsp[-4].list), (yyvsp[-2].list), (yylsp[-4]));
					n->agg_order = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18200 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 623:
#line 2256 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), list_make1((yyvsp[-2].node)), (yylsp[-5]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18211 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 624:
#line 2263 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall((yyvsp[-7].list), lappend((yyvsp[-5].list), (yyvsp[-2].node)), (yylsp[-7]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18222 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 625:
#line 2270 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-2].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-1].list);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 18236 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 626:
#line 2280 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-2].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-1].list);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18247 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 627:
#line 2287 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/*
					 * We consider AGGREGATE(*) to invoke a parameterless
					 * aggregate.  This does the right thing for COUNT(*),
					 * and there are no other aggregates in SQL that accept
					 * '*' as parameter.
					 *
					 * The PGFuncCall node is also marked agg_star = true,
					 * so that later processing can detect what the argument
					 * really was.
					 */
					PGFuncCall *n = makeFuncCall((yyvsp[-3].list), NIL, (yylsp[-3]));
					n->agg_star = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18267 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 628:
#line 2315 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-3].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-2].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-2]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-2]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-2]))));
						n->agg_order = (yyvsp[-2].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-1].node);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 18306 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 629:
#line 2350 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 18312 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 630:
#line 2360 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 18318 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 631:
#line 2361 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 18324 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 632:
#line 2369 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 18334 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 633:
#line 2375 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_DATE, -1, (yylsp[0]));
				}
#line 18342 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 634:
#line 2379 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME, -1, (yylsp[0]));
				}
#line 18350 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 635:
#line 2383 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 18358 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 636:
#line 2387 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP, -1, (yylsp[0]));
				}
#line 18366 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 637:
#line 2391 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 18374 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 638:
#line 2395 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME, -1, (yylsp[0]));
				}
#line 18382 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 639:
#line 2399 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 18390 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 640:
#line 2403 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP, -1, (yylsp[0]));
				}
#line 18398 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 641:
#line 2407 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 18406 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 642:
#line 2411 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_ROLE, -1, (yylsp[0]));
				}
#line 18414 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 643:
#line 2415 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_USER, -1, (yylsp[0]));
				}
#line 18422 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 644:
#line 2419 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_SESSION_USER, -1, (yylsp[0]));
				}
#line 18430 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 645:
#line 2423 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_USER, -1, (yylsp[0]));
				}
#line 18438 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 646:
#line 2427 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_CATALOG, -1, (yylsp[0]));
				}
#line 18446 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 647:
#line 2431 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_SCHEMA, -1, (yylsp[0]));
				}
#line 18454 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 648:
#line 2435 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), (yylsp[-5])); }
#line 18460 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 649:
#line 2437 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 18468 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 650:
#line 2441 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 18481 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 651:
#line 2450 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* position(A in B) is converted to position(B, A) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 18490 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 652:
#line 2455 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 18501 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 653:
#line 2462 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 18520 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 654:
#line 2477 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 18531 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 655:
#line 2484 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 18539 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 656:
#line 2488 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 18547 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 657:
#line 2492 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 18555 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 658:
#line 2496 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 18563 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 659:
#line 2500 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 18574 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 660:
#line 2513 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 18580 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 661:
#line 2514 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 18586 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 662:
#line 2518 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[-1].node); }
#line 18592 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 663:
#line 2519 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 18598 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 664:
#line 2527 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 18604 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 665:
#line 2528 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 18610 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 666:
#line 2532 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 18616 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 667:
#line 2534 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 18622 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 668:
#line 2539 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 18632 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 669:
#line 2547 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.windef) = (yyvsp[0].windef); }
#line 18638 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 670:
#line 2549 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 18655 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 671:
#line 2562 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.windef) = NULL; }
#line 18661 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 672:
#line 2567 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 18679 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 673:
#line 2592 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 18685 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 674:
#line 2593 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = NULL; }
#line 18691 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 675:
#line 2596 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 18697 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 676:
#line 2597 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 18703 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 677:
#line 2609 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					if (n->frameOptions & (FRAMEOPTION_START_VALUE_PRECEDING |
										   FRAMEOPTION_END_VALUE_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("RANGE PRECEDING is only supported with UNBOUNDED"),
								 parser_errposition((yylsp[-1]))));
					if (n->frameOptions & (FRAMEOPTION_START_VALUE_FOLLOWING |
										   FRAMEOPTION_END_VALUE_FOLLOWING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("RANGE FOLLOWING is only supported with UNBOUNDED"),
								 parser_errposition((yylsp[-1]))));
					(yyval.windef) = n;
				}
#line 18725 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 678:
#line 2627 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					(yyval.windef) = n;
				}
#line 18735 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 679:
#line 2633 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 18747 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 680:
#line 2643 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n = (yyvsp[0].windef);
					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 18768 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 681:
#line 2660 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);
					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_VALUE_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_VALUE_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 18809 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 682:
#line 2705 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 18821 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 683:
#line 2713 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 18833 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 684:
#line 2721 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 18845 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 685:
#line 2729 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 18857 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 686:
#line 2737 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 18869 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 687:
#line 2757 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 18875 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 688:
#line 2758 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 18881 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 689:
#line 2761 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list);}
#line 18887 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 690:
#line 2762 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 18893 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 691:
#line 2765 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 18899 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 692:
#line 2766 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 18905 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 693:
#line 2767 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 18911 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 694:
#line 2770 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 18917 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 695:
#line 2771 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 18923 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 696:
#line 2774 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = "+"; }
#line 18929 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 697:
#line 2775 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = "-"; }
#line 18935 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 698:
#line 2776 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = "*"; }
#line 18941 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 699:
#line 2777 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = "/"; }
#line 18947 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 700:
#line 2778 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = "%"; }
#line 18953 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 701:
#line 2779 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = "^"; }
#line 18959 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 702:
#line 2780 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = "<"; }
#line 18965 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 703:
#line 2781 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = ">"; }
#line 18971 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 704:
#line 2782 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = "="; }
#line 18977 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 705:
#line 2783 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = "<="; }
#line 18983 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 706:
#line 2784 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = ">="; }
#line 18989 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 707:
#line 2785 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = "<>"; }
#line 18995 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 708:
#line 2789 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 19001 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 709:
#line 2791 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 19007 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 710:
#line 2796 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 19013 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 711:
#line 2798 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 19019 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 712:
#line 2803 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 19025 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 713:
#line 2805 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 19031 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 714:
#line 2807 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString("~~")); }
#line 19037 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 715:
#line 2809 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString("!~~")); }
#line 19043 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 716:
#line 2811 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString("~~~")); }
#line 19049 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 717:
#line 2813 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString("!~~~")); }
#line 19055 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 718:
#line 2815 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString("~~*")); }
#line 19061 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 719:
#line 2817 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString("!~~*")); }
#line 19067 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 720:
#line 2831 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 19073 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 721:
#line 2833 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 19079 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 722:
#line 2837 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 19087 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 723:
#line 2841 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 19095 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 724:
#line 2848 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 19103 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 725:
#line 2852 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 19111 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 726:
#line 2858 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (yyvsp[0].node);
				}
#line 19119 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 727:
#line 2862 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 19132 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 728:
#line 2871 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 19145 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 729:
#line 2881 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 19151 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 730:
#line 2882 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 19157 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 731:
#line 2887 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 19165 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 732:
#line 2890 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 19171 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 733:
#line 2897 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 19177 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 734:
#line 2898 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) "year"; }
#line 19183 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 735:
#line 2899 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) "month"; }
#line 19189 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 736:
#line 2900 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) "day"; }
#line 19195 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 737:
#line 2901 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) "hour"; }
#line 19201 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 738:
#line 2902 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) "minute"; }
#line 19207 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 739:
#line 2903 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) "second"; }
#line 19213 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 740:
#line 2904 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) "millisecond"; }
#line 19219 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 741:
#line 2905 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) "microsecond"; }
#line 19225 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 742:
#line 2906 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 19231 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 743:
#line 2917 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 19239 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 744:
#line 2921 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 19247 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 745:
#line 2928 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 19253 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 746:
#line 2934 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-2].node)); }
#line 19259 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 747:
#line 2935 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 19265 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 748:
#line 2952 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 19273 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 749:
#line 2956 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 19282 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 750:
#line 2961 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 19290 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 751:
#line 2965 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), -1));
				}
#line 19309 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 752:
#line 2980 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = (yyvsp[0].list);
				}
#line 19317 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 753:
#line 2984 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 19323 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 754:
#line 2988 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 19329 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 755:
#line 2991 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 19335 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 756:
#line 2994 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 19341 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 757:
#line 2995 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 19347 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 758:
#line 2996 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 19353 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 759:
#line 3000 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 19364 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 760:
#line 3006 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 19370 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 761:
#line 3017 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 19384 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 762:
#line 3030 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19390 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 763:
#line 3031 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 19396 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 764:
#line 3036 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 19408 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 765:
#line 3046 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 19414 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 766:
#line 3047 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 19420 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 767:
#line 3050 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 19426 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 768:
#line 3051 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 19432 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 769:
#line 3055 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 19440 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 770:
#line 3059 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 19448 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 771:
#line 3066 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 19456 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 772:
#line 3070 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeNode(PGAStar);
				}
#line 19464 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 773:
#line 3074 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 19476 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 774:
#line 3082 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 19488 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 775:
#line 3092 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 19494 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 776:
#line 3093 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 19500 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 777:
#line 3097 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19506 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 778:
#line 3098 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 19512 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 779:
#line 3102 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 19518 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 780:
#line 3103 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 19524 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 783:
#line 3117 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 19530 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 784:
#line 3118 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 19536 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 785:
#line 3122 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 19542 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 786:
#line 3123 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 19548 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 787:
#line 3127 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 19560 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 788:
#line 3143 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 19572 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 789:
#line 3151 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 19584 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 790:
#line 3159 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGColumnRef *n = makeNode(PGColumnRef);
					n->fields = list_make1(makeNode(PGAStar));
					n->location = (yylsp[0]);

					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)n;
					(yyval.target)->location = (yylsp[0]);
				}
#line 19600 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 791:
#line 3180 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 19606 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 792:
#line 3181 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 19612 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 793:
#line 3193 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 19620 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 794:
#line 3197 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 19649 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 795:
#line 3224 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 19655 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 796:
#line 3226 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 19661 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 797:
#line 3230 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 19667 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 798:
#line 3232 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 19673 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 799:
#line 3243 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 19679 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 800:
#line 3245 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 19688 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 801:
#line 3256 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 19696 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 802:
#line 3260 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 19704 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 803:
#line 3264 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 19712 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 804:
#line 3268 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 19720 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 805:
#line 3272 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 19733 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 806:
#line 3281 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 19744 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 807:
#line 3288 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-5].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, nor ORDER BY.
					 */
					foreach(lc, (yyvsp[-3].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-2].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-2]))));

					t->typmods = (yyvsp[-3].list);
					t->location = (yylsp[-5]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 19780 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 808:
#line 3320 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 19788 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 809:
#line 3324 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 19796 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 810:
#line 3328 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 19804 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 811:
#line 3332 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 19812 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 812:
#line 3336 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 19820 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 813:
#line 3340 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 19828 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 814:
#line 3344 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 19836 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 815:
#line 3349 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.ival) = (yyvsp[0].ival); }
#line 19842 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 816:
#line 3350 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 19848 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 817:
#line 3366 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 19854 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 818:
#line 3367 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19860 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 819:
#line 3368 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19866 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 820:
#line 3371 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 19872 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 821:
#line 3372 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 19878 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 822:
#line 3377 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 19884 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 823:
#line 3378 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19890 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 824:
#line 3379 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19896 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 825:
#line 3382 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 19902 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 826:
#line 3383 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 19908 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 827:
#line 3387 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 19914 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 828:
#line 3389 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 19920 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 829:
#line 3393 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 19926 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 830:
#line 3394 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 19932 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 832:
#line 3405 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 19938 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 833:
#line 3406 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19944 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 834:
#line 3407 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19950 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 835:
#line 3408 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19956 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 836:
#line 3409 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19962 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 837:
#line 3412 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 19968 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 838:
#line 3413 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 19974 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 839:
#line 41 "third_party/libpg_query/grammar/statements/create_property_graph.y" /* yacc.c:1646  */
    {
		// PGCreatePropertyGraphStmt *n = $5; //PGList ? 
		PGCreatePropertyGraphStmt *n = makeNode(PGCreatePropertyGraphStmt);
		n->name = (yyvsp[-10].str);
		n->vertex_tables = 	(yyvsp[-6].list);
		n->edge_tables = (yyvsp[-1].list);
		// n->property_graph_content = $5;
		(yyval.node) = (PGNode *)n;
		// n = $5;
	}
#line 19989 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 840:
#line 52 "third_party/libpg_query/grammar/statements/create_property_graph.y" /* yacc.c:1646  */
    {
		PGCreatePropertyGraphStmt *n = makeNode(PGCreatePropertyGraphStmt);
		n->name = (yyvsp[0].str);
		(yyval.node) = (PGNode *)n;
	}
#line 19999 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 845:
#line 86 "third_party/libpg_query/grammar/statements/create_property_graph.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 20005 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 846:
#line 87 "third_party/libpg_query/grammar/statements/create_property_graph.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 20011 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 847:
#line 93 "third_party/libpg_query/grammar/statements/create_property_graph.y" /* yacc.c:1646  */
    {
		PGPropertyGraphTable *n = makeNode(PGPropertyGraphTable);
		n->name = (yyvsp[-2].range);
		n->labels = (yyvsp[0].list);
		n->keys = (yyvsp[-1].list);
	}
#line 20022 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 848:
#line 103 "third_party/libpg_query/grammar/statements/create_property_graph.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 20028 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 849:
#line 107 "third_party/libpg_query/grammar/statements/create_property_graph.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].str)); }
#line 20034 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 850:
#line 109 "third_party/libpg_query/grammar/statements/create_property_graph.y" /* yacc.c:1646  */
    {
			(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].str));
		}
#line 20042 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 851:
#line 115 "third_party/libpg_query/grammar/statements/create_property_graph.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 20048 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 852:
#line 127 "third_party/libpg_query/grammar/statements/create_property_graph.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 20054 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 853:
#line 128 "third_party/libpg_query/grammar/statements/create_property_graph.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 20060 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 854:
#line 140 "third_party/libpg_query/grammar/statements/create_property_graph.y" /* yacc.c:1646  */
    {
		PGPropertyGraphTable *n = makeNode(PGPropertyGraphTable);
		n->name = (yyvsp[-10].range);
		n->keys = (yyvsp[-9].list);
		n->source_key = (yyvsp[-7].list);
		n->source_key_reference = (yyvsp[-5].range);
		n->destination_key = (yyvsp[-3].list);
		n->destination_key_reference = (yyvsp[-1].range);
		n->labels = (yyvsp[0].list); 
		//Do I need a struct for Source/Dest Vertex Table
	}
#line 20076 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 855:
#line 173 "third_party/libpg_query/grammar/statements/create_property_graph.y" /* yacc.c:1646  */
    {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20086 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 856:
#line 181 "third_party/libpg_query/grammar/statements/create_property_graph.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 20092 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 857:
#line 8 "third_party/libpg_query/grammar/statements/export.y" /* yacc.c:1646  */
    {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 20106 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 858:
#line 21 "third_party/libpg_query/grammar/statements/export.y" /* yacc.c:1646  */
    {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20116 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 859:
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y" /* yacc.c:1646  */
    {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 20126 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 860:
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y" /* yacc.c:1646  */
    {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 20136 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 861:
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y" /* yacc.c:1646  */
    {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 20146 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 862:
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y" /* yacc.c:1646  */
    {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 20156 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 863:
#line 11 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->if_not_exists = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20183 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 864:
#line 36 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->if_not_exists = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20210 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 865:
#line 62 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 20216 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 866:
#line 66 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 20222 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 867:
#line 67 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 20228 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 868:
#line 72 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 20234 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 869:
#line 73 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 20240 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 870:
#line 78 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 20246 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 871:
#line 79 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    { (yyval.str) = NULL; }
#line 20252 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 872:
#line 83 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 20258 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 873:
#line 84 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 20264 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 874:
#line 89 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 20270 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 875:
#line 90 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 20276 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 876:
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y" /* yacc.c:1646  */
    {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					/* ...but not both */
					n->schemaname = (yyvsp[-1].str);
					n->schemaElts = (yyvsp[0].list);
					n->if_not_exists = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20289 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 877:
#line 17 "third_party/libpg_query/grammar/statements/create_schema.y" /* yacc.c:1646  */
    {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					/* ...but not here */
					n->schemaname = (yyvsp[-1].str);
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->if_not_exists = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20307 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 878:
#line 35 "third_party/libpg_query/grammar/statements/create_schema.y" /* yacc.c:1646  */
    {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 20317 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 879:
#line 41 "third_party/libpg_query/grammar/statements/create_schema.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 20323 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 884:
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20341 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 885:
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[0].range);
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20359 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 886:
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 20375 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 887:
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 20387 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 888:
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 20401 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 889:
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 20407 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 890:
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 20413 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 891:
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 20419 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 892:
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_VACOPT_FULL; }
#line 20425 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 893:
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 20439 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 894:
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 20445 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 895:
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 20451 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 896:
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    { (yyval.ival) = (yyvsp[0].ival); }
#line 20457 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 897:
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 20463 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 898:
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 20469 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 899:
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 20475 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 900:
#line 8 "third_party/libpg_query/grammar/statements/prepare.y" /* yacc.c:1646  */
    {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 20487 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 901:
#line 18 "third_party/libpg_query/grammar/statements/prepare.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 20493 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 902:
#line 19 "third_party/libpg_query/grammar/statements/prepare.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 20499 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 907:
#line 2 "third_party/libpg_query/grammar/statements/variable_reset.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) (yyvsp[0].vsetstmt); }
#line 20505 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 908:
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 20516 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 909:
#line 15 "third_party/libpg_query/grammar/statements/variable_reset.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					(yyval.vsetstmt) = n;
				}
#line 20526 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 910:
#line 24 "third_party/libpg_query/grammar/statements/variable_reset.y" /* yacc.c:1646  */
    { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 20532 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 911:
#line 26 "third_party/libpg_query/grammar/statements/variable_reset.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 20543 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 912:
#line 33 "third_party/libpg_query/grammar/statements/variable_reset.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 20554 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 913:
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y" /* yacc.c:1646  */
    {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20564 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 914:
#line 12 "third_party/libpg_query/grammar/statements/checkpoint.y" /* yacc.c:1646  */
    {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20574 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 915:
#line 7 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20587 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 916:
#line 16 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20601 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 917:
#line 26 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20615 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 918:
#line 36 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20629 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 919:
#line 46 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20643 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 920:
#line 56 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20657 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 921:
#line 66 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20671 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 922:
#line 76 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20685 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 923:
#line 86 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20699 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 924:
#line 96 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20714 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 925:
#line 107 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20729 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 926:
#line 118 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20743 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 927:
#line 128 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20757 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 928:
#line 140 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    { (yyval.ival) = COLUMN; }
#line 20763 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 929:
#line 141 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    { (yyval.ival) = 0; }
#line 20769 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 930:
#line 8 "third_party/libpg_query/grammar/statements/pragma.y" /* yacc.c:1646  */
    {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20780 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 931:
#line 15 "third_party/libpg_query/grammar/statements/pragma.y" /* yacc.c:1646  */
    {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20792 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 932:
#line 23 "third_party/libpg_query/grammar/statements/pragma.y" /* yacc.c:1646  */
    {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20804 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 933:
#line 10 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20818 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 934:
#line 20 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20832 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 935:
#line 30 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20846 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 936:
#line 40 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20860 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 937:
#line 50 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 20874 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 938:
#line 60 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 20888 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 939:
#line 73 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 20894 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 940:
#line 74 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 20900 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 941:
#line 75 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 20906 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 942:
#line 76 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 20912 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 943:
#line 77 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 20918 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 944:
#line 78 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 20924 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 945:
#line 79 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 20930 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 946:
#line 80 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 20936 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 947:
#line 81 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 20942 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 948:
#line 82 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 20948 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 949:
#line 83 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 20954 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 950:
#line 84 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 20960 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 951:
#line 85 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 20966 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 952:
#line 86 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 20972 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 953:
#line 87 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 20978 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 954:
#line 92 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 20984 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 955:
#line 93 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 20990 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 956:
#line 94 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 20996 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 957:
#line 95 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_FDW; }
#line 21002 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 958:
#line 96 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 21008 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 959:
#line 97 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 21014 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 960:
#line 98 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 21020 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 961:
#line 103 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 21026 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 962:
#line 104 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 21032 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 963:
#line 109 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 21038 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 964:
#line 110 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 21044 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 965:
#line 111 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 21050 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 966:
#line 116 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 21056 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 967:
#line 117 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_RULE; }
#line 21062 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 968:
#line 118 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 21068 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 969:
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21080 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 970:
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21092 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 971:
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 21098 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 972:
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 21104 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 973:
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {}
#line 21110 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 974:
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {}
#line 21116 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 975:
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {}
#line 21122 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 976:
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 21128 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 977:
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 21134 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 978:
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 21143 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 979:
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 21149 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 980:
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 21157 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 981:
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21165 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 982:
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 21173 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 983:
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 21181 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 984:
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21189 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 985:
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21197 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 986:
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21205 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 987:
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 21213 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 988:
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 21221 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 989:
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 21229 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 990:
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 21238 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 991:
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21246 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 992:
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 21254 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 993:
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21262 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 994:
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {}
#line 21268 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 995:
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {}
#line 21274 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 996:
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    { (yyval.ival) = (yyvsp[0].ival); }
#line 21280 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 997:
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    { (yyval.ival) = + (yyvsp[0].ival); }
#line 21286 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 998:
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    { (yyval.ival) = - (yyvsp[0].ival); }
#line 21292 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 999:
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y" /* yacc.c:1646  */
    {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->if_not_exists = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21306 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1000:
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y" /* yacc.c:1646  */
    {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->if_not_exists = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21320 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1001:
#line 32 "third_party/libpg_query/grammar/statements/create_sequence.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 21326 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1002:
#line 33 "third_party/libpg_query/grammar/statements/create_sequence.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 21332 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1003:
#line 3 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 21364 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1004:
#line 31 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 21387 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1005:
#line 53 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 21393 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1006:
#line 54 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 21399 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1007:
#line 60 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 21407 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1008:
#line 63 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.defelt) = NULL; }
#line 21413 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1009:
#line 69 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 21421 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1010:
#line 73 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 21429 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1011:
#line 80 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {}
#line 21435 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1012:
#line 81 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {}
#line 21441 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1013:
#line 85 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {}
#line 21447 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1014:
#line 86 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {}
#line 21453 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1015:
#line 91 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 21459 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1016:
#line 92 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 21465 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1017:
#line 96 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 21471 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1018:
#line 97 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 21477 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1019:
#line 102 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 21483 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1020:
#line 103 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 21489 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1021:
#line 104 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 21495 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1022:
#line 105 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 21501 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1023:
#line 106 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 21507 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1024:
#line 112 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 21515 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1025:
#line 120 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 21523 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1026:
#line 123 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.defelt) = NULL; }
#line 21529 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1027:
#line 128 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 21535 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1028:
#line 129 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 21541 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1029:
#line 135 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 21549 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1030:
#line 138 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.defelt) = NULL; }
#line 21555 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1031:
#line 144 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 21563 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1032:
#line 148 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 21571 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1033:
#line 152 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 21579 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1034:
#line 156 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 21587 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1035:
#line 160 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 21595 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1036:
#line 164 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 21603 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1037:
#line 168 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 21611 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1038:
#line 172 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 21619 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1039:
#line 176 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 21627 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1040:
#line 180 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 21635 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1041:
#line 184 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 21643 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1042:
#line 188 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 21651 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1043:
#line 192 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 21659 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1044:
#line 196 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 21667 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1045:
#line 203 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 21673 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1046:
#line 209 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 21679 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1047:
#line 210 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.str) = NULL; }
#line 21685 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1048:
#line 211 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.str) = NULL; }
#line 21691 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1049:
#line 217 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 21699 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1050:
#line 221 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 21707 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1051:
#line 8 "third_party/libpg_query/grammar/statements/create_function.y" /* yacc.c:1646  */
    {
					PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
					n->name = (yyvsp[-3].range);
					n->params = (yyvsp[-2].list);
					n->function = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 21719 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1054:
#line 24 "third_party/libpg_query/grammar/statements/create_function.y" /* yacc.c:1646  */
    {
				(yyval.list) = NIL;
			}
#line 21727 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1055:
#line 28 "third_party/libpg_query/grammar/statements/create_function.y" /* yacc.c:1646  */
    {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 21735 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1056:
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21748 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1057:
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21761 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1058:
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21774 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1059:
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21787 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1060:
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21800 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1061:
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21813 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1062:
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21826 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1063:
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21839 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1064:
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 21845 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1065:
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 21851 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1066:
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 21857 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1067:
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 21863 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1068:
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 21871 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1069:
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21879 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1070:
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 21894 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1071:
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 21902 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1072:
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 21910 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1073:
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 21918 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1074:
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21930 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1075:
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21942 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1076:
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21954 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1077:
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21966 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1078:
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 21978 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1079:
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21989 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1080:
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 22000 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1081:
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 22012 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1082:
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22024 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1083:
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22036 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1084:
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 22048 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1085:
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 22068 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1086:
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22080 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1087:
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22092 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1088:
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22104 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1089:
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22117 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1090:
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22130 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1091:
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 22148 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1092:
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22160 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1093:
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22171 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1094:
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22189 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1095:
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 22200 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1096:
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22213 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1097:
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22226 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1098:
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 22236 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1099:
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 22246 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1100:
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22257 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1101:
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22268 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1102:
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 22279 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1103:
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 22285 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1104:
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 22291 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1105:
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 22299 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1106:
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 22308 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1107:
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 22317 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1108:
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 22325 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1109:
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 22331 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1110:
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 22337 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1111:
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 22343 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1112:
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    { (yyval.ival) = 1; }
#line 22349 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1113:
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    { (yyval.ival) = 0; }
#line 22355 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1114:
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->is_local = false;
					(yyval.node) = (PGNode *) n;
				}
#line 22365 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1115:
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->is_local = true;
					(yyval.node) = (PGNode *) n;
				}
#line 22375 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1116:
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->is_local = false;
					(yyval.node) = (PGNode *) n;
				}
#line 22385 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1117:
#line 32 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 22391 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1118:
#line 34 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 22402 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1119:
#line 42 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 22417 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1120:
#line 53 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 22429 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1121:
#line 65 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 22441 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1122:
#line 73 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 22453 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1123:
#line 81 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 22464 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1124:
#line 88 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 22475 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1125:
#line 98 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 22481 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1126:
#line 100 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 22487 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1127:
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 22495 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1128:
#line 110 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 22503 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1129:
#line 114 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 22522 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1130:
#line 129 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 22533 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1131:
#line 135 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 22539 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1132:
#line 136 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 22545 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1133:
#line 137 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 22551 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1134:
#line 141 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 22557 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1135:
#line 142 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 22563 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1136:
#line 10 "third_party/libpg_query/grammar/statements/analyze.y" /* yacc.c:1646  */
    {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 22577 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1137:
#line 20 "third_party/libpg_query/grammar/statements/analyze.y" /* yacc.c:1646  */
    {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22591 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1138:
#line 12 "third_party/libpg_query/grammar/statements/update.y" /* yacc.c:1646  */
    {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 22606 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1139:
#line 3 "third_party/libpg_query/grammar/statements/transaction.y" /* yacc.c:1646  */
    {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 22617 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1140:
#line 10 "third_party/libpg_query/grammar/statements/transaction.y" /* yacc.c:1646  */
    {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 22627 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1141:
#line 16 "third_party/libpg_query/grammar/statements/transaction.y" /* yacc.c:1646  */
    {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 22637 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1142:
#line 22 "third_party/libpg_query/grammar/statements/transaction.y" /* yacc.c:1646  */
    {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 22648 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1143:
#line 29 "third_party/libpg_query/grammar/statements/transaction.y" /* yacc.c:1646  */
    {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 22659 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1144:
#line 36 "third_party/libpg_query/grammar/statements/transaction.y" /* yacc.c:1646  */
    {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 22670 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1145:
#line 45 "third_party/libpg_query/grammar/statements/transaction.y" /* yacc.c:1646  */
    {}
#line 22676 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1146:
#line 46 "third_party/libpg_query/grammar/statements/transaction.y" /* yacc.c:1646  */
    {}
#line 22682 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1147:
#line 47 "third_party/libpg_query/grammar/statements/transaction.y" /* yacc.c:1646  */
    {}
#line 22688 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1148:
#line 8 "third_party/libpg_query/grammar/statements/execute.y" /* yacc.c:1646  */
    {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 22699 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1149:
#line 16 "third_party/libpg_query/grammar/statements/execute.y" /* yacc.c:1646  */
    {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->if_not_exists = false;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 22719 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1150:
#line 33 "third_party/libpg_query/grammar/statements/execute.y" /* yacc.c:1646  */
    {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->if_not_exists = true;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 22739 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1151:
#line 51 "third_party/libpg_query/grammar/statements/execute.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 22745 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1152:
#line 52 "third_party/libpg_query/grammar/statements/execute.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 22751 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1153:
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y" /* yacc.c:1646  */
    {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22764 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1154:
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y" /* yacc.c:1646  */
    {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22777 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1155:
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y" /* yacc.c:1646  */
    {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22790 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1156:
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y" /* yacc.c:1646  */
    {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22803 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1157:
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y" /* yacc.c:1646  */
    {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22816 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1158:
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y" /* yacc.c:1646  */
    {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22829 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1159:
#line 10 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyvsp[-2].istmt)->relation = (yyvsp[-3].range);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 22841 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1160:
#line 22 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 22851 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1161:
#line 28 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 22862 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1162:
#line 35 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 22872 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1163:
#line 41 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 22883 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1164:
#line 48 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 22893 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1165:
#line 58 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.range) = (yyvsp[0].range);
				}
#line 22901 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1166:
#line 62 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 22910 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1167:
#line 71 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 22922 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1168:
#line 80 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 22934 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1169:
#line 88 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.infer) = NULL;
				}
#line 22942 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1170:
#line 95 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.with) = (yyvsp[0].with); }
#line 22948 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1171:
#line 96 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.with) = NULL; }
#line 22954 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1172:
#line 102 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 22966 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1173:
#line 114 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 22975 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1174:
#line 119 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 23000 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1175:
#line 144 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 23013 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1176:
#line 154 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 23026 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1177:
#line 163 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.onconflict) = NULL;
				}
#line 23034 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1178:
#line 170 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 23049 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1179:
#line 181 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 23064 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1180:
#line 192 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 23079 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1181:
#line 206 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 23085 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1182:
#line 207 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 23091 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1183:
#line 213 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 23097 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1184:
#line 214 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 23103 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1185:
#line 219 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 23109 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1186:
#line 220 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 23115 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1187:
#line 226 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 23121 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1188:
#line 227 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 23127 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1189:
#line 231 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 23133 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1190:
#line 232 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 23139 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1191:
#line 238 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 23145 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1192:
#line 240 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 23151 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1193:
#line 245 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 23157 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1194:
#line 246 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 23163 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1195:
#line 250 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 23169 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1196:
#line 251 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 23175 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1197:
#line 257 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 23187 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;


#line 23191 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (&yylloc, yyscanner, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[1] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[*yyssp], yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
#line 273 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1906  */


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	n->seed = seed;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	return (PGNode *) p;
}

static PGNode *
makeParamRefCast(int number, int location, PGTypeName *tpname)
{
	PGNode *p = makeParamRef(number, location);
	return makeTypeCast(p, tpname, -1);
}

/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make2(makeString(DEFAULT_SCHEMA),
											   makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

static PGNode *
makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod, int location)
{
	PGSQLValueFunction *svf = makeNode(PGSQLValueFunction);

	svf->op = op;
	/* svf->type will be filled during parse analysis */
	svf->typmod = typmod;
	svf->location = location;
	return (PGNode *) svf;
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
