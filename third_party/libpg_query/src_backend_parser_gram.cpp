/* A Bison parser, made by GNU Bison 3.5.1.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2020 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Undocumented macros, especially those whose name start with YY_,
   are private implementation details.  Do not rely on them.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.5.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static PGNode *makeParamRefCast(int number, int location, PGTypeName *tpname);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static PGNode *makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod,
								  int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);


#line 241 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Use api.header.include to #include this header
   instead of duplicating it here.  */
#ifndef YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED
# define YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int base_yydebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    IDENT = 258,
    FCONST = 259,
    SCONST = 260,
    BCONST = 261,
    XCONST = 262,
    Op = 263,
    ICONST = 264,
    PARAM = 265,
    TYPECAST = 266,
    DOT_DOT = 267,
    COLON_EQUALS = 268,
    EQUALS_GREATER = 269,
    LAMBDA_ARROW = 270,
    LESS_EQUALS = 271,
    GREATER_EQUALS = 272,
    NOT_EQUALS = 273,
    ABORT_P = 274,
    ABSOLUTE_P = 275,
    ACCESS = 276,
    ACTION = 277,
    ADD_P = 278,
    ADMIN = 279,
    AFTER = 280,
    AGGREGATE = 281,
    ALL = 282,
    ALSO = 283,
    ALTER = 284,
    ALWAYS = 285,
    ANALYSE = 286,
    ANALYZE = 287,
    AND = 288,
    ANY = 289,
    ARRAY = 290,
    AS = 291,
    ASC_P = 292,
    ASSERTION = 293,
    ASSIGNMENT = 294,
    ASYMMETRIC = 295,
    AT = 296,
    ATTACH = 297,
    ATTRIBUTE = 298,
    AUTHORIZATION = 299,
    BACKWARD = 300,
    BEFORE = 301,
    BEGIN_P = 302,
    BETWEEN = 303,
    BIGINT = 304,
    BINARY = 305,
    BIT = 306,
    BOOLEAN_P = 307,
    BOTH = 308,
    BY = 309,
    CACHE = 310,
    CALL_P = 311,
    CALLED = 312,
    CASCADE = 313,
    CASCADED = 314,
    CASE = 315,
    CAST = 316,
    CATALOG_P = 317,
    CHAIN = 318,
    CHAR_P = 319,
    CHARACTER = 320,
    CHARACTERISTICS = 321,
    CHECK_P = 322,
    CHECKPOINT = 323,
    CLASS = 324,
    CLOSE = 325,
    CLUSTER = 326,
    COALESCE = 327,
    COLLATE = 328,
    COLLATION = 329,
    COLUMN = 330,
    COLUMNS = 331,
    COMMENT = 332,
    COMMENTS = 333,
    COMMIT = 334,
    COMMITTED = 335,
    CONCURRENTLY = 336,
    CONFIGURATION = 337,
    CONFLICT = 338,
    CONNECTION = 339,
    CONSTRAINT = 340,
    CONSTRAINTS = 341,
    CONTENT_P = 342,
    CONTINUE_P = 343,
    CONVERSION_P = 344,
    COPY = 345,
    COST = 346,
    CREATE_P = 347,
    CROSS = 348,
    CSV = 349,
    CUBE = 350,
    CURRENT_P = 351,
    CURRENT_CATALOG = 352,
    CURRENT_DATE = 353,
    CURRENT_ROLE = 354,
    CURRENT_SCHEMA = 355,
    CURRENT_TIME = 356,
    CURRENT_TIMESTAMP = 357,
    CURRENT_USER = 358,
    CURSOR = 359,
    CYCLE = 360,
    DATA_P = 361,
    DATABASE = 362,
    DAY_P = 363,
    DAYS_P = 364,
    DEALLOCATE = 365,
    DEC = 366,
    DECIMAL_P = 367,
    DECLARE = 368,
    DEFAULT = 369,
    DEFAULTS = 370,
    DEFERRABLE = 371,
    DEFERRED = 372,
    DEFINER = 373,
    DELETE_P = 374,
    DELIMITER = 375,
    DELIMITERS = 376,
    DEPENDS = 377,
    DESC_P = 378,
    DESCRIBE = 379,
    DESTINATION = 380,
    DETACH = 381,
    DICTIONARY = 382,
    DISABLE_P = 383,
    DISCARD = 384,
    DISTINCT = 385,
    DO = 386,
    DOCUMENT_P = 387,
    DOMAIN_P = 388,
    DOUBLE_P = 389,
    DROP = 390,
    EACH = 391,
    EDGE = 392,
    ELSE = 393,
    ENABLE_P = 394,
    ENCODING = 395,
    ENCRYPTED = 396,
    END_P = 397,
    ENUM_P = 398,
    ESCAPE = 399,
    EVENT = 400,
    EXCEPT = 401,
    EXCLUDE = 402,
    EXCLUDING = 403,
    EXCLUSIVE = 404,
    EXECUTE = 405,
    EXISTS = 406,
    EXPLAIN = 407,
    EXPORT_P = 408,
    EXTENSION = 409,
    EXTERNAL = 410,
    EXTRACT = 411,
    FALSE_P = 412,
    FAMILY = 413,
    FETCH = 414,
    FILTER = 415,
    FIRST_P = 416,
    FLOAT_P = 417,
    FOLLOWING = 418,
    FOR = 419,
    FORCE = 420,
    FOREIGN = 421,
    FORWARD = 422,
    FREEZE = 423,
    FROM = 424,
    FULL = 425,
    FUNCTION = 426,
    FUNCTIONS = 427,
    GENERATED = 428,
    GLOB = 429,
    GLOBAL = 430,
    GRANT = 431,
    GRANTED = 432,
    GRAPH = 433,
    GRAPH_TABLE = 434,
    GROUP_P = 435,
    GROUPING = 436,
    HANDLER = 437,
    HAVING = 438,
    HEADER_P = 439,
    HOLD = 440,
    HOUR_P = 441,
    HOURS_P = 442,
    IDENTITY_P = 443,
    IF_P = 444,
    ILIKE = 445,
    IMMEDIATE = 446,
    IMMUTABLE = 447,
    IMPLICIT_P = 448,
    IMPORT_P = 449,
    IN_P = 450,
    INCLUDING = 451,
    INCREMENT = 452,
    INDEX = 453,
    INDEXES = 454,
    INHERIT = 455,
    INHERITS = 456,
    INITIALLY = 457,
    INLINE_P = 458,
    INNER_P = 459,
    INOUT = 460,
    INPUT_P = 461,
    INSENSITIVE = 462,
    INSERT = 463,
    INSTEAD = 464,
    INT_P = 465,
    INTEGER = 466,
    INTERSECT = 467,
    INTERVAL = 468,
    INTO = 469,
    INVOKER = 470,
    IS = 471,
    ISNULL = 472,
    ISOLATION = 473,
    JOIN = 474,
    KEY = 475,
    LABEL = 476,
    LANGUAGE = 477,
    LARGE_P = 478,
    LAST_P = 479,
    LATERAL_P = 480,
    LEADING = 481,
    LEAKPROOF = 482,
    LEFT = 483,
    LEVEL = 484,
    LIKE = 485,
    LIMIT = 486,
    LISTEN = 487,
    LOAD = 488,
    LOCAL = 489,
    LOCALTIME = 490,
    LOCALTIMESTAMP = 491,
    LOCATION = 492,
    LOCK_P = 493,
    LOCKED = 494,
    LOGGED = 495,
    MACRO = 496,
    MAPPING = 497,
    MATCH = 498,
    MATERIALIZED = 499,
    MAXVALUE = 500,
    METHOD = 501,
    MICROSECOND_P = 502,
    MICROSECONDS_P = 503,
    MILLISECOND_P = 504,
    MILLISECONDS_P = 505,
    MINUTE_P = 506,
    MINUTES_P = 507,
    MINVALUE = 508,
    MODE = 509,
    MONTH_P = 510,
    MONTHS_P = 511,
    MOVE = 512,
    NAME_P = 513,
    NAMES = 514,
    NATIONAL = 515,
    NATURAL = 516,
    NCHAR = 517,
    NEW = 518,
    NEXT = 519,
    NO = 520,
    NODE = 521,
    NONE = 522,
    NOT = 523,
    NOTHING = 524,
    NOTIFY = 525,
    NOTNULL = 526,
    NOWAIT = 527,
    NULL_P = 528,
    NULLIF = 529,
    NULLS_P = 530,
    NUMERIC = 531,
    OBJECT_P = 532,
    OF = 533,
    OFF = 534,
    OFFSET = 535,
    OIDS = 536,
    OLD = 537,
    ON = 538,
    ONLY = 539,
    OPERATOR = 540,
    OPTION = 541,
    OPTIONS = 542,
    OR = 543,
    ORDER = 544,
    ORDINALITY = 545,
    OUT_P = 546,
    OUTER_P = 547,
    OVER = 548,
    OVERLAPS = 549,
    OVERLAY = 550,
    OVERRIDING = 551,
    OWNED = 552,
    OWNER = 553,
    PARALLEL = 554,
    PARSER = 555,
    PARTIAL = 556,
    PARTITION = 557,
    PASSING = 558,
    PASSWORD = 559,
    PERCENT = 560,
    PLACING = 561,
    PLANS = 562,
    POLICY = 563,
    POSITION = 564,
    PRAGMA_P = 565,
    PRECEDING = 566,
    PRECISION = 567,
    PREPARE = 568,
    PREPARED = 569,
    PRESERVE = 570,
    PRIMARY = 571,
    PRIOR = 572,
    PRIVILEGES = 573,
    PROCEDURAL = 574,
    PROCEDURE = 575,
    PROGRAM = 576,
    PROPERTIES = 577,
    PROPERTY = 578,
    PUBLICATION = 579,
    QUOTE = 580,
    RANGE = 581,
    READ_P = 582,
    REAL = 583,
    REASSIGN = 584,
    RECHECK = 585,
    RECURSIVE = 586,
    REF = 587,
    REFERENCES = 588,
    REFERENCING = 589,
    REFRESH = 590,
    REINDEX = 591,
    RELATIONSHIP = 592,
    RELATIVE_P = 593,
    RELEASE = 594,
    RENAME = 595,
    REPEATABLE = 596,
    REPLACE = 597,
    REPLICA = 598,
    RESET = 599,
    RESTART = 600,
    RESTRICT = 601,
    RETURNING = 602,
    RETURNS = 603,
    REVOKE = 604,
    RIGHT = 605,
    ROLE = 606,
    ROLLBACK = 607,
    ROLLUP = 608,
    ROW = 609,
    ROWS = 610,
    RULE = 611,
    SAMPLE = 612,
    SAVEPOINT = 613,
    SCHEMA = 614,
    SCHEMAS = 615,
    SCROLL = 616,
    SEARCH = 617,
    SECOND_P = 618,
    SECONDS_P = 619,
    SECURITY = 620,
    SELECT = 621,
    SEQUENCE = 622,
    SEQUENCES = 623,
    SERIALIZABLE = 624,
    SERVER = 625,
    SESSION = 626,
    SESSION_USER = 627,
    SET = 628,
    SETOF = 629,
    SETS = 630,
    SHARE = 631,
    SHOW = 632,
    SIMILAR = 633,
    SIMPLE = 634,
    SKIP = 635,
    SMALLINT = 636,
    SNAPSHOT = 637,
    SOME = 638,
    SOURCE = 639,
    SQL_P = 640,
    STABLE = 641,
    STANDALONE_P = 642,
    START = 643,
    STATEMENT = 644,
    STATISTICS = 645,
    STDIN = 646,
    STDOUT = 647,
    STORAGE = 648,
    STRICT_P = 649,
    STRIP_P = 650,
    STRUCT = 651,
    SUBSCRIPTION = 652,
    SUBSTRING = 653,
    SYMMETRIC = 654,
    SYSID = 655,
    SYSTEM_P = 656,
    TABLE = 657,
    TABLES = 658,
    TABLESAMPLE = 659,
    TABLESPACE = 660,
    TEMP = 661,
    TEMPLATE = 662,
    TEMPORARY = 663,
    TEXT_P = 664,
    THEN = 665,
    TIME = 666,
    TIMESTAMP = 667,
    TO = 668,
    TRAILING = 669,
    TRANSACTION = 670,
    TRANSFORM = 671,
    TREAT = 672,
    TRIGGER = 673,
    TRIM = 674,
    TRUE_P = 675,
    TRUNCATE = 676,
    TRUSTED = 677,
    TYPE_P = 678,
    TYPES_P = 679,
    UNBOUNDED = 680,
    UNCOMMITTED = 681,
    UNENCRYPTED = 682,
    UNION = 683,
    UNIQUE = 684,
    UNKNOWN = 685,
    UNLISTEN = 686,
    UNLOGGED = 687,
    UNTIL = 688,
    UPDATE = 689,
    USER = 690,
    USING = 691,
    VACUUM = 692,
    VALID = 693,
    VALIDATE = 694,
    VALIDATOR = 695,
    VALUE_P = 696,
    VALUES = 697,
    VARCHAR = 698,
    VARIADIC = 699,
    VARYING = 700,
    VERBOSE = 701,
    VERSION_P = 702,
    VERTEX = 703,
    VIEW = 704,
    VIEWS = 705,
    VOLATILE = 706,
    WHEN = 707,
    WHERE = 708,
    WHITESPACE_P = 709,
    WINDOW = 710,
    WITH = 711,
    WITHIN = 712,
    WITHOUT = 713,
    WORK = 714,
    WRAPPER = 715,
    WRITE_P = 716,
    XML_P = 717,
    XMLATTRIBUTES = 718,
    XMLCONCAT = 719,
    XMLELEMENT = 720,
    XMLEXISTS = 721,
    XMLFOREST = 722,
    XMLNAMESPACES = 723,
    XMLPARSE = 724,
    XMLPI = 725,
    XMLROOT = 726,
    XMLSERIALIZE = 727,
    XMLTABLE = 728,
    YEAR_P = 729,
    YEARS_P = 730,
    YES_P = 731,
    ZONE = 732,
    NOT_LA = 733,
    NULLS_LA = 734,
    WITH_LA = 735,
    POSTFIXOP = 736,
    UMINUS = 737
  };
#endif

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
union YYSTYPE
{
#line 14 "third_party/libpg_query/grammar/grammar.y"

	core_YYSTYPE		core_yystype;
	/* these fields must match core_YYSTYPE: */
	int					ival;
	char				*str;
	const char			*keyword;
	const char          *conststr;

	char				chr;
	bool				boolean;
	PGJoinType			jtype;
	PGDropBehavior		dbehavior;
	PGOnCommitAction		oncommit;
	PGList				*list;
	PGNode				*node;
	PGValue				*value;
	PGObjectType			objtype;
	PGTypeName			*typnam;
	PGObjectWithArgs		*objwithargs;
	PGDefElem				*defelt;
	PGSortBy				*sortby;
	PGWindowDef			*windef;
	PGJoinExpr			*jexpr;
	PGIndexElem			*ielem;
	PGAlias				*alias;
	PGRangeVar			*range;
	PGIntoClause			*into;
	PGWithClause			*with;
	PGInferClause			*infer;
	PGOnConflictClause	*onconflict;
	PGAIndices			*aind;
	PGResTarget			*target;
	PGInsertStmt			*istmt;
	PGVariableSetStmt		*vsetstmt;
	PGOverridingKind       override;
	PGSortByDir            sortorder;
	PGSortByNulls          nullorder;
	PGLockClauseStrength lockstrength;
	PGLockWaitPolicy lockwaitpolicy;
	PGSubLinkType subquerytype;
	PGViewCheckOption viewcheckoption;

#line 819 "third_party/libpg_query/grammar/grammar_out.cpp"

};
typedef union YYSTYPE YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif

/* Location type.  */
#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE YYLTYPE;
struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
};
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif



int base_yyparse (core_yyscan_t yyscanner);

#endif /* !YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED  */



#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))

/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && ! defined __ICC && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                            \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  575
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   48886

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  501
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  392
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1697
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  2821

#define YYUNDEFTOK  2
#define YYMAXUTOK   737


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,   489,     2,     2,
     494,   495,   487,   485,   498,   486,   496,   488,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   500,   497,
     481,   483,   482,   499,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   492,     2,   493,   490,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   484,   491
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   482,   482,   498,   510,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   537,   538,   539,   540,   541,   542,   543,
     544,   545,   546,   547,   548,   549,   550,   551,   552,   553,
     555,     6,     9,    16,    26,    33,    44,    45,    50,    51,
      52,    57,    58,    59,    60,    61,    65,    66,    67,    68,
      73,    74,    79,    83,    91,    92,    97,    98,    99,   105,
     110,   118,   119,     7,    21,    41,    42,    69,    70,    71,
      72,    73,    74,    78,    79,    84,    89,    90,    91,    92,
      93,    98,   105,   106,   107,   124,   131,   138,   148,   158,
     170,   179,   188,   207,   214,   219,   221,   223,   225,   228,
     233,   234,   238,   239,   240,   241,   246,   250,   251,   256,
     263,   268,   269,   270,   271,   272,   273,   274,   275,   281,
     282,   286,   291,   298,   305,   312,   324,   325,   326,   327,
     331,   336,   337,   338,   343,   348,   349,   350,   351,   352,
     353,   358,   381,   385,   392,   393,   397,   401,   402,   403,
     407,   411,   419,   420,   425,   426,   430,   438,   439,   444,
     445,   449,   454,   458,   462,   467,   475,   476,   480,   481,
     487,   498,   511,   525,   539,   553,   567,   590,   594,   601,
     605,   613,   618,   625,   635,   636,   637,   638,   639,   646,
     653,   654,   659,   660,    11,    24,    41,    42,    43,    48,
       3,    10,    16,    22,    28,    37,    37,    39,    40,     8,
      21,    34,    52,    74,    75,    76,    77,     7,    21,    25,
      32,    43,    44,    50,    51,    47,    48,    52,    53,    68,
      69,    76,    84,    92,   100,   108,   116,   127,   128,   155,
     170,   186,   187,   206,   210,   214,   235,   242,   249,   259,
     260,   263,   275,   286,   294,   299,   304,   309,   314,   322,
     330,   335,   340,   347,   348,   352,   353,   354,   361,   362,
     366,   367,   371,   372,   376,   380,   381,   384,   393,   404,
     405,   406,   409,   410,   411,   415,   416,   417,   418,   422,
     423,   427,   429,   445,   447,   452,   455,   463,   467,   471,
     475,   479,   483,   490,   495,   502,   503,   507,   511,   515,
     519,   526,   533,   534,   539,   540,   544,   545,   553,   573,
     574,   576,   581,   582,   586,   587,   590,   591,   616,   617,
     621,   622,   626,   627,   631,   644,   645,   649,   650,   654,
     655,   659,   660,   664,   675,   676,   677,   678,   682,   683,
     688,   689,   690,   699,   705,   723,   725,   729,   730,   736,
     742,   750,   758,   794,   820,   824,   829,   854,   858,   871,
     885,   900,   912,   928,   934,   939,   945,   952,   953,   961,
     965,   969,   975,   982,   987,   988,   989,   990,   994,   995,
    1007,  1008,  1013,  1020,  1027,  1034,  1066,  1077,  1090,  1095,
    1096,  1099,  1100,  1103,  1104,  1109,  1110,  1115,  1119,  1125,
    1146,  1154,  1167,  1170,  1174,  1174,  1176,  1181,  1188,  1193,
    1199,  1204,  1210,  1218,  1220,  1223,  1227,  1228,  1229,  1230,
    1231,  1232,  1237,  1257,  1258,  1259,  1260,  1271,  1277,  1285,
    1286,  1292,  1297,  1302,  1307,  1312,  1317,  1322,  1327,  1333,
    1339,  1345,  1352,  1374,  1383,  1387,  1395,  1399,  1407,  1419,
    1440,  1444,  1450,  1454,  1467,  1475,  1485,  1487,  1489,  1491,
    1493,  1495,  1500,  1501,  1508,  1517,  1525,  1534,  1545,  1553,
    1554,  1555,  1559,  1559,  1562,  1562,  1565,  1565,  1568,  1568,
    1571,  1571,  1574,  1574,  1577,  1577,  1580,  1580,  1583,  1585,
    1587,  1589,  1591,  1593,  1595,  1597,  1599,  1604,  1609,  1615,
    1622,  1627,  1633,  1639,  1670,  1672,  1674,  1682,  1697,  1699,
    1701,  1703,  1705,  1707,  1709,  1711,  1713,  1715,  1717,  1719,
    1721,  1723,  1726,  1728,  1730,  1733,  1735,  1737,  1739,  1742,
    1747,  1752,  1759,  1764,  1771,  1776,  1784,  1789,  1798,  1806,
    1814,  1822,  1840,  1848,  1856,  1864,  1872,  1880,  1884,  1892,
    1900,  1916,  1924,  1932,  1940,  1948,  1956,  1964,  1968,  1972,
    1976,  1980,  1988,  1996,  2004,  2012,  2032,  2054,  2065,  2072,
    2097,  2099,  2101,  2103,  2105,  2107,  2109,  2111,  2113,  2115,
    2117,  2119,  2121,  2123,  2125,  2127,  2129,  2131,  2133,  2135,
    2139,  2143,  2147,  2161,  2162,  2163,  2175,  2190,  2202,  2204,
    2206,  2217,  2241,  2254,  2258,  2264,  2271,  2278,  2288,  2295,
    2323,  2358,  2369,  2370,  2377,  2383,  2387,  2391,  2395,  2399,
    2403,  2407,  2411,  2415,  2419,  2423,  2427,  2431,  2435,  2439,
    2443,  2445,  2449,  2458,  2463,  2470,  2485,  2492,  2496,  2500,
    2504,  2508,  2522,  2523,  2527,  2528,  2536,  2537,  2541,  2542,
    2547,  2555,  2557,  2571,  2574,  2601,  2602,  2605,  2606,  2617,
    2635,  2642,  2651,  2668,  2713,  2721,  2729,  2737,  2745,  2766,
    2767,  2770,  2771,  2774,  2775,  2776,  2779,  2780,  2783,  2784,
    2785,  2786,  2787,  2788,  2789,  2790,  2791,  2792,  2793,  2794,
    2797,  2799,  2804,  2806,  2811,  2813,  2815,  2817,  2819,  2821,
    2823,  2825,  2839,  2841,  2845,  2849,  2856,  2860,  2866,  2870,
    2879,  2890,  2891,  2895,  2899,  2906,  2907,  2908,  2909,  2910,
    2911,  2912,  2913,  2914,  2915,  2925,  2929,  2936,  2943,  2944,
    2960,  2964,  2969,  2973,  2988,  2993,  2997,  3000,  3003,  3004,
    3005,  3008,  3015,  3025,  3039,  3040,  3044,  3055,  3056,  3059,
    3060,  3063,  3067,  3074,  3078,  3082,  3090,  3101,  3102,  3106,
    3107,  3111,  3112,  3115,  3116,  3126,  3127,  3131,  3132,  3135,
    3151,  3159,  3167,  3189,  3190,  3201,  3205,  3232,  3234,  3239,
    3241,  3251,  3253,  3264,  3268,  3272,  3276,  3280,  3289,  3296,
    3328,  3332,  3336,  3340,  3344,  3348,  3352,  3358,  3359,  3375,
    3376,  3377,  3380,  3381,  3386,  3387,  3388,  3391,  3392,  3395,
    3397,  3402,  3403,  3406,  3414,  3415,  3416,  3417,  3418,  3421,
    3422,    11,    24,    35,    36,    41,    42,    47,    48,    52,
      66,    70,    71,    75,    81,    82,    86,     7,    16,     7,
      20,     7,    13,    19,    25,     8,    33,    62,    66,    67,
      72,    73,    78,    79,    83,    84,    89,    90,     7,    53,
      54,    58,    62,    82,    86,    94,    95,    99,   100,   104,
     105,   110,   118,   126,   141,   142,   146,   150,   151,   155,
     156,   161,   174,   187,   189,   197,   198,   199,   205,   214,
     227,   237,   250,   259,   271,   272,   273,     7,    16,    34,
      41,    46,    47,    48,    49,     8,    22,    36,    48,    56,
      70,    71,    72,    73,    74,    87,    88,    93,    94,    98,
      99,     7,    18,    19,    23,    24,    25,    26,     2,     7,
      14,    24,    25,    32,     5,    11,     6,    15,    25,    35,
      45,    55,    65,    75,    85,    95,   106,   117,   127,   140,
     141,     7,    14,    22,     9,    19,    29,    39,    49,    59,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    92,    93,    94,    95,    96,
      97,    98,   103,   104,   109,   110,   111,   116,   117,   118,
       9,    17,    29,    30,    34,    35,    36,    41,    42,    43,
      48,    52,    56,    60,    64,    68,    72,    76,    80,    84,
      88,    92,    97,   101,   105,   112,   113,   117,   118,   119,
       9,    19,    32,    33,     1,    30,    53,    54,    59,    63,
      68,    72,    80,    81,    85,    86,    91,    92,    96,    97,
     102,   103,   104,   105,   106,   111,   119,   123,   128,   129,
     134,   138,   143,   147,   151,   155,   159,   163,   167,   171,
     175,   179,   183,   187,   191,   195,   203,   209,   210,   211,
     216,   220,     7,    18,    19,    23,    27,     9,    18,    27,
      36,    45,    54,    63,    72,    85,    87,    93,    94,    99,
     103,   107,   118,   126,   130,   139,   148,   157,   166,   175,
     184,   192,   200,   209,   218,   227,   236,   253,   262,   271,
     280,   290,   303,   318,   327,   335,   350,   358,   368,   378,
     385,   392,   400,   407,   418,   419,   424,   428,   433,   438,
     446,   447,   452,   456,   457,    10,    16,    22,    32,    33,
      41,    52,    64,    72,    80,    87,    97,    99,   105,   109,
     113,   128,   135,   136,   137,   141,   142,     9,    19,     7,
       2,     9,    15,    21,    28,    35,    45,    46,    47,     7,
      14,    31,    51,    52,     7,    16,    25,    34,    43,    52,
       8,    21,    28,    35,    41,    48,    58,    62,    71,    80,
      89,    96,    97,   102,   114,   119,   144,   154,   164,   170,
     181,   192,   207,   208,   214,   215,   220,   221,   227,   228,
     232,   233,   238,   240,   246,   247,   251,   252,   257,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   269,   269,   269,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   269,   269,   269,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   270,   270,   270,   270,   271,
     271,   271,   271,   271,   271,   271,   271,   271,   271,   271,
     271,   271,   271,   271,   271,   271,   271,   271,   271,   271,
     271,   271,   271,   271,   271,   271,   271,   271,   271,   271,
     271,   271,   271,   271,   271,   271,   271,   271,   271,   271,
     271,   271,   271,   271,   271,   271,   271,   271,   271,   271,
     271,   271,   271,   271,   271,   271,   271,   271,   271,   271,
     271,   271,   271,   271,   271,   271,   271,   271,   271,   271,
     271,   271,   271,   271,   271,   271,   271,   271,   271,   271,
     271,   271,   271,   271,   271,   271,   271,   271
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "IDENT", "FCONST", "SCONST", "BCONST",
  "XCONST", "Op", "ICONST", "PARAM", "TYPECAST", "DOT_DOT", "COLON_EQUALS",
  "EQUALS_GREATER", "LAMBDA_ARROW", "LESS_EQUALS", "GREATER_EQUALS",
  "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS", "ACTION", "ADD_P",
  "ADMIN", "AFTER", "AGGREGATE", "ALL", "ALSO", "ALTER", "ALWAYS",
  "ANALYSE", "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC_P", "ASSERTION",
  "ASSIGNMENT", "ASYMMETRIC", "AT", "ATTACH", "ATTRIBUTE", "AUTHORIZATION",
  "BACKWARD", "BEFORE", "BEGIN_P", "BETWEEN", "BIGINT", "BINARY", "BIT",
  "BOOLEAN_P", "BOTH", "BY", "CACHE", "CALL_P", "CALLED", "CASCADE",
  "CASCADED", "CASE", "CAST", "CATALOG_P", "CHAIN", "CHAR_P", "CHARACTER",
  "CHARACTERISTICS", "CHECK_P", "CHECKPOINT", "CLASS", "CLOSE", "CLUSTER",
  "COALESCE", "COLLATE", "COLLATION", "COLUMN", "COLUMNS", "COMMENT",
  "COMMENTS", "COMMIT", "COMMITTED", "CONCURRENTLY", "CONFIGURATION",
  "CONFLICT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS", "CONTENT_P",
  "CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CREATE_P", "CROSS", "CSV",
  "CUBE", "CURRENT_P", "CURRENT_CATALOG", "CURRENT_DATE", "CURRENT_ROLE",
  "CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER",
  "CURSOR", "CYCLE", "DATA_P", "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE",
  "DEC", "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE",
  "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS",
  "DESC_P", "DESCRIBE", "DESTINATION", "DETACH", "DICTIONARY", "DISABLE_P",
  "DISCARD", "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P",
  "DROP", "EACH", "EDGE", "ELSE", "ENABLE_P", "ENCODING", "ENCRYPTED",
  "END_P", "ENUM_P", "ESCAPE", "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING",
  "EXCLUSIVE", "EXECUTE", "EXISTS", "EXPLAIN", "EXPORT_P", "EXTENSION",
  "EXTERNAL", "EXTRACT", "FALSE_P", "FAMILY", "FETCH", "FILTER", "FIRST_P",
  "FLOAT_P", "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE",
  "FROM", "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOB", "GLOBAL",
  "GRANT", "GRANTED", "GRAPH", "GRAPH_TABLE", "GROUP_P", "GROUPING",
  "HANDLER", "HAVING", "HEADER_P", "HOLD", "HOUR_P", "HOURS_P",
  "IDENTITY_P", "IF_P", "ILIKE", "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P",
  "IMPORT_P", "IN_P", "INCLUDING", "INCREMENT", "INDEX", "INDEXES",
  "INHERIT", "INHERITS", "INITIALLY", "INLINE_P", "INNER_P", "INOUT",
  "INPUT_P", "INSENSITIVE", "INSERT", "INSTEAD", "INT_P", "INTEGER",
  "INTERSECT", "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL", "ISOLATION",
  "JOIN", "KEY", "LABEL", "LANGUAGE", "LARGE_P", "LAST_P", "LATERAL_P",
  "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE", "LIMIT", "LISTEN",
  "LOAD", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", "LOCATION", "LOCK_P",
  "LOCKED", "LOGGED", "MACRO", "MAPPING", "MATCH", "MATERIALIZED",
  "MAXVALUE", "METHOD", "MICROSECOND_P", "MICROSECONDS_P", "MILLISECOND_P",
  "MILLISECONDS_P", "MINUTE_P", "MINUTES_P", "MINVALUE", "MODE", "MONTH_P",
  "MONTHS_P", "MOVE", "NAME_P", "NAMES", "NATIONAL", "NATURAL", "NCHAR",
  "NEW", "NEXT", "NO", "NODE", "NONE", "NOT", "NOTHING", "NOTIFY",
  "NOTNULL", "NOWAIT", "NULL_P", "NULLIF", "NULLS_P", "NUMERIC",
  "OBJECT_P", "OF", "OFF", "OFFSET", "OIDS", "OLD", "ON", "ONLY",
  "OPERATOR", "OPTION", "OPTIONS", "OR", "ORDER", "ORDINALITY", "OUT_P",
  "OUTER_P", "OVER", "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNED", "OWNER",
  "PARALLEL", "PARSER", "PARTIAL", "PARTITION", "PASSING", "PASSWORD",
  "PERCENT", "PLACING", "PLANS", "POLICY", "POSITION", "PRAGMA_P",
  "PRECEDING", "PRECISION", "PREPARE", "PREPARED", "PRESERVE", "PRIMARY",
  "PRIOR", "PRIVILEGES", "PROCEDURAL", "PROCEDURE", "PROGRAM",
  "PROPERTIES", "PROPERTY", "PUBLICATION", "QUOTE", "RANGE", "READ_P",
  "REAL", "REASSIGN", "RECHECK", "RECURSIVE", "REF", "REFERENCES",
  "REFERENCING", "REFRESH", "REINDEX", "RELATIONSHIP", "RELATIVE_P",
  "RELEASE", "RENAME", "REPEATABLE", "REPLACE", "REPLICA", "RESET",
  "RESTART", "RESTRICT", "RETURNING", "RETURNS", "REVOKE", "RIGHT", "ROLE",
  "ROLLBACK", "ROLLUP", "ROW", "ROWS", "RULE", "SAMPLE", "SAVEPOINT",
  "SCHEMA", "SCHEMAS", "SCROLL", "SEARCH", "SECOND_P", "SECONDS_P",
  "SECURITY", "SELECT", "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER",
  "SESSION", "SESSION_USER", "SET", "SETOF", "SETS", "SHARE", "SHOW",
  "SIMILAR", "SIMPLE", "SKIP", "SMALLINT", "SNAPSHOT", "SOME", "SOURCE",
  "SQL_P", "STABLE", "STANDALONE_P", "START", "STATEMENT", "STATISTICS",
  "STDIN", "STDOUT", "STORAGE", "STRICT_P", "STRIP_P", "STRUCT",
  "SUBSCRIPTION", "SUBSTRING", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE",
  "TABLES", "TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY",
  "TEXT_P", "THEN", "TIME", "TIMESTAMP", "TO", "TRAILING", "TRANSACTION",
  "TRANSFORM", "TREAT", "TRIGGER", "TRIM", "TRUE_P", "TRUNCATE", "TRUSTED",
  "TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED", "UNENCRYPTED", "UNION",
  "UNIQUE", "UNKNOWN", "UNLISTEN", "UNLOGGED", "UNTIL", "UPDATE", "USER",
  "USING", "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES",
  "VARCHAR", "VARIADIC", "VARYING", "VERBOSE", "VERSION_P", "VERTEX",
  "VIEW", "VIEWS", "VOLATILE", "WHEN", "WHERE", "WHITESPACE_P", "WINDOW",
  "WITH", "WITHIN", "WITHOUT", "WORK", "WRAPPER", "WRITE_P", "XML_P",
  "XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT", "XMLEXISTS", "XMLFOREST",
  "XMLNAMESPACES", "XMLPARSE", "XMLPI", "XMLROOT", "XMLSERIALIZE",
  "XMLTABLE", "YEAR_P", "YEARS_P", "YES_P", "ZONE", "NOT_LA", "NULLS_LA",
  "WITH_LA", "'<'", "'>'", "'='", "POSTFIXOP", "'+'", "'-'", "'*'", "'/'",
  "'%'", "'^'", "UMINUS", "'['", "']'", "'('", "')'", "'.'", "';'", "','",
  "'?'", "':'", "$accept", "stmtblock", "stmtmulti", "stmt", "CallStmt",
  "ExplainStmt", "opt_verbose", "explain_option_arg", "ExplainableStmt",
  "NonReservedWord", "NonReservedWord_or_Sconst", "explain_option_list",
  "analyze_keyword", "opt_boolean_or_string", "explain_option_elem",
  "explain_option_name", "CreateStmt", "ConstraintAttributeSpec",
  "def_arg", "OptParenthesizedSeqOptList", "generic_option_arg",
  "key_action", "ColConstraint", "ColConstraintElem",
  "generic_option_elem", "key_update", "key_actions",
  "create_generic_options", "OnCommitOption", "reloptions",
  "opt_no_inherit", "TableConstraint", "TableLikeOption", "reloption_list",
  "ExistingIndex", "ConstraintAttr", "OptWith", "definition",
  "TableLikeOptionList", "generic_option_name", "ConstraintAttributeElem",
  "columnDef", "generic_option_list", "def_list", "index_name",
  "TableElement", "def_elem", "opt_definition", "OptTableElementList",
  "columnElem", "opt_column_list", "ColQualList", "key_delete",
  "reloption_elem", "columnList", "func_type", "ConstraintElem",
  "TableElementList", "key_match", "TableLikeClause", "OptTemp",
  "generated_when", "CreateAsStmt", "opt_with_data", "create_as_target",
  "VariableShowStmt", "show_or_describe", "var_name", "ViewStmt",
  "opt_check_option", "DeleteStmt", "relation_expr_opt_alias",
  "where_or_current_clause", "using_clause", "SelectStmt",
  "select_with_parens", "select_no_parens", "select_clause",
  "simple_select", "with_clause", "cte_list", "common_table_expr",
  "into_clause", "OptTempTableName", "opt_table", "all_or_distinct",
  "distinct_clause", "opt_all_clause", "opt_sort_clause", "sort_clause",
  "sortby_list", "sortby", "opt_asc_desc", "opt_nulls_order",
  "select_limit", "opt_select_limit", "limit_clause", "offset_clause",
  "sample_count", "sample_clause", "opt_sample_func", "tablesample_entry",
  "tablesample_clause", "opt_tablesample_clause", "opt_repeatable_clause",
  "select_limit_value", "select_offset_value", "select_fetch_first_value",
  "I_or_F_const", "row_or_rows", "first_or_next", "group_clause",
  "group_by_list", "group_by_item", "empty_grouping_set", "having_clause",
  "for_locking_clause", "opt_for_locking_clause", "for_locking_items",
  "for_locking_item", "for_locking_strength", "locked_rels_list",
  "opt_nowait_or_skip", "values_clause", "from_clause", "from_list",
  "table_ref", "joined_table", "alias_clause", "opt_alias_clause",
  "func_alias_clause", "join_type", "join_outer", "join_qual",
  "relation_expr", "func_table", "rowsfrom_item", "rowsfrom_list",
  "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "Typename", "opt_array_bounds",
  "SimpleTypename", "ConstTypename", "GenericType", "opt_type_modifiers",
  "Numeric", "opt_float", "Bit", "ConstBit", "BitWithLength",
  "BitWithoutLength", "Character", "ConstCharacter", "CharacterWithLength",
  "CharacterWithoutLength", "character", "opt_varying", "ConstDatetime",
  "ConstInterval", "opt_timezone", "year_keyword", "month_keyword",
  "day_keyword", "hour_keyword", "minute_keyword", "second_keyword",
  "millisecond_keyword", "microsecond_keyword", "opt_interval", "a_expr",
  "b_expr", "c_expr", "func_application", "func_expr",
  "func_expr_windowless", "func_expr_common_subexpr",
  "within_group_clause", "filter_clause", "window_clause",
  "window_definition_list", "window_definition", "over_clause",
  "window_specification", "opt_existing_window_name",
  "opt_partition_clause", "opt_frame_clause", "frame_extent",
  "frame_bound", "qualified_row", "row", "sub_type", "all_Op", "MathOp",
  "qual_Op", "qual_all_Op", "subquery_Op", "any_operator", "expr_list",
  "func_arg_list", "func_arg_expr", "type_list", "extract_list",
  "extract_arg", "overlay_list", "overlay_placing", "position_list",
  "substr_list", "substr_from", "substr_for", "trim_list", "in_expr",
  "case_expr", "when_clause_list", "when_clause", "case_default",
  "case_arg", "columnref", "indirection_el", "opt_slice_bound",
  "indirection", "opt_indirection", "opt_asymmetric", "opt_target_list",
  "target_list", "target_el", "qualified_name_list", "qualified_name",
  "name_list", "name", "attr_name", "func_name", "AexprConst", "Iconst",
  "Sconst", "ColId", "ColIdOrString", "type_function_name", "any_name",
  "attrs", "opt_name_list", "param_name", "ColLabel", "ColLabelOrString",
  "CreatePropertyGraphStmt", "vertex_alias", "edge_alias",
  "VertexTableDefinitionList", "VertexTableDefinition",
  "GraphTableKeyClause", "LabelList", "LabelEnd",
  "EdgeTableDefinitionList", "EdgeTableDefinition", "LoadStmt",
  "file_name", "ExportStmt", "ImportStmt", "DeallocateStmt", "IndexStmt",
  "access_method", "access_method_clause", "opt_concurrently",
  "opt_index_name", "opt_reloptions", "opt_unique", "GraphTableStmt",
  "ColumnsClauseOptional", "ColumnList", "PathPatternList",
  "PathPatternNameOptional", "PathConcatenation", "ElementPattern",
  "ElementPatternFillerOptional", "VertexPatternFiller", "VertexPattern",
  "GraphPatternVariableDeclarationOptional", "IsLabelExpression",
  "IsLabelExpressionOptional", "IsOrColon", "MandatoryEdgePatternFiller",
  "EdgePattern", "FullEdgePattern", "FullEdgePointingRight",
  "FullEdgePointingLeft", "FullEdgeAnyDirection", "AbbreviatedEdgePattern",
  "CreateSchemaStmt", "OptSchemaEltList", "schema_stmt", "VacuumStmt",
  "vacuum_option_elem", "opt_full", "vacuum_option_list", "opt_freeze",
  "PrepareStmt", "prep_type_clause", "PreparableStmt", "VariableResetStmt",
  "generic_reset", "reset_rest", "CheckPointStmt", "RenameStmt",
  "opt_column", "PragmaStmt", "DropStmt", "drop_type_any_name",
  "drop_type_name", "any_name_list", "opt_drop_behavior",
  "drop_type_name_on_any_name", "AlterSeqStmt", "SeqOptList", "opt_with",
  "NumericOnly", "SeqOptElem", "opt_by", "SignedIconst", "CreateSeqStmt",
  "OptSeqOptList", "CopyStmt", "copy_from", "copy_delimiter",
  "copy_generic_opt_arg_list", "opt_using", "opt_as", "opt_program",
  "copy_options", "copy_generic_opt_arg", "copy_generic_opt_elem",
  "opt_oids", "copy_opt_list", "opt_binary", "copy_opt_item",
  "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CreateFunctionStmt", "macro_alias",
  "param_list", "AlterTableStmt", "alter_identity_column_option_list",
  "alter_column_default", "alter_identity_column_option",
  "alter_generic_option_list", "alter_table_cmd", "alter_using",
  "alter_generic_option_elem", "alter_table_cmds", "alter_generic_options",
  "opt_set_data", "VariableSetStmt", "set_rest", "generic_set",
  "var_value", "zone_value", "var_list", "AnalyzeStmt", "UpdateStmt",
  "TransactionStmt", "opt_transaction", "ExecuteStmt",
  "execute_param_clause", "AlterObjectSchemaStmt", "InsertStmt",
  "insert_rest", "insert_target", "opt_conf_expr", "opt_with_clause",
  "insert_column_item", "set_clause", "opt_on_conflict", "index_elem",
  "returning_clause", "override_kind", "set_target_list", "opt_collate",
  "opt_class", "insert_column_list", "set_clause_list", "index_params",
  "set_target", "unreserved_keyword", "col_name_keyword",
  "type_func_name_keyword", "reserved_keyword", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_int16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,    60,    62,    61,   736,    43,    45,    42,    47,    37,
      94,   737,    91,    93,    40,    41,    46,    59,    44,    63,
      58
};
# endif

#define YYPACT_NINF (-2449)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-1591)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const int yypact[] =
{
    4479,  -104,   697, -2449, -2449,  -104, 31324, -2449,  -104,    76,
    3175, 33699, -2449,  5569,  -104, 37974,   489,   296,   500,   477,
     659, 37974, 37974, 34174,  -104,   224, 38449, -2449,  -104, 34649,
     -10,   184, 38924, 37974,   331,   802,   243, -2449, -2449, -2449,
     255, -2449, -2449, -2449, 19791, -2449, -2449, -2449,   121, -2449,
      49,   171,   402,   314, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449,   139, -2449, -2449, -2449, 39399, 37974, 39874, 35124, 40349,
   -2449,    92, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449,   335,   294, -2449,   110, -2449, -2449, -2449,
   -2449,  1579, 37974, -2449,   562,   850, -2449,   508,   676, 40824,
   -2449, -2449, -2449, -2449,   -71,   696, 37974, -2449, -2449, 35599,
   -2449, -2449, -2449,   700, -2449, -2449,   491, -2449,    68, -2449,
   -2449, -2449,   504, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449,   570, -2449, -2449, 41299, 41774, 42249, -2449,   466,   803,
     740, 19315, -2449,   255, -2449, -2449, -2449, -2449, -2449,   659,
   -2449,   659, -2449, -2449, -2449,   480,   493, -2449,   514,   790,
     519, -2449, -2449, -2449, -2449, -2449,   741,  8036,  8036, 42724,
     659, 42724,   586,    58, -2449, -2449, -2449, 21219, -2449,   592,
     294, -2449,   252,   932, 11018, 37974,   613, -2449,   649,   613,
     638,  1579,   689,   703,   402, -2449,  4479, -2449, 37974, -2449,
     680,  1000,   184,   519, -2449,   250,   250,  1169,   250,   131,
     864, -2449,   780, -2449,   744,  1082,  1048, 34649,  1127,   935,
     954,  1144,  2825,  1172,  1110,  1181,  1162,  6048, 11018, 24655,
   -2449,   294, -2449, -2449,   818, -2449, -2449,   857, -2449, -2449,
   -2449, -2449,   803,  1336,  1096, -2449,   927, 43199, 43674, 37974,
    1284,   887, -2449, -2449, -2449, -2449,   929, -2449, -2449,   109,
    1243,   909, -2449,    64,  1268,    69, -2449,  1279,  1174, 11018,
   -2449,  1040, -2449, -2449, -2449,  -132, -2449, -2449, 26555, -2449,
   -2449, -2449,   740,   958, -2449, 26555, 11018, 47474,  1428, -2449,
    1236, 37974,   980, -2449, -2449, -2449, -2449, -2449, -2449,  1481,
     135,  1482, 11018,   998,   135,   135,  1018,  1352, -2449, -2449,
   -2449,   132,  1035,  1045, -2449,    95,    95, -2449,  1218,  1046,
    1065, -2449,   157,  1547,  1558,   145,  1076,  1084,   812,   135,
   11018, -2449,  1092,    95,  1093,  1097,  1122,  1587,  1136, -2449,
    1595,  1142,   156,   175,  1150,  1161, -2449, -2449,   165, 11018,
   11018, 11018, -2449,  7042, -2449,   294,   659, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449,  1165, -2449,   150,  5032, -2449,  1147,
   -2449, -2449, -2449,   213, 11018, -2449,  1619,   -37, -2449,   167,
   -2449, -2449, -2449,   294,  1446,  1168, -2449, -2449, -2449,   323,
    1574, 25605, 26080, 37974, -2449, -2449,   294, -2449, -2449, -2449,
   -2449, -2449, -2449,   502, -2449,   255, 27664,   634,   613, 37974,
   37974,  1642,  1442, -2449, -2449, -2449,   649, -2449,  1460, -2449,
   -2449,   402,   402, 11018,   402,   595,   640,  8533, 11515,  1527,
    1416,   225,   621,  1543, -2449,  1430,   131,   864, 11018, 34649,
   37974,  1337, 44149, 37974, 31799,   240,   248,  1215,  1298,  1223,
     302,  1627, -2449,  1220, -2449,  1307, 37974, 48409,   188, -2449,
    1667,   188,   188,   173,  1670,  1313,   207,  1470,   -19,  -156,
    1280, -2449,  1220, 34649,    63,    -8,  1220, 37974,  1318,   483,
    1220, 11018, 11018, 11018,  1239, -2449, 27664,   -69, -2449,  1036,
    1106, 24179,  1235, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449,  1324, 37974,  1285,   435,   -12,  1591,  1656, 37974,  1476,
    1280,  1483,  1717,  1262,   857, -2449, 44624,  9030,  1724, -2449,
   -2449, -2449, -2449, -2449, 37974, 28949,  1267, -2449, -2449, 37974,
   -2449, 37974, 37974, -2449, 37974, 37974,   642, 45099,   740, 30849,
   -2449, -2449, -2449, -2449,   829,   925, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, 28949, -2449,  2326, -2449, -2449,
   -2449,  1266,   643, -2449, -2449,  1321, -2449,  1321,  1321,  1273,
    1273,  1274, -2449, -2449, -2449,   812,  1321,  1273, -2449, -2449,
   48409, -2449, -2449,   391,   701, -2449,  1276, -2449,  1736, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,  3749,   650,
     811, -2449,  1579, -2449, -2449, 11018,   294, -2449,  1282, 27664,
    1325, 11018, -2449, -2449, 11018,  1287,  1764,  1764, 11018, -2449,
   -2449, -2449, -2449,  1098,  1764, -2449,  1764,  1764,  1321,  1321,
   -2449, 27777, 11018, -2449, 23126, 11018, 14000,  9527, 11018,  1367,
    1371,  1764, -2449,  1764, -2449, 11018,  7539, 27777,  1772,  1772,
    1652,  5307,  1286,   294,   294, -2449,  1764, 11018,  3736,  3736,
   -2449,   149, 47474, 11018, 11018, 11018, 11018, 28474,  1374,    99,
   37974, 11018, 11018,  1293,  1316, -2449, 11018,  1516, -2449,  1297,
   11018,  1380,   146, 11018, 11018, 11018, 11018, 11018, 11018, 11018,
   11018, 11018, -2449, -2449, 15977,   151,  1614,  1637, 11018,    23,
     256, 11018, 36074,  8036,  1630,  6048, -2449,   164,  1630, -2449,
   -2449, -2449,   168, -2449, -2449, -2449, -2449, -2449,  1266, -2449,
    1266,  1301, 37974,   252, 32749, -2449, 11018, -2449,   685,  1306,
    1799, -2449, -2449,  1592, -2449,  1305, -2449, 27026,  1592, -2449,
   -2449, 14486,  1429,  1588,  1523, -2449, -2449, -2449,  1311, 27664,
   12012, 12012, -2449,   770, 27664,   796, -2449, -2449, -2449, -2449,
   -2449, -2449,    -1, -2449, 37974,     2,  1527,   621,   705,  1376,
    1777,  1033, 21695, 37974, -2449,  1192,  1326, 45574, 37974,  1598,
    1551,  1601,   326, -2449, -2449, -2449, 47474, -2449, 37974, 37974,
   46049, 46524, 29424, 37974, 28949, -2449, -2449, -2449, -2449, 37974,
     952, 37974, 24048, -2449, -2449, -2449,   188, -2449, -2449, -2449,
   -2449, -2449, 37974, 37974, -2449, -2449,   188, 37974, 37974,   188,
   -2449,  1275, 37974, 37974, 37974, 37974,  1333, 37974, 37974,   -20,
     -20,  1533, -2449, 10024,  1329, -2449, 11018, 11018, -2449, 11018,
    1505, -2449,   734, -2449,  1548,   124,  1379, 37974, -2449, -2449,
    1427, 37974,  1233, -2449, -2449, -2449, -2449, -2449,  1345,  1695,
    1280, -2449,  1698,   444, 32274,   856,  1394,  1583, -2449, -2449,
    1569, -2449,   749, 11018,    64, -2449, 28949, -2449,    69, -2449,
    1570,   100, -2449,  1586,  1819,   857, -2449, -2449, -2449, -2449,
   -2449, -2449, 18839, -2449,   769, -2449, -2449,  1823,   659,  1823,
     438, -2449, -2449,  1823, -2449,  1823, -2449, 26555, -2449, 11018,
    1826, 37974,  1373,  1377, -2449, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
    1764,  1453, -2449,  1458,  1459,  1463, -2449, -2449, -2449, -2449,
   -2449, 47474, -2449,   828, -2449,   771, -2449, 11018, 11018,    79,
   -2449, 27090,   776, 11018,  1383,  1385,   785, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449,  1386,  1713, -2449,  1389,
    1390,  1391, -2449, -2449,  4703, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,  1396,
    1400, 27150,  1397, 14000, 14000,  7042,  1355, -2449, 14000,  1399,
   -2449, -2449,   804, 27044,  1401,  1402,  1421,  1423,  1410,  1411,
   27379, 10521, 11018, 10521, 10521, 27425,  1401,  1412, -2449, 11018,
    1413,  5367, -2449, -2449, -2449,  2847,  2847,  2847, 27777, -2449,
   -2449, -2449,  1433, -2449, 14000, 14000, -2449,  2893,  2348,  7042,
   -2449, -2449,  1742, -2449,   141, -2449,  1418, -2449, -2449,  3032,
   -2449, 23126, 27700, 11018,   103, -2449, 11018,  1293, 11018,  1500,
    2847,  2847,  2847,   192,   192,   125,   125,   125,   892,   256,
   -2449, -2449, -2449,  1420,  1422,  1426,  1624, 27664,  1136, 11018,
   -2449, 27664,  1050,  1138, 37974,  1378,  3856,  4270, -2449, -2449,
   -2449, 17411,  1468,   -69,  1468,  1764,  3736, -2449,   649, -2449,
   -2449, -2449, 27664, -2449,  1579,  1886,  -159,   189, 11018, -2449,
   -2449,   686,  1444,  1640,  1644,  1021,  1021,   770,  1645, -2449,
   -2449,  1497, -2449, 11018,   859, -2449,   876, -2449, -2449, -2449,
   -2449,  1439, -2449, -2449,  1700, -2449, -2449, -2449, -2449, 17411,
    1489, 37974,  1502,   463, 20267, -2449,  1663, 37974, -2449, -2449,
     -13,  1465, -2449,  1537,  1220, 11018,  1683, -2449,   147,  1467,
    1801,   426,  1755, 37974, -2449,  1681, -2449,   665,  1828,   100,
    1829,   100, 28949, 28949, 28949, -2449,   659, -2449,   838, -2449,
   -2449,   839, -2449,   440, -2449, -2449, -2449,  1571,   662,  1280,
    1220, -2449, -2449, -2449, -2449, -2449, -2449, -2449,   227,   670,
    1220,  1572, -2449,  1575, -2449,  1577,   733,  1220, -2449, -2449,
    1487,  1498,  1503, 11018, -2449, -2449, 27664, 27664, 27664,  1504,
   -2449,   137, -2449, 37974, -2449, -2449, -2449,  1505, 37974,   857,
    1506, -2449,   404, 37974, 37974, 37974, 37974,  1545, 37974, -2449,
   -2449, -2449,  1507,  1508, -2449, 47474,   -36,  1727,  1726,  1223,
    1974,  1860, 37974, -2449, 27664, -2449, -2449, -2449, 37974, -2449,
    1862,  1579, -2449, 30374, -2449, -2449, -2449, -2449, 28949, -2449,
     659, -2449,   659,  1743, 37974, 25130,   659,   659, -2449,  1522,
    1377,   843, 47474,  1764,    90,  1524,   875,   641,   585,   830,
   -2449, -2449, -2449,   845, 27549, 11018, -2449,  1876, 47474, -2449,
    5538, -2449, -2449, -2449, -2449, 11018, -2449, -2449, -2449, 11018,
   -2449, 23126, 11018,  1855, -2449,  2016,  2016,  5307, 47474, 14000,
   14000, 14000, 14000,   513,  1093, 14000, 14000, 14000, 14000, 14000,
   14000, 14000, 14000, 14000, 14983,   380, -2449, -2449, 11018, 11018,
    1864,  1855, -2449, -2449, -2449,  -112,  -112, 47474,  1534,  1401,
    1539,  1544, 11018, -2449,   294, 23609, -2449,  3736, 11018,  1477,
    1741, 11018,   889, 11018,  1863, -2449, -2449,  1546, -2449, -2449,
   47474, 11018,  1549,  4044, 14000, 14000,  4190, -2449,  5202, 11018,
    7042, -2449,  1533,  1589, 22171, -2449,  1639,  1639,  1639,  1639,
   -2449, -2449, 37974, 37974, 37974,  1553, 17887,  1874, 16935, 36549,
    1550,  1042, -2449, 36549, 37024, -2449,  1565, -2449,   294, 11018,
    1869,  1556,  1869,  1557, -2449, -2449,  1559, -2449,  1799,  1977,
   -2449,  1578,    98,  2053,   189, -2449, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449,  1566, -2449,  1444,   148, -2449, -2449,
   -2449,  1781, -2449, -2449, -2449, 37974, -2449,  1550, 11018,  1714,
   -2449, -2449, -2449, -2449,  1625, -2449, -2449,   898,  1986,  1714,
     900, -2449,   294, 21695,  1489, 11018, 37974, 23627,  1919, -2449,
   37974, 37974, 37974, -2449, 37974,   905,   825,  1582, -2449,   825,
    1898,   204,  1223,   207,  4849,   392, -2449, -2449, -2449,  1649,
   37974, -2449, 37974, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   29424, -2449, 28949, 22650, 28949, 37974, 37974, 37974, 37974, 37974,
   37974, 37974, 37974, 37974, 37974, -2449, -2449, -2449,  1533, -2449,
   -2449, -2449, -2449,  -156, -2449,   137,  1584,  1394, 37974,  1656,
   46999,   945,  1280,  2045,  1593,   466,   143, -2449, -2449,   856,
   32274, -2449, -2449, -2449,  2003, -2449, -2449,  1579, 37974,  1647,
     100, 37974, -2449,   949, -2449, -2449, -2449, -2449, 37974,  1590,
   -2449,  1590, -2449, -2449,  1764, -2449, 37974, -2449,  1596, -2449,
    1600, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,
   11018, 27664, -2449,  1621, -2449, 27664, 23645, -2449, 27664,  1864,
   -2449,  3183,  3183,  3183,   939,  1916,   127,  1597,  3183,  3183,
    3183,   239,   239,   120,   120,   120,  2016,   380, 27664, 27664,
   -2449, -2449, -2449, -2449,  1626, -2449, -2449, -2449,  1401, -2449,
   -2449,   288, 11018, 11018,  2893, -2449, 28002, 11018, 47474,   953,
    2893,   172, 11018,  2518,  3289, 11018, 11018,  5520, 23673,  1631,
   11018, 47934, -2449, -2449, 37974, 37974, 37974, 37974, -2449, -2449,
   -2449,  2116, -2449, 36549, 37024,  1628, 16458,  1042,  1633, 37499,
   -2449,  1721,  1635, 17411,  1911,  1840, -2449, 17411,  1840,   757,
    1840,  1915,  1721, 20743, -2449,  1721,  1641,  1846, -2449,   584,
   27664,  2084,  1960,   659,  1960,   659, -2449,   189,  1651,  1654,
     101,     6, -2449,  2143, -2449, -2449,  2147,   152,     6,  1657,
   -2449, 23126, -2449, -2449, -2449, -2449, -2449, 27664,  8036, -2449,
    1579,   294,  1711, 37974,   -41, -2449,  1668, 37974, -2449,  1714,
   27664, -2449, -2449, 37974,   968, -2449,   974,   825, -2449,  1699,
   -2449,   162,  1954,    31, -2449, 28949,  1990,   886, -2449,  1967,
    1885, -2449,   188, -2449, 11018,   886,  1887,   200, 37974, -2449,
   -2449,  1650, -2449, 47474,   100,   100, -2449, -2449, -2449,  1566,
   48409,   829,   925, -2449, -2449, -2449, -2449, -2449,   811, -2449,
   -2449,  1676, -2449, -2449,  1748, -2449,  1749, -2449, -2449, -2449,
   -2449, -2449,  1671,   958,    87, 37974,  2132,  1950,   983, -2449,
    1903,  1678,  1394, -2449,   707, 32274,  1545, -2449,  2068,   528,
    1726, -2449,   166,  1719,  1893, 37974,  1684, -2449,  2144, -2449,
   30374,  1590,  1686, 47474, -2449, -2449, 27664, -2449, -2449, -2449,
   14000,  2013,  1691, 47474, -2449,  2893,  2893, 28002,  1001, -2449,
    2893, 11018, 11018,  2893,  2893, 11018, -2449, -2449, 23691,  1884,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, 29899, 36549, -2449,
    1694, -2449, 33224, -2449, -2449, 37974,  1042, 17411, -2449, -2449,
    1140, -2449, 17411,  1970, -2449, 17411, -2449, 37974,  1696, -2449,
   37974, -2449, 12509, 11018,  1738, -2449,  1738, -2449,   189, 37974,
   37974,  2143,  1709, -2449, -2449, -2449,  1703,     6, -2449, -2449,
   -2449, -2449, -2449,  1707,  1168, -2449,   463, -2449, -2449,  2113,
   18363,  2072, 11018, -2449, -2449,   825, -2449,  1871,  1699,  1712,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449,  1006,  1715, 37974,
   37974, 14000, -2449,   886,   169,   113, -2449,  1987, 37974,  1699,
   -2449, -2449, -2449, -2449,  2094,  2174,  2062, -2449, -2449, 27664,
   -2449, -2449,  1764,  1764, -2449, -2449,  2141, -2449, -2449,   811,
     417, 22650, 37974, 37974, -2449, -2449, -2449,  -156,  2095,  1019,
    1579,  1723,  1994,    93, 37974,  2067, 32274,  2183, 37974,  1545,
    1725, -2449, -2449,   916,   916, -2449,  1866, -2449,  1870,   748,
   -2449, 37974, -2449, -2449, 18363,  1579, -2449, -2449, -2449,  2910,
   14000, 47474,  1024, -2449,  2893,  2893,  2893, -2449,  2178,  1533,
   -2449,  1028,  2197, -2449, 37974,   -57,   -66,  1740,  1744, -2449,
   -2449,  1043, -2449, 11018,  1745, -2449, -2449, 17411,  1140,  1058,
   -2449, 47474, 37974,  1059, 47474,  6545,  1739, -2449, -2449, 27664,
   27664, 37974,  1804,  1804,  1069, -2449, -2449,  1753, -2449,   181,
   -2449, -2449,  1800, 37974, 11018,  2169,   203, -2449,  1071,   -22,
   27664, 37974, -2449, 28949, -2449,   825, -2449, 28949, 11018, -2449,
     646,   939,  2212, -2449, -2449, -2449, -2449,  1699,   857, -2449,
   -2449,  2063, -2449, 37974,  1814,   518,  1830, -2449, -2449, -2449,
     958,   659,  1394,  1719, 37974,  2249,  2033, -2449, -2449,  1852,
   -2449, 37974,  1579,   466, -2449,   856, -2449, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449, -2449, -2449, -2449, -2449,  2190,  1975,
    2198,  1647,  1085,  2910,  1090, -2449, 11018,   230,  1565, 29899,
    1770, -2449,  1104, -2449, -2449, -2449, -2449, -2449, 37974,  1068,
   -2449, 27664, 37974, -2449, -2449, -2449, 37974,  2141,  1115, -2449,
   -2449, 12509,  1768, -2449,  2231,  1913, -2449, -2449, -2449, 37974,
    1782, -2449, -2449,  1579, -2449, 23761, 37974, 37974, 37974,  1468,
   18363, -2449,  1900,   857,   825,  1119, -2449,  1788, -2449, 23779,
    2001, -2449,  2087, -2449,  2034,  1785, -2449, 11018, -2449,  1853,
   -2449, -2449, -2449,  2244, -2449,  1123, -2449, -2449,  2278,  1792,
    1794,  1719,  1545,  1726,  1996, -2449,  2004,  1795,  1394, -2449,
    1401, 13006, 13006,  1796, -2449, -2449, 37974, -2449,  1128,  1797,
    1154, -2449, -2449, -2449, -2449, 37974,  1802, 33224, -2449, -2449,
   -2449,  2169, -2449, -2449,   222,   222, -2449, -2449, 21695,  2034,
   -2449, 28949, 22650,  2028,  1785,    56,  2012,  1280, -2449, 27664,
   -2449,  1579, -2449, -2449, 37974, 32274, -2449, -2449, -2449, -2449,
   -2449, 18363,  1468, 15480,  1943,   185, 27062, -2449, -2449, -2449,
   -2449,  1155, -2449,  2289,  1958, -2449, -2449, -2449, -2449, 37974,
    1444,  1444,  -134,  2012, -2449, -2449,  2104, -2449, -2449, -2449,
   -2449, -2449,   112,  2022, -2449,  2024,  1398,  1719,  1950,  1159,
   -2449,  1177, -2449,  2275, -2449, -2449, -2449, -2449, -2449, -2449,
    1815,  1820, -2449,   222, -2449, -2449, -2449, -2449, -2449,   406,
     406,  2194, -2449,  1875, -2449, -2449, -2449,  1931, -2449, 37974,
    1394, 13503, -2449,  2308,  1444,   825, -2449,  2300, -2449,   194,
   -2449, -2449,  1950, -2449,  1468, -2449,  1832, -2449, -2449, -2449,
   -2449,  1991, -2449, -2449, 37974,  2200,  1950,  1995, 37974,  1994,
    2033
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_int16 yydefact[] =
{
    1212,  1188,     0,    65,    64,  1188,     0,   955,  1188,  1071,
     201,     0,   216,     0,  1188,     0,  1212,     0,     0,     0,
       0,     0,     0,     0,  1188,   281,     0,   215,  1188,     0,
     936,     0,     0,     0,     0,     0,     2,     4,     9,    22,
      47,    17,    12,    38,     0,    39,    19,    32,   248,   235,
     283,   247,  1211,   251,    14,    28,    23,    25,    18,    26,
      24,    15,    35,    30,    36,    10,    31,    29,    20,     6,
      16,    11,    13,     7,    37,     8,    34,    33,    21,     5,
      27,     0,  1187,  1186,  1180,     0,     0,     0,     0,     0,
    1181,   819,  1239,  1240,  1241,  1242,  1243,  1244,  1245,  1246,
    1247,  1248,  1249,  1250,  1251,  1252,  1253,  1254,  1585,  1255,
    1256,  1257,  1536,  1537,  1586,  1538,  1539,  1258,  1259,  1260,
    1261,  1262,  1263,  1264,  1265,  1540,  1541,  1266,  1267,  1268,
    1269,  1270,  1542,  1587,  1271,  1272,  1273,  1274,  1588,  1275,
    1276,  1277,  1278,  1279,  1280,  1281,  1282,  1283,  1589,  1284,
    1285,  1286,  1590,  1287,  1288,  1289,  1290,  1291,  1292,  1293,
    1543,  1544,  1294,  1295,  1296,  1297,  1298,  1299,  1300,  1301,
    1302,  1303,  1304,  1305,  1306,  1307,  1308,  1309,  1310,  1311,
    1312,  1313,  1314,  1315,  1316,  1317,  1318,  1319,  1320,  1321,
    1545,  1322,  1323,  1324,  1325,  1546,  1326,  1327,  1328,  1547,
    1329,  1330,  1331,  1591,  1592,  1332,  1333,  1334,  1593,  1335,
    1336,  1548,  1337,  1338,  1339,  1340,  1341,  1342,  1343,  1594,
    1344,  1345,  1346,  1347,  1348,  1349,  1350,  1351,  1352,  1353,
    1354,  1595,  1549,  1355,  1356,  1357,  1358,  1550,  1551,  1552,
    1359,  1596,  1597,  1360,  1598,  1361,  1362,  1363,  1364,  1365,
    1366,  1599,  1367,  1600,  1368,  1369,  1370,  1371,  1372,  1373,
    1374,  1375,  1376,  1377,  1378,  1379,  1380,  1381,  1382,  1383,
    1384,  1385,  1386,  1387,  1388,  1389,  1390,  1391,  1392,  1553,
    1601,  1554,  1393,  1394,  1395,  1555,  1396,  1397,  1602,  1398,
    1556,  1399,  1557,  1400,  1401,  1402,  1403,  1404,  1405,  1406,
    1407,  1408,  1558,  1603,  1409,  1604,  1559,  1410,  1411,  1412,
    1413,  1414,  1415,  1416,  1417,  1418,  1419,  1420,  1421,  1560,
    1422,  1423,  1561,  1424,  1425,  1426,  1427,  1428,  1429,  1430,
    1431,  1432,  1433,  1434,  1435,  1562,  1436,  1437,  1438,  1439,
    1440,  1441,  1442,  1443,  1444,  1445,  1446,  1447,  1448,  1449,
    1450,  1451,  1452,  1453,  1605,  1454,  1455,  1456,  1563,  1457,
    1458,  1459,  1460,  1461,  1462,  1463,  1464,  1465,  1466,  1467,
    1468,  1469,  1470,  1471,  1472,  1473,  1564,  1474,  1475,  1476,
    1606,  1477,  1478,  1565,  1479,  1480,  1481,  1482,  1483,  1484,
    1485,  1486,  1487,  1488,  1489,  1490,  1566,  1491,  1567,  1492,
    1493,  1494,  1607,  1495,  1496,  1497,  1498,  1499,  1568,  1569,
    1500,  1501,  1570,  1502,  1571,  1503,  1504,  1505,  1506,  1507,
    1508,  1509,  1510,  1511,  1512,  1513,  1514,  1515,  1516,  1517,
    1518,  1519,  1572,  1573,  1520,  1608,  1521,  1522,  1523,  1524,
    1525,  1526,  1527,  1528,  1529,  1530,  1531,  1574,  1575,  1576,
    1577,  1578,  1579,  1580,  1581,  1582,  1583,  1584,  1532,  1533,
    1534,  1535,    41,     0,     0,   801,   820,   821,   826,  1183,
    1070,  1212,     0,  1093,     0,     0,  1094,     0,     0,     0,
     195,   194,   876,   200,     0,     0,     0,   819,   863,  1424,
     861,   799,   820,     0,   988,   989,     0,   997,     0,   982,
     986,   983,     0,  1007,   999,  1008,  1000,   981,  1001,   990,
     980,     0,  1009,   984,     0,     0,     0,  1184,  1193,   201,
    1212,     0,    42,    47,    55,    54,    51,    53,    52,     0,
     954,     0,   818,   858,   857,   971,   943,   950,  1568,  1500,
     949,   217,   951,   948,  1185,   280,   278,     0,   786,  1370,
    1461,  1472,  1568,     0,  1155,  1158,  1182,     0,   252,   402,
     795,   935,     0,   940,     0,  1438,   256,   259,   832,   257,
       0,     0,   248,     0,     0,     1,  1212,    46,  1177,   214,
    1568,  1500,  1572,   211,   210,   277,   277,     0,   277,     0,
     240,   248,   243,   247,     0,     0,     0,     0,  1343,     0,
       0,  1343,     0,  1343,     0,  1343,     0,     0,   778,     0,
     779,   802,   947,   944,     0,   946,   945,   168,   199,   198,
     197,   196,   201,     0,  1343,   920,     0,     0,     0,     0,
     871,     0,   864,   862,   995,   996,     0,   987,   985,     0,
    1343,   827,  1002,  1006,  1343,  1006,   797,  1343,     0,     0,
    1189,     0,    44,    56,    71,     0,    72,    62,    50,    57,
      58,    59,  1212,  1069,   860,     0,     0,     0,     0,   952,
       0,     0,     0,   804,   806,   807,   710,   817,   781,  1537,
    1538,  1539,   770,     0,  1540,  1541,  1542,  1587,   648,   635,
     644,   649,   636,   638,   645,  1543,  1544,   589,  1309,  1545,
    1546,   815,  1547,  1550,  1551,  1552,   640,   642,  1553,  1554,
       0,   816,  1556,  1557,  1405,  1559,  1560,  1562,  1563,   646,
    1565,  1567,  1568,  1569,  1570,  1571,   814,   647,  1573,     0,
       0,     0,   792,     0,   781,   620,     0,   443,   444,   466,
     467,   445,   472,   473,   475,   446,     0,   791,   524,   663,
     619,   631,   691,   567,     0,   618,   613,   263,   787,     0,
     614,   803,   805,   771,   263,   785,  1156,  1161,  1157,     0,
       0,     0,     0,     0,   404,   403,   796,   934,   932,   933,
     931,   930,   937,     0,   939,    47,   724,     0,   258,     0,
       0,     0,     0,   238,   237,     3,   832,   212,     0,   275,
     276,     0,     0,     0,     0,     0,     0,     0,     0,   350,
     297,   298,   300,   347,   351,   359,     0,   244,     0,     0,
       0,     0,   228,     0,     0,   970,   970,     0,     0,     0,
       0,     0,  1150,  1099,  1143,     0,     0,     0,     0,  1023,
    1036,     0,     0,     0,     0,     0,  1033,     0,     0,  1016,
    1010,  1012,  1101,     0,   970,     0,  1097,     0,     0,     0,
    1103,     0,     0,     0,     0,   623,   728,   283,   726,   801,
       0,   777,     0,   834,  1609,  1610,  1611,  1612,  1613,  1614,
    1615,  1616,  1617,  1618,  1619,  1620,  1621,  1622,  1623,  1624,
    1625,  1626,  1627,  1628,  1629,  1630,  1631,  1632,  1633,  1634,
    1635,  1636,  1637,  1638,  1639,  1640,  1641,  1642,  1643,  1644,
    1645,  1646,  1647,  1648,  1649,  1650,  1651,  1652,  1653,  1654,
    1655,  1656,  1657,  1658,  1659,  1660,  1661,  1662,  1663,  1664,
    1665,  1666,  1667,  1668,  1669,  1670,  1671,  1672,  1673,  1674,
    1675,  1676,  1677,  1678,  1679,  1680,  1681,  1682,  1683,  1684,
    1685,  1686,  1687,  1688,  1689,  1690,  1691,  1692,  1693,  1694,
    1695,  1696,  1697,   774,   773,   800,   835,   836,   837,   838,
     780,     0,     0,  1067,     0,   842,     0,   917,     0,  1343,
    1043,  1343,     0,   168,   168,   870,   873,     0,     0,   998,
     994,   992,   991,   993,     0,     0,   828,  1004,  1005,     0,
     975,     0,     0,   977,     0,     0,     0,     0,  1212,     0,
    1017,    67,    68,    66,     0,     0,    70,    60,    69,    48,
    1037,    61,    49,  1020,    43,     0,   859,  1058,  1166,  1167,
    1175,   972,     0,   824,   454,   483,   461,   483,   483,   450,
     450,   463,   451,   452,   488,     0,   483,   450,   455,   424,
       0,   453,   425,   491,   491,   478,     0,   731,   435,   436,
     437,   438,   464,   465,   439,   470,   471,   440,   523,     0,
     450,   825,  1212,   953,   218,     0,   616,   482,   469,   769,
       0,     0,   477,   476,     0,     0,     0,     0,     0,   459,
     458,   457,   622,   734,     0,   456,     0,     0,   483,   483,
     481,   547,     0,   460,     0,     0,   749,     0,   755,     0,
       0,     0,   487,     0,   485,     0,     0,   548,   528,   529,
     620,   724,     0,   615,   621,   810,     0,     0,   523,   523,
     790,   710,     0,   707,   708,   709,     0,     0,     0,   784,
       0,   718,   720,     0,     0,   563,   716,     0,   566,     0,
       0,     0,     0,   704,   705,   706,   698,   699,   700,   701,
     702,   703,   714,   697,   544,     0,     0,   665,     0,     0,
     543,     0,     0,     0,   366,     0,   808,   772,   366,  1169,
    1173,  1174,     0,  1168,  1172,  1160,  1159,  1164,  1162,  1165,
    1163,     0,   928,     0,   925,   363,     0,   260,     0,     0,
     886,  1178,   213,   255,   254,   284,   285,   291,   253,   336,
     337,     0,     0,     0,     0,   356,   354,   327,   301,   326,
       0,     0,   305,     0,   328,   524,   349,   242,   295,   296,
     299,   241,     0,   352,     0,   362,   350,   300,     0,   234,
    1206,     0,     0,     0,   229,     0,     0,     0,     0,     0,
    1343,     0,     0,  1134,  1115,   120,     0,   969,     0,     0,
       0,     0,     0,     0,     0,  1142,  1139,  1140,  1141,     0,
       0,     0,     0,  1021,  1022,  1035,     0,  1026,  1027,  1024,
    1028,  1029,     0,     0,  1014,  1015,     0,     0,     0,     0,
    1013,     0,     0,     0,     0,     0,     0,     0,     0,   283,
     283,   283,   629,     0,     0,   282,     0,     0,   775,   778,
    1057,   176,     0,   166,     0,     0,     0,     0,   844,   843,
       0,     0,   201,   921,   924,   922,   919,   923,     0,     0,
    1042,  1040,     0,     0,   165,   139,   875,  1343,   872,   156,
       0,  1095,     0,     0,  1006,   829,     0,  1003,  1006,   798,
       0,  1006,  1192,  1343,     0,   168,    45,    63,  1018,  1038,
    1019,  1039,  1064,  1090,     0,  1072,  1077,  1055,     0,  1055,
       0,  1074,  1078,  1055,  1073,  1055,  1068,     0,   973,     0,
     435,     0,   430,   426,   496,   497,   498,   499,   506,   507,
     504,   505,   500,   501,   494,   495,   502,   503,   492,   493,
       0,   508,   509,   510,   511,   512,   513,   514,   515,   441,
     942,     0,   447,   450,   941,     0,   782,     0,     0,   768,
     764,     0,     0,     0,     0,     0,     0,   735,   736,   737,
     738,   739,   740,   741,   742,   743,     0,     0,   744,     0,
       0,     0,   480,   479,     0,   696,   707,   708,   709,   704,
     705,   706,   698,   699,   700,   701,   702,   703,   722,     0,
       0,     0,     0,     0,     0,     0,     0,   590,     0,     0,
     613,   690,     0,   724,   754,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   724,   760,     0,   781,     0,
       0,     0,   812,   813,   525,   539,   540,   541,   545,   840,
     839,   789,     0,   783,     0,     0,   526,   549,   554,     0,
     761,   585,     0,   573,     0,   562,     0,   571,   575,   550,
     565,     0,   546,     0,   784,   719,   721,     0,   717,     0,
     536,   537,   538,   530,   531,   532,   533,   534,   535,   542,
     695,   693,   694,     0,     0,     0,   673,   568,     0,     0,
     570,   569,  1335,  1370,     0,   274,   274,   274,   262,   272,
     788,     0,   416,   283,   416,     0,   523,   405,   832,   938,
     926,   927,   725,   831,  1212,     0,   416,     0,     0,   289,
     290,     0,   294,  1563,  1457,     0,     0,     0,     0,   329,
     357,     0,   348,     0,   804,   330,   803,   331,   334,   335,
     306,   358,   793,   360,     0,   353,   246,   245,   364,     0,
     232,     0,     0,     0,     0,  1201,  1218,     0,   781,  1234,
     366,     0,   230,     0,  1100,     0,  1343,  1117,     0,     0,
       0,     0,     0,     0,    75,   111,    75,  1154,  1343,  1006,
    1343,  1006,  1243,  1310,  1473,  1146,     0,   144,     0,  1113,
     963,     0,   129,   173,  1136,  1151,   956,     0,     0,  1011,
    1102,  1025,  1030,   959,  1034,  1031,  1196,  1032,   970,     0,
    1098,     0,   957,     0,  1194,     0,     0,  1104,   961,  1198,
       0,     0,     0,     0,   727,   624,   729,   730,   777,     0,
    1056,     0,   167,     0,  1066,  1046,  1047,  1057,     0,   168,
       0,   920,     0,     0,     0,     0,     0,   208,     0,   159,
     157,   187,     0,   164,   158,   166,     0,     0,   115,     0,
       0,     0,     0,  1096,  1092,   974,   830,   976,     0,   978,
       0,     0,  1062,     0,  1060,  1061,  1065,  1059,     0,  1054,
       0,  1085,     0,     0,     0,     0,     0,     0,  1176,   431,
     427,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     732,   448,   279,     0,     0,     0,   765,     0,     0,   661,
       0,   637,   639,   449,   651,     0,   462,   641,   643,     0,
     711,     0,     0,     0,   652,   592,   593,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   608,   607,   653,   689,     0,     0,
     752,   753,   654,   490,   489,   491,   491,     0,     0,   759,
       0,     0,     0,   659,   617,   725,   474,   523,     0,     0,
       0,     0,     0,     0,     0,   574,   564,     0,   572,   576,
       0,     0,     0,   558,     0,     0,   556,   586,   552,     0,
       0,   587,     0,     0,     0,   630,   274,   274,   274,   274,
     271,   273,     0,     0,     0,     0,     0,  1457,     0,   388,
     365,   367,   374,   388,   393,   632,   414,   633,   795,     0,
     339,     0,   339,     0,  1170,   929,     0,   885,   886,   880,
     915,     0,   914,     0,   883,   887,   889,   890,   903,   905,
     906,   907,   904,   286,     0,   712,   294,     0,   288,   333,
     332,     0,   304,   355,   302,     0,   361,   233,     0,  1223,
    1207,  1205,  1225,  1224,     0,   781,  1232,     0,     0,  1223,
       0,  1226,  1238,     0,   232,     0,     0,     0,     0,   119,
       0,     0,     0,    75,     0,     0,   183,     0,   170,  1135,
       0,     0,     0,  1109,     0,  1127,  1119,  1105,  1133,     0,
       0,  1138,     0,  1131,  1148,  1149,  1147,   103,    85,  1152,
       0,   116,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   627,   628,   625,   283,   776,
    1088,  1089,  1087,  1016,   177,     0,     0,   875,     0,   918,
       0,     0,  1043,     0,   168,  1193,     0,   204,   143,   139,
       0,   137,   136,   138,     0,   209,   874,     0,     0,   869,
    1006,     0,  1086,     0,  1050,  1091,  1075,  1080,     0,  1084,
    1082,  1081,  1076,  1079,     0,   432,     0,   422,     0,   433,
       0,   442,   516,   517,   518,   519,   520,   521,   522,   468,
       0,   767,   763,     0,   634,   733,     0,   723,   747,   746,
     591,   603,   604,   605,   748,     0,     0,     0,   600,   601,
     602,   594,   595,   596,   597,   598,   599,   606,   757,   756,
     750,   751,   486,   484,     0,   656,   657,   658,   758,   692,
     811,   527,     0,     0,   555,   762,   577,     0,     0,     0,
     551,   711,     0,     0,     0,     0,     0,   560,     0,     0,
       0,   676,   671,   672,     0,     0,     0,     0,   265,   264,
     270,     0,   376,   388,   393,     0,   248,     0,   374,     0,
     387,   323,   386,     0,     0,   399,   397,     0,   399,     0,
     399,     0,   323,     0,   389,   323,   386,     0,   406,   796,
     415,     0,   346,   624,   346,     0,   261,     0,     0,     0,
     916,   898,   899,   895,   900,   902,     0,     0,     0,     0,
     888,     0,   287,   292,   293,   303,   794,   231,     0,   227,
       0,  1213,     0,     0,  1210,  1200,     0,     0,  1235,  1223,
    1214,   964,    75,     0,     0,  1116,     0,   185,   131,   163,
     146,     0,     0,     0,    76,     0,   151,     0,  1108,  1128,
       0,  1124,     0,  1153,     0,     0,     0,     0,     0,  1123,
    1111,     0,  1106,     0,  1006,  1006,  1114,   130,    82,  1405,
       0,   698,   699,   172,    77,   178,    79,    81,   450,    80,
      78,   175,   960,  1197,     0,   958,     0,  1195,   967,   965,
     962,  1199,     0,  1069,  1049,     0,     0,     0,     0,   847,
    1343,     0,   875,  1041,     0,   165,   208,   206,     0,   193,
     115,   188,     0,   226,     0,     0,     0,   979,     0,  1063,
       0,  1083,     0,     0,   428,   434,   766,   650,   660,   745,
       0,     0,     0,     0,   655,   583,   581,   578,     0,   579,
     559,     0,     0,   557,   553,     0,   588,   662,     0,   678,
     675,   269,   268,   267,   266,   373,   371,     0,   377,   823,
     822,   384,   316,   322,   372,     0,   368,     0,   398,   394,
       0,   395,     0,     0,   396,     0,   369,     0,   822,   370,
       0,   413,     0,     0,   667,   809,   667,  1171,   884,     0,
       0,   895,     0,   897,   901,   894,     0,   898,   896,   909,
     913,   892,   893,     0,  1222,  1202,     0,  1203,  1233,     0,
       0,     0,     0,  1227,  1179,   181,  1118,     0,   163,     0,
      75,   148,   147,   150,   145,   149,   152,     0,     0,     0,
       0,     0,   132,     0,     0,     0,    96,     0,     0,   163,
     169,    92,    93,   202,     0,     0,     0,  1120,  1110,  1107,
    1112,  1121,     0,     0,  1122,  1125,   421,  1137,  1130,   450,
     450,     0,     0,     0,   626,  1045,  1052,  1016,     0,     0,
       0,     0,     0,     0,     0,     0,   165,     0,     0,   208,
       0,  1190,   207,     0,     0,    73,     0,   112,     0,     0,
     219,     0,   867,   868,     0,     0,  1051,   429,   423,   609,
       0,     0,     0,   580,   584,   582,   561,   664,     0,   283,
     409,     0,   412,   375,     0,     0,   311,   318,     0,   321,
     315,     0,   378,     0,     0,   380,   382,     0,     0,     0,
     417,     0,     0,     0,   799,     0,   338,   340,   343,   342,
     345,     0,   314,   314,     0,   881,   878,     0,   911,     0,
     891,   713,     0,     0,     0,  1229,  1229,  1236,     0,     0,
    1215,     0,    75,     0,   162,   182,   110,     0,     0,    94,
       0,   100,     0,   134,   135,   133,    95,   163,   168,    97,
     203,     0,  1129,     0,  1145,   450,     0,   174,   968,   966,
    1069,     0,   875,   226,     0,     0,   849,   845,   846,     0,
     848,     0,     0,  1193,   205,   139,   128,   121,   122,   123,
     124,   125,   126,   127,   142,   141,   113,   114,     0,     0,
       0,   869,     0,   610,     0,   611,     0,   681,   414,     0,
       0,   408,     0,   309,   307,   310,   312,   308,     0,     0,
     385,   401,     0,   381,   379,   390,     0,   421,     0,   392,
     344,     0,   666,   668,     0,     0,   250,   249,   879,     0,
       0,   908,   912,     0,  1209,     0,     0,  1231,  1231,   416,
       0,  1217,     0,   168,   184,     0,   154,   161,   153,     0,
       0,    91,     0,    98,   192,    84,   420,     0,  1132,     0,
     179,  1044,  1048,     0,   220,     0,   853,   851,     0,     0,
       0,   226,   208,   115,     0,   223,     0,     0,   875,   612,
     677,     0,     0,     0,   407,   410,     0,   383,     0,     0,
       0,   418,   419,   391,   341,     0,     0,   316,   882,   910,
    1204,  1229,  1228,  1230,   291,   291,  1208,  1237,     0,   192,
     140,     0,     0,   118,    84,     0,   109,     0,  1126,  1144,
     180,     0,   850,   852,     0,   165,   221,  1191,    74,   224,
     225,     0,   416,  1536,  1286,  1507,     0,   679,   682,   680,
     674,     0,   319,     0,   325,   400,   669,   670,   313,  1231,
     294,   294,   416,   109,   155,   160,     0,    99,   101,   189,
     190,   191,     0,   105,   102,   106,     0,   226,     0,     0,
     854,     0,   865,     0,   686,   685,   684,   688,   687,   411,
       0,     0,   317,   291,  1220,  1219,  1216,    75,   117,     0,
       0,     0,   107,     0,   108,    83,   222,     0,   841,     0,
     875,     0,   320,     0,   294,   186,    88,     0,    87,     0,
     171,   104,     0,   855,   416,   683,     0,  1221,    86,    90,
      89,     0,   866,   324,     0,     0,     0,     0,     0,     0,
     856
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -2449, -2449, -2449,  1754, -2449, -2449,  -336, -2449,  -409,  -403,
   -2449, -2449,    57,  -648,  1323, -2449,  -938, -1585, -2242,  -369,
   -2449,  -447, -2449,  -194, -1573,  -418,  -405, -2449, -2150,  -794,
   -2449,  1515,  -103, -2449,   709, -2449, -1920, -2449, -2449,   699,
   -2449,  -813, -2449, -2449, -1676,   337,  -356, -2112, -2152,   655,
    -613, -2449,  -401,   378, -1501, -2449,   726, -2449,  -342, -2449,
    -459, -1977,    72, -2159,  -950, -2449, -2449,   362,  -934, -2312,
      24,  1541,   424, -2449,    19,   218,   -33,    22,    39,    54,
      60,  1573,  1606, -2449,  -539,   772, -2449, -2449,  -579,   -42,
   -2449,   783, -2390, -1866,  -366,  1143,  1562,  1567,  -220,  -122,
   -2449,  -305, -2449,  -614, -2449, -2449,   792,  1175, -1064, -1098,
   -2449,   505, -2449,  -223, -2449,   237,  -364,  1157, -2449,  1581,
   -2449, -2449, -2449, -2449, -1062,   786, -1686,   529, -1765, -1658,
     275,   262,  -516,   -85,    20,   538,  -180, -2449, -2449,  -178,
   -1532, -2176,  -195,  -193, -2449, -2449,  -983,  1032,  -815, -2449,
   -2449,  -666,   663, -2449, -2449, -2449,   851,  1735, -2449, -2449,
    1812,  1947, -2449,   399,  1979,   532,  -698,  1320, -1026,  1331,
    -998, -1007, -1040,  1332,  1334, -1051,  2486, -1402,  -756,    36,
   -2449, -2182, -1428, -2449, -2449,    80, -2449,  -267, -2449,  -264,
   -2449, -2449, -2449,  -243, -2448, -2449,  1264, -2449, -1090, -2449,
    3375,   853, -2449, -1446,  -496,  -570,  -804, -1746, -2449, -2449,
   -2449, -2449, -2449, -2449,  -980, -1600,  -371,   908, -2449, -2449,
    1017, -2449, -2449,  2080,  -575,  1129,  -523,  -700,   913, -2449,
    -545,  1269, -2449,    25,  -487,   119,  -867,   123, -2449,  3055,
     910,    -6, -2449,  -297,  -512, -1049,  -746, -2449,  -568, -2449,
   -2449, -2449, -2449, -2449,     7, -2437,  -372, -2449, -2449,  -337,
   -2449, -2449, -2449, -2449, -2449,  -932, -2449,  -128, -2449, -2449,
   -1932, -2449,   591, -2449, -2449, -2449,   569,   303, -1796,   114,
   -2449, -2449, -2449, -1824,   104, -2449,   304, -2449, -2449, -2449,
   -2449, -2449, -2449, -2449,   762, -2449, -2449,  1278, -2449, -2449,
   -2449, -2449, -2449,  -987, -2449, -2449, -2449, -2449, -2449,  -778,
   -2449, -2449, -2449, -2449,  1473,  -587, -2449, -2449,  -595,  -831,
    -652,  -838, -2449,   258,  -931,   467, -2449, -2449, -2449, -2449,
   -2449,  -318,   775, -2088, -2449,   739, -2449, -2449, -2449, -2449,
     198,   488, -2449, -2449, -2449, -2449, -2449, -2449, -2449,   530,
   -2449,  1214, -2449,   517,  -514,   852, -2449, -2449,  1152, -2449,
    1111, -2449,   433,  1302,    33, -2449,  1666, -2449, -1921, -2449,
      55, -2449, -2125, -2449, -2449,   317,   568, -2449,  -126, -1745,
     136, -2449, -2270, -2372, -2449,  -192, -2247, -1530,  1636,  -490,
    -465, -1909
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    35,    36,    37,    38,    39,   578,  1016,   522,  1017,
    1018,   655,    40,  1028,   657,   658,    41,  1946,  2233,  2708,
    1967,  2800,  2400,  2401,  1645,  2753,  2754,  1948,  2015,  1268,
    2747,  1709,  2574,  1651,  1634,  2402,  1718,  2524,  2269,  1646,
    2204,  1710,  2387,  2635,  1338,  1711,  2636,  2380,  1712,  1311,
    1335,  2206,  2755,  1652,  1312,  2234,  1255,  1713,  2706,  1714,
     484,  2405,   524,  2007,   982,    43,    44,   553,    45,  2450,
     525,   821,  1919,  1610,   526,   735,    49,    50,    51,   574,
     566,   567,  1174,  1558,  1862,   801,   547,   548,   589,  1305,
    1205,  1206,  1582,  1908,  1230,  1231,   810,   811,  2477,  2616,
    2478,  2479,  2323,  2324,  2772,  1218,  1222,  1223,  1595,  1588,
    1211,  2152,  2496,  2497,  2498,  2344,  1226,  1227,   813,   814,
     815,  1235,  1605,    53,  1562,  1870,  1871,  1872,  2130,  2131,
    2145,  2141,  2329,  2485,  1873,  1874,  2470,  2471,  2591,  2148,
    1880,  2489,  2490,  2544,  1751,  1056,  1057,  1383,  1058,   736,
    1059,  1412,   737,  1095,  1061,   738,   739,   740,  1064,   741,
     742,   743,   744,  1078,   745,   746,  1112,  1401,  1402,  1403,
    1404,  1405,  1406,  1407,  1408,  1409,   786,  1466,   748,   749,
     750,  1876,   751,  1167,  1546,  2502,  2612,  2613,  1855,  2112,
    2309,  2469,  2673,  2727,  2728,   752,   753,  1543,  1162,  1163,
     754,  2236,  1165,  1459,  1486,   867,   868,  1069,  1436,  1437,
    1462,  1783,  1469,  1475,  1810,  1811,  1487,  1511,   755,  1419,
    1420,  1767,  1080,   756,   610,   872,   611,  1076,  1505,   764,
     757,   758,  1601,   559,  2481,   646,   964,   759,   760,   761,
     762,   763,  2321,   465,  2693,   996,   791,   870,  1647,  1501,
      54,  1320,  2559,  2258,  2259,  2432,  2556,  2657,  2759,  2760,
      55,   534,    56,    57,    58,    59,  2453,  2276,   986,  1340,
    1720,   485,    60,  2159,  2504,  1576,  1577,  1894,  1895,  2356,
    2169,  1896,  2357,  2165,  2354,  2166,  2167,  1897,  1898,  1899,
    1900,  1901,  1902,    61,   977,  1326,    62,   782,   563,   783,
     785,    63,   668,   614,    64,   542,   543,    65,    66,  1259,
      67,    68,   514,   515,   643,  1000,   516,    69,  1330,  1286,
    1029,   851,  1276,  1023,    70,  1331,    71,  1697,  2427,  2023,
    2428,  1740,  1691,  1026,  1736,  1363,  1315,  1027,   472,  1376,
    2024,  1993,  1364,    72,   486,   988,    73,  1955,  1956,  1957,
    1648,   832,  2648,  1649,   833,   834,  1959,    74,   554,   555,
    1030,  1185,  1031,    75,   527,    77,    84,    78,   650,    79,
     528,  1616,  1241,  2371,    81,  1926,  1619,  1929,  2517,  2179,
    1924,  1930,  2627,  2694,  1927,  1620,  2518,  1621,   492,   467,
     468,   969
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     464,   573,   642,   765,   973,   491,  1022,   850,   590,   491,
    1019,  1254,  1290,   816,  1458,   535,   491,   541,  1289,    47,
     541,  1413,  1273,   560,    46,  1114,   491,   491,   645,  1089,
    1090,   660,  1882,    76,  1123,  1265,   970,   776,   541,  1323,
    2172,   965,   462,  1324,  1889,  1325,  1327,  1103,  1261,   558,
    1201,  1949,  1225,  1433,    52,    80,   661,  1354,  1003,  1301,
     651,  1785,  1786,   584,  2240,  2256,  1805,  1429,   787,  1964,
      52,  1966,    42,   523,   592,  1842,  1294,  1492,  1493,   560,
     491,   560,   560,   560,  2266,  1414,  1432,  1931,   852,  2270,
     856,   593,   860,   569,  2099,  1431,  1032,  -824,  2170,   677,
    -450,  2161,  1829,  1830,  2161,  -824,  -824,  2441,   604,  2144,
     599,   652,   602,  2440,   606,  -825,  1564,  1184,   654,   967,
    2445,  -236,   997,  -825,  -825,  1600,   470,   997,  1345,   463,
     490,  1788,  1945,  1877,   518,  2472,  1132, -1590,  1257,  1503,
    -483,   536,   532,  1503,   968, -1590, -1590,  2384,  1292,  1494,
    -488,   568,   568,  1006,  -488,   532,  1561,  1597,   997,   677,
     561,  -491,  -463,   974,  2493,  2425,  1138,  2359,   660,  -802,
    -478,  -239,   532,   532,   636,   660,  -696,  1172,  1540,  2547,
    -491,  1877,  2127,  -696,  2185,  1541,  1274,   662,  2515,  1277,
    1278,   990,  1010,   661,  1524,   585,  2621,   677,  1140,  -715,
     661,   970,  2001,  1132,  1890,   600,  -715,  2582, -1053,   677,
    2080, -1016,  1124,  -236,  1246,  2142, -1016,  1765,    48,  1212,
     587,  1266,  2162,   809,  2505,   812,  2749,   770,  1168,  2535,
    2557,  2779,  1266,  1138,    48,  1380,   991,  1122,  2410,  2595,
    1177,  2654,  2369,  2029,  2031,  2011,  2628,  2631,  2593,  2267,
    1788,   545,   572,  1024,  1318,   777,  2695,  2291,   595,  1579,
     626,   586,    48,  -239,  1213,  1140,  2522,  1132,  2198,   587,
     591,  1834,  2515,  1635,  1603,  2763,  2626,   799,  1279,  2381,
    2564,   660,   660,     3,     4,  2446,  2533,  2539,  1304,  2596,
     805,  1299,  1300,  1695,  1879,   806,   627,  1138,  1835,  1132,
    1284,  2447,  1257,  1198,  2740,  2741,   661,   661,  2809,  2173,
     869,    82,  1977,  1249,  2162,  1257,  2608,  2162,  2208,  1879,
    1525,  2787,  1238,  1257,  1285,  1258,  1179,  1010,   532,  1140,
    2437,   628,   677,  1260,   570,  2057,  1526,  2353,   587,  1888,
    1288,  1527,  2274,  2805,  2361,  1580,  1109,   596,  2765,  2716,
    1467,  1295,  2298,  2382,   546,    83,  1114,  2750,  2197,  2144,
    2534,  1140,   807,  1008,  1933,  2811,  1009,  2773,  1110,   869,
    1070,  1336,  2174,  1089,  1090,  1215,  1528,  1548,   629,  2817,
     800,  1103,  1604,  2794,   805,   540,  2536,  2061,  2062,  2063,
    2064,  1788,  2209,  2068,  2069,  2070,  2071,  2072,  2073,  2074,
    2075,  2076,  2077,   529,  -236,  2292,   583,  2472,  2268,   992,
     998,   808,  2632,  1267,  1836,   998,  2532,  1342,  1280,  1837,
     778,  2739,   779,  2597,  1267,  2643,  1281,   965,  1760,  1303,
    2558,  1458,  2594,  1216,  1627,  2751,  1319,  1180,  1877,  2194,
    1877,  2196,  2103,  2104,  2374,  2786,   998,  2326,  2515,  1194,
    1236,  2330,  1237,  2370,  -239,  1589,   807,  1362,  1264,  2289,
    2745,  1173,  2651,  1251,  2796,  2315,   560,  2810,  -236,  2385,
     637,   771,  2210,   625,  2761,  1264,  1293,   588,  1379,  1726,
     560,  2448,   642,   491,   562,  1933,  1264,  1347,   573,  1911,
     613,  1905,  1290,  1351,  2688,   612,  2766,   617,  1504,  1684,
    2731,  1416,  1844,  2717,   615,   967,  2164,  1169,   641,   491,
     491,   631,  2240,  2718,  1348,  1884,   993,  1549,  -239,   660,
       3,     4,  1597,  2426,  1529,    52,   616,  2281,  1990,  1991,
     968,  1418,  -696,  2353,  1542,   967,  1044,  1696,   573,  2515,
    1070,   772,  1266,   541,   661,   541,  2780,  2462,  1416,   970,
     817,   560,  2170,  2473,   671,  -715,  2671,  1181,  1934,   491,
     968,  1838,   999,  2440,   869,   869,   869,  1002,   530,  1500,
     471,  1839,   560,   597,    52,  1684,  1252,  -236,   656,  1415,
    1077,   519,   774,  2039,   531,  2672,  -824,  1886,  1422,  1088,
    2163,   560,  1426,  2351,  1706,    47,   592,  1124,  2164,  1356,
      46,  2164,   970,   796,  -825,  1563,   654,  2375,   633,    76,
    1803,  1472,  1474,   593,  1109,  1161,  -236,   822,  -236,   781,
    2653,   560,   560,   560,  1661,   788, -1590,  -239,  1506,  -483,
      52,    80,  2386,  1109,  1664,   648,  1110,  1667,  2360,  -488,
    1978,  2482,  2662,  2065,  1127,  2663,  2486,   967,    42,  2488,
    1111,  1094,   980,   983,   984,  1110,   608,  2373,  -802,  -478,
     609,  1175,  1565,  1284,   532,  1074,  -239,  2622,  -239,  1113,
    1891,  2797,   968,  1014,  1015,  1892,  2443,  1659,   564,  1158,
    1159,  1160,  1161,  1893,   568,  2412,  2413,  1285,  1950,    48,
     869,  1458, -1016, -1016,  1445,   608,  1653,    25,   780,   609,
     573,   577,  1446,  1447,  1448,  1877,  1743,  1467,  1467,  1877,
    1735,  1744,  1467,  2388,  1734,  2584,    52,  2045,  2047,  2048,
    1680,  1681,  1682,  1266,  2444,  2363,  1800,  1801,  1802,  1803,
    2042,  1624,  1635,    29,  1267,   626,  2722,  1953,    48,   572,
     576,  1156,  1157,  1158,  1159,  1160,  1161,  1761,  1467,  1467,
    2044,  2046,  2798,  1070,  2429,  2003,  1209,  1725,  1660,  2043,
    2391,  1727,  1632,  1745,  1729,  2221,  1316,   560,    25,  2037,
    1662,   627,   967,    31,   967,  1665,  2090,  1670,   965,  2799,
     805,  2066,  1677,   491,   491,  2053,   608,    32,  1824,   572,
     609,  2067,   591,  2240,    48,  2525,  1264,   968,  1191,   968,
    1951,  2603,   575,  2059,    29,  2060,  2000,  2578,  1014,  1015,
      25,    33,   594,   560,   560,  2579,  1244,   560,  1256,  2393,
    1633,  1290,  1885,  1203,  1204,   571,  1208,  1386,  1387,   607,
     560,  2081,   519,  1358,  2084,  1070,  1392,  1393,   677,   822,
     593,   593,  1298,   593,    31,  1240,    29,   560,  1245,  1109,
     622,   560,   807,   629,   623,    25,   967,  2438,  2804,  1210,
    1212,  1272,  1632,  1702,  1922,  1798,  1799,  1800,  1801,  1802,
    1803,  1110,   660,  1291,  2774,  2775,  1098,  1099,   869,  1988,
      48,   968,  1296,  1905,  1317,  1111,    31,   660,  2459,  1877,
    1979,    29,  1392,  1393,   630,    85,   571,   661,  1923,  1877,
      32,   808,  1266,  1132,  1877,  1213,  2546,  1877,   568,   635,
    1266,  1088,   661,  1346,  2640,  1267,  2403,  1092,  1932,  2396,
    1942,  1763,  2012,  1973,    33,  2016,   585,  2135,  2807,  1360,
     533,    31,   639,  1138,   677,   520,  1974,  2634,   571,  -283,
    2404,  2200,  1877,  2566,  -283,    32,   634,   676,  1396,  1397,
    1788,  1120,   827,   638,  2638,  1789,  1790,  1791,   824,  1070,
     649,  2136,  2397,   665,   825,  1140,  1313,  1214,   618,    33,
     619,  1904,   560,  1266,   666,   824,  2332,  1264,   474,  2398,
    1339,   825,  2580,   521,  1881,  2138,  1819,   667,   641,  2531,
    2235,   669,   586,   641,  2567,   491,   491,  1192,   491,   641,
    1193,   560,  2568,  1328,  1396,  1397,   869,  2649,   670,  1952,
    1953,  -283,  1088,  1832,  1346,   671,  1215,  1863,  1864,   591,
     591,  1976,   591,  -282,   672,  1909,  1877,  2201,  -282,  1980,
     677,  2569,  1355,  1467,  1467,  1467,  1467,   475,  1954,  1467,
    1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  -833,
    -833,  1742,  1961,  1122,  1963,  1746,    86,  1747,  2583,  1877,
    -283,  1323,    52,   769,    87,  1324,   656,  1325,  1327,   587,
     826,  2278,  2475,    25,  1216,  2399,   608,  2476,  -802,   775,
     609,  1458,   869,  1082,  1083,  2022,  1997,   826,  1467,  1467,
    2202,   613,  1984,  2203,  1267,  -282,   612,  2696,  1460,    88,
     784,  1427,  1267,   532,  2570,   615,    25,  2140,  1100,    29,
    1818,   789,  1820,  1821,  1070,  2571,  2220,  2082,  2083,  1306,
    1307,  1349,  2212,  1350,  1598,  1599,    52,   616,  2195,  1195,
    1394,  1395,  1196,   824,   641,  2134,   792,  1352,  1378,   825,
    1196,  1379,    29,   790,  -282,  1410,    89,  1612,  1411,    31,
    -329,  -329,   967,   967,   967,  1793,  1264,   797,  2211,  1109,
    2219,  1877,  2253,    32,  1264,  1267,   560,  1449,  1450,  1451,
    1362,  1452,  1453,  1454,  1455,  1456,  1457,   968,   968,   968,
    1573,  1110,    31,  1002,   793,   824,   560,    33,   560,  2420,
    2762,   825,  2795,  1396,  1397,  1113,    32,  1559,   794,  1068,
    1608,   571,  1877,  1196,  1188,  1190,  1384,  1385,   588,   480,
    2776,   481,  2135,  -333,  -333,   824,  2020,  1568,   798,  1570,
      33,   825,   827,   803,  1794,  2181,    48,  1264,   560,  1692,
    -332,  -332,  1693,  2134,   571,   483,  1618,  1622,   818,   827,
    2416,  1256,   491,   660,  1723,   826,  2136,  1379,   967,  1416,
     781,   819,   491,  1637,   491,  1641,   620,   491,   621,  1602,
    1615,  2137,   820,   491,  1737,   491,  1762,  1738,   661,  1196,
    2138,  1769,  2812,   968,  1196,   828,   641,   491,   823,   829,
    1773,   641,   491,  1196,  1386,  1387,   491,   491,   491,   491,
      48,   491,   491,  1877,   835,   836,   829,   826,   824,  1807,
    2458,  1182,  1196,  2139,   825,  1088,  2572,   995,   830,  2573,
    2135,   560,  1716,   971,  1717,  1701,   837,  2114,  2115,  2116,
    2117,  2239,  1088,   853,  1346,   830,  2088,   826,  1715,  1613,
    1060,  1905,   857,  1969,  1971,   838,  1970,  1972,  2035,   975,
    2049,  2036,  1699,  1196,  2136,  1388,  1389,  1390,  1391,  1392,
    1393,   972,  1707,  1394,  1395,  2149,   824,  1416,   802,  2137,
     804,  1510,   825,   676,   976,   985,  1788,  1628,  2138,  1068,
    2545,  1789,  1790,  1791,   831,  1752,   978,  1636, -1496,  1639,
    2376,   987,  1650,  2220,  2095,   839,   869,  1196,  1654,   989,
    1656,   831,  2140,  2182,   994,  2186,  2183,   827,  2187,    25,
    2199,  2139,  1663,  1693,  1653,   995,  2241,  1666,   474,  2252,
     826,  1671,  1672,  1673,  1674,  1380,  1678,  1679,  1070,  1001,
    1795,  1796,  1797,  2483,  1798,  1799,  1800,  1801,  1802,  1803,
    1004,  -877,   573,  2277,   837,    29,  1082,  1083,  2235,   663,
    2262,   664,  1007,  1693,  2279,  1100,  1512,  2280,  2299,   827,
     854,  1411,  1025,   838,   829,  1070,  1856,  1005,  1857,    48,
     767,  1396,  1397,  2377,  1072,  1073,  1693,   475,   826,  2378,
   -1496,  1070,  1693,  1513,  1075,    31,   573,   840,  2433,   827,
     967,  2434,   967,   855,   967,   676,  -454,  -461,  1788,    32,
    2140,  1070,  1081,  1789,  1790,  1791,  2463,  1442,  1443,  1411,
    1060,  2526,   858,   839,  2527,   968,   829,   968,  2607,   968,
    2092,  2607,  1084,    33,  2552,  1460,  1085,  1693,  1062,  2585,
    1070,   477,  1411,  2588, -1496,   841,  2589,  1614,  2336,  1086,
    1091,  2339,  1623,   842,  1467,   859,   829, -1496,  2600,  1087,
     571,  1002, -1496,  1070,  1858,   843,  1859, -1496,   560,   831,
    1792,    48,  -451,  2605,  2609,  1878,  2606,  2606, -1496,  1093,
    2408, -1496,   827,  -452,  2618,   830,  2629,  2619,  1021,  2630,
    1096,  1793,  1398,  1399,   970,  1021,  2484,   844,  1097,  1860,
    2668,   573,  1068,  2630,  1514,  2669,  1102,  1104,  1411,  1515,
   -1496,  1105,  -455,   613,  1516,   840,  2550,  1875,   612,  2677,
    -453,   831,  1002,  1878,  1166,  1920,  1416,   615,  1925, -1496,
    2683,  1618,  1905,  2606,  2700,  1668,  1106,  2701,  2712,   829,
     827,  1002,  2331,  2732,  2334,   846,  2733,  1313,    52,   616,
    1107,   831,  2022,  2364,  1171,  1467,  1108,  2417,  2418,   480,
    1794,   481,   466,   841,  1115,  1875,  1125,   847,  1669,  2735,
    2769,   842,  1002,  2606,  2788,  1116,  1129,  2789, -1496,  1126,
    1172, -1496,   482,   843,  1068,   483,  1173, -1496,   849,  1176,
    1186,    90,  2790,  1675,   469,  2630,  2238,   829,  1199,  1183,
     517,  1021,  1021,  1120,   463,  1200,   837,  1313,  1062,  1202,
     544,   806,   560,  1793,   556,   844,   808,  1313,   560,   560,
     491,   766,   560,   768,  1467,   838,  1676,  1232,  1234,  1262,
    1242,  1263,  1269,  1060,   831,   967,   560,  1264,  1270,  2235,
    1271,  1275,   641,  1996,  1282, -1496,  1283,  1120,  1287,  2002,
    2004,  1297,   463,  2008,  1302,  1309,  1517,  1310,  1313,  1313,
     968,  1314,  1321,   846,  1329,  1510,  1518,  2019,  1322,   676,
    1707,  1332,  1788,  1333,  1761,   839,  1334,  1789,  1790,  1791,
    1343,  1851,  1794,  1346,  1377,   847,  1077,  1088,  1094,  2239,
    1381,  1382,   831,   677,  2093,  1460,  1417,  1418,  1476,  1869,
    1861,  1423,  1477,  1132,  1489,  1502,   849,  1509,  1068,  1520,
     660,  1521,    48,  1523,  1544,  1060,  1567,  1545,  -248,  1561,
    1574,  1070,  1575,  1578,   586,  1590, -1496,  1592,  1591,  1593,
    2109,  -248,  1609,  1611, -1496,   661,  -248,   573,  1629,  1630,
    1625,  1631,   587,  2215,  1685,  2005,  1690,  1869,  1698,  1694,
    1700, -1496,   572, -1496, -1496,   573,  1795,  1796,  1797,  1703,
    1798,  1799,  1800,  1801,  1802,  1803,  1704,   840,  2113,  1705,
    1719,  1721,  1722,  1728,  1730,  1731,   560,   560,   560,  1739,
     464,  1749,  1878,  2132,  -248,  1753,  1756,  2132,  2146,  1754,
   -1496,  1757,  1758, -1496, -1496, -1496,  1759,  2529,  1771,  1761,
    1772,  1774,  1775,  -248,  1776,  1777,  1778,  2118,  2119,  2120,
    2587,  1780,  1784,  2785,  1806,   841,  1781,  1812,  1813,  1196,
    1814,  1062,  1875,   842,  1875,  1815,  1816,  1823,  1826,   560,
    1828,  1833,  1840,  1849,  1850,   843,  1852,  1854,  1290,  1060,
    1853,  1879,  1887,  1907,  -334,  2644,  1070,  1618,  -335,  1912,
     491,  1913,  -248,  2419,  1313,  1256,  1313,  1915,  1339,  1916,
    2176,  -248,  1918,  1068,  1921,    25,  1928,   844,  1935,    48,
    1936,  1938,  1941,  1944,   491,  2637,  2225,  1793,  1795,  1796,
    1797,  1940,  1798,  1799,  1800,  1801,  1802,  1803,  1947,   491,
     491,   491,   491,   491,   491,   491,   491,   491,   491,  1960,
    1962,    29,  1985,  1062,  1975,  1981,  1070,  2592,  1982,   463,
    1983,   463,   560,  1986,   560,   846,  1070,  1989,  1987,  1122,
    1998,  2006,  2009,  1438,  1256,  2592,  2010,  2366,  2013,  2014,
    2017,  2018,  1339,  2021,  2034,   560,  2028,   847,  2052,  2041,
    2699,    31,  1313,  2257,  1809,  2261,  1794,  1788,  1808,  2085,
    2283,  2646,  2097,   967,  2086,    32,  2273,   967,   849,  2087,
    2098,  1861,  2110,  2125,  2101,  2147,  1355,  2121,  2133,  2151,
    2239,  2153,  2155,  2158,  2156,  2191,  2168,  2388,   968,    33,
    2171,  2178,   968,  2389,  2160,  2175,  2180,  2655,  1120,  2184,
    2193,  2207,  2223,   571,  1060,  2390,  2205,    25,  2255,  2224,
    -248,  2264,  2272,  2275,  2123,  2290,  2126,  2265,  1693,  2284,
    2670,  2293,  1566,  2285,  2242,  2243,  2244,  2245,  2246,  2247,
    2248,  2249,  2250,  2251,  2391,  2310,  2392,  1062,   560,   560,
     560,   560,  2756,    29,  2692,  2680,  2287,  2132,  2146,   570,
    2132,  2294,  2317,  2320,  2238,  2322,  2307,  1878,  2318,  2325,
    2327,  1878,  2328,  2637,  2335,  2340,  2341,  2338,  2342,  2311,
    2312,  2313,  2314,  2343,   608,  2349,  2355,   793,   609,  2350,
    2358,  2372,  2362,    31,  2383,  2379,  2406,   659,  2407,  2421,
    2411,  2422,  2423,  2393,  1070,  1460,  2424,    32,  2430,  1875,
    2431,  2435,  2436,  1875,  2442,  2449,  2451,  1925,  2454,  2457,
    2455,  1618,  2460,   466,   466,  2461,  2468,  1256,  2474,  2487,
    2492,    33,  2394,  2501,  1070,  2508,  2509,  1070,  2513,  2365,
     466,  2367,  2511,  2519,  2521,   571,  2523,  2537,  2540,  2528,
    2541,   967,  2415,  2542,  2543,  2555,  2551,  2554,  2561,  2562,
    2565,  2576,  1795,  1796,  1797,  2577,  1798,  1799,  1800,  1801,
    1802,  1803,  2586,  2590,  2598,    48,   968,  2611,  2599,  2602,
    2615,  2623,  2626,   466,   466,   966,  2620,  1068,  2642,  1313,
    2647,  2645,  2656,  2650,  2658,  2659,   463,  2664,  2395,  1715,
     463,  2665,  1062,  2396,  2676,  2666,  2685,  2686,  2689,  2452,
    2687,  2702,  1021,  2698,  2536,  2704,  2710,  2705,  1741,  2707,
    2711,  2713,  2719,  2439,  1068,   466,  2714,  1021,  2715,  2721,
    2720,  2730,  2734,  2746,   659,  2752,  2111,  2764,  2770,  2771,
    1068,   659,   466,  1071,  2778,  2781,  2397,  2783,  2791,  2780,
    2792,   464,  2132,  2779,  2793,  2802,  2480,  2806,   466,   491,
    1068,  1878,  2808,  2398,  2814,  2816,  1878,  2813,  2818,  1878,
     795,  2491,  1357,  2801,  2494,  2748,  2641,  2784,  2777,  1253,
    1943,  2575,  1965,   560,   560,  2744,   466,  2271,  1994,  1068,
    2227,  1869,  2782,  1875,  1939,  1869,  1131,  2743,  2189,  1132,
    1239,  1903,  1197,  1875,  2516,   466,   466,   466,  1875,   466,
    1178,  1875,  1068,  1229,  1240,  2506,  1365,  1228,  1060,  2679,
    1607,  2617,  2738,   641,   491,  1914,  1587,  2154,  2684,  1138,
     466,  2346,   560,  1606,  1233,  1917, -1591,  2128,    48,  2316,
      48,  2333,  1063,  2604,  2124,  2238,  1875,   659,   659,  2675,
    2674,  2681,  1750,  1428,  2682,  1060,   491,   491,  2736,  2399,
    1366,  1140,  2737,  2538,  1430,  1434,  2503,  1435,   560,  2729,
    1256,  1060,   491,  1550,  1906,  1847,  1766,  1845,  1689,   466,
     463,  2560,  1560,   466,   466,   560,  1367,  2820,  2516,  2553,
     463,  1060,  2803,  2667,   466,   463,  2122,  2157,   463,  2257,
    2348,  2510,   573,  1999,  2352,  2507,  1368,  1344,   491,  2263,
    1369,  1569,  1995,  1071,  2439,  2414,  2581,  2025,  2456,  1065,
    1060,  1878,    48,  2254,  1655,  2222,  2494,  2226,  1748,  1958,
    1875,  1370,  1831,   463,  1371,  2614,  1571,   466,   466,   466,
    2368,  2188,  2512,  1060,  2697,  1068,  2742,   491,     0,  2530,
    1372,     0,     0,     0,     0,   560,     0,     0,     0,     0,
       0,     0, -1591,  1875,     0,     0,   676,     0,     0,  1788,
       0,     0,     0,     0,  1789,  1790,  1791,   641, -1591,     0,
       0,  2548,  2549, -1591,     0,  1869,  2633,     0,   491,     0,
    1869,  2301,     0,  1869,     0,   560,  1968,  2563,     0,     0,
       0,     0,     0,     0,     0,     0,  1062,     0,     0,     0,
       0,     0,  1063,     0,     0,     0,     0,   463, -1591,     0,
       0,  2661,     0,   464,     0,     0,  2660,     0,     0,     0,
       0,     0,  2678,     0,     0,     0,   491,     0,     0,  1373,
    2491,  1992,     0,  1062,     0,     0,     0,  1374,     0,     0,
     463,     0,     0,   560,  1066,     0,     0,     0,     0,  1062,
     641,   641,   641,   466,  2516,  1875,     0,     0,     0,     0,
    1068,   966,  2624,  1149,     0,     0,  1060,     0,     0,  1062,
       0,     0,  2690,  1021,  1240,   659,  1067,     0,    48,  1065,
    2026,  1375,  2027,     0,     0,     0,  2032,  2033,     0,     0,
       0,   966,     0,     0,     0,     0,  1875,     0,  1062,     0,
    2491,     0,     0,    48,     0,     0,     0,     0,     0,  2614,
       0,  2480,     0,     0,     0,     0,  1071,     0,     0,     0,
       0,  1062,  1618,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1869,     0,     0,   560,  1256,
       0,   466,   463,  1120,     0,  2516,     0,   466,     0,     0,
     466,     0,     0,     0,   466,     0, -1591,     0,     0,     0,
    2757,     0,     0,   641,  1793,     0,     0,     0,   466,  2758,
       0,   466,   466,   466,   466,     0,     0,     0,     0,     0,
       0,   466,   466,   463,     0,  1068,     0,  1875,     0,     0,
       0,  1060,  1068,   466,     0,     0,     0,     0,  1071,   466,
     466,   466,   466,   966,     0,     0,     0,   466,   466,     0,
      48,     0,   466,   560,  1066,  1063,   466,     0,     0,   466,
     466,   466,   466,   466,   466,   466,   466,   466,     0,     0,
     466,     0,     0,  1794,   466,     0,     0,   466,   560,   466,
       0,   466,   560,     0,  2758,  1068,  1067,     0,     0,     0,
       0,     0,     0,     0,  1062,  1068, -1591,     0,     0,     0,
       0,     0,   466,  1156,  1157,  1158,  1159,  1160,  1161,  2815,
       0,    48,     0,  2819,   463,     0,     0,   466,   824,     0,
       0,     0,     0,     0,   825,  1131,   466,   466,  1132,     0,
       0,   837,  1065, -1591, -1591, -1591,     0,  1063,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     838,     0,     0,  2237,     0,     0,  1060,     0,  1138,     0,
       0,     0,  1071,  1060,     0,  1139,     0,     0,   966,     0,
     966,  1131,     0,     0,  1132,  1992,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   676,     0,
    1140,  1788,     0,     0,     0,     0,  1789,  1790,  1791,    48,
     839,     0,     0,     0,  1138,     0,     0,     0,     0,   466,
       0, -1591,   466,   466,  1065,   466,  1060,     0,     0,  1062,
       0,     0,     0,  1068,     0,     0,  1060,     0,     0,     0,
     826,     0,     0,     0,     0,     0,  1140,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   466,
       0,     0,   966,     0,     0,     0,     0,     0,     0,     0,
       0,  1063,     0,  1068,     0,     0,     0,  1066,   659,  1795,
    1796,  1797,     0,  1798,  1799,  1800,  1801,  1802,  1803,     0,
       0,     0,     0,   659,     0,   466,     0,     0,     0,     0,
       0,  1141,   840,  1068,     0,     0,  1068,     0,     0,  1067,
       0,     0,     0,   747,   747,     0,     0,  1142,     0,     0,
    1131,     0,  1143,  1132,     0,     0,     0,  1071,     0,     0,
       0,     0,     0,   466,   466,     0,     0,     0,     0,   466,
       0,     0,     0,  2345,     0,  2347,     0, -1591,  1065,     0,
     841,     0,     0,  1138,  1062,     0,     0,  1146,   842,  1066,
   -1591,  1062,     0, -1591,  1060,     0,     0,     0, -1591,     0,
     843,     0,     0,   866,   871,     0,     0,     0,     0,   466,
     466,   466,     0,     0,   466,  1140,     0,     0,     0,     0,
       0,  1067,   827,     0,     0,     0,     0,   466,   466,   466,
     466,     0,   844, -1591,  1060,   466, -1591,     0,     0,     0,
       0,     0,  1149,     0,  1062,     0,     0,     0,     0,     0,
     466,   466,     0,     0,  1062,   466,  1063,     0,     0,     0,
       0,     0,   866,     0,  1060,     0,     0,  1060,     0,   466,
       0,     0,   466,     0,   466,   845,     0,     0,  1079,   829,
     846,     0,     0,     0,     0,     0,  1841,     0,  1149,     0,
       0,     0,     0,     0,     0,   466,  1470,     0,     0,     0,
    1021,   676,   847,     0,  1788,  1794,  1101,   466,   848, -1591,
   -1591, -1591,     0,  1066,     0,     0, -1591,     0,     0,     0,
       0,     0,     0,   849,   466,  1117,  1118,  1119,     0,  1121,
       0,     0, -1591,  1065,     0,  1151,     0, -1591,     0,   466,
       0,     0,     0,     0,  1068,  1067,     0,     0,     0,     0,
    1170,     0,     0,     0,     0,   466,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   466, -1591,     0,   831,     0,     0,     0,     0,     0,
       0, -1591,  1062,     0,     0,     0,     0,     0,   966,   966,
     966,     0,     0,     0,     0,     0,     0,     0,     0,  1207,
       0,  1470,     0,  1219,  1224,     0,     0,   676,     0,     0,
    1788,     0,     0,     0,     0,  1789,  1790,  1791,     0,     0,
       0,     0,  1062,     0,     0,     0,     0,  1149,     0,   466,
       0,     0,  2302,     0,     0,  1152,     0,     0, -1591, -1591,
   -1591,  2237,  1156,  1157,  1158,  1159,  1160,  1161,     0,     0,
       0,     0,  1062,     0,     0,  1062,   473,   866,   866,   866,
     474,  1071,     0,     0,     0,     0,     0,     0,  1066,     0,
       0,     0,     0,     0,     0,  1060,     0,     0,     0,   659,
       0, -1591,     0,  -877,   966,     0,     0,     0,  1156,  1157,
    1158,  1159,  1160,  1161,     0,     0,     0,     0,  1071,     0,
    1067,  1795,  1796,  1797,     0,  1798,  1799,  1800,  1801,  1802,
    1803,   466,     0,     0,  1071,     0,     0,     0,     0,   475,
   -1591,   466,     0,     0,     0,   466,   476,     0,   466,     0,
       0,     0,     0,     0,  1071,   466,   466,   466,   466,     0,
       0,   466,   466,   466,   466,   466,   466,   466,   466,   466,
     466,     0,     0,     0,   466,   466,     0,     0,     0,     0,
    1063,     0,     0,  1071,     0,     0,     0,     0,   466,     0,
       0,  2652,     0,   477,   466,     0,     0,   466,  1794,   466,
       0,     0,     0,   866,     0,     0,  1071,   466,     0,     0,
     466,   466,     0,     0,     0,   466,   466,  1063,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   478,     0,
       0,     0,   466,  1063,   466,  1793,     0,     0,     0,     0,
   -1591,     0,     0,     0,     0,   466,     0,  1156,  1157,  1158,
    1159,  1160,  1161,  1063,     0,     0,     0,  1065,     0,     0,
       0,     0,     0,     0,   479,     0,     0,     0,     0,     0,
       0,     0,     0,  1470,  1470,     0,     0,     0,  1470,     0,
       0,     0,  1063,  1062,   466,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1065,     0,     0,  1421,     0,     0,
       0,   466,     0,     0,  1794,  1063,     0,     0,     0,     0,
    1065,   480,     0,   481,  1470,  1470,     0,     0,  1444,     0,
       0,  1461,     0,     0,  1473,     0,     0,     0,     0,     0,
    1065,  1480,  1485,     0,   482,     0,   966,   483,   966,  1071,
     966,     0,  2237,  1491,     0,     0,     0,     0,     0,  1495,
    1496,  1497,  1498,     0,     0,     0,     0,  1507,  1508,  1065,
       0,     0,  1519,     0,     0,     0,  1522,     0,     0,  1530,
    1531,  1532,  1533,  1534,  1535,  1536,  1537,  1538,     0,     0,
    1539,     0,  1065,     0,  1547,     0,     0,  1551,     0,   747,
       0,   866,  1066,     0, -1591, -1591, -1591,     0,  1798,  1799,
    1800,  1801,  1802,  1803,     0,     0,     0,     0,     0,     0,
       0,     0,  1572,     0,     0,     0,   466,     0,     0,     0,
       0,     0,     0,     0,  1067,     0,     0,     0,     0,  1066,
       0,     0,     0,     0,     0,     0,  1118,  1119,  1063,     0,
       0,     0,     0,  1020,     0,  1066,     0,     0,     0,     0,
    1020,     0,     0,     0,     0,     0,     0,     0,   466,   466,
       0,  1067,     0,   466,  1071,  1066,     0,     0,   466,     0,
       0,   466,   466,     0,     0,     0,   466,  1067,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1066,     0,     0,  1067,     0,   466,
    1795,  1796,  1797,   466,  1798,  1799,  1800,  1801,  1802,  1803,
       0,     0,     0,     0,     0,  1065,     0,  1066,     0,   866,
       0,     0,  1686,  1687,     0,  1688,  1067,     0,     0,     0,
       0,  1128,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   466,     0,     0,     0,     0,  1067,
       0,     0,     0,     0,  1020,     0,  1020,  1020,     0,  1724,
       0,     0,     0,  1063,     0,     0,     0,     0,     0,     0,
       0,   966,     0,     0,  1384,  1385,     0,     0,     0,     0,
     466,     0,     0,     0,     0,     0, -1498,  1384,  1385,  1071,
       0,     0,     0,     0,     0,   866,  1071,     0,     0,  1470,
    1470,  1470,  1470,     0,     0,  1470,  1470,  1470,  1470,  1470,
    1470,  1470,  1470,  1470,  1470,     0,     0,     0,     0,     0,
       0,     0,     0,  1020,     0,     0,  1020,  1020,     0,     0,
       0,     0,     0,     0,  1764,     0,     0,     0,     0,  1770,
    1065,     0,     0,     0,     0,     0,   659,     0,     0,  1071,
    1066,     0,  1386,  1387,  1470,  1470,   466,     0,     0,  1071,
       0,     0,     0,     0,     0,  1386,  1387,   466,   466,     0,
       0,   466,     0,     0,     0,     0,     0,     0, -1498,     0,
       0,  1787,  1067,   466,     0,     0,     0,     0,  1063,     0,
       0,     0,     0,   466,     0,  1063,     0,  1485,   466,  1485,
    1485,   466,     0,     0,     0,  1825,     0,     0,   466,   466,
       0,     0,     0,  1388,  1389,  1390,  1391,  1392,  1393,     0,
       0,  1394,  1395,     0,     0,     0,  1388,  1389,  1390,  1391,
    1392,  1393, -1498,     0,  1394,  1395,   466,     0,   466,  1843,
       0,     0,  1846,     0,  1848, -1498,     0,     0,  1063,     0,
   -1498,     0,     0,     0,     0, -1498,     0,   466,  1063,     0,
       0,     0,     0,     0,     0,  1065, -1498,     0,     0, -1498,
       0,     0,  1065,     0,     0,  1066,     0,     0,     0,     0,
       0,     0,  1131,     0,     0,  1132,     0,  1071,     0,     0,
       0,     0,     0,     0,  1207,     0,     0,     0, -1498,  1359,
    1361,     0,     0,     0,     0,     0,     0,  1067,     0,  1224,
       0,     0,     0,     0,     0,  1138,     0, -1498,     0,     0,
     466,     0, -1591,     0,     0,  1065,   466,  1071,     0,  1396,
    1397,     0,     0,     0,     0,  1065,     0,     0,     0,     0,
       0,  1937,  1396,  1397,     0,     0,     0,  1140,     0,   466,
       0,     0,  1164,   466,     0,     0,     0,  1071,     0,     0,
    1071,   466,     0,     0,     0,     0, -1498,     0,     0, -1498,
       0,  1424,  1425,     0,     0, -1498,     0,     0,     0,  1439,
     466,  1440,  1441,     0,     0,     0,  1063,     0,     0,   966,
       0,  1164,     0,   966,   466,     0,  1478,     0,  1479,   866,
    1066,     0,     0,     0,     0,     0,     0,  1066,     0,     0,
       0,  1490,     0,     0,     0,     0,     0,     0,  2102,     0,
       0,     0,     0,     0,     0,     0,  1063,     0,  1131,     0,
       0,  1132,  1067, -1498,     0,     0,     0,     0,     0,  1067,
    1398,  1399,     0,     0,     0,     0,     0,     0, -1591,     0,
       0,     0,   466,  1398,  1399,   466,  1063,     0,     0,  1063,
    1066,  1138,     0,  1065, -1591,     0,     0,     0, -1591, -1591,
    1066,  1164,     0,  1400,     0,     0,  1164,   466,     0,     0,
       0,  2051,     0,     0,     0,     0,     0,     0,  1861,     0,
       0,  2055,  1067,  1140,     0,  2056,   466,     0,  2058,     0,
   -1512,     0,  1067,  1065, -1591,  1596,  1596,     0,     0,     0,
       0,     0,     0,   466, -1498,     0,     0,     0,     0,     0,
       0,     0, -1498,     0,  2078,  2079,     0,     0,     0,     0,
       0,     0,     0,  1065,     0,     0,  1065,   466,   466, -1498,
       0, -1498, -1498,     0,  2091,     0,     0,  2094,     0,  2096,
       0,     0,     0,     0,     0,     0,     0,  2100,     0,  1149,
       0,  1020,     0,     0,  2105,  2107,  2108,   966,  1071,     0,
       0,  1020,     0,     0,  1020,     0,     0,     0, -1498,     0,
       0, -1498, -1498, -1498,     0,     0,     0,   466,     0,   466,
       0,     0, -1512,     0, -1591,  2150,     0,     0,  1066,     0,
    1470,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1591,     0,     0,     0,     0, -1591,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1067,     0,     0,     0,  2177,     0,     0,     0,  1066,     0,
       0,     0,     0,     0,     0,     0, -1512,  1020,     0,     0,
   -1591,  2190, -1591,     0,     0,     0,     0,   466,     0, -1512,
       0,     0,  1020,     0, -1512,     0,     0,  1063,  1066, -1512,
    1067,  1066,     0,     0,     0,     0,     0,     0,     0,     0,
   -1512,     0,     0, -1512,  1164,  1755,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1067,  1470,     0,  1067,     0,  1149,  1164,     0,     0,   -40,
       0,  1468, -1512,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1164,  1164,  1164,     0,  1164,     0,     1,     0,
       0, -1512,     0,     0,     0,     0,     0,     0,     2,     0,
       3,     4,     0,     0,  1065,     0,     0,     0,     0,     0,
       0,     0, -1591,     0,     0,     0,     5,     0,     0,  1156,
    1157,  1158,  1159,  1160,  1161,     6,  2286,     0,     0,     0,
    1470,     0,     0,     0,     0,  1164,     0,     7,     0,     0,
   -1512,     0,     0, -1512,     0,     0,     0,     0,     8, -1512,
       0,     0,     0,     0,     0,     0,     0,     0, -1591,     9,
       0,    10,     0,     0,     0,     0,     0,     0,  2295,  2296,
       0,     0,  1164,  2297,     0,     0,     0,     0,  2300,    11,
       0,  2303,  2304,     0,  1164,     0,  2308,     0,     0,  1164,
       0,     0,     0,    12,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    13,     0,     0, -1512,     0,     0,
    1883,    14,     0,     0,     0,     0,     0,     0,     0,    15,
       0,    16,    17,     0,     0,     0,     0,     0,     0,     0,
    1910,  1910,     0,     0,    18,     0,     0,     0,     0,  1066,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   747,     0,     0,     0, -1591,     0,
       0,     0,  1861,    19,     0,  1156,  1157,  1158,  1159,  1160,
    1161,  1067,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1512,     0,
    2409,     0,     0,     0,     0,     0, -1512,     0,     0,     0,
       0,  1131,    20,     0,  1132,     0,     0,     0,     0,  1133,
    1134,  1135,     0, -1512,     0, -1512, -1512,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1136,     0,     0,     0,
       0,     0,     0,     0,  1138,     0,     0,     0,     0,     0,
       0,  1139,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1512,     0,     0, -1512, -1512, -1512,     0,     0,
       0,     0,     0,     0,     0,     0,  1140,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2464,  2465,    21,
       0,  2466,    22,     0,     0,     0,  1164,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2038,  2040,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1164,
       0,     0,     0,    23,     0,     0,     0,     0,  2499,  2500,
       0,    24,     0,     0,     0,     0,  1164,     0,  1468,  1468,
       0,  1804,     0,  1468,     0,    25,     0,     0,  1164,     0,
       0,     0,    26,     0,     0,  1164,    27,     0,  2520,     0,
    1164,     0,     0,     0,     0,     0,  1164,    28,     0,     0,
    1164,  1164,  1164,  1164,     0,     0,     0,  1141,     0,  1468,
    1468,    29,  1164,  1164,     0,   837,     0,     0,     0,     0,
       0,     0,     0,  1142,  1164,     0,     0,  1164,  1143,     0,
       0,     0,     0,     0,   838,  1164,  1164,  1164,  1164,  1164,
    1164,  1164,  1164,  1164,  1164,     0,    30,     0,     0,  1144,
    1145,    31,  1164,     0,     0,     0,  1164,     0,     0,     0,
       0,     0,     0,  1146,     0,    32,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1164,     0,     0,
       0,     0,     0,     0,   839,  2213,     0,     0,     0,    33,
       0,     0,     0,  2214,     0,     0,     0,     0,     0,  2601,
       0,  1147,     0,    34,  1148,     0,   -40,     0,     0,     0,
       0,  1121,     0,     0,     0,     0,     0,     0,  1149,     0,
       0,  1150,     0,     0,     0,     0,     0,     0,     0,     0,
    2625,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2639,     0,     0,     0,     0,     0,
       0,     0,  2215,     0,     0,     0,     0,     0,  1020,     0,
       0,     0,     0,     0,     0,  1130,     0,     0,     0,     0,
    1131,     0,     0,  1132,     0,     0,   840,     0,  1133,  1134,
    1135,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1164,  1164,  1164,     0,  1136,     0,     0,  1137,     0,
       0,     0,     0,  1138,     0,     0,     0,     0,     0,     0,
    1139,  1151,     0,     0,     0,     0,     0,     0,     0,  2282,
       0,     0,     0,     0,   841,     0,     0,  2499,     0,  1164,
       0,     0,   842,     0,     0,  1140,     0,     0,     0,     0,
       0,     0,     0,     0,   843,     0,     0,  2216,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2709,     0,     0,     0,     0,     0,  1164,
       0,     0,     0,     0,     0,  1164,   844,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2726,  2726,     0,
    1804,  1804,  1164,     0,  1468,  1468,  1468,  1468,     0,     0,
    1468,  1468,  1468,  1468,  1468,  1468,  1468,  1468,  1468,  1468,
    1804,  1152,     0,     0,  1153,  1154,  1155,     0,  1156,  1157,
    1158,  1159,  1160,  1161,   846,     0,     0,     0,     0,     0,
    1164,  1779,     0,     0,  1804,  1804,  1141,     0,     0,  2726,
    1131,     0,     0,  1132,     0,     0,   847,     0,  1164,  1468,
    1468,  1164,  1142,  1164,     0,     0,     0,  1143,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   849,     0,  2217,
       0,     0,  2218,  1138,     0,     0,     0,     0,  1144,  1145,
   -1591,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1146,     0,     0,     0,     0,  1020,     0,     0,
       0,     0,  1020,     0,     0,  1140,     0,  2726,     0,     0,
       0,     0,     0,     0,     0,     0,  1359,  1361,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1147,     0,     0,  1148,     0,     0,     0,     0,     0,     0,
       0,     0,  1164,     0,     0,  1131,     0,  1149,  1132,     0,
    1150,     0,     0,  1133,  1134,  1135,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1136,     0,     0,  1264,     0,     0,  2106,     0,  1138,     0,
       0,     0,     0,     0,     0,  1139,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1131, -1591,     0,  1132,     0,
    1140,     0,     0,  1133,  1134,  1135,     0,     0,     0,     0,
       0,     0, -1591,     0,     0,     0,     0, -1591,     0,     0,
    1136,     0,     0,     0,     0,     0,     0,     0,  1138,     0,
    1151,     0,     0,     0,     0,  1139,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1164,     0,     0,     0,
    1164,  1164, -1591,  1164,     0,     0,  1804,  1804,  1804,  1804,
    1140,     0,     0,  1804,  1804,  1804,  1804,  1804,  1804,  1804,
    1804,  1804,  1804,  1164,  1164,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1164,  1359,  1361,  1164,
       0,  1164,     0,     0,     0,  1164,  1020,     0,  1804,  1804,
       0,  1141,  1164,  1164,     0,     0,     0,  1149,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1142,     0,     0,
       0,     0,  1143,     0,     0,     0,     0,     0,     0,     0,
    1152,     0,     0,  1153,  1154,  1155,     0,  1156,  1157,  1158,
    1159,  1160,  1161,  1144,  1145,  1164,     0,     0,  1131,     0,
       0,  1132,     0,     0,     0,     0,     0,  1146,     0,     0,
       0,  1141,     0,     0,     0,     0,  1131,     0,     0,  1132,
       0,     0,  1164,     0,  1133,  1134,  1135,  1142,     0,     0,
       0,  1138,  1143,     0,     0,  1164,     0,     0, -1591,     0,
       0,  1136,     0,     0,     0,  1147,     0,     0,  1148,  1138,
   -1591,     0,     0,  1144,  1145,     0,  1139,     0,     0,     0,
     493,     0,  1149,  1140,     0,  1150,     0,  1146,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1140,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1147,     0,     0,  1148,     0,
       0,     0,     0,   494,     0,     0,     0,     0,     0,     0,
       0,     0,  1149,     0,     0,  1150,     0,     0,   495,     0,
       0,  1164,     0,     0,  2305,  1468,     0,     0,     0,     0,
    1164,  1164,  1164,     0,     0,  1164,     0,     0,  1164,  1164,
   -1591,     0,     0,  1164,     0,  1151,     0,  1156,  1157,  1158,
    1159,  1160,  1161,     0, -1591,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1591,     0,  1141,     0,   496, -1591,     0,     0,     0,     0,
       0,     0,     0,   497,     0,     0,     0,     0,  1142,     0,
       0,     0,     0,  1143,     0,   498,     0,     0,     0,     0,
     499,     0,     0,     0,     0,  1151,     0,     0,     0,     0,
   -1591,     0,     0,     0,  1144,  1145,     0,  1020,     0,     0,
       0,     0,     0,     0,     0,     0,  1468,   500,  1146,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1164,  1152,     0,     0,  1153,  1154,
    1155,     0,  1156,  1157,  1158,  1159,  1160,  1161,     0,     0,
       0,     0,  1488,     0,     0,  1149,  1147,     0,     0,  1148,
     501,     0,     0,   502,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1149,     0,     0,  1150,     0,     0,     0,
       0,     0,     0,     0,  1804,  1468,     0,     0,     0,  1164,
    1164,  1164,     0,     0,     0,  1152,     0,     0,  1153,  1154,
    1155,     0,  1156,  1157,  1158,  1159,  1160,  1161,     0,     0,
       0,     0,  1827,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1164,  1164,     0,   503,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   504,     0,  1164,     0,     0, -1591,     0,
       0,     0,     0,     0,     0,     0,  1804,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1151,     0,     0,     0,
       0,     0,     0,     0,     0,   505,     0,     0,   506,     0,
       0,     0,     0,     0,     0,     0,   507,     0,     0,   508,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1804,   509,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   510,     0,     0,     0,     0,  1164,     0,   511,     0,
       0,     0,     0,     0,     0,     0,     0,   512,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1591,     0,
    1164,     0,     0,     0,     0,  1156,  1157,  1158,  1159,  1160,
    1161,     0,     0,     0,  1164,     0,  1152,     0,   513,  1153,
    1154,  1155,     0,  1156,  1157,  1158,  1159,  1160,  1161,     0,
       0,     0,     0,  2054,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    91,   673,   532,   674,   675,   676,   677,   678,     0,
       0,     0,     0,     0,     0,     0,     0,    92,    93,    94,
      95,    96,    97,    98,    99,   861,   100,   101,   102,     0,
       0,     0,     0,     0,  1164,     0,   103,   104,     0,   105,
     106,   107,   108,   109,   110,   111,   112,   679,   114,   680,
     681,  1164,   117,   118,   119,   120,   121,   122,   682,   683,
     123,   124,   684,   685,   127,     0,   128,   129,   130,   131,
     686,     0,   687,     0,     0,   134,   135,   136,   137,   138,
     139,   140,   141,     0,   142,   143,   144,   145,   146,   147,
       0,   148,   149,   150,   151,   688,   689,   690,   691,   692,
     693,   694,   153,   154,   155,   156,   157,   158,   159,   695,
     696,   162,   697,   163,     0,   164,   165,   166,   167,   168,
     169,     0,   170,     0,   171,   172,   173,   174,   862,     0,
     175,   176,   698,   178,   179,     0,     0,   180,   181,   182,
       0,   183,   184,   185,     0,   186,   187,   188,   189,   699,
     191,   192,   193,   194,   700,   701,   196,     0,   197,   198,
     702,   200,     0,   201,     0,   202,   203,     0,   204,   205,
     206,   207,   208,   209,     0,   210,     0,     0,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,   230,   231,   232,   233,   234,   235,   236,   703,   704,
       0,   705,     0,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,     0,     0,   250,   251,   252,   253,     0,
     254,   255,   256,   706,   707,   257,   258,   259,   260,   261,
     262,     0,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   708,   280,
     709,   282,   283,   284,     0,   285,   710,   286,   287,   288,
     289,   711,   712,   291,   713,   293,   294,   295,     0,   296,
     297,     0,     0,   714,   299,   300,     0,     0,   301,   302,
     303,   304,   305,   715,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   317,   318,   716,   320,   321,
     322,   323,   324,   325,     0,   326,   327,   328,   329,   330,
       0,     0,   331,   332,   333,   334,   717,   336,   337,   338,
     339,     0,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,   352,   353,   354,   355,
     356,   357,   718,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,     0,   370,   371,   372,   373,   374,
     719,   375,   376,   377,   378,   379,   380,   381,   382,   720,
     384,     0,     0,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   721,     0,   399,   400,
       0,   401,   402,   403,   404,   405,   406,   407,     0,   722,
     723,     0,     0,   410,   411,   724,   413,   725,   726,   415,
     416,   417,   418,   419,   420,   421,     0,     0,   422,   423,
     424,   425,   426,   727,     0,   427,   428,   429,   430,   431,
     432,   728,   863,   434,   435,   436,     0,   437,   438,   439,
       0,     0,   440,     0,     0,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   729,     0,     0,     0,
       0,     0,     0,   730,   731,   864,     0,     0,     0,     0,
       0,     0,   733,   865,     0,     0,     0,   734,    91,   673,
     532,   674,   675,   676,   677,   678,     0,     0,     0,     0,
       0,     0,     0,     0,    92,    93,    94,    95,    96,    97,
      98,    99,     0,   100,   101,   102,     0,     0,     0,     0,
       0,     0,     0,   103,   104,     0,   105,   106,   107,   108,
     109,   110,   111,   112,   679,   114,   680,   681,     0,   117,
     118,   119,   120,   121,   122,   682,   683,   123,   124,   684,
     685,   127,     0,   128,   129,   130,   131,   686,     0,   687,
       0,     0,   134,   135,   136,   137,   138,   139,   140,   141,
       0,   142,   143,   144,   145,   146,   147,     0,   148,   149,
     150,   151,   688,   689,   690,   691,   692,   693,   694,   153,
     154,   155,   156,   157,   158,   159,   695,   696,   162,   697,
     163,     0,   164,   165,   166,   167,   168,   169,     0,   170,
       0,   171,   172,   173,   174,     0,     0,   175,   176,   698,
     178,   179,     0,     0,   180,   181,   182,     0,   183,   184,
     185,     0,   186,   187,   188,   189,   699,   191,   192,   193,
     194,   700,   701,   196,     0,   197,   198,   702,   200,     0,
     201,     0,   202,   203,     0,   204,   205,   206,   207,   208,
     209,     0,   210,     0,     0,     0,   211,   212,     0,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,     0,   230,   231,
     232,   233,   234,   235,   236,   703,   704,     0,   705,     0,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
       0,     0,   250,   251,   252,   253,     0,   254,   255,   256,
     706,   707,   257,   258,   259,   260,   261,   262,     0,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   708,   280,   709,   282,   283,
     284,     0,   285,   710,   286,   287,   288,   289,   711,   712,
     291,   713,   293,   294,   295,     0,   296,   297,     0,     0,
     714,   299,   300,     0,     0,   301,   302,   303,   304,   305,
     715,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   317,   318,   716,   320,   321,   322,   323,   324,
     325,     0,   326,   327,   328,   329,   330,     0,     0,   331,
     332,   333,   334,   717,   336,   337,   338,   339,     0,   340,
     341,   342,     0,   343,   344,   345,   346,   347,   348,   349,
     350,   351,     0,   352,   353,   354,   355,   356,   357,   718,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    25,   370,   371,   372,   373,   374,   719,   375,   376,
     377,   378,   379,   380,   381,   382,   720,   384,     0,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   721,     0,   399,   400,    29,   401,   402,
     403,   404,   405,   406,   407,     0,   722,   723,     0,     0,
     410,   411,   724,   413,   725,   726,   415,   416,   417,   418,
     419,   420,   421,     0,     0,   422,   423,   424,   425,   426,
     727,     0,   427,   428,   429,   430,   431,   582,   728,     0,
     434,   435,   436,     0,   437,   438,   439,     0,     0,   440,
       0,    32,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   729,     0,    33,     0,     0,     0,     0,
     730,   731,     0,     0,     0,     0,     0,     0,     0,   733,
    2610,     0,     0,     0,   734,    91,   673,   532,   674,   675,
     676,   677,   678,     0,     0,     0,     0,     0,     0,     0,
       0,    92,    93,    94,    95,    96,    97,    98,    99,     0,
     100,   101,   102,     0,     0,     0,     0,     0,     0,     0,
     103,   104,     0,   105,   106,   107,   108,   109,   110,   111,
     112,   679,   114,   680,   681,     0,   117,   118,   119,   120,
     121,   122,   682,   683,   123,   124,   684,   685,   127,     0,
     128,   129,   130,   131,   686,     0,   687,     0,     0,   134,
     135,   136,   137,   138,   139,   140,   141,     0,   142,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   688,
     689,   690,   691,   692,   693,   694,   153,   154,   155,   156,
     157,   158,   159,   695,   696,   162,   697,   163,     0,   164,
     165,   166,   167,   168,   169,     0,   170,     0,   171,   172,
     173,   174,     0,     0,   175,   176,   698,   178,   179,     0,
       0,   180,   181,   182,     0,   183,   184,   185,     0,   186,
     187,   188,   189,   699,   191,   192,   193,   194,   700,   701,
     196,     0,   197,   198,   702,   200,     0,   201,     0,   202,
     203,     0,   204,   205,   206,   207,   208,   209,     0,   210,
       0,     0,     0,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,   225,
     226,   227,   228,   229,     0,   230,   231,   232,   233,   234,
     235,   236,   703,   704,     0,   705,     0,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,     0,     0,   250,
     251,   252,   253,     0,   254,   255,   256,   706,   707,   257,
     258,   259,   260,   261,   262,     0,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   708,   280,   709,   282,   283,   284,     0,   285,
     710,   286,   287,   288,   289,   711,   712,   291,   713,   293,
     294,   295,     0,   296,   297,     0,     0,   714,   299,   300,
       0,     0,   301,   302,   303,   304,   305,   715,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   317,
     318,   716,   320,   321,   322,   323,   324,   325,     0,   326,
     327,   328,   329,   330,     0,     0,   331,   332,   333,   334,
     717,   336,   337,   338,   339,     0,   340,   341,   342,     0,
     343,   344,   345,   346,   347,   348,   349,   350,   351,     0,
     352,   353,   354,   355,   356,   357,   718,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    25,   370,
     371,   372,   373,   374,   719,   375,   376,   377,   378,   379,
     380,   381,   382,   720,   384,     0,     0,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     721,     0,   399,   400,    29,   401,   402,   403,   404,   405,
     406,   407,     0,   722,   723,     0,     0,   410,   411,   724,
     413,   725,   726,   415,   416,   417,   418,   419,   420,   421,
       0,     0,   422,   423,   424,   425,   426,   727,     0,   427,
     428,   429,   430,   431,   582,   728,     0,   434,   435,   436,
       0,   437,   438,   439,     0,     0,   440,     0,    32,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     729,     0,    33,     0,     0,     0,     0,   730,   731,     0,
       0,     0,     0,     0,     0,     0,   733,     0,     0,     0,
       0,   734,    91,   673,   532,   674,   675,   676,   677,   678,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,   108,   109,   110,   111,   112,   679,   114,
     680,   681,  1481,   117,   118,   119,   120,   121,   122,   682,
     683,   123,   124,   684,   685,   127,     0,   128,   129,   130,
     131,   686,     0,   687,     0,     0,   134,   135,   136,   137,
     138,   139,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,   148,   149,   150,   151,   688,   689,   690,   691,
     692,   693,   694,   153,   154,   155,   156,   157,   158,   159,
     695,   696,   162,   697,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,     0,   171,   172,   173,   174,     0,
       0,   175,   176,   698,   178,   179,     0,     0,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,   189,
     699,   191,   192,   193,   194,   700,   701,   196,     0,   197,
     198,   702,   200,     0,   201,     0,   202,   203,  1482,   204,
     205,   206,   207,   208,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,   231,   232,   233,   234,   235,   236,   703,
     704,     0,   705,     0,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,     0,  1483,   250,   251,   252,   253,
       0,   254,   255,   256,   706,   707,   257,   258,   259,   260,
     261,   262,     0,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   708,
     280,   709,   282,   283,   284,     0,   285,   710,   286,   287,
     288,   289,   711,   712,   291,   713,   293,   294,   295,     0,
     296,   297,     0,     0,   714,   299,   300,     0,     0,   301,
     302,   303,   304,   305,   715,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   716,   320,
     321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
     330,     0,     0,   331,   332,   333,   334,   717,   336,   337,
     338,   339,     0,   340,   341,   342,     0,   343,   344,   345,
     346,   347,   348,   349,   350,   351,     0,   352,   353,   354,
     355,   356,   357,   718,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,   719,   375,   376,   377,   378,   379,   380,   381,   382,
     720,   384,     0,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   721,     0,   399,
     400,     0,   401,   402,   403,   404,   405,   406,   407,     0,
     722,   723,     0,  1484,   410,   411,   724,   413,   725,   726,
     415,   416,   417,   418,   419,   420,   421,     0,     0,   422,
     423,   424,   425,   426,   727,     0,   427,   428,   429,   430,
     431,   432,   728,     0,   434,   435,   436,     0,   437,   438,
     439,     0,     0,   440,     0,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   729,     0,     0,
       0,     0,     0,     0,   730,   731,     0,     0,     0,     0,
       0,     0,     0,   733,     0,     0,     0,     0,   734,    91,
     673,   532,   674,   675,   676,   677,   678,     0,     0,     0,
       0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
      97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
       0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
     108,   109,   110,   111,   112,   679,   114,   680,   681,     0,
     117,   118,   119,   120,   121,   122,   682,   683,   123,   124,
     684,   685,   127,     0,   128,   129,   130,   131,   686,     0,
     687,     0,     0,   134,   135,   136,   137,   138,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,   148,
     149,   150,   151,   688,   689,   690,   691,   692,   693,   694,
     153,   154,   155,   156,   157,   158,   159,   695,   696,   162,
     697,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     698,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   699,   191,   192,
     193,   194,   700,   701,   196,     0,   197,   198,   702,   200,
       0,   201,     0,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
     231,   232,   233,   234,   235,   236,   703,   704,     0,   705,
       0,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,     0,     0,   250,   251,   252,   253,     0,   254,   255,
     256,   706,   707,   257,   258,   259,   260,   261,   262,     0,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   708,   280,   709,   282,
     283,   284,     0,   285,   710,   286,   287,   288,   289,   711,
     712,   291,   713,   293,   294,   295,     0,   296,   297,     0,
       0,   714,   299,   300,     0,     0,   301,   302,   303,   304,
     305,   715,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   716,   320,   321,   322,   323,
     324,   325,     0,   326,   327,   328,   329,   330,     0,     0,
     331,   332,   333,   334,   717,   336,   337,   338,   339,     0,
     340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
     349,   350,   351,     0,   352,   353,   354,   355,   356,   357,
     718,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   719,   375,
     376,   377,   378,   379,   380,   381,   382,   720,   384,     0,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   721,     0,   399,   400,     0,   401,
     402,   403,   404,   405,   406,   407,     0,   722,   723,     0,
       0,   410,   411,   724,   413,   725,   726,   415,   416,   417,
     418,   419,   420,   421,     0,     0,   422,   423,   424,   425,
     426,   727,     0,   427,   428,   429,   430,   431,   432,   728,
       0,   434,   435,   436,     0,   437,   438,   439,     0,     0,
     440,     0,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   729,     0,     0,     0,     0,     0,
       0,   730,   731,   732,     0,     0,     0,     0,     0,     0,
     733,     0,     0,     0,     0,   734,    91,   673,   532,   674,
     675,   676,   677,   678,     0,     0,     0,     0,     0,     0,
       0,     0,    92,    93,    94,    95,    96,    97,    98,    99,
    1217,   100,   101,   102,     0,     0,     0,     0,     0,     0,
       0,   103,   104,     0,   105,   106,   107,   108,   109,   110,
     111,   112,   679,   114,   680,   681,     0,   117,   118,   119,
     120,   121,   122,   682,   683,   123,   124,   684,   685,   127,
       0,   128,   129,   130,   131,   686,     0,   687,     0,     0,
     134,   135,   136,   137,   138,   139,   140,   141,     0,   142,
     143,   144,   145,   146,   147,     0,   148,   149,   150,   151,
     688,   689,   690,   691,   692,   693,   694,   153,   154,   155,
     156,   157,   158,   159,   695,   696,   162,   697,   163,     0,
     164,   165,   166,   167,   168,   169,     0,   170,     0,   171,
     172,   173,   174,     0,     0,   175,   176,   698,   178,   179,
       0,     0,   180,   181,   182,     0,   183,   184,   185,     0,
     186,   187,   188,   189,   699,   191,   192,   193,   194,   700,
     701,   196,     0,   197,   198,   702,   200,     0,   201,     0,
     202,   203,     0,   204,   205,   206,   207,   208,   209,     0,
     210,     0,     0,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,   230,   231,   232,   233,
     234,   235,   236,   703,   704,     0,   705,     0,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,     0,     0,
     250,   251,   252,   253,     0,   254,   255,   256,   706,   707,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   708,   280,   709,   282,   283,   284,     0,
     285,   710,   286,   287,   288,   289,   711,   712,   291,   713,
     293,   294,   295,     0,   296,   297,     0,     0,   714,   299,
     300,     0,     0,   301,   302,   303,   304,   305,   715,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     0,
     317,   318,   716,   320,   321,   322,   323,   324,   325,     0,
     326,   327,   328,   329,   330,     0,     0,   331,   332,   333,
     334,   717,   336,   337,   338,   339,     0,   340,   341,   342,
       0,   343,   344,   345,   346,   347,   348,   349,   350,   351,
       0,   352,   353,   354,   355,   356,   357,   718,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,     0,
     370,   371,   372,   373,   374,   719,   375,   376,   377,   378,
     379,   380,   381,   382,   720,   384,     0,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   721,     0,   399,   400,     0,   401,   402,   403,   404,
     405,   406,   407,     0,   722,   723,     0,     0,   410,   411,
     724,   413,   725,   726,   415,   416,   417,   418,   419,   420,
     421,     0,     0,   422,   423,   424,   425,   426,   727,     0,
     427,   428,   429,   430,   431,   432,   728,     0,   434,   435,
     436,     0,   437,   438,   439,     0,     0,   440,     0,     0,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   729,     0,     0,     0,     0,     0,     0,   730,   731,
       0,     0,     0,     0,     0,     0,     0,   733,     0,     0,
       0,     0,   734,    91,   673,   532,   674,   675,   676,   677,
     678,     0,     0,     0,     0,     0,     0,     0,     0,    92,
      93,    94,    95,    96,    97,    98,    99,     0,   100,   101,
     102,     0,     0,     0,     0,     0,     0,     0,   103,   104,
       0,   105,   106,   107,   108,   109,   110,   111,   112,   679,
     114,   680,   681,     0,   117,   118,   119,   120,   121,   122,
     682,   683,   123,   124,   684,   685,   127,     0,   128,   129,
     130,   131,   686,     0,   687,     0,     0,   134,   135,   136,
     137,   138,   139,   140,   141,     0,   142,   143,   144,   145,
     146,   147,     0,   148,   149,   150,   151,   688,   689,   690,
     691,   692,   693,   694,   153,   154,   155,   156,   157,   158,
     159,   695,   696,   162,   697,   163,     0,   164,   165,   166,
     167,   168,   169,     0,   170,     0,   171,   172,   173,   174,
       0,     0,   175,   176,   698,   178,   179,     0,     0,   180,
     181,   182,     0,   183,   184,   185,     0,   186,   187,   188,
     189,   699,   191,   192,   193,   194,   700,   701,   196,     0,
     197,   198,   702,   200,     0,   201,     0,   202,   203,     0,
     204,   205,   206,   207,   208,   209,     0,   210,     0,     0,
       0,   211,   212,     0,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,     0,   224,   225,   226,   227,
     228,   229,     0,   230,   231,   232,   233,   234,   235,   236,
     703,   704,     0,   705,     0,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,     0,     0,   250,   251,   252,
     253,     0,   254,   255,   256,   706,   707,   257,   258,   259,
     260,   261,   262,     0,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     708,   280,   709,   282,   283,   284,     0,   285,   710,   286,
     287,   288,   289,   711,   712,   291,   713,   293,   294,   295,
       0,   296,   297,     0,     0,   714,   299,   300,     0,     0,
     301,   302,   303,   304,   305,   715,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   317,   318,   716,
     320,   321,   322,   323,   324,   325,     0,   326,   327,   328,
     329,   330,     0,     0,   331,   332,   333,   334,   717,   336,
     337,   338,   339,     0,   340,   341,   342,     0,   343,   344,
     345,   346,   347,   348,   349,   350,   351,     0,   352,   353,
     354,   355,   356,   357,   718,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,     0,   370,   371,   372,
     373,   374,   719,   375,   376,   377,   378,   379,   380,   381,
     382,   720,   384,     0,     0,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   721,     0,
     399,   400,     0,   401,   402,   403,   404,   405,   406,   407,
       0,   722,   723,     0,     0,   410,   411,   724,   413,   725,
     726,   415,   416,   417,   418,   419,   420,   421,     0,     0,
     422,   423,   424,   425,   426,   727,     0,   427,   428,   429,
     430,   431,   432,   728,     0,   434,   435,   436,     0,   437,
     438,   439,     0,     0,   440,     0,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   729,     0,
       0,     0,     0,     0,     0,   730,   731,     0,     0,     0,
       0,     0,     0,     0,   733,  1341,     0,     0,     0,   734,
      91,   673,   532,   674,   675,   676,   677,   678,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,   108,   109,   110,   111,   112,   679,   114,   680,   681,
       0,   117,   118,   119,   120,   121,   122,   682,   683,   123,
     124,   684,   685,   127,     0,   128,   129,   130,   131,   686,
       0,   687,     0,     0,   134,   135,   136,   137,   138,   139,
     140,   141,     0,   142,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   688,   689,   690,   691,   692,   693,
     694,   153,   154,   155,   156,   157,   158,   159,   695,   696,
     162,   697,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,     0,   171,   172,   173,   174,     0,     0,   175,
     176,   698,   178,   179,     0,     0,   180,   181,   182,     0,
     183,   184,   185,     0,   186,   187,   188,   189,   699,   191,
     192,   193,   194,   700,   701,   196,     0,   197,   198,   702,
     200,     0,   201,     0,   202,   203,     0,   204,   205,   206,
     207,   208,   209,     0,   210,     0,     0,     0,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,   225,   226,   227,   228,   229,     0,
     230,   231,   232,   233,   234,   235,   236,   703,   704,     0,
     705,     0,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,     0,     0,   250,   251,   252,   253,     0,   254,
     255,   256,   706,   707,   257,   258,   259,   260,   261,   262,
       0,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   708,   280,   709,
     282,   283,   284,     0,   285,   710,   286,   287,   288,   289,
     711,   712,   291,   713,   293,   294,   295,     0,   296,   297,
       0,     0,   714,   299,   300,     0,     0,   301,   302,   303,
     304,   305,   715,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   317,   318,   716,   320,   321,   322,
     323,   324,   325,     0,   326,   327,   328,   329,   330,     0,
       0,   331,   332,   333,   334,   717,   336,   337,   338,   339,
       0,   340,   341,   342,     0,   343,   344,   345,   346,   347,
     348,   349,   350,   351,     0,   352,   353,   354,   355,   356,
     357,   718,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,     0,   370,   371,   372,   373,   374,   719,
     375,   376,   377,   378,   379,   380,   381,   382,   720,   384,
       0,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   721,     0,   399,   400,     0,
     401,   402,   403,   404,   405,   406,   407,     0,   722,   723,
       0,     0,   410,   411,   724,   413,   725,   726,   415,   416,
     417,   418,   419,   420,   421,     0,     0,   422,   423,   424,
     425,   426,   727,     0,   427,   428,   429,   430,   431,   432,
     728,     0,   434,   435,   436,     0,   437,   438,   439,     0,
       0,   440,     0,     0,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   729,     0,     0,     0,     0,
       0,     0,   730,   731,     0,     0,     0,     0,     0,     0,
       0,   733,  1471,     0,     0,     0,   734,    91,   673,   532,
     674,   675,   676,   677,   678,     0,     0,     0,     0,     0,
       0,     0,     0,    92,    93,    94,    95,    96,    97,    98,
      99,     0,   100,   101,   102,     0,     0,     0,     0,     0,
       0,     0,   103,   104,     0,   105,   106,   107,   108,   109,
     110,   111,   112,   679,   114,   680,   681,     0,   117,   118,
     119,   120,   121,   122,   682,   683,   123,   124,   684,   685,
     127,     0,   128,   129,   130,   131,   686,     0,   687,     0,
       0,   134,   135,   136,   137,   138,   139,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,   148,   149,   150,
     151,   688,   689,   690,   691,   692,   693,   694,   153,   154,
     155,   156,   157,   158,   159,   695,   696,   162,   697,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,     0,
     171,   172,   173,   174,     0,     0,   175,   176,   698,   178,
     179,     0,     0,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,   189,   699,   191,   192,   193,   194,
     700,   701,   196,     0,   197,   198,   702,   200,     0,   201,
       0,   202,   203,     0,   204,   205,   206,   207,   208,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,   231,   232,
     233,   234,   235,   236,   703,   704,     0,   705,     0,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,     0,
       0,   250,   251,   252,   253,     0,   254,   255,   256,   706,
     707,   257,   258,   259,   260,   261,   262,     0,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   708,   280,   709,   282,   283,   284,
       0,   285,   710,   286,   287,   288,   289,   711,   712,   291,
     713,   293,   294,   295,     0,   296,   297,     0,     0,   714,
     299,   300,     0,     0,   301,   302,   303,   304,   305,   715,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   716,   320,   321,   322,   323,   324,   325,
       0,   326,   327,   328,   329,   330,     0,     0,   331,   332,
     333,   334,   717,   336,   337,   338,   339,     0,   340,   341,
     342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   718,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,   719,   375,   376,   377,
     378,   379,   380,   381,   382,   720,   384,     0,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   721,     0,   399,   400,     0,   401,   402,   403,
     404,   405,   406,   407,     0,   722,   723,     0,     0,   410,
     411,   724,   413,   725,   726,   415,   416,   417,   418,   419,
     420,   421,     0,     0,   422,   423,   424,   425,   426,   727,
       0,   427,   428,   429,   430,   431,   432,   728,  1683,   434,
     435,   436,     0,   437,   438,   439,     0,     0,   440,     0,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   729,     0,     0,     0,     0,     0,     0,   730,
     731,     0,     0,     0,     0,     0,     0,     0,   733,     0,
       0,     0,     0,   734,    91,   673,   532,   674,   675,   676,
     677,   678,     0,     0,     0,     0,     0,     0,     0,     0,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,   108,   109,   110,   111,   112,
     679,   114,   680,   681,     0,   117,   118,   119,   120,   121,
     122,   682,   683,   123,   124,   684,   685,   127,     0,   128,
     129,   130,   131,   686,     0,   687,     0,     0,   134,   135,
     136,   137,   138,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,   148,   149,   150,   151,   688,   689,
     690,   691,   692,   693,   694,   153,   154,   155,   156,   157,
     158,   159,   695,   696,   162,   697,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   698,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   699,   191,   192,   193,   194,   700,   701,   196,
       0,   197,   198,   702,   200,     0,   201,     0,   202,   203,
    1482,   204,   205,   206,   207,   208,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
     236,   703,   704,     0,   705,     0,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,     0,     0,   250,   251,
     252,   253,     0,   254,   255,   256,   706,   707,   257,   258,
     259,   260,   261,   262,     0,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   708,   280,   709,   282,   283,   284,     0,   285,   710,
     286,   287,   288,   289,   711,   712,   291,   713,   293,   294,
     295,     0,   296,   297,     0,     0,   714,   299,   300,     0,
       0,   301,   302,   303,   304,   305,   715,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     716,   320,   321,   322,   323,   324,   325,     0,   326,   327,
     328,   329,   330,     0,     0,   331,   332,   333,   334,   717,
     336,   337,   338,   339,     0,   340,   341,   342,     0,   343,
     344,   345,   346,   347,   348,   349,   350,   351,     0,   352,
     353,   354,   355,   356,   357,   718,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   719,   375,   376,   377,   378,   379,   380,
     381,   382,   720,   384,     0,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   721,
       0,   399,   400,     0,   401,   402,   403,   404,   405,   406,
     407,     0,   722,   723,     0,     0,   410,   411,   724,   413,
     725,   726,   415,   416,   417,   418,   419,   420,   421,     0,
       0,   422,   423,   424,   425,   426,   727,     0,   427,   428,
     429,   430,   431,   432,   728,     0,   434,   435,   436,     0,
     437,   438,   439,     0,     0,   440,     0,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   729,
       0,     0,     0,     0,     0,     0,   730,   731,     0,     0,
       0,     0,     0,     0,     0,   733,     0,     0,     0,     0,
     734,    91,   673,   532,   674,   675,   676,   677,   678,     0,
       0,     0,     0,     0,     0,     0,     0,    92,    93,    94,
      95,    96,    97,    98,    99,     0,   100,   101,   102,     0,
       0,     0,     0,     0,     0,     0,   103,   104,     0,   105,
     106,   107,   108,   109,   110,   111,   112,   679,   114,   680,
     681,     0,   117,   118,   119,   120,   121,   122,   682,   683,
     123,   124,   684,   685,   127,     0,   128,   129,   130,   131,
     686,     0,   687,     0,     0,   134,   135,   136,   137,   138,
     139,   140,   141,     0,   142,   143,   144,   145,   146,   147,
       0,   148,   149,   150,   151,   688,   689,   690,   691,   692,
     693,   694,   153,   154,   155,   156,   157,   158,   159,   695,
     696,   162,   697,   163,     0,   164,   165,   166,   167,   168,
     169,     0,   170,     0,   171,   172,   173,   174,     0,     0,
     175,   176,   698,   178,   179,     0,     0,   180,   181,   182,
       0,   183,   184,   185,     0,   186,   187,   188,   189,   699,
     191,   192,   193,   194,   700,   701,   196,     0,   197,   198,
     702,   200,     0,   201,     0,   202,   203,     0,   204,   205,
     206,   207,   208,   209,     0,   210,     0,     0,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,   230,   231,   232,   233,   234,   235,   236,   703,   704,
       0,   705,     0,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,     0,     0,   250,   251,   252,   253,     0,
     254,   255,   256,   706,   707,   257,   258,   259,   260,   261,
     262,     0,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   708,   280,
     709,   282,   283,   284,     0,   285,   710,   286,   287,   288,
     289,   711,   712,   291,   713,   293,   294,   295,     0,   296,
     297,     0,     0,   714,   299,   300,     0,     0,   301,   302,
     303,   304,   305,   715,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   317,   318,   716,   320,   321,
     322,   323,   324,   325,     0,   326,   327,   328,   329,   330,
       0,     0,   331,   332,   333,   334,   717,   336,   337,   338,
     339,     0,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,   352,   353,   354,   355,
     356,   357,   718,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,     0,   370,   371,   372,   373,   374,
     719,   375,   376,   377,   378,   379,   380,   381,   382,   720,
     384,     0,     0,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   721,     0,   399,   400,
       0,   401,   402,   403,   404,   405,   406,   407,     0,   722,
     723,     0,     0,   410,   411,   724,   413,   725,   726,   415,
     416,   417,   418,   419,   420,   421,     0,     0,   422,   423,
     424,   425,   426,   727,     0,   427,   428,   429,   430,   431,
     432,   728,     0,   434,   435,   436,     0,   437,   438,   439,
       0,     0,   440,     0,     0,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   729,     0,     0,     0,
       0,     0,     0,   730,   731,     0,     0,     0,     0,     0,
       0,     0,   733,     0,     0,     0,     0,   734,    91,   673,
     532,   674,   675,   676,   677,   678,     0,     0,     0,     0,
       0,     0,     0,     0,    92,    93,    94,    95,    96,    97,
      98,    99,     0,   100,   101,   102,     0,     0,     0,     0,
       0,     0,     0,   103,   104,     0,   105,   106,   107,   108,
     109,   110,   111,   112,   679,   114,   680,   681,     0,   117,
     118,   119,   120,   121,   122,   682,   683,   123,   124,   684,
     685,   127,     0,   128,   129,   130,   131,   686,     0,   687,
       0,     0,   134,   135,   136,   137,   138,   139,   140,   141,
       0,   142,   143,   144,   145,   146,   147,     0,   148,   149,
     150,   151,   688,   689,   690,   691,   692,   693,   694,   153,
     154,   155,   156,   157,   158,   159,   695,   696,   162,   697,
     163,     0,   164,   165,   166,   167,   168,   169,     0,   170,
       0,   171,   172,   173,   174,     0,     0,   175,   176,   698,
     178,   179,     0,     0,   180,   181,   182,     0,   183,   184,
     185,     0,   186,   187,   188,   189,   699,   191,   192,   193,
     194,   700,   701,   196,     0,   197,   198,   702,   200,     0,
     201,     0,   202,   203,     0,   204,   205,   206,   207,   208,
     209,     0,   210,     0,     0,     0,   211,   212,     0,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,     0,   230,   231,
     232,   233,   234,   235,   236,   703,   704,     0,   705,     0,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
       0,     0,   250,   251,   252,   253,     0,   254,   255,   256,
     706,   707,   257,   258,   259,   260,   261,   262,     0,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   708,   280,   709,   282,   283,
     284,     0,   285,   710,   286,   287,   288,   289,   711,   712,
     291,   713,   293,   294,   295,     0,   296,   297,     0,     0,
     714,   299,   300,     0,     0,   301,   302,   303,   304,   305,
     715,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   317,   318,   716,   320,   321,   322,   323,   324,
     325,     0,   326,   327,   328,   329,   330,     0,     0,   331,
     332,   333,   334,   717,   336,   337,   338,   339,     0,   340,
     341,   342,     0,   343,   344,   345,   346,   347,   348,   349,
     350,   351,     0,   352,   353,   354,   355,   356,   357,   718,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,   719,   375,   376,
     377,   378,   379,   380,   381,   382,   720,   384,     0,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   721,     0,   399,   400,     0,   401,   402,
     403,   404,   405,   406,   407,     0,   722,   723,     0,     0,
     410,   411,   724,   413,   725,   726,   415,   416,   417,   418,
     419,   420,   421,     0,     0,   422,   423,   424,   425,   426,
     727,     0,   427,   428,   429,   430,   431,   432,   728,     0,
     434,   435,   436,     0,   437,   438,   439,     0,     0,   440,
       0,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   729,     0,     0,     0,     0,     0,     0,
    1220,  1221,     0,     0,     0,     0,     0,     0,     0,   733,
       0,     0,     0,     0,   734,    91,  1594,   532,   674,   675,
     676,   677,   678,     0,     0,     0,     0,     0,     0,     0,
       0,    92,    93,    94,    95,    96,    97,    98,    99,     0,
     100,   101,   102,     0,     0,     0,     0,     0,     0,     0,
     103,   104,     0,   105,   106,   107,   108,   109,   110,   111,
     112,   679,   114,   680,   681,     0,   117,   118,   119,   120,
     121,   122,   682,   683,   123,   124,   684,   685,   127,     0,
     128,   129,   130,   131,   686,     0,   687,     0,     0,   134,
     135,   136,   137,   138,   139,   140,   141,     0,   142,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   688,
     689,   690,   691,   692,   693,   694,   153,   154,   155,   156,
     157,   158,   159,   695,   696,   162,   697,   163,     0,   164,
     165,   166,   167,   168,   169,     0,   170,     0,   171,   172,
     173,   174,     0,     0,   175,   176,   698,   178,   179,     0,
       0,   180,   181,   182,     0,   183,   184,   185,     0,   186,
     187,   188,   189,   699,   191,   192,   193,   194,   700,   701,
     196,     0,   197,   198,   702,   200,     0,   201,     0,   202,
     203,     0,   204,   205,   206,   207,   208,   209,     0,   210,
       0,     0,     0,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,   225,
     226,   227,   228,   229,     0,   230,   231,   232,   233,   234,
     235,   236,   703,   704,     0,   705,     0,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,     0,     0,   250,
     251,   252,   253,     0,   254,   255,   256,   706,   707,   257,
     258,   259,   260,   261,   262,     0,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   708,   280,   709,   282,   283,   284,     0,   285,
     710,   286,   287,   288,   289,   711,   712,   291,   713,   293,
     294,   295,     0,   296,   297,     0,     0,   714,   299,   300,
       0,     0,   301,   302,   303,   304,   305,   715,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   317,
     318,   716,   320,   321,   322,   323,   324,   325,     0,   326,
     327,   328,   329,   330,     0,     0,   331,   332,   333,   334,
     717,   336,   337,   338,   339,     0,   340,   341,   342,     0,
     343,   344,   345,   346,   347,   348,   349,   350,   351,     0,
     352,   353,   354,   355,   356,   357,   718,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,     0,   370,
     371,   372,   373,   374,   719,   375,   376,   377,   378,   379,
     380,   381,   382,   720,   384,     0,     0,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     721,     0,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,   722,   723,     0,     0,   410,   411,   724,
     413,   725,   726,   415,   416,   417,   418,   419,   420,   421,
       0,     0,   422,   423,   424,   425,   426,   727,     0,   427,
     428,   429,   430,   431,   432,   728,     0,   434,   435,   436,
       0,   437,   438,   439,     0,     0,   440,     0,     0,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     729,     0,     0,     0,     0,     0,     0,   730,   731,     0,
       0,     0,     0,     0,     0,     0,   733,     0,     0,     0,
       0,   734,    91,   673,   532,   674,   675,   676,   677,   678,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,   108,   109,   110,   111,   112,   679,   114,
     680,   681,     0,   117,   118,   119,   120,   121,   122,   682,
     683,   123,   124,   684,   685,   127,     0,   128,   129,   130,
     131,   686,     0,   687,     0,     0,   134,   135,   136,   137,
     138,   139,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,   148,   149,   150,   151,   688,   689,   690,   691,
     692,   693,   694,   153,   154,   155,   156,   157,   158,   159,
     695,   696,   162,   697,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,     0,   171,   172,   173,   174,     0,
       0,   175,   176,   698,   178,   179,     0,     0,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,   189,
     699,   191,   192,   193,   194,   700,   701,   196,     0,   197,
     198,   702,   200,     0,   201,     0,   202,   203,     0,   204,
     205,   206,   207,   208,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,   231,   232,   233,   234,   235,   236,   703,
     704,     0,   705,     0,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,     0,     0,   250,   251,   252,   253,
       0,   254,   255,   256,   706,   707,   257,   258,   259,   260,
     261,   262,     0,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   708,
     280,   709,   282,   283,   284,     0,   285,   710,   286,   287,
     288,   289,   711,   712,   291,   713,   293,   294,   295,     0,
     296,   297,     0,     0,   714,   299,   300,     0,     0,   301,
     302,   303,   304,   305,   715,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   716,   320,
     321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
     330,     0,     0,   331,   332,   333,   334,   717,   336,   337,
     338,   339,     0,   340,   341,   342,     0,   343,   344,   345,
     346,   347,   348,   349,   350,   351,     0,   352,   353,   354,
     355,   356,   357,   718,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,   719,   375,   376,   377,   378,   379,   380,   381,   382,
     720,   384,     0,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   721,     0,   399,
     400,     0,   401,   402,   403,   404,   405,   406,   407,     0,
     722,   723,     0,     0,   410,   411,   724,   413,   725,   726,
     415,   416,   417,   418,   419,   420,   421,     0,     0,   422,
     423,   424,   425,   426,   727,     0,   427,   428,   429,   430,
     431,   432,   728,     0,   434,   435,   436,     0,   437,   438,
     439,     0,     0,   440,     0,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   729,     0,     0,
       0,     0,     0,     0,   730,   731,     0,     0,     0,     0,
       0,     0,     0,  2495,     0,     0,     0,     0,   734,    91,
     673,   532,   674,   675,   676,   677,   678,     0,     0,     0,
       0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
      97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
       0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
     108,   109,   110,   111,  2723,   679,   114,   680,   681,     0,
     117,   118,   119,   120,   121,   122,   682,   683,   123,   124,
     684,   685,   127,     0,   128,   129,   130,   131,   686,     0,
     687,     0,     0,   134,   135,   136,   137,   138,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,   148,
     149,   150,  2724,   688,   689,   690,   691,   692,   693,   694,
     153,   154,   155,   156,   157,   158,   159,   695,   696,   162,
     697,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     698,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   699,   191,   192,
     193,   194,   700,   701,   196,     0,   197,   198,   702,   200,
       0,   201,     0,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
     231,   232,   233,   234,   235,   236,   703,   704,     0,   705,
       0,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,     0,     0,   250,   251,   252,   253,     0,   254,   255,
     256,   706,   707,   257,   258,   259,   260,   261,   262,     0,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   708,   280,   709,   282,
     283,   284,     0,   285,   710,   286,   287,   288,   289,   711,
     712,   291,   713,   293,   294,   295,     0,   296,   297,     0,
       0,   714,   299,   300,     0,     0,   301,   302,   303,   304,
     305,   715,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   716,   320,   321,   322,   323,
     324,   325,     0,   326,   327,   328,   329,   330,     0,     0,
     331,   332,   333,   334,   717,   336,   337,   338,   339,     0,
     340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
     349,   350,   351,     0,   352,   353,   354,   355,   356,   357,
     718,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   719,   375,
     376,   377,   378,   379,   380,   381,   382,   720,   384,     0,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   721,     0,   399,   400,     0,   401,
     402,   403,   404,   405,   406,   407,     0,   722,   723,     0,
       0,   410,   411,   724,   413,   725,   726,   415,   416,   417,
     418,  2725,   420,   421,     0,     0,   422,   423,   424,   425,
     426,   727,     0,   427,   428,   429,   430,   431,   432,   728,
       0,   434,   435,   436,     0,   437,   438,   439,     0,     0,
     440,     0,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   729,     0,     0,     0,     0,     0,
       0,   730,   731,     0,     0,     0,     0,     0,     0,     0,
     733,     0,     0,     0,     0,   734,    91,   673,   532,   674,
     675,   676,   677,   678,     0,     0,     0,     0,     0,     0,
       0,     0,    92,    93,    94,    95,    96,    97,    98,    99,
       0,   100,   101,   102,     0,     0,     0,     0,     0,     0,
       0,   103,   104,     0,   105,   106,   107,   108,   109,   110,
     111,   112,   679,   114,   680,   681,     0,   117,   118,   119,
     120,   121,   122,   682,   683,   123,   124,   684,   685,   127,
       0,   128,   129,   130,   131,   686,     0,   687,     0,     0,
     134,   135,   136,   137,   138,   139,   140,   141,     0,   142,
     143,   144,   145,   146,   147,     0,   148,   149,   150,  2724,
     688,   689,   690,   691,   692,   693,   694,   153,   154,   155,
     156,   157,   158,   159,   695,   696,   162,   697,   163,     0,
     164,   165,   166,   167,   168,   169,     0,   170,     0,   171,
     172,   173,   174,     0,     0,   175,   176,   698,   178,   179,
       0,     0,   180,   181,   182,     0,   183,   184,   185,     0,
     186,   187,   188,   189,   699,   191,   192,   193,   194,   700,
     701,   196,     0,   197,   198,   702,   200,     0,   201,     0,
     202,   203,     0,   204,   205,   206,   207,   208,   209,     0,
     210,     0,     0,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,   230,   231,   232,   233,
     234,   235,   236,   703,   704,     0,   705,     0,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,     0,     0,
     250,   251,   252,   253,     0,   254,   255,   256,   706,   707,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   708,   280,   709,   282,   283,   284,     0,
     285,   710,   286,   287,   288,   289,   711,   712,   291,   713,
     293,   294,   295,     0,   296,   297,     0,     0,   714,   299,
     300,     0,     0,   301,   302,   303,   304,   305,   715,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     0,
     317,   318,   716,   320,   321,   322,   323,   324,   325,     0,
     326,   327,   328,   329,   330,     0,     0,   331,   332,   333,
     334,   717,   336,   337,   338,   339,     0,   340,   341,   342,
       0,   343,   344,   345,   346,   347,   348,   349,   350,   351,
       0,   352,   353,   354,   355,   356,   357,   718,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,     0,
     370,   371,   372,   373,   374,   719,   375,   376,   377,   378,
     379,   380,   381,   382,   720,   384,     0,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   721,     0,   399,   400,     0,   401,   402,   403,   404,
     405,   406,   407,     0,   722,   723,     0,     0,   410,   411,
     724,   413,   725,   726,   415,   416,   417,   418,  2725,   420,
     421,     0,     0,   422,   423,   424,   425,   426,   727,     0,
     427,   428,   429,   430,   431,   432,   728,     0,   434,   435,
     436,     0,   437,   438,   439,     0,     0,   440,     0,     0,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   729,     0,     0,     0,     0,     0,     0,   730,   731,
       0,     0,     0,     0,     0,     0,     0,   733,     0,     0,
       0,     0,   734,    91,   673,   532,   674,   675,   676,   677,
     678,     0,     0,     0,     0,     0,     0,     0,     0,    92,
      93,    94,    95,    96,    97,    98,    99,     0,   100,   101,
     102,     0,     0,     0,     0,     0,     0,     0,   103,   104,
       0,   105,   106,   107,   108,   109,   110,   111,   112,   679,
     114,   680,   681,     0,   117,   118,   119,   120,   121,   122,
     682,   683,   123,   124,   684,   685,   127,     0,   128,   129,
     130,   131,   686,     0,   687,     0,     0,   134,   135,   136,
     137,   138,   139,   140,   141,     0,   142,   143,   144,   145,
     146,   147,     0,   148,   149,   150,   151,   688,   689,   690,
     691,   692,   693,   694,   153,   154,   155,   156,   157,   158,
     159,   695,   696,   162,     0,   163,     0,   164,   165,   166,
     167,   168,   169,     0,   170,     0,   171,   172,   173,   174,
       0,     0,   175,   176,   698,   178,   179,     0,     0,   180,
     181,   182,     0,   183,   184,   185,     0,   186,   187,   188,
     189,   699,   191,   192,   193,   194,   700,   701,   196,     0,
     197,   198,   702,   200,     0,   201,     0,   202,   203,     0,
     204,   205,   206,   207,   208,   209,     0,   210,     0,     0,
       0,   211,   212,     0,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,     0,   224,   225,   226,   227,
     228,   229,     0,   230,   231,   232,   233,   234,   235,   236,
     703,   704,     0,   705,     0,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,     0,     0,   250,   251,   252,
     253,     0,   254,   255,   256,   706,   707,   257,   258,   259,
     260,   261,   262,     0,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     708,   280,   709,   282,   283,   284,     0,   285,     0,   286,
     287,   288,   289,   711,   712,   291,   713,   293,   294,   295,
       0,   296,   297,     0,     0,   714,   299,   300,     0,     0,
     301,   302,   303,   304,   305,   715,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   317,   318,   716,
     320,   321,   322,   323,   324,   325,     0,   326,   327,   328,
     329,   330,     0,     0,   331,   332,   333,   334,   717,   336,
     337,   338,   339,     0,   340,   341,   342,     0,   343,   344,
     345,   346,   347,   348,   349,   350,   351,     0,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,     0,   370,   371,   372,
     373,   374,   719,   375,   376,   377,   378,   379,   380,   381,
     382,   720,   384,     0,     0,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   721,     0,
     399,   400,     0,   401,   402,   403,   404,   405,   406,   407,
       0,   722,   723,     0,     0,   410,   411,   724,   413,   725,
     726,   415,   416,   417,   418,   419,   420,   421,     0,     0,
     422,   423,   424,   425,   426,   727,     0,   427,   428,   429,
     430,   431,   432,   728,     0,   434,   435,   436,     0,   437,
     438,   439,     0,     0,   440,     0,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,     0,     0,
       0,     0,     0,     0,     0,  1463,  1464,     0,     0,    91,
     673,   532,   674,   675,  1465,   677,   678,     0,     0,   734,
       0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
      97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
       0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
     108,   109,   110,   111,   112,   679,   114,   680,   681,     0,
     117,   118,   119,   120,   121,   122,   682,   683,   123,   124,
     684,   685,   127,     0,   128,   129,   130,   131,   686,     0,
     687,     0,     0,   134,   135,   136,   137,   138,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,   148,
     149,   150,   151,   688,   689,   690,   691,   692,   693,   694,
     153,   154,   155,   156,   157,   158,   159,   695,   696,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     698,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   699,   191,   192,
     193,   194,   700,   701,   196,     0,   197,   198,   702,   200,
       0,   201,     0,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
     231,   232,   233,   234,   235,   236,   703,   704,     0,   705,
       0,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,     0,     0,   250,   251,   252,   253,     0,   254,   255,
     256,   706,   707,   257,   258,   259,   260,   261,   262,     0,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   708,   280,   709,   282,
     283,   284,     0,   285,     0,   286,   287,   288,   289,   711,
     712,   291,   713,   293,   294,   295,     0,   296,   297,     0,
       0,   298,   299,   300,     0,     0,   301,   302,   303,   304,
     305,   715,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   716,   320,   321,   322,   323,
     324,   325,     0,   326,   327,   328,   329,   330,     0,     0,
     331,   332,   333,   334,   717,   336,   337,   338,   339,     0,
     340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
     349,   350,   351,     0,   352,   353,   354,   355,   356,   357,
    1583,  1584,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   719,   375,
     376,   377,   378,   379,   380,   381,   382,   720,   384,     0,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   721,     0,   399,   400,     0,   401,
     402,   403,   404,   405,   406,   407,     0,   722,   723,     0,
       0,   410,   411,   724,   413,   725,   726,   415,   416,   417,
     418,   419,   420,   421,     0,     0,   422,   423,   424,   425,
     426,   727,     0,   427,   428,   429,   430,   431,   432,   728,
       0,   434,   435,   436,     0,   437,   438,   439,     0,     0,
     440,     0,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,     0,     0,     0,     0,     0,     0,
       0,  1585,  1586,     0,     0,     0,     0,     0,     0,     0,
    1465,     0,     0,     0,     0,   734,    91,   673,   532,   674,
     675,   676,   677,   678,     0,     0,     0,     0,     0,     0,
       0,     0,    92,    93,    94,    95,    96,    97,    98,    99,
       0,   100,   101,   102,     0,     0,     0,     0,     0,     0,
       0,   103,   104,     0,   105,   106,   107,   108,   109,   110,
     111,   112,   679,   114,   680,   681,     0,   117,   118,   119,
     120,   121,   122,   682,   683,   123,   124,   684,   685,   127,
       0,   128,   129,   130,   131,   686,     0,   687,     0,     0,
     134,   135,   136,   137,   138,   139,   140,   141,     0,   142,
     143,   144,   145,   146,   147,     0,   148,   149,   150,   151,
     688,   689,   690,   691,   692,   693,   694,   153,   154,   155,
     156,   157,   158,   159,   695,   696,   162,     0,   163,     0,
     164,   165,   166,   167,   168,   169,     0,   170,     0,   171,
     172,   173,   174,     0,     0,   175,   176,   698,   178,   179,
       0,     0,   180,   181,   182,     0,   183,   184,   185,     0,
     186,   187,   188,   189,   699,   191,   192,   193,   194,   700,
     701,   196,     0,   197,   198,   702,   200,     0,   201,     0,
     202,   203,     0,   204,   205,   206,   207,   208,   209,     0,
     210,     0,     0,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,   230,   231,   232,   233,
     234,   235,   236,   703,   704,     0,   705,     0,   240,     0,
     242,   243,   244,   245,   246,   247,   248,   249,     0,     0,
     250,   251,   252,   253,     0,   254,   255,   256,   706,   707,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   708,   280,   709,   282,   283,   284,     0,
     285,     0,   286,   287,   288,   289,   711,   712,   291,   713,
     293,   294,   295,     0,   296,   297,     0,     0,   714,   299,
     300,     0,     0,   301,   302,   303,   304,   305,   715,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     0,
     317,   318,   716,   320,   321,   322,   323,   324,   325,     0,
     326,   327,   328,   329,   330,     0,     0,   331,   332,   333,
     334,   717,   336,   337,   338,   339,     0,   340,   341,   342,
       0,   343,   344,   345,   346,   347,   348,   349,   350,   351,
       0,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,     0,
     370,   371,   372,   373,   374,   719,   375,   376,   377,   378,
     379,   380,   381,   382,   720,   384,     0,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   721,     0,   399,   400,     0,   401,   402,   403,   404,
     405,   406,   407,     0,   722,   723,     0,     0,   410,   411,
     724,   413,   725,   726,   415,   416,   417,   418,   419,   420,
     421,     0,     0,   422,   423,   424,   425,   426,   727,     0,
     427,   428,   429,   430,   431,   432,   728,     0,   434,   435,
     436,     0,   437,   438,   439,     0,     0,   440,     0,     0,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,     0,     0,     0,     0,     0,     0,     0,  1463,  1464,
       0,     0,     0,     0,     0,     0,     0,  1465,     0,     0,
       0,     0,   734,    91,   673,   532,   674,   675,   676,   677,
     678,     0,     0,     0,     0,     0,     0,     0,     0,    92,
      93,    94,    95,    96,    97,    98,    99,     0,   100,   101,
     102,     0,     0,     0,     0,     0,     0,     0,   103,   104,
       0,   105,   106,   107,   108,   109,   110,   111, -1591,   679,
     114,   680,   681,     0,   117,   118,   119,   120,   121,   122,
     682,   683,   123,   124,   684,   685,   127,     0,   128,   129,
     130,   131,   686,     0,   687,     0,     0,   134,   135,   136,
     137,   138,   139,   140,   141,     0,   142,   143,   144,   145,
     146,   147,     0,   148,   149,   150,  2724,   688,   689,   690,
     691,   692,   693,   694,   153,   154,   155,   156,   157,   158,
     159,   695,   696,   162,   697,   163,     0,   164,   165,   166,
     167,   168,   169,     0,   170,     0,   171,   172,   173,   174,
       0,     0,   175,   176,   698,   178,   179,     0,     0,   180,
     181,   182,     0,   183,   184,   185,     0,   186,   187,   188,
     189,   699,   191,   192,   193,   194,   700,   701,   196,     0,
     197,   198,   702,   200,     0,   201,     0,   202,   203,     0,
     204,   205,   206,   207, -1591,   209,     0,   210,     0,     0,
       0,   211,   212,     0,   213,   214,   215,   216,   217,   218,
   -1591,   220,   221,   222,   223,     0,   224,   225,   226,   227,
     228,   229,     0,   230,   231,   232,   233,   234,   235,   236,
     703,   704,     0,   705,     0,   240,     0,     0,   243,   244,
     245,   246,   247,   248,   249,     0,     0,   250,   251,   252,
   -1591,     0,   254,   255,   256,   706,   707,   257,   258,   259,
     260,   261,   262,     0,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     708,   280,   709,   282,   283,   284,     0,   285,     0,   286,
     287,     0,   289,   711,   712,   291,   713,   293,   294,   295,
       0,   296,   297,     0,     0,   714,   299,   300,     0,     0,
     301,   302,   303,   304,   305,   715,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   317,   318,   716,
     320,   321,   322,   323,   324,   325,     0,   326,   327,   328,
     329,   330,     0,     0,   331,   332,   333,   334,   717,   336,
     337,   338,   339,     0,   340,   341,   342,     0,   343,   344,
     345,   346,   347,   348,   349,   350,   351,     0,   352,   353,
     354,   355,   356,   357,   718,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,     0,   370,   371,   372,
     373,   374,   719,   375,   376,   377,   378,   379, -1591,   381,
     382,   720,   384,     0,     0,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   721,     0,
     399,   400,     0,   401,   402,   403,   404,   405,   406,   407,
       0,   722,   723,     0,     0,   410,   411,   724,   413,   725,
     726,   415,   416,   417,   418,  2725,   420,   421,     0,     0,
     422,   423,   424,   425,   426,   727,     0,   427,   428,   429,
     430,   431,   432,   728,     0,   434,   435,   436,     0,   437,
     438,   439,     0,     0,   440,     0,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461, -1591,     0,
       0,     0,     0,     0,     0,   730,   731,     0,     0,     0,
       0,     0,     0,     0,   733,     0,     0,     0,     0,   734,
      91,   673,   532,   674,   675,   676,   677,   678,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,   108,   109,   110,   111,     0,   679,   114,   680,   681,
       0,   117,   118,   119,   120,   121,   122,   682,   683,   123,
     124,   684,   685,   127,     0,   128,   129,   130,   131,   686,
       0,   687,     0,     0,   134,   135,   136,   137,   138,   139,
     140,   141,     0,   142,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   688,   689,   690,   691,   692,   693,
     694,   153,   154,   155,   156,   157,   158,   159,   695,   696,
     162,   697,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,     0,   171,   172,   173,   174,     0,     0,   175,
     176,   698,   178,   179,     0,     0,   180,   181,   182,     0,
     183,     0,   185,     0,   186,   187,   188,   189,   699,   191,
     192,   193,   194,   700,   701,   196,     0,   197,   198,   702,
     200,     0,   201,     0,   202,   203,     0,   204,   205,   206,
     207,     0,   209,     0,   210,     0,     0,     0,   211,   212,
       0,   213,   214,   215,   216,   217,   218,     0,   220,   221,
     222,   223,     0,   224,   225,   226,   227,   228,   229,     0,
     230,   231,   232,   233,   234,   235,   236,   703,   704,     0,
     705,     0,   240,     0,     0,   243,   244,   245,   246,   247,
     248,   249,     0,     0,   250,   251,   252,     0,     0,   254,
     255,   256,   706,   707,   257,   258,   259,   260,   261,   262,
       0,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   708,   280,   709,
     282,   283,   284,     0,   285,     0,   286,   287,     0,   289,
     711,   712,   291,   713,   293,   294,   295,     0,   296,   297,
       0,     0,   714,   299,   300,     0,     0,   301,   302,   303,
     304,   305,   715,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   317,   318,   716,   320,   321,   322,
     323,   324,   325,     0,   326,   327,   328,   329,   330,     0,
       0,   331,   332,   333,   334,   717,   336,   337,   338,   339,
       0,   340,   341,   342,     0,   343,   344,   345,   346,   347,
     348,   349,   350,   351,     0,   352,   353,   354,   355,   356,
     357,   718,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,     0,   370,   371,   372,   373,   374,   719,
     375,   376,   377,   378,   379,     0,   381,   382,   720,   384,
       0,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   721,     0,   399,   400,     0,
     401,   402,   403,   404,   405,   406,   407,     0,   722,   723,
       0,     0,   410,   411,   724,   413,   725,   726,   415,   416,
     417,   418,   419,   420,   421,     0,     0,   422,   423,   424,
     425,   426,   727,     0,   427,   428,   429,   430,   431,   432,
     728,     0,   434,   435,   436,     0,   437,   438,   439,     0,
       0,   440,     0,     0,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,     0,     0,     0,     0,     0,
       0,   487,   730,   731,     0,     0,     0,     0,     0,     0,
       0,   733,     0,     0,     0,     0,   734,    92,    93,    94,
      95,    96,    97,    98,    99,     0,   100,   101,   102,     0,
       0,     0,     0,     0,  2129,     0,   103,   104,     0,   105,
     106,   107,     0,   109,   110,   111,   112,   113,     0,   115,
     116,     0,   117,   118,   119,   120,   121,   122,     0,     0,
     123,   124,   125,   126,   127,     0,   128,   129,   130,   131,
     132,     0,     0,     0,     0,   134,   135,   136,   137,     0,
     139,   140,   141,     0,   142,   143,   144,   145,   146,   147,
       0,  -388,   149,   150,   151,     0,     0,     0,     0,     0,
       0,     0,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,     0,   163,     0,   164,   165,   166,   167,   168,
     169,     0,   170,     0,   171,   172,   173,   174,     0,     0,
     175,   176,   177,   178,   179,     0,     0,   180,   181,   182,
       0,   183,   184,   185,     0,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,     0,   197,   198,
     199,   200,     0,   201,     0,   202,     0,     0,  -388,   205,
     206,   207,     0,   209,     0,   210,     0,     0,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,     0,   220,
     221,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,   230,  -388,   232,   233,   234,   235,   236,   237,   238,
       0,   239,     0,   240,     0,     0,   243,  -388,   245,   246,
     247,   248,   249,     0,     0,   250,  -388,   252,     0,     0,
     254,   255,   256,     0,     0,   257,   258,   259,   260,   261,
     262,     0,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,  -388,
     281,   282,   283,   284,     0,   285,     0,   286,   287,     0,
     289,     0,   290,   291,   292,   293,   294,   295,     0,   296,
     297,     0,     0,   298,   299,   300,     0,     0,   301,   302,
       0,   304,     0,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
     322,   323,   324,   325,     0,   326,   327,   328,   329,   330,
       0,     0,   331,   332,   333,   334,   335,   336,   337,   338,
     339,     0,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,   352,   353,  -388,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,     0,   370,   371,   372,   373,   374,
       0,   375,   376,   377,   378,   379,     0,   381,   382,   383,
     384,     0,     0,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
       0,   401,  -388,   403,   404,   405,   406,   407,     0,   408,
     409,     0,     0,   410,   411,   412,   413,   414,     0,   415,
     416,   417,   418,   419,   420,   421,     0,     0,   422,   423,
     424,   425,   426,     0,     0,   427,   428,   429,   430,   431,
     432,   433,     0,   434,     0,   436,     0,   437,   438,   439,
       0,     0,   440,     0,     0,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,     0,     0,    91,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   793,    92,    93,    94,    95,    96,    97,
      98,    99,     0,   100,   101,   102,     0,     0,     0,     0,
       0,     0,     0,   103,   104,     0,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,     0,   117,
     118,   119,   120,   121,   122,     0,   683,   123,   124,   125,
     126,   127,     0,   128,   129,   130,   131,   686,     0,   687,
       0,     0,   134,   135,   136,   137,   138,   139,   140,   141,
       0,   142,   143,   144,   145,   146,   147,     0,   148,   149,
     150,   151,   688,   689,   690,   691,   692,   693,   694,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,     0,
     163,     0,   164,   165,   166,   167,   168,   169,     0,   170,
       0,   171,   172,   173,   174,     0,     0,   175,   176,   177,
     178,   179,     0,     0,   180,   181,   182,     0,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   700,     0,   196,     0,   197,   198,   199,   200,     0,
     201,     0,   202,   203,     0,   204,   205,   206,   207,   208,
     209,     0,   210,     0,  1865,     0,   211,   212,     0,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,     0,   230,   231,
     232,   233,   234,   235,   236,   237,   238,     0,   239,     0,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
    1866,     0,   250,   251,   252,   253,     0,   254,   255,   256,
     706,   707,   257,   258,   259,   260,   261,   262,     0,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,     0,   285,     0,   286,   287,   288,   289,     0,   712,
     291,   292,   293,   294,   295,     0,   296,   297,     0,   557,
     298,   299,   300,     0,     0,   301,   302,   303,   304,   305,
     715,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   317,   318,   716,   320,   321,   322,   323,   324,
     325,     0,   326,   327,   328,   329,   330,     0,     0,   331,
     332,   333,   334,   335,   336,   337,   338,   339,     0,   340,
     341,   342,     0,   343,   344,   345,   346,   347,   348,   349,
     350,   351,     0,   352,   353,   354,   355,   356,   357,   358,
    1867,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    25,   370,   371,   372,   373,   374,   719,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   721,     0,   399,   400,    29,   401,   402,
     403,   404,   405,   406,   407,     0,   408,   409,     0,     0,
     410,   411,   724,   413,   725,     0,   415,   416,   417,   418,
     419,   420,   421,     0,     0,   422,   423,   424,   425,   426,
     727,     0,   427,   428,   429,   430,   431,   582,   433,     0,
     434,   435,   436,     0,   437,   438,   439,     0,     0,   440,
       0,    32,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,     0,    91,    33,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1868,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,     0,   117,   118,   119,   120,   121,
     122,     0,   683,   123,   124,   125,   126,   127,     0,   128,
     129,   130,   131,   686,     0,   687,     0,     0,   134,   135,
     136,   137,   138,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,   148,   149,   150,   151,   688,   689,
     690,   691,   692,   693,   694,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   700,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,   210,     0,
    1865,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,  1866,     0,   250,   251,
     252,   253,     0,   254,   255,   256,   706,   707,   257,   258,
     259,   260,   261,   262,     0,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,     0,   285,     0,
     286,   287,   288,   289,     0,   712,   291,   292,   293,   294,
     295,     0,   296,   297,     0,   557,   298,   299,   300,     0,
       0,   301,   302,   303,   304,   305,   715,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     716,   320,   321,   322,   323,   324,   325,     0,   326,   327,
     328,   329,   330,     0,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,     0,   340,   341,   342,     0,   343,
     344,   345,   346,   347,   348,   349,   350,   351,     0,   352,
     353,   354,   355,   356,   357,   358,  1867,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   719,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,     0,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   721,
       0,   399,   400,     0,   401,   402,   403,   404,   405,   406,
     407,     0,   408,   409,     0,     0,   410,   411,   724,   413,
     725,     0,   415,   416,   417,   418,   419,   420,   421,     0,
       0,   422,   423,   424,   425,   426,   727,     0,   427,   428,
     429,   430,   431,   432,   433,     0,   434,   435,   436,     0,
     437,   438,   439,     0,     0,   440,     0,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,     0,
      91,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1868,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,   683,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   686,
       0,   687,     0,     0,   134,   135,   136,   137,   138,   139,
     140,   141,     0,   142,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   688,   689,   690,   691,   692,   693,
     694,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,     0,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,     0,   171,   172,   173,   174,     0,     0,   175,
     176,   177,   178,   179,     0,     0,   180,   181,   182,     0,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   700,     0,   196,     0,   197,   198,   199,
     200,     0,   201,     0,   202,   203,     0,   204,   205,   206,
     207,   208,   209,     0,   210,     0,     0,     0,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,   225,   226,   227,   228,   229,     0,
     230,   231,   232,   233,   234,   235,   236,   237,   238,     0,
     239,     0,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,     0,     0,   250,   251,   252,   253,     0,   254,
     255,   256,   706,   707,   257,   258,   259,   260,   261,   262,
       0,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,     0,   285,     0,   286,   287,   288,   289,
       0,   712,   291,   292,   293,   294,   295,     0,   296,   297,
       0,     0,   298,   299,   300,     0,     0,   301,   302,   303,
     304,   305,   715,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   317,   318,   716,   320,   321,   322,
     323,   324,   325,     0,   326,   327,   328,   329,   330,     0,
       0,   331,   332,   333,   334,   335,   336,   337,   338,   339,
       0,   340,   341,   342,     0,   343,   344,   345,   346,   347,
     348,   349,   350,   351,     0,   352,   353,   354,   355,   356,
     357,   358,  1867,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,     0,   370,   371,   372,   373,   374,   719,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
       0,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   721,     0,   399,   400,     0,
     401,   402,   403,   404,   405,   406,   407,     0,   408,   409,
       0,     0,   410,   411,   724,   413,   725,     0,   415,   416,
     417,   418,   419,   420,   421,     0,     0,   422,   423,   424,
     425,   426,   727,     0,   427,   428,   429,   430,   431,   432,
     433,     0,   434,   435,   436,     0,   437,   438,   439,     0,
       0,   440,     0,     0,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,     0,    91,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   571,    92,    93,    94,    95,    96,    97,    98,    99,
       0,   100,   101,   102,     0,     0,     0,     0,     0,     0,
       0,   103,   104,     0,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,     0,   117,   118,   119,
     120,   121,   122,     0,   683,   123,   124,   125,   126,   127,
       0,   128,   129,   130,   131,   686,     0,   687,     0,     0,
     134,   135,   136,   137,   138,   139,   140,   141,     0,   142,
     143,   144,   145,   146,   147,     0,   148,   149,   150,   151,
     688,   689,   690,   691,   692,   693,   694,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,     0,   163,     0,
     164,   165,   166,   167,   168,   169,     0,   170,     0,   171,
     172,   173,   174,     0,     0,   175,   176,   177,   178,   179,
       0,     0,   180,   181,   182,     0,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   700,
       0,   196,     0,   197,   198,   199,   200,     0,   201,     0,
     202,   203,     0,   204,   205,   206,   207,   208,   209,     0,
     210,     0,     0,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,   230,   231,   232,   233,
     234,   235,   236,   237,   238,     0,   239,     0,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,     0,     0,
     250,   251,   252,   253,     0,   254,   255,   256,   706,   707,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     285,     0,   286,   287,   288,   289,     0,   712,   291,   292,
     293,   294,   295,     0,   296,   297,     0,     0,   298,   299,
     300,     0,     0,   301,   302,   303,   304,   305,   715,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     0,
     317,   318,   716,   320,   321,   322,   323,   324,   325,     0,
     326,   327,   328,   329,   330,     0,     0,   331,   332,   333,
     334,   335,   336,   337,   338,   339,     0,   340,   341,   342,
       0,   343,   344,   345,   346,   347,   348,   349,   350,   351,
       0,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,     0,
     370,   371,   372,   373,   374,   719,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,     0,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   721,     0,   399,   400,     0,   401,   402,   403,   404,
     405,   406,   407,     0,   408,   409,     0,     0,   410,   411,
     724,   413,   725,     0,   415,   416,   417,   418,   419,   420,
     421,     0,     0,   422,   423,   424,   425,   426,   727,     0,
     427,   428,   429,   430,   431,   432,   433,     0,   434,   435,
     436,     0,   437,   438,   439,     0,     0,   440,     0,     0,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,     0,   653,  1010,   532,     0,     0,     0,   677,     0,
       0,     0,     0,     0,     0,     0,     0,  2514,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
       0,   123,   124,   125,   126,   127,     0,   128,   129,   130,
     131,   132,     0,   133,     0,     0,   134,   135,   136,   137,
     138,   139,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,   148,   149,   150,   151,     0,     0,     0,   152,
       0,     0,     0,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,     0,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,     0,   171,   172,   173,   174,     0,
       0,   175,   176,   177,   178,   179,     0,     0,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,  1011,   196,     0,   197,
     198,   199,   200,     0,   201,     0,   202,   203,     0,   204,
     205,   206,   207,   208,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,   231,   232,   233,   234,   235,   236,   237,
     238,     0,   239,     0,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,     0,     0,   250,   251,   252,   253,
       0,   254,   255,   256,     0,     0,   257,   258,   259,   260,
     261,   262,     0,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,     0,   285,     0,   286,   287,
     288,   289,     0,   290,   291,   292,   293,   294,   295,     0,
     296,   297,  1012,     0,   298,   299,   300,     0,     0,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
     321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
     330,     0,     0,   331,   332,   333,   334,   335,   336,   337,
     338,   339,     0,   340,   341,   342,     0,   343,   344,   345,
     346,   347,   348,   349,   350,   351,     0,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   401,   402,   403,   404,   405,   406,   407,     0,
     408,   409,     0,     0,   410,   411,   412,   413,   414,  1013,
     415,   416,   417,   418,   419,   420,   421,     0,     0,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,     0,   434,   435,   436,     0,   437,   438,
     439,     0,     0,   440,     0,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,     0,   653,     0,
       0,     0,     0,     0,  1014,  1015,  1732,     0,     0,     0,
       0,     0,     0,  1733,    92,    93,    94,    95,    96,    97,
      98,    99,     0,   100,   101,   102,     3,     4,     0,     0,
       0,     0,     0,   103,   104,     0,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,     0,   117,
     118,   119,   120,   121,   122,     0,     0,   123,   124,   125,
     126,   127,     0,   128,   129,   130,   131,   132,     0,   133,
       0,     0,   134,   135,   136,   137,   138,   139,   140,   141,
       0,   142,   143,   144,   145,   146,   147,     0,   148,   149,
     150,   151,     0,     0,     0,   152,     0,     0,     0,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,     0,
     163,     0,   164,   165,   166,   167,   168,   169,     0,   170,
       0,   171,   172,   173,   174,     0,     0,   175,   176,   177,
     178,   179,     0,     0,   180,   181,   182,     0,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,     0,   196,     0,   197,   198,   199,   200,     0,
     201,     0,   202,   203,     0,   204,   205,   206,   207,   208,
     209,     0,   210,     0,     0,     0,   211,   212,     0,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,     0,   230,   231,
     232,   233,   234,   235,   236,   237,   238,     0,   239,     0,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
       0,     0,   250,   251,   252,   253,     0,   254,   255,   256,
       0,     0,   257,   258,   259,   260,   261,   262,     0,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,     0,   285,     0,   286,   287,   288,   289,     0,   290,
     291,   292,   293,   294,   295,     0,   296,   297,     0,     0,
     298,   299,   300,     0,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
     325,     0,   326,   327,   328,   329,   330,     0,     0,   331,
     332,   333,   334,   335,   336,   337,   338,   339,     0,   340,
     341,   342,     0,   343,   344,   345,   346,   347,   348,   349,
     350,   351,     0,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    25,   370,   371,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,    29,   401,   402,
     403,   404,   405,   406,   407,     0,   408,   409,     0,     0,
     410,   411,   412,   413,   414,     0,   415,   416,   417,   418,
     419,   420,   421,     0,     0,   422,   423,   424,   425,   426,
       0,     0,   427,   428,   429,   430,   431,   582,   433,     0,
     434,   435,   436,     0,   437,   438,   439,     0,     0,   440,
       0,    32,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,     0,   487,    33,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   571,
      92,    93,    94,    95,    96,    97,    98,    99,   579,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,     0,   109,   110,   111,   112,
     113,     0,   115,   116,     0,   117,   118,   119,   120,   121,
     122,     0,     0,   123,   124,   125,   126,   127,     0,   128,
     129,   130,   131,   132,     0,     0,     0,     0,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,     0,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   281,   282,   283,   284,     0,   285,     0,
     286,   287,     0,   289,     0,   290,   291,   292,   293,   294,
     295,     0,   296,   297,     0,     0,   298,   299,   300,     0,
       0,   301,   302,     0,   304,     0,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   326,   327,
     328,   329,   330,     0,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,     0,   340,   341,   342,     0,   343,
     344,   345,   346,   347,   348,   349,   350,   351,     0,   352,
     353,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    25,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,     0,
     381,   382,   383,   384,     0,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,    29,   401,     0,   403,   404,   405,   406,
     407,     0,   580,   409,     0,     0,   581,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,   420,   421,     0,
       0,   422,   423,   424,   425,   426,     0,     0,   427,   428,
     429,   430,   431,   582,   433,     0,   434,     0,   436,     0,
     437,   438,   439,     0,     0,   440,     0,    32,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,     0,
     487,    33,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   571,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,     0,   134,   135,   136,   137,     0,   139,
     140,   141,     0,   142,   143,   144,   145,   146,   147,     0,
       0,   149,   150,   151,     0,     0,     0,     0,     0,     0,
       0,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,     0,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,     0,   171,   172,   173,   174,     0,     0,   175,
     176,   177,   178,   179,     0,     0,   180,   181,   182,     0,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,     0,   196,     0,   197,   198,   199,
     200,     0,   201,     0,   202,     0,     0,     0,   205,   206,
     207,     0,   209,     0,   210,     0,     0,     0,   211,   212,
       0,   213,   214,   215,   216,   217,   218,     0,   220,   221,
     222,   223,     0,   224,   225,   226,   227,   228,   229,     0,
     230,     0,   232,   233,   234,   235,   236,   237,   238,     0,
     239,     0,   240,     0,     0,   243,     0,   245,   246,   247,
     248,   249,     0,     0,   250,     0,   252,     0,     0,   254,
     255,   256,     0,     0,   257,   258,   259,   260,   261,   262,
       0,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   281,
     282,   283,   284,     0,   285,     0,   286,   287,     0,   289,
       0,   290,   291,   292,   293,   294,   295,     0,   296,   297,
       0,     0,   298,   299,   300,     0,     0,   301,   302,     0,
     304,     0,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
     323,   324,   325,     0,   326,   327,   328,   329,   330,     0,
       0,   331,   332,   333,   334,   335,   336,   337,   338,   339,
       0,   340,   341,   342,     0,   343,   344,   345,   346,   347,
     348,   349,   350,   351,     0,   352,   353,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    25,   370,   371,   372,   373,   374,     0,
     375,   376,   377,   378,   379,     0,   381,   382,   383,   384,
       0,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,    29,
     401,     0,   403,   404,   405,   406,   407,     0,   408,   409,
       0,     0,   410,   411,   412,   413,   414,     0,   415,   416,
     417,   418,   419,   420,   421,     0,     0,   422,   423,   424,
     425,   426,     0,     0,   427,   428,   429,   430,   431,   582,
     433,     0,   434,     0,   436,     0,   437,   438,   439,     0,
       0,   440,     0,    32,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,     0,   487,    33,  2319,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   571,    92,    93,    94,    95,    96,    97,    98,    99,
       0,   100,   101,   102,     0,     0,     0,     0,     0,     0,
       0,   103,   104,     0,   105,   106,   107,     0,   109,   110,
     111,   112,   113,     0,   115,   116,     0,   117,   118,   119,
     120,   121,   122,     0,     0,   123,   124,   125,   126,   127,
       0,   128,   129,   130,   131,   132,     0,     0,     0,     0,
     134,   135,   136,   137,     0,   139,   140,   141,     0,   142,
     143,   144,   145,   146,   147,     0,     0,   149,   150,   151,
       0,     0,     0,     0,     0,     0,     0,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,     0,   163,     0,
     164,   165,   166,   167,   168,   169,     0,   170,     0,   171,
     172,   173,   174,     0,     0,   175,   176,   177,   178,   179,
       0,     0,   180,   181,   182,     0,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,     0,   201,     0,
     202,     0,     0,     0,   205,   206,   207,     0,   209,     0,
     210,     0,     0,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,     0,   220,   221,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,   230,     0,   232,   233,
     234,   235,   236,   237,   238,     0,   239,     0,   240,     0,
       0,   243,     0,   245,   246,   247,   248,   249,     0,     0,
     250,     0,   252,     0,     0,   254,   255,   256,     0,     0,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   281,   282,   283,   284,     0,
     285,     0,   286,   287,     0,   289,     0,   290,   291,   292,
     293,   294,   295,     0,   296,   297,     0,     0,   298,   299,
     300,     0,     0,   301,   302,     0,   304,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     0,
     317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     326,   327,   328,   329,   330,     0,     0,   331,   332,   333,
     334,   335,   336,   337,   338,   339,     0,   340,   341,   342,
       0,   343,   344,   345,   346,   347,   348,   349,   350,   351,
       0,   352,   353,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,     0,
     370,   371,   372,   373,   374,     0,   375,   376,   377,   378,
     379,     0,   381,   382,   383,   384,     0,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,     0,   401,     0,   403,   404,
     405,   406,   407,     0,   408,   409,     0,     0,   410,   411,
     412,   413,   414,     0,   415,   416,   417,   418,   419,   420,
     421,     0,     0,   422,   423,   424,   425,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,     0,   434,     0,
     436,     0,   437,   438,   439,     0,     0,   440,     0,     0,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,     0,   487,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2337,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,     0,   109,   110,   111,   112,   113,     0,
     115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
       0,   123,   124,   125,   126,   127,     0,   128,   129,   130,
     131,   132,     0,     0,     0,     0,   134,   135,   136,   137,
       0,   139,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,     0,   149,   150,   151,     0,     0,     0,     0,
       0,     0,     0,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,     0,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,     0,   171,   172,   173,   174,     0,
       0,   175,   176,   177,   178,   179,     0,     0,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,     0,   196,     0,   197,
     198,   199,   200,     0,   201,     0,   202,     0,     0,     0,
     205,   206,   207,     0,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,   214,   215,   216,   217,   218,     0,
     220,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,     0,   232,   233,   234,   235,   236,   237,
     238,     0,   239,     0,   240,     0,     0,   243,     0,   245,
     246,   247,   248,   249,     0,     0,   250,     0,   252,     0,
       0,   254,   255,   256,     0,     0,   257,   258,   259,   260,
     261,   262,     0,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   281,   282,   283,   284,     0,   285,     0,   286,   287,
       0,   289,     0,   290,   291,   292,   293,   294,   295,     0,
     296,   297,     0,     0,   298,   299,   300,     0,     0,   301,
     302,     0,   304,     0,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
     321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
     330,     0,     0,   331,   332,   333,   334,   335,   336,   337,
     338,   339,     0,   340,   341,   342,     0,   343,   344,   345,
     346,   347,   348,   349,   350,   351,     0,   352,   353,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,     0,   381,   382,
     383,   384,     0,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   401,     0,   403,   404,   405,   406,   407,     0,
     408,   409,     0,     0,   410,   411,   412,   413,   414,     0,
     415,   416,   417,   418,   419,   420,   421,     0,     0,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,     0,   434,     0,   436,     0,   437,   438,
     439,     0,     0,   440,     0,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,     0,   487,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   773,    92,    93,    94,    95,    96,    97,
      98,    99,     0,   100,   101,   102,     0,     0,     0,     0,
       0,     0,     0,   103,   104,     0,   105,   106,   107,     0,
     109,   110,   111,   112,   113,     0,   115,   116,     0,   117,
     118,   119,   120,   121,   122,     0,     0,   123,   124,   125,
     126,   127,     0,   128,   129,   130,   131,   132,     0,     0,
       0,     0,   134,   135,   136,   137,     0,   139,   140,   141,
       0,   142,   143,   144,   145,   146,   147,     0,     0,   149,
     150,   151,     0,     0,     0,     0,     0,     0,     0,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,     0,
     163,     0,   164,   165,   166,   167,   168,   169,     0,   170,
       0,   171,   172,   173,   174,     0,     0,   175,   176,   177,
     178,   179,     0,     0,   180,   181,   182,     0,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,     0,   196,     0,   197,   198,   199,   200,     0,
     201,     0,   202,     0,     0,     0,   205,   206,   207,     0,
     209,     0,   210,     0,     0,     0,   211,   212,     0,   213,
     214,   215,   216,   217,   218,     0,   220,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,     0,   230,     0,
     232,   233,   234,   235,   236,   237,   238,     0,   239,     0,
     240,     0,     0,   243,     0,   245,   246,   247,   248,   249,
       0,     0,   250,     0,   252,     0,     0,   254,   255,   256,
       0,     0,   257,   258,   259,   260,   261,   262,     0,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,     0,   281,   282,   283,
     284,     0,   285,     0,   286,   287,     0,   289,     0,   290,
     291,   292,   293,   294,   295,     0,   296,   297,     0,     0,
     298,   299,   300,     0,     0,   301,   302,     0,   304,     0,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
     325,     0,   326,   327,   328,   329,   330,     0,     0,   331,
     332,   333,   334,   335,   336,   337,   338,   339,     0,   340,
     341,   342,     0,   343,   344,   345,   346,   347,   348,   349,
     350,   351,     0,   352,   353,     0,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,     0,   375,   376,
     377,   378,   379,     0,   381,   382,   383,   384,     0,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,   401,     0,
     403,   404,   405,   406,   407,     0,   408,   409,     0,     0,
     410,   411,   412,   413,   414,     0,   415,   416,   417,   418,
     419,   420,   421,     0,     0,   422,   423,   424,   425,   426,
       0,     0,   427,   428,   429,   430,   431,   432,   433,     0,
     434,     0,   436,     0,   437,   438,   439,     0,     0,   440,
       0,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,     0,   487,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1617,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,     0,   109,   110,   111,   112,
     113,     0,   115,   116,     0,   117,   118,   119,   120,   121,
     122,     0,     0,   123,   124,   125,   126,   127,     0,   128,
     129,   130,   131,   132,     0,     0,     0,     0,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,     0,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
       0,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,     0,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,     0,     0,   250,     0,
     252,     0,     0,   254,   255,   256,     0,     0,   257,   258,
     259,   260,   261,   262,     0,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   281,   282,   283,   284,     0,   285,     0,
     286,   287,     0,   289,     0,   290,   291,   292,   293,   294,
     295,     0,   296,   297,     0,     0,   298,   299,   300,     0,
       0,   301,   302,     0,   304,     0,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   326,   327,
     328,   329,   330,     0,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,     0,   340,   341,   342,     0,   343,
     344,   345,   346,   347,   348,   349,   350,   351,     0,   352,
     353,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,     0,
     381,   382,   383,   384,     0,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   401,     0,   403,   404,   405,   406,
     407,     0,   408,   409,     0,     0,   410,   411,   412,   413,
     414,     0,   415,   416,   417,   418,   419,   420,   421,     0,
       0,   422,   423,   424,   425,   426,     0,     0,   427,   428,
     429,   430,   431,   432,   433,     0,   434,     0,   436,     0,
     437,   438,   439,     0,     0,   440,     0,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,     0,
       0,     0,     0,  1033,  1010,   532,     0,     0,  1445,   677,
       0,     0,     0,     0,     0,  2111,  1446,  1447,  1448,    92,
      93,    94,    95,    96,    97,    98,    99,   874,   100,   101,
     102,   875,   876,   877,   878,   879,   880,   881,   103,   104,
     882,   105,   106,   107,   108,   109,   110,   111,     0,  1034,
     114,  1035,  1036,   883,   117,   118,   119,   120,   121,   122,
     884,   885,   123,   124,  1037,  1038,   127,   886,   128,   129,
     130,   131,     0,   887,   133,   888,   889,   134,   135,   136,
     137,   138,   139,   140,   141,   890,   142,   143,   144,   145,
     146,   147,   891,   148,   149,   150,   151,   892,   893,   894,
     152,   895,   896,   897,   153,   154,   155,   156,   157,   158,
     159,  1039,  1040,   162,   898,   163,   899,   164,   165,   166,
     167,   168,   169,   900,   170,   901,   171,   172,   173,   174,
     902,   903,   175,   176,   698,   178,   179,   904,   905,   180,
     181,   182,   906,   183,   184,   185,   907,   186,   187,   188,
     189,     0,   191,   192,   193,   194,     0,   908,   196,   909,
     197,   198,  1041,   200,   910,   201,   911,   202,   203,   912,
     204,   205,   206,   207,   208,   209,   913,   210,   914,   915,
     916,     0,   212,   917,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   918,   224,   225,   226,   227,
     228,   229,   919,   230,   231,     0,   233,   234,   235,   236,
    1042,  1043,   920,  1044,   921,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   922,   923,   250,   251,   252,
     253,   924,   254,   255,   256,   925,   926,   257,   258,   259,
     260,   261,   262,   927,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
    1045,   280,  1046,   282,   283,   284,   928,  2228,   929,   286,
     287,   288,   289,   930,     0,   291,  1047,   293,   294,   295,
     931,   296,   297,   932,   933,  2229,   299,   300,   934,   935,
     301,     0,   303,   304,   305,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   936,   317,   318,     0,
     320,   321,     0,   323,   324,   325,   937,   326,   327,   328,
     329,   330,   938,   939,   331,   332,   333,   334,  1048,   336,
     337,   338,   339,   940,   340,   341,   342,   941,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   942,   352,   353,
     354,   355,   356,   357,  1049,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   943,   370,   371,   372,
     373,   374,   944,   375,  2230,   377,   378,   379,   380,   381,
     382,  1051,   384,   945,   946,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,  1052,   397,     0,   947,
     399,   400,   948,   401,   402,   403,   404,   405,   406,   407,
     949,  1053,  1054,   950,   951,   410,   411,     0,   413,     0,
     952,   415,   416,   417,   418,   419,   420,   421,   953,   954,
     422,   423,   424,   425,   426,   955,   956,   427,   428,   429,
     430,   431,     0,  1055,   957,   434,   435,   436,   958,   437,
     438,   439,   959,   960,   440,   961,   962,   441,   442,   443,
     444,   445,   446,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   458,   459,   460,   461,     0,   487,
       0,  1449,  1450,  1451,  1445,  2231,  2232,  1454,  1455,  1456,
    1457,     0,  1446,  1447,  1448,    92,    93,    94,    95,    96,
      97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
       0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
       0,   109,   110,   111,   112,   113,     0,   115,   116,     0,
     117,   118,   119,   120,   121,   122,     0,     0,   123,   124,
     125,   126,   127,     0,   128,   129,   130,   131,   132,     0,
       0,     0,     0,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,     0,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   262,     0,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   281,   282,
     283,   284,     0,   285,     0,   286,   287,     0,   289,     0,
     290,   291,   292,   293,   294,   295,     0,   296,   297,     0,
       0,   298,   299,   300,     0,     0,   301,   302,     0,   304,
       0,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
     324,   325,     0,   326,   327,   328,   329,   330,     0,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,     0,
     340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
     349,   350,   351,     0,   352,   353,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,     0,   381,   382,   383,   384,     0,
       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   401,
       0,   403,   404,   405,   406,   407,     0,   408,   409,     0,
       0,   410,   411,   412,   413,   414,     0,   415,   416,   417,
     418,   419,   420,   421,     0,     0,   422,   423,   424,   425,
     426,     0,     0,   427,   428,   429,   430,   431,   432,   433,
       0,   434,     0,   436,     0,   437,   438,   439,     0,     0,
     440,     0,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,     0,     0,     0,  1449,  1450,  1451,
       0,  1452,  1453,  1454,  1455,  1456,  1457,  1131,     0,     0,
    1132,     0,     0,     0,     0,  1133,  1134,  1135,     0,     0,
       0,     0,     0,     0,     0,  1131,     0,     0,  1132,     0,
       0,     0,  1136,  1133,  1134,  1135,     0,     0,     0,     0,
    1138,     0,     0,  1131,     0,     0,  1132,  1139,     0,     0,
    1136,  1133,  1134,  1135,     0,     0,     0,     0,  1138,     0,
       0,     0,     0,     0,     0,  1139,     0,     0,  1136,     0,
       0,  1131,  1140,     0,  1132,     0,  1138,     0,     0,  1133,
    1134,  1135,     0,  1139,     0,     0,     0,     0,     0,  1131,
    1140,     0,  1132,     0,     0,     0,  1136,  1133,  1134,  1135,
       0,     0,     0,     0,  1138,     0,     0,     0,  1140,     0,
       0,  1139,     0,     0,  1136,     0,     0,     0,     0,     0,
       0,     0,  1138,     0,     0,     0,     0,     0,     0,  1139,
       0,     0,     0,     0,     0,     0,  1140,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1140,     0,     0,     0,     0,  1131,
       0,     0,  1132,     0,     0,     0,     0,  1133,  1134,  1135,
       0,     0,     0,  1141,     0,     0,     0,  1131,     0,     0,
    1132,     0,     0,     0,  1136,  1133,  1134,  1135,     0,  1142,
       0,  1141,  1138,     0,  1143,     0,     0,     0,     0,  1139,
       0,     0,  1136,     0,     0,     0,     0,  1142,     0,  1141,
    1138,     0,  1143,     0,     0,  1144,  1145,  1139,     0,     0,
       0,     0,     0,     0,  1140,  1142,     0,     0,     0,  1146,
    1143,     0,     0,  1144,  1145,     0,     0,  1141,     0,     0,
       0,     0,  1140,     0,     0,     0,     0,  1146,     0,     0,
       0,  1144,  1145,  1142,     0,  1141,     0,     0,  1143,     0,
       0,     0,     0,     0,     0,  1146,     0,  1147,     0,     0,
    1148,  1142,     0,     0,     0,     0,  1143,     0,     0,  1144,
    1145,     0,     0,     0,  1149,  1147,     0,  1150,  1148,     0,
       0,     0,     0,  1146,     0,     0,     0,  1144,  1145,     0,
       0,     0,  1149,  1147,     0,  1150,  1148,     0,     0,     0,
       0,  1146,     0,     0,     0,     0,     0,     0,     0,     0,
    1149,     0,     0,  1150,     0,  1141,     0,     0,     0,     0,
       0,  1147,     0,     0,  1148,     0,     0,     0,     0,     0,
       0,  1142,     0,  1141,     0,     0,  1143,     0,  1149,  1147,
       0,  1150,  1148,     0,     0,     0,     0,     0,     0,  1142,
       0,     0,     0,     0,  1143,     0,  1149,  1144,  1145,  1150,
       0,     0,     0,     0,     0,     0,     0,  1151,     0,     0,
       0,  1146,     0,     0,     0,  1144,  1145,     0,     0,     0,
       0,     0,     0,     0,     0,  1151,     0,     0,     0,  1146,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1151,     0,     0,     0,     0,     0,  1147,
       0,     0,  1148,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1149,  1147,     0,  1150,
    1148,  1151,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1149,     0,     0,  1150,     0,  1151,
       0,   824,     0,     0,     0,     0,     0,   825,     0,     0,
       0,     0,     0,     0,   837,     0,     0,  1152,     0,     0,
    1153,  1154,  1155,     0,  1156,  1157,  1158,  1159,  1160,  1161,
       0,     0,     0,   838,  2089,  1152,     0,     0,  1153,  1154,
    1155,     0,  1156,  1157,  1158,  1159,  1160,  1161,     0,     0,
       0,     0,  2192,  1152,     0,     0,  1153,  1154,  1155,     0,
    1156,  1157,  1158,  1159,  1160,  1161,     0,     0,     0,  1151,
    2288,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1152,     0,   839,  1153,  1154,  1155,  1151,  1156,  1157,
    1158,  1159,  1160,  1161,     0,     0,     0,     0,  2306,  1152,
       0,     0,  1153,  1154,  1155,     0,  1156,  1157,  1158,  1159,
    1160,  1161,     0,   826,     0,     0,  2467,  1131,     0,     0,
    1132,     0,     0,     0,     0,  1133,  1134,  1135,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1136,     0,     0,     0,     0,     0,     0,     0,
    1138,     0,     0,     0,     0,     0,     0,  1139,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1152,
       0,     0,  1153,  1154,  1155,   840,  1156,  1157,  1158,  1159,
    1160,  1161,  1140,     0,     0,     0,  2691,  1152,     0,     0,
    1153,  1154,  1155,     0,  1156,  1157,  1158,  1159,  1160,  1161,
       0,     0,     0,     0,  2703,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   841,     0,     0,     0,     0,     0,     0,
       0,   842,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   843,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   827,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   844,     0,     0,     0,     0,
       0,     0,     0,  1141,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1142,
       0,     0,     0,     0,  1143,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1657,     0,
       0,     0,   829,   846,     0,  1144,  1145,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1146,
       0,     0,     0,     0,     0,   847,     0,     0,     0,     0,
       0,  1658,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   849,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1147,     0,     0,
    1148,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1149,     0,     0,  1150,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   831,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1151,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1152,   873,     0,
    1153,  1154,  1155,     0,  1156,  1157,  1158,  1159,  1160,  1161,
       0,     0,  1308,     0,    92,    93,    94,    95,    96,    97,
      98,    99,   874,   100,   101,   102,   875,   876,   877,   878,
     879,   880,   881,   103,   104,   882,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   883,   117,
     118,   119,   120,   121,   122,   884,   885,   123,   124,   125,
     126,   127,   886,   128,   129,   130,   131,   132,   887,   133,
     888,   889,   134,   135,   136,   137,   138,   139,   140,   141,
     890,   142,   143,   144,   145,   146,   147,   891,   148,   149,
     150,   151,   892,   893,   894,   152,   895,   896,   897,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   898,
     163,   899,   164,   165,   166,   167,   168,   169,   900,   170,
     901,   171,   172,   173,   174,   902,   903,   175,   176,   177,
     178,   179,   904,   905,   180,   181,   182,   906,   183,   184,
     185,   907,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   908,   196,   909,   197,   198,   199,   200,   910,
     201,   911,   202,   203,   912,   204,   205,   206,   207,   208,
     209,   913,   210,   914,   915,   916,   211,   212,   917,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     918,   224,   225,   226,   227,   228,   229,   919,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   920,   239,   921,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     922,   923,   250,   251,   252,   253,   924,   254,   255,   256,
     925,   926,   257,   258,   259,   260,   261,   262,   927,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   928,   285,   929,   286,   287,   288,   289,   930,   290,
     291,   292,   293,   294,   295,   931,   296,   297,   932,   933,
     298,   299,   300,   934,   935,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   936,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   937,   326,   327,   328,   329,   330,   938,   939,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   940,   340,
     341,   342,   941,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   942,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   943,   370,   371,   372,   373,   374,   944,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   945,   946,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   947,   399,   400,   948,   401,   402,
     403,   404,   405,   406,   407,   949,   408,   409,   950,   951,
     410,   411,   412,   413,   414,   952,   415,   416,   417,   418,
     419,   420,   421,   953,   954,   422,   423,   424,   425,   426,
     955,   956,   427,   428,   429,   430,   431,   432,   433,   957,
     434,   435,   436,   958,   437,   438,   439,   959,   960,   440,
     961,   962,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   487,     0,     0,     0,     0,     0,     0,
       0,     0,   963,     0,     0,     0,     0,     0,     0,    92,
      93,    94,    95,    96,    97,    98,    99,     0,   100,   101,
     102,     0,     0,     0,     0,     0,     0,     0,   103,   104,
       0,   105,   106,   107,     0,   109,   110,   111,   112,   113,
       0,   115,   116,     0,   117,   118,   119,   120,   121,   122,
       0,     0,   123,   124,   125,   126,   127,     0,   128,   129,
     130,   131,   132,     0,     0,     0,     0,   134,   135,   136,
     137,     0,   139,   140,   141,     0,   142,   143,   144,   145,
     146,   147,     0,     0,   149,   150,   151,     0,     0,     0,
       0,     0,     0,     0,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,     0,   163,     0,   164,   165,   166,
     167,   168,   169,     0,   170,     0,   171,   172,   173,   174,
       0,     0,   175,   176,   177,   178,   179,     0,     0,   180,
     181,   182,     0,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,     0,   196,     0,
     197,   198,   199,   200,     0,   201,     0,   202,     0,     0,
       0,   205,   206,   207,     0,   209,     0,   210,     0,     0,
       0,   211,   212,     0,   213,   214,   215,   216,   217,   218,
       0,   220,   221,   222,   223,     0,   224,   225,   226,   227,
     228,   229,     0,   230,     0,   232,   233,   234,   235,   236,
     237,   238,     0,   239,     0,   240,     0,     0,   243,     0,
     245,   246,   247,   248,   249,     0,     0,   250,     0,   252,
       0,     0,   254,   255,   256,     0,     0,   257,   258,   259,
     260,   261,   262,     0,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,   281,   282,   283,   284,     0,   285,     0,   286,
     287,     0,   289,     0,   290,   291,   292,   293,   294,   295,
       0,   296,   297,     0,     0,   298,   299,   300,     0,     0,
     301,   302,     0,   304,     0,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   317,   318,   319,
     320,   321,   322,   323,   324,   325,     0,   326,   327,   328,
     329,   330,     0,     0,   331,   332,   333,   334,   335,   336,
     337,   338,   339,     0,   340,   341,   342,     0,   343,   344,
     345,   346,   347,   348,   349,   350,   351,     0,   352,   353,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,     0,   370,   371,   372,
     373,   374,     0,   375,   376,   377,   378,   379,     0,   381,
     382,   383,   384,     0,     0,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,     0,   401,     0,   403,   404,   405,   406,   407,
       0,   408,   409,     0,     0,   410,   411,   412,   413,   414,
       0,   415,   416,   417,   418,   419,   420,   421,     0,     0,
     422,   423,   424,   425,   426,     0,     0,   427,   428,   429,
     430,   431,   432,   433,     0,   434,     0,   436,     0,   437,
     438,   439,     0,     0,   440,     0,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   653,  1010,
     532,     0,     0,     0,   677,     0,     0,  2030,     0,     0,
       0,     0,     0,     0,    92,    93,    94,    95,    96,    97,
      98,    99,     0,   100,   101,   102,     0,     0,     0,     0,
       0,     0,     0,   103,   104,     0,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,     0,   117,
     118,   119,   120,   121,   122,     0,     0,   123,   124,   125,
     126,   127,     0,   128,   129,   130,   131,   132,     0,   133,
       0,     0,   134,   135,   136,   137,   138,   139,   140,   141,
       0,   142,   143,   144,   145,   146,   147,     0,   148,   149,
     150,   151,     0,     0,     0,   152,     0,     0,     0,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,  1187,
     163,     0,   164,   165,   166,   167,   168,   169,     0,   170,
       0,   171,   172,   173,   174,     0,     0,   175,   176,   177,
     178,   179,     0,     0,   180,   181,   182,     0,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,  1011,   196,     0,   197,   198,   199,   200,     0,
     201,     0,   202,   203,     0,   204,   205,   206,   207,   208,
     209,     0,   210,     0,     0,     0,   211,   212,     0,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,     0,   230,   231,
     232,   233,   234,   235,   236,   237,   238,     0,   239,     0,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
       0,     0,   250,   251,   252,   253,     0,   254,   255,   256,
       0,     0,   257,   258,   259,   260,   261,   262,     0,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,     0,   285,     0,   286,   287,   288,   289,     0,   290,
     291,   292,   293,   294,   295,     0,   296,   297,  1012,     0,
     298,   299,   300,     0,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
     325,     0,   326,   327,   328,   329,   330,     0,     0,   331,
     332,   333,   334,   335,   336,   337,   338,   339,     0,   340,
     341,   342,     0,   343,   344,   345,   346,   347,   348,   349,
     350,   351,     0,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,   401,   402,
     403,   404,   405,   406,   407,     0,   408,   409,     0,     0,
     410,   411,   412,   413,   414,  1013,   415,   416,   417,   418,
     419,   420,   421,     0,     0,   422,   423,   424,   425,   426,
       0,     0,   427,   428,   429,   430,   431,   432,   433,     0,
     434,   435,   436,     0,   437,   438,   439,     0,     0,   440,
       0,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   653,  1010,   532,     0,     0,     0,   677,
    1014,  1015,     0,     0,     0,     0,     0,     0,     0,    92,
      93,    94,    95,    96,    97,    98,    99,     0,   100,   101,
     102,     0,     0,     0,     0,     0,     0,     0,   103,   104,
       0,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,     0,   117,   118,   119,   120,   121,   122,
       0,     0,   123,   124,   125,   126,   127,     0,   128,   129,
     130,   131,   132,     0,   133,     0,     0,   134,   135,   136,
     137,   138,   139,   140,   141,     0,   142,   143,   144,   145,
     146,   147,     0,   148,   149,   150,   151,     0,     0,     0,
     152,     0,     0,     0,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,  1189,   163,     0,   164,   165,   166,
     167,   168,   169,     0,   170,     0,   171,   172,   173,   174,
       0,     0,   175,   176,   177,   178,   179,     0,     0,   180,
     181,   182,     0,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,  1011,   196,     0,
     197,   198,   199,   200,     0,   201,     0,   202,   203,     0,
     204,   205,   206,   207,   208,   209,     0,   210,     0,     0,
       0,   211,   212,     0,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,     0,   224,   225,   226,   227,
     228,   229,     0,   230,   231,   232,   233,   234,   235,   236,
     237,   238,     0,   239,     0,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,     0,     0,   250,   251,   252,
     253,     0,   254,   255,   256,     0,     0,   257,   258,   259,
     260,   261,   262,     0,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,     0,   285,     0,   286,
     287,   288,   289,     0,   290,   291,   292,   293,   294,   295,
       0,   296,   297,  1012,     0,   298,   299,   300,     0,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   317,   318,   319,
     320,   321,   322,   323,   324,   325,     0,   326,   327,   328,
     329,   330,     0,     0,   331,   332,   333,   334,   335,   336,
     337,   338,   339,     0,   340,   341,   342,     0,   343,   344,
     345,   346,   347,   348,   349,   350,   351,     0,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,     0,   370,   371,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,     0,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,     0,
     399,   400,     0,   401,   402,   403,   404,   405,   406,   407,
       0,   408,   409,     0,     0,   410,   411,   412,   413,   414,
    1013,   415,   416,   417,   418,   419,   420,   421,     0,     0,
     422,   423,   424,   425,   426,     0,     0,   427,   428,   429,
     430,   431,   432,   433,     0,   434,   435,   436,     0,   437,
     438,   439,     0,     0,   440,     0,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   653,  1010,
     532,     0,     0,     0,   677,  1014,  1015,     0,     0,     0,
       0,     0,     0,     0,    92,    93,    94,    95,    96,    97,
      98,    99,     0,   100,   101,   102,     0,     0,     0,     0,
       0,     0,     0,   103,   104,     0,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,     0,   117,
     118,   119,   120,   121,   122,     0,     0,   123,   124,   125,
     126,   127,     0,   128,   129,   130,   131,   132,     0,   133,
       0,     0,   134,   135,   136,   137,   138,   139,   140,   141,
       0,   142,   143,   144,   145,   146,   147,     0,   148,   149,
     150,   151,     0,     0,     0,   152,     0,     0,     0,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,     0,
     163,     0,   164,   165,   166,   167,   168,   169,     0,   170,
       0,   171,   172,   173,   174,     0,     0,   175,   176,   177,
     178,   179,     0,     0,   180,   181,   182,     0,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,  1011,   196,     0,   197,   198,   199,   200,     0,
     201,     0,   202,   203,     0,   204,   205,   206,   207,   208,
     209,     0,   210,     0,     0,     0,   211,   212,     0,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,     0,   230,   231,
     232,   233,   234,   235,   236,   237,   238,     0,   239,     0,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
       0,     0,   250,   251,   252,   253,     0,   254,   255,   256,
       0,     0,   257,   258,   259,   260,   261,   262,     0,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,     0,   285,     0,   286,   287,   288,   289,     0,   290,
     291,   292,   293,   294,   295,     0,   296,   297,  1012,     0,
     298,   299,   300,     0,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
     325,     0,   326,   327,   328,   329,   330,     0,     0,   331,
     332,   333,   334,   335,   336,   337,   338,   339,     0,   340,
     341,   342,     0,   343,   344,   345,   346,   347,   348,   349,
     350,   351,     0,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,   401,   402,
     403,   404,   405,   406,   407,     0,   408,   409,     0,     0,
     410,   411,   412,   413,   414,  1013,   415,   416,   417,   418,
     419,   420,   421,     0,     0,   422,   423,   424,   425,   426,
       0,     0,   427,   428,   429,   430,   431,   432,   433,     0,
     434,   435,   436,     0,   437,   438,   439,     0,     0,   440,
       0,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,     0,  1131,     0,     0,  1132,     0,     0,
    1014,  1015,  1133,  1134,  1135,     0,     0,     0,     0,     0,
       0,     0,  1131,     0,     0,  1132,     0,     0,     0,  1136,
    1133,  1134,  1135,  1579,     0,     0,     0,  1138,     0,     0,
    1131,     0,     0,  1132,  1139,     0,     0,  1136,  1133,  1134,
    1135,     0,     0,     0,     0,  1138,     0,     0,     0,     0,
       0,     0,  1139,     0,     0,  1136,     0,     0,  1131,  1140,
       0,  1132,     0,  1138,     0,     0,  1133,  1134,  1135,     0,
    1139,     0,     0,     0,     0,     0,     0,  1140,     0,     0,
       0,     0,     0,  1136,     0,     0,  1768,     0,     0,     0,
       0,  1138,     0,     0,     0,  1140,     0,     0,  1139,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1580,
       0,     0,     0,     0,     0,     0,     0,     0,  1131,     0,
       0,  1132,     0,  1140,     0,     0,  1133,  1134,  1135,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1136,     0,     0,     0,     0,     0,     0,
       0,  1138,     0,     0,     0,     0,     0,     0,  1139,     0,
    1141,     0,     0,     0,     0,     0,     0,     0,  1808,     0,
       0,     0,     0,  1809,     0,     0,  1142,     0,  1141,     0,
       0,  1143,     0,  1140,     0,  2767,     0,     0,     0,     0,
       0,     0,     0,     0,  1142,     0,  1141,     0,     0,  1143,
       0,     0,  1144,  1145,     0,     0,     0,     0,     0,     0,
       0,     0,  1142,     0,     0,     0,  1146,  1143,     0,     0,
    1144,  1145,     0,     0,  1141,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1146,     0,     0,     0,  1144,  1145,
    1142,     0,     0,     0,     0,  1143,     0,     0,     0,     0,
       0,     0,  1146,     0,  1147,     0,     0,  1148,     0,     0,
       0,     0,     0,     0,     0,     0,  1144,  1145,     0,     0,
       0,  1149,  1147,     0,  1150,  1148,     0,     0,     0,     0,
    1146,     0,     0,     0,  1141,     0,     0,     0,     0,  1149,
    1147,     0,  1150,  1148,     0,     0,     0,     0,     0,     0,
    1142,     0,     0,     0,     0,  1143,     0,  1149,     0,     0,
    1150,     0,     0,     0,     0,     0,     0,     0,  1147,     0,
       0,  1148,     0,     0,     0,     0,  1144,  1145,     0,     0,
       0,     0,     0,  2768,     0,  1149,     0,     0,  1150,     0,
    1146,     0,     0,     0,     0,     0,     0,  1131,     0,     0,
    1132,     0,     0,     0,     0,  1133,  1134,  1135,     0,     0,
       0,     0,     0,     0,  1151,     0,     0,     0,     0,     0,
       0,     0,  1136,     0,     0,  1817,     0,     0,  1147,     0,
    1138,  1148,  1151,     0,     0,     0,     0,  1139,     0,     0,
       0,     0,     0,  1131,     0,  1149,  1132,     0,  1150,     0,
    1151,  1133,  1134,  1135,     0,     0,     0,     0,     0,     0,
       0,     0,  1140,     0,     0,     0,  1782,     0,  1136,     0,
       0,     0,  1581,     0,     0,     0,  1138,     0,  1151,     0,
       0,     0,     0,  1139,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1140,     0,
       0,     0,     0,     0,  1152,     0,     0,  1153,  1154,  1155,
       0,  1156,  1157,  1158,  1159,  1160,  1161,     0,     0,     0,
       0,     0,  1152,     0,     0,  1153,  1154,  1155,  1151,  1156,
    1157,  1158,  1159,  1160,  1161,     0,     0,     0,     0,     0,
    1152,     0,     0,  1153,  1154,  1155,     0,  1156,  1157,  1158,
    1159,  1160,  1161,  1141,     0,     0,     0,  1131,     0,     0,
    1132,     0,     0,     0,     0,  1133,  1134,  1135,  1152,  1142,
       0,  1153,  1154,  1155,  1143,  1156,  1157,  1158,  1159,  1160,
    1161,     0,  1136,     0,     0,     0,     0,     0,     0,     0,
    1138,     0,     0,     0,  1822,  1144,  1145,  1139,     0,  1141,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1146,
       0,     0,     0,     0,     0,  1142,     0,     0,     0,     0,
    1143,     0,  1140,     0,     0,     0,     0,     0,  1152,     0,
       0,  1153,  1154,  1155,     0,  1156,  1157,  1158,  1159,  1160,
    1161,  1144,  1145,     0,     0,     0,     0,  1147,     0,     0,
    1148,     0,     0,     0,     0,  1146,     0,     0,     0,     0,
       0,     0,     0,     0,  1149,     0,     0,  1150,     0,     0,
       0,     0,  1131,     0,     0,  1132,     0,     0,     0,     0,
    1133,  1134,  1135,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1147,     0,     0,  1148,  1136,     0,     0,
       0,     0,     0,     0,     0,  1138,     0,     0,  1131,     0,
    1149,  1132,  1139,  1150,     0,     0,  1133,  1134,  1135,     0,
       0,     0,     0,  1141,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1136,     0,     0,     0,  1140,     0,  1142,
       0,  1138,     0,     0,  1143,     0,     0,     0,  1139,     0,
       0,     0,     0,     0,     0,     0,     0,  1151,     0,     0,
       0,     0,     0,     0,     0,  1144,  1145,     0,     0,     0,
       0,     0,     0,  1140,     0,     0,     0,     0,     0,  1146,
       0,     0,     0,     0,     0,  1131,     0,     0,  1132,     0,
       0,     0,     0,  1133,  1134,  1135,     0,     0,     0,     0,
       0,     0,     0,  1151,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1147,  1138,     0,
    1148,     0,     0,     0,     0,  1139,     0,     0,     0,     0,
       0,     0,     0,     0,  1149,     0,     0,  1150,  1141,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1140,     0,     0,     0,  1142,     0,     0,  1152,     0,  1143,
    1153,  1154,  1155,     0,  1156,  1157,  1158,  1159,  1160,  1161,
       0,     0,     0,     0,  1141,     0,     0,     0,     0,     0,
    1144,  1145,     0,     0,     0,     0,     0,     0,     0,     0,
    1142,     0,     0,     0,  1146,  1143,     0,     0,     0,     0,
       0,     0,     0,  1152,     0,     0,  1153,  1154,  1155,     0,
    1156,  1157,  1158,  1159,  1160,  1161,  1144,  1145,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1151,     0,     0,
    1146,     0,  1147,     0,     0,  1148,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1149,
       0,  1141,  1150,     0,     0,     0,     0,     0,     0,  2050,
       0,     0,     0,     0,     0,     0,     0,  1142,  1147,     0,
       0,  1148,  1143,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1149,     0,     0,     0,     0,
       0,     0,     0,  1144,  1145,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1146,     0,     0,
    1131,     0,     0,  1132,     0,     0,     0,     0,  1133,  1134,
    1135,     0,     0,     0,     0,     0,     0,  1152,     0,     0,
    1153,  1154,  1155,     0,  1156,  1157,  1158,  1159,  1160,  1161,
       0,     0,  1151,  1138,     0,  1147,     0,     0,  1148,     0,
    1139,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1149,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1140,     0,     0,  1151,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1152,     0,     0,  1153,  1154,  1155,     0,  1156,
    1157,  1158,  1159,  1160,  1161,  1151,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1141,     0,  1152,     0,
       0,  1153,  1154,  1155,     0,  1156,  1157,  1158,  1159,  1160,
    1161,     0,  1142,     0,     0,     0,     0,  1143,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1591, -1591,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1146,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1152,     0,     0,  1153,  1154,
    1155,     0,  1156,  1157,  1158,  1159,  1160,  1161,     0,     0,
       0,     0,     0, -1591,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1149,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1151,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   873,     0,  1499,
    1152,     0,     0,  1153,  1154,  1155,     0,  1156,  1157,  1158,
    1159,  1160,  1161,    92,    93,    94,    95,    96,    97,    98,
      99,   874,   100,   101,   102,   875,   876,   877,   878,   879,
     880,   881,   103,   104,   882,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   883,   117,   118,
     119,   120,   121,   122,   884,   885,   123,   124,   125,   126,
     127,   886,   128,   129,   130,   131,   132,   887,   133,   888,
     889,   134,   135,   136,   137,   138,   139,   140,   141,   890,
     142,   143,   144,   145,   146,   147,   891,   148,   149,   150,
     151,   892,   893,   894,   152,   895,   896,   897,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   898,   163,
     899,   164,   165,   166,   167,   168,   169,   900,   170,   901,
     171,   172,   173,   174,   902,   903,   175,   176,   177,   178,
     179,   904,   905,   180,   181,   182,   906,   183,   184,   185,
     907,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   908,   196,   909,   197,   198,   199,   200,   910,   201,
     911,   202,   203,   912,   204,   205,   206,   207,   208,   209,
     913,   210,   914,   915,   916,   211,   212,   917,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   918,
     224,   225,   226,   227,   228,   229,   919,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   920,   239,   921,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   922,
     923,   250,   251,   252,   253,   924,   254,   255,   256,   925,
     926,   257,   258,   259,   260,   261,   262,   927,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     928,   285,   929,   286,   287,   288,   289,   930,   290,   291,
     292,   293,   294,   295,   931,   296,   297,   932,   933,   298,
     299,   300,   934,   935,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     936,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     937,   326,   327,   328,   329,   330,   938,   939,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   940,   340,   341,
     342,   941,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   942,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     943,   370,   371,   372,   373,   374,   944,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   945,   946,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   947,   399,   400,   948,   401,   402,   403,
     404,   405,   406,   407,   949,   408,   409,   950,   951,   410,
     411,   412,   413,   414,   952,   415,   416,   417,   418,   419,
     420,   421,   953,   954,   422,   423,   424,   425,   426,   955,
     956,   427,   428,   429,   430,   431,   432,   433,   957,   434,
     435,   436,   958,   437,   438,   439,   959,   960,   440,   961,
     962,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   873,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,   874,   100,   101,   102,
     875,   876,   877,   878,   879,   880,   881,   103,   104,   882,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   883,   117,   118,   119,   120,   121,   122,   884,
     885,   123,   124,   125,   126,   127,   886,   128,   129,   130,
     131,   132,   887,   133,   888,   889,   134,   135,   136,   137,
     138,   139,   140,   141,   890,   142,   143,   144,   145,   146,
     147,   891,   148,   149,   150,   151,   892,   893,   894,   152,
     895,   896,   897,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   898,   163,   899,   164,   165,   166,   167,
     168,   169,   900,   170,   901,   171,   172,   173,   174,   902,
     903,   175,   176,   177,   178,   179,   904,   905,   180,   181,
     182,   906,   183,   184,   185,   907,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   908,   196,   909,   197,
     198,   199,   200,   910,   201,   911,   202,   203,   912,   204,
     205,   206,   207,   208,   209,   913,   210,   914,   915,   916,
     211,   212,   917,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   918,   224,   225,   226,   227,   228,
     229,   919,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   920,   239,   921,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   922,   923,   250,   251,   252,   253,
     924,   254,   255,   256,   925,   926,   257,   258,   259,   260,
     261,   262,   927,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   928,   285,   929,   286,   287,
     288,   289,   930,   290,   291,   292,   293,   294,   295,   931,
     296,   297,   932,   933,   298,   299,   300,   934,   935,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   936,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   937,   326,   327,   328,   329,
     330,   938,   939,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   940,   340,   341,   342,   941,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   942,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   943,   370,   371,   372,   373,
     374,   944,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   945,   946,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   947,   399,
     400,   948,   401,   402,   403,   404,   405,   406,   407,   949,
     408,   409,   950,   951,   410,   411,   412,   413,   414,   952,
     415,   416,   417,   418,   419,   420,   421,   953,   954,   422,
     423,   424,   425,   426,   955,   956,   427,   428,   429,   430,
     431,   432,   433,   957,   434,   435,   436,   958,   437,   438,
     439,   959,   960,   440,   961,   962,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   873,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    92,    93,    94,    95,  1642,    97,    98,
      99,   874,   100,   101,   102,   875,   876,   877,   878,   879,
     880,   881,   103,   104,   882,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   883,   117,   118,
     119,   120,   121,   122,   884,   885,   123,   124,   125,   126,
     127,   886,   128,   129,   130,   131,   132,   887,   133,   888,
     889,   134,   135,   136,   137,   138,   139,   140,   141,   890,
     142,   143,   144,   145,   146,   147,   891,   148,   149,   150,
     151,   892,   893,   894,   152,   895,   896,   897,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   898,   163,
     899,   164,   165,   166,   167,   168,   169,   900,   170,   901,
     171,   172,   173,   174,   902,   903,   175,   176,   177,  1643,
     179,   904,   905,   180,   181,   182,   906,   183,   184,   185,
     907,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   908,   196,   909,   197,   198,   199,   200,   910,   201,
     911,   202,   203,   912,   204,   205,   206,   207,   208,   209,
     913,   210,   914,   915,   916,   211,   212,   917,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   918,
     224,   225,   226,   227,   228,   229,   919,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   920,   239,   921,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   922,
     923,   250,   251,   252,   253,   924,   254,   255,   256,   925,
     926,   257,   258,   259,   260,   261,   262,   927,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     928,   285,   929,   286,   287,   288,   289,   930,   290,   291,
     292,   293,   294,   295,   931,   296,   297,   932,   933,   298,
     299,   300,   934,   935,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     936,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     937,   326,   327,   328,   329,   330,   938,   939,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   940,   340,   341,
     342,   941,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   942,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     943,   370,   371,   372,   373,   374,   944,  1644,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   945,   946,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   947,   399,   400,   948,   401,   402,   403,
     404,   405,   406,   407,   949,   408,   409,   950,   951,   410,
     411,   412,   413,   414,   952,   415,   416,   417,   418,   419,
     420,   421,   953,   954,   422,   423,   424,   425,   426,   955,
     956,   427,   428,   429,   430,   431,   432,   433,   957,   434,
     435,   436,   958,   437,   438,   439,   959,   960,   440,   961,
     962,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,    91,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
     683,   123,   124,   125,   126,   127,     0,   128,   129,   130,
     131,   686,     0,   687,     0,     0,   134,   135,   136,   137,
     138,   139,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,   148,   149,   150,   151,   688,   689,   690,   691,
     692,   693,   694,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,     0,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,     0,   171,   172,   173,   174,     0,
       0,   175,   176,   177,   178,   179,     0,     0,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   700,     0,   196,     0,   197,
     198,   199,   200,     0,   201,     0,   202,   203,     0,   204,
     205,   206,   207,   208,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,   231,   232,   233,   234,   235,   236,   237,
     238,     0,   239,     0,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,     0,     0,   250,   251,   252,   253,
       0,   254,   255,   256,   706,   707,   257,   258,   259,   260,
     261,   262,     0,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,     0,   285,     0,   286,   287,
     288,   289,     0,   712,   291,   292,   293,   294,   295,     0,
     296,   297,     0,     0,   298,   299,   300,     0,     0,   301,
     302,   303,   304,   305,   715,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   716,   320,
     321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
     330,     0,     0,   331,   332,   333,   334,   335,   336,   337,
     338,   339,     0,   340,   341,   342,     0,   343,   344,   345,
     346,   347,   348,   349,   350,   351,     0,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,   719,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   721,     0,   399,
     400,     0,   401,   402,   403,   404,   405,   406,   407,     0,
     408,   409,     0,     0,   410,   411,   724,   413,   725,     0,
     415,   416,   417,   418,   419,   420,   421,     0,     0,   422,
     423,   424,   425,   426,   727,     0,   427,   428,   429,   430,
     431,   432,   433,     0,   434,   435,   436,     0,   437,   438,
     439,     0,     0,   440,     0,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   653,     0,   532,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    92,    93,    94,    95,    96,    97,    98,
      99,     0,   100,   101,   102,     0,     0,     0,     0,     0,
       0,     0,   103,   104,     0,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,     0,   117,   118,
     119,   120,   121,   122,     0,     0,   123,   124,   125,   126,
     127,     0,   128,   129,   130,   131,   132,     0,   133,     0,
       0,   134,   135,   136,   137,   138,   139,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,   148,   149,   150,
     151,     0,     0,     0,   152,     0,     0,     0,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,     0,
     171,   172,   173,   174,     0,     0,   175,   176,   177,   178,
     179,     0,     0,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,  1011,   196,     0,   197,   198,   199,   200,     0,   201,
       0,   202,   203,     0,   204,   205,   206,   207,   208,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,   231,   232,
     233,   234,   235,   236,   237,   238,     0,   239,     0,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,     0,
       0,   250,   251,   252,   253,     0,   254,   255,   256,     0,
       0,   257,   258,   259,   260,   261,   262,     0,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
       0,   285,     0,   286,   287,   288,   289,     0,   290,   291,
     292,   293,   294,   295,     0,   296,   297,  1012,     0,   298,
     299,   300,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
       0,   326,   327,   328,   329,   330,     0,     0,   331,   332,
     333,   334,   335,   336,   337,   338,   339,     0,   340,   341,
     342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,     0,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   401,   402,   403,
     404,   405,   406,   407,     0,   408,   409,     0,     0,   410,
     411,   412,   413,   414,  1013,   415,   416,   417,   418,   419,
     420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,     0,   434,
     435,   436,     0,   437,   438,   439,     0,     0,   440,     0,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   653,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       3,     4,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
       0,   123,   124,   125,   126,   127,     0,   128,   129,   130,
     131,   132,     0,   133,     0,     0,   134,   135,   136,   137,
     138,   139,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,   148,   149,   150,   151,     0,     0,     0,   152,
       0,     0,     0,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,     0,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,     0,   171,   172,   173,   174,     0,
       0,   175,   176,   177,   178,   179,     0,     0,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,     0,   196,     0,   197,
     198,   199,   200,     0,   201,     0,   202,   203,     0,   204,
     205,   206,   207,   208,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,   231,   232,   233,   234,   235,   236,   237,
     238,     0,   239,     0,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,     0,     0,   250,   251,   252,   253,
       0,   254,   255,   256,     0,     0,   257,   258,   259,   260,
     261,   262,     0,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,     0,   285,     0,   286,   287,
     288,   289,     0,   290,   291,   292,   293,   294,   295,     0,
     296,   297,     0,     0,   298,   299,   300,     0,     0,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
     321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
     330,     0,     0,   331,   332,   333,   334,   335,   336,   337,
     338,   339,     0,   340,   341,   342,     0,   343,   344,   345,
     346,   347,   348,   349,   350,   351,     0,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   401,   402,   403,   404,   405,   406,   407,     0,
     408,   409,     0,     0,   410,   411,   412,   413,   414,     0,
     415,   416,   417,   418,   419,   420,   421,     0,     0,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,     0,   434,   435,   436,     0,   437,   438,
     439,     0,     0,   440,     0,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,    91,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    92,    93,    94,    95,    96,    97,    98,
      99,     0,   100,   101,   102,     0,     0,     0,     0,     0,
       0,     0,   103,   104,     0,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,     0,   117,   118,
     119,   120,   121,   122,     0,     0,   123,   124,   125,   126,
     127,     0,   128,   129,   130,   131,   132,     0,   133,     0,
       0,   134,   135,   136,   137,   138,   139,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,   148,   149,   150,
     151,     0,     0,     0,   152,     0,     0,     0,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,     0,
     171,   172,   173,   174,     0,     0,   175,   176,   177,   178,
     179,     0,     0,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,     0,   201,
       0,   202,   203,     0,   204,   205,   206,   207,   208,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,   231,   232,
     233,   234,   235,   236,   237,   238,     0,   239,     0,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,     0,
       0,   250,   251,   252,   253,     0,   254,   255,   256,     0,
       0,   257,   258,   259,   260,   261,   262,     0,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
       0,   285,     0,   286,   287,   288,   289,     0,   290,   291,
     292,   293,   294,   295,     0,   296,   297,     0,     0,   298,
     299,   300,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
       0,   326,   327,   328,   329,   330,     0,     0,   331,   332,
     333,   334,   335,   336,   337,   338,   339,     0,   340,   341,
     342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,     0,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   401,   402,   403,
     404,   405,   406,   407,     0,   408,   409,     0,     0,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
     420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,     0,   434,
     435,   436,     0,   437,   438,   439,     0,     0,   440,     0,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   487,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,     0,   109,   110,   111,   112,   113,     0,
     115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
       0,   123,   124,   125,   126,   127,  1246,   128,   129,   130,
     131,   132,     0,     0,  1247,     0,   134,   135,   136,   137,
       0,   139,   140,   141,  1248,   142,   143,   144,   145,   146,
     147,     0,     0,   149,   150,   151,     0,     0,     0,     0,
       0,     0,     0,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,     0,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,     0,   171,   172,   173,   174,     0,
       0,   175,   176,   177,   178,   179,     0,     0,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,     0,   196,     0,   197,
     198,   199,   200,     0,   201,  1249,   202,     0,     0,     0,
     205,   206,   207,     0,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,   214,   215,   216,   217,  1250,     0,
     220,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,     0,   232,   233,   234,   235,   236,   237,
     238,     0,   239,     0,   240,     0,     0,   243,     0,   245,
     246,   247,   248,   249,     0,     0,   250,     0,   252,     0,
       0,   254,   255,   256,     0,     0,   257,   258,   259,   260,
     261,   262,     0,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   281,   282,   283,   284,     0,   285,     0,   286,   287,
       0,   289,     0,   290,   291,   292,   293,   294,   295,     0,
     296,   297,     0,     0,   298,   299,   300,     0,     0,   301,
     302,     0,   304,     0,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
     321,   322,   323,   324,   325,  1251,   326,   327,   328,   329,
     330,     0,     0,   331,   332,   333,   334,   335,   336,   337,
     338,   339,     0,   340,   341,   342,     0,   343,   344,   345,
     346,   347,   348,   349,   350,   351,     0,   352,   353,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,     0,   381,   382,
     383,   384,     0,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   401,     0,   403,   404,   405,   406,   407,     0,
     408,   409,     0,     0,   410,   411,   412,   413,   414,     0,
     415,   416,   417,   418,   419,   420,   421,     0,  1252,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,     0,   434,     0,   436,     0,   437,   438,
     439,     0,     0,   440,     0,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   487,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    92,    93,    94,    95,    96,    97,    98,
      99,     0,   100,   101,   102,     0,     0,     0,     0,     0,
       0,     0,   103,   104,     0,   105,   106,   107,     0,   109,
     110,   111,   112,   113,     0,   115,   116,     0,   117,   118,
     119,   120,   121,   122,     0,     0,   123,   124,   125,   126,
     127,  1246,   128,   129,   130,   131,   132,     0,     0,     0,
       0,   134,   135,   136,   137,     0,   139,   140,   141,  1248,
     142,   143,   144,   145,   146,   147,     0,     0,   149,   150,
     151,     0,     0,     0,     0,     0,     0,     0,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,     0,
     171,   172,   173,   174,     0,     0,   175,   176,   177,   178,
     179,     0,     0,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,     0,   201,
    1249,   202,     0,     0,     0,   205,   206,   207,     0,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,     0,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,     0,   232,
     233,   234,   235,   236,   237,   238,     0,   239,     0,   240,
       0,     0,   243,     0,   245,   246,   247,   248,   249,     0,
       0,   250,     0,   252,  1708,     0,   254,   255,   256,     0,
       0,   257,   258,   259,   260,   261,   262,     0,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   281,   282,   283,   284,
       0,   285,     0,   286,   287,     0,   289,     0,   290,   291,
     292,   293,   294,   295,     0,   296,   297,     0,     0,   298,
     299,   300,     0,     0,   301,   302,     0,   304,     0,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
    1251,   326,   327,   328,   329,   330,     0,     0,   331,   332,
     333,   334,   335,   336,   337,   338,   339,     0,   340,   341,
     342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
     351,     0,   352,   353,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,     0,   381,   382,   383,   384,     0,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   401,     0,   403,
     404,   405,   406,   407,     0,   408,   409,     0,     0,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
     420,   421,     0,  1252,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,     0,   434,
       0,   436,     0,   437,   438,   439,     0,     0,   440,     0,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   487,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       3,     4,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,     0,   109,   110,   111,   112,   113,     0,
     115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
       0,   123,   124,   125,   126,   127,     0,   128,   129,   130,
     131,   132,     0,     0,     0,     0,   134,   135,   136,   137,
       0,   139,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,     0,   149,   150,   151,     0,     0,     0,     0,
       0,     0,     0,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,     0,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,     0,   171,   172,   173,   174,     0,
       0,   175,   176,   177,   178,   179,     0,     0,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,     0,   196,     0,   197,
     198,   199,   200,     0,   201,     0,   202,     0,     0,     0,
     205,   206,   207,     0,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,   214,   215,   216,   217,   218,     0,
     220,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,     0,   232,   233,   234,   235,   236,   237,
     238,     0,   239,     0,   240,     0,     0,   243,     0,   245,
     246,   247,   248,   249,     0,     0,   250,     0,   252,     0,
       0,   254,   255,   256,     0,     0,   257,   258,   259,   260,
     261,   262,     0,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   281,   282,   283,   284,     0,   285,     0,   286,   287,
       0,   289,     0,   290,   291,   292,   293,   294,   295,     0,
     296,   297,     0,     0,   298,   299,   300,     0,     0,   301,
     302,     0,   304,     0,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
     321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
     330,     0,     0,   331,   332,   333,   334,   335,   336,   337,
     338,   339,     0,   340,   341,   342,     0,   343,   344,   345,
     346,   347,   348,   349,   350,   351,     0,   352,   353,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,     0,   381,   382,
     383,   384,     0,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   401,     0,   403,   404,   405,   406,   407,     0,
     408,   409,     0,     0,   410,   411,   412,   413,   414,     0,
     415,   416,   417,   418,   419,   420,   421,     0,     0,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,     0,   434,     0,   436,     0,   437,   438,
     439,     0,     0,   440,     0,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   487,  2475,     0,
       0,     0,     0,  2476,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    92,    93,    94,    95,    96,    97,    98,
      99,     0,   100,   101,   102,     0,     0,     0,     0,     0,
       0,     0,   103,   104,     0,   105,   106,   107,     0,   109,
     110,   111,   112,   113,     0,   115,   116,     0,   117,   118,
     119,   120,   121,   122,     0,     0,   123,   124,   125,   126,
     127,     0,   128,   129,   130,   131,   132,     0,     0,     0,
       0,   134,   135,   136,   137,     0,   139,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,     0,   149,   150,
     151,     0,     0,     0,     0,     0,     0,     0,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,     0,
     171,   172,   173,   174,     0,     0,   175,   176,   177,   178,
     179,     0,     0,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,     0,   201,
       0,   202,     0,     0,     0,   205,   206,   207,     0,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,     0,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,     0,   232,
     233,   234,   235,   236,   237,   238,     0,   239,     0,   240,
       0,     0,   243,     0,   245,   246,   247,   248,   249,     0,
       0,   250,     0,   252,     0,     0,   254,   255,   256,     0,
       0,   257,   258,   259,   260,   261,   262,     0,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   281,   282,   283,   284,
       0,   285,     0,   286,   287,     0,   289,     0,   290,   291,
     292,   293,   294,   295,     0,   296,   297,     0,     0,   298,
     299,   300,     0,     0,   301,   302,     0,   304,     0,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
       0,   326,   327,   328,   329,   330,     0,     0,   331,   332,
     333,   334,   335,   336,   337,   338,   339,     0,   340,   341,
     342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
     351,     0,   352,   353,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,     0,   381,   382,   383,   384,     0,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   401,     0,   403,
     404,   405,   406,   407,     0,   408,   409,     0,     0,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
     420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,     0,   434,
       0,   436,     0,   437,   438,   439,     0,     0,   440,     0,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   487,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,   488,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,     0,   109,   110,   111,   112,   113,     0,
     115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
       0,   123,   124,   125,   126,   127,     0,   128,   129,   130,
     131,   132,     0,     0,     0,     0,   134,   135,   136,   137,
       0,   139,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,     0,   149,   150,   151,     0,     0,     0,     0,
       0,     0,     0,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,     0,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,     0,   171,   172,   173,   174,     0,
       0,   175,   176,   177,   178,   179,     0,     0,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,     0,   196,     0,   197,
     198,   199,   200,     0,   201,     0,   202,     0,     0,     0,
     205,   206,   207,     0,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,   214,   215,   216,   217,   218,     0,
     220,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,     0,   232,   233,   234,   235,   236,   237,
     238,     0,   239,     0,   240,     0,     0,   243,     0,   245,
     246,   247,   248,   249,     0,     0,   250,     0,   252,     0,
       0,   254,   255,   256,     0,     0,   257,   258,   259,   260,
     261,   262,     0,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   281,   282,   283,   284,     0,   285,     0,   286,   287,
       0,   289,     0,   290,   291,   292,   293,   294,   295,     0,
     296,   297,     0,     0,   298,   299,   300,     0,     0,   301,
     302,     0,   304,     0,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
     321,   322,   489,   324,   325,     0,   326,   327,   328,   329,
     330,     0,     0,   331,   332,   333,   334,   335,   336,   337,
     338,   339,     0,   340,   341,   342,     0,   343,   344,   345,
     346,   347,   348,   349,   350,   351,     0,   352,   353,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,     0,   381,   382,
     383,   384,     0,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   401,     0,   403,   404,   405,   406,   407,     0,
     408,   409,     0,     0,   410,   411,   412,   413,   414,     0,
     415,   416,   417,   418,   419,   420,   421,     0,     0,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,     0,   434,     0,   436,     0,   437,   438,
     439,     0,     0,   440,     0,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   487,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    92,    93,    94,    95,    96,    97,    98,
      99,   537,   100,   101,   102,     0,     0,     0,     0,     0,
       0,     0,   103,   104,     0,   105,   106,   107,     0,   109,
     110,   111,   112,   113,     0,   115,   116,     0,   117,   118,
     119,   120,   121,   122,     0,     0,   123,   124,   125,   126,
     127,     0,   128,   129,   130,   131,   132,     0,     0,     0,
       0,   134,   135,   136,   137,     0,   139,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,     0,   149,   150,
     151,     0,     0,     0,     0,     0,     0,     0,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,     0,
     171,   172,   173,   174,     0,     0,   175,   176,   177,   178,
     179,     0,     0,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,     0,   201,
       0,   202,     0,     0,     0,   205,   206,   207,     0,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,     0,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,     0,   232,
     233,   234,   235,   236,   237,   238,     0,   239,     0,   240,
       0,     0,   243,     0,   245,   246,   247,   248,   249,     0,
       0,   250,     0,   252,     0,     0,   254,   255,   256,     0,
       0,   257,   258,   259,   260,   261,   262,     0,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   281,   282,   283,   284,
       0,   285,     0,   286,   287,     0,   289,     0,   290,   291,
     292,   293,   294,   295,     0,   296,   297,     0,     0,   298,
     299,   300,     0,     0,   301,   302,     0,   304,     0,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
       0,   326,   327,   328,   329,   330,     0,     0,   331,   332,
     333,   334,   335,   336,   337,   338,   339,     0,   340,   341,
     342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
     351,     0,   352,   353,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,     0,   381,   382,   383,   384,     0,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   401,     0,   403,
     404,   405,   406,   407,     0,   538,   409,     0,     0,   539,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
     420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,     0,   434,
       0,   436,     0,   437,   438,   439,     0,     0,   440,     0,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   487,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,     0,   109,   110,   111,   112,   113,     0,
     115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
       0,   123,   124,   125,   126,   127,     0,   128,   129,   130,
     131,   132,     0,     0,     0,     0,   134,   135,   136,   137,
       0,   139,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,     0,   149,   150,   151,     0,     0,     0,     0,
       0,     0,     0,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,     0,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,     0,   171,   172,   173,   174,     0,
       0,   175,   176,   177,   178,   179,     0,     0,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,     0,   196,     0,   197,
     198,   199,   200,     0,   201,     0,   202,     0,     0,     0,
     205,   206,   207,     0,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,   214,   215,   216,   217,   218,     0,
     220,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,     0,   232,   233,   234,   235,   236,   237,
     238,     0,   239,     0,   240,     0,     0,   243,     0,   245,
     246,   247,   248,   249,     0,     0,   250,     0,   252,     0,
       0,   254,   255,   256,     0,     0,   257,   258,   259,   260,
     261,   262,     0,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   281,   282,   283,   284,     0,   285,     0,   286,   287,
       0,   289,     0,   290,   291,   292,   293,   294,   295,     0,
     296,   297,     0,   557,   298,   299,   300,     0,     0,   301,
     302,     0,   304,     0,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
     321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
     330,     0,     0,   331,   332,   333,   334,   335,   336,   337,
     338,   339,     0,   340,   341,   342,     0,   343,   344,   345,
     346,   347,   348,   349,   350,   351,     0,   352,   353,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,     0,   381,   382,
     383,   384,     0,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   401,     0,   403,   404,   405,   406,   407,     0,
     408,   409,     0,     0,   410,   411,   412,   413,   414,     0,
     415,   416,   417,   418,   419,   420,   421,     0,     0,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,     0,   434,     0,   436,     0,   437,   438,
     439,     0,     0,   440,     0,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   487,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    92,    93,    94,    95,    96,    97,    98,
      99,     0,   100,   101,   102,     0,     0,     0,     0,     0,
       0,     0,   103,   104,     0,   105,   106,   107,     0,   109,
     110,   111,   112,   113,     0,   115,   116,     0,   117,   118,
     119,   120,   121,   122,     0,     0,   123,   124,   125,   126,
     127,     0,   128,   129,   130,   131,   132,     0,     0,     0,
       0,   134,   135,   136,   137,     0,   139,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,     0,   149,   150,
     151,     0,     0,     0,     0,     0,     0,     0,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,     0,
     171,   172,   173,   174,     0,     0,   175,   176,   177,   178,
     179,     0,     0,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,     0,   201,
       0,   202,     0,     0,     0,   205,   206,   207,     0,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   603,     0,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,     0,   232,
     233,   234,   235,   236,   237,   238,     0,   239,     0,   240,
       0,     0,   243,     0,   245,   246,   247,   248,   249,     0,
       0,   250,     0,   252,     0,     0,   254,   255,   256,     0,
       0,   257,   258,   259,   260,   261,   262,     0,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   281,   282,   283,   284,
       0,   285,     0,   286,   287,     0,   289,     0,   290,   291,
     292,   293,   294,   295,     0,   296,   297,     0,   557,   298,
     299,   300,     0,     0,   301,   302,     0,   304,     0,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
       0,   326,   327,   328,   329,   330,     0,     0,   331,   332,
     333,   334,   335,   336,   337,   338,   339,     0,   340,   341,
     342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
     351,     0,   352,   353,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,     0,   381,   382,   383,   384,     0,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   401,     0,   403,
     404,   405,   406,   407,     0,   408,   409,     0,     0,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
     420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,     0,   434,
       0,   436,     0,   437,   438,   439,     0,     0,   440,     0,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   487,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,   632,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,     0,   109,   110,   111,   112,   113,     0,
     115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
       0,   123,   124,   125,   126,   127,     0,   128,   129,   130,
     131,   132,     0,     0,     0,     0,   134,   135,   136,   137,
       0,   139,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,     0,   149,   150,   151,     0,     0,     0,     0,
       0,     0,     0,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,     0,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,     0,   171,   172,   173,   174,     0,
       0,   175,   176,   177,   178,   179,     0,     0,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,     0,   196,     0,   197,
     198,   199,   200,     0,   201,     0,   202,     0,     0,     0,
     205,   206,   207,     0,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,   214,   215,   216,   217,   218,     0,
     220,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,     0,   232,   233,   234,   235,   236,   237,
     238,     0,   239,     0,   240,     0,     0,   243,     0,   245,
     246,   247,   248,   249,     0,     0,   250,     0,   252,     0,
       0,   254,   255,   256,     0,     0,   257,   258,   259,   260,
     261,   262,     0,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   281,   282,   283,   284,     0,   285,     0,   286,   287,
       0,   289,     0,   290,   291,   292,   293,   294,   295,     0,
     296,   297,     0,     0,   298,   299,   300,     0,     0,   301,
     302,     0,   304,     0,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
     321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
     330,     0,     0,   331,   332,   333,   334,   335,   336,   337,
     338,   339,     0,   340,   341,   342,     0,   343,   344,   345,
     346,   347,   348,   349,   350,   351,     0,   352,   353,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,     0,   381,   382,
     383,   384,     0,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   401,     0,   403,   404,   405,   406,   407,     0,
     408,   409,     0,     0,   410,   411,   412,   413,   414,     0,
     415,   416,   417,   418,   419,   420,   421,     0,     0,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,     0,   434,     0,   436,     0,   437,   438,
     439,     0,     0,   440,     0,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   487,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    92,    93,    94,    95,    96,    97,    98,
      99,     0,   100,   101,   102,     0,     0,     0,     0,     0,
       0,     0,   103,   104,     0,   105,   106,   107,     0,   109,
     110,   111,   112,   113,     0,   115,   116,     0,   117,   118,
     119,   120,   121,   122,     0,     0,   123,   124,   125,   126,
     127,     0,   128,   129,   130,   131,   132,     0,     0,     0,
       0,   134,   135,   136,   137,     0,   139,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,     0,   149,   150,
     151,     0,     0,     0,     0,     0,     0,     0,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,     0,
     171,   172,   173,   174,     0,     0,   175,   176,   177,   178,
     179,     0,     0,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,     0,   201,
       0,   202,     0,     0,     0,   205,   206,   207,     0,  1552,
       0,   210,     0,     0,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,     0,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,     0,   232,
     233,   234,   235,   236,   237,   238,     0,   239,     0,   240,
       0,     0,   243,     0,   245,   246,   247,   248,   249,     0,
       0,   250,     0,   252,     0,     0,   254,   255,  1553,     0,
       0,   257,   258,   259,   260,   261,   262,     0,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   281,   282,   283,   284,
       0,   285,     0,   286,   287,     0,   289,     0,   290,   291,
     292,   293,   294,   295,     0,   296,   297,     0,     0,   298,
     299,   300,     0,     0,   301,   302,     0,   304,     0,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
       0,   326,   327,   328,   329,   330,     0,     0,   331,   332,
     333,   334,   335,   336,   337,   338,   339,     0,   340,   341,
     342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
     351,     0,   352,   353,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,     0,   381,   382,   383,   384,     0,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,  1554,   401,     0,   403,
    1555,   405,  1556,   407,     0,   408,   409,     0,     0,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
     420,   421,     0,     0,   422,   423,  1557,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,     0,   434,
       0,   436,     0,   437,   438,   439,     0,     0,   440,     0,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   487,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,     0,  2129,     0,   103,   104,     0,
     105,   106,   107,     0,   109,   110,   111,   112,   113,     0,
     115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
       0,   123,   124,   125,   126,   127,     0,   128,   129,   130,
     131,   132,     0,     0,     0,     0,   134,   135,   136,   137,
       0,   139,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,     0,   149,   150,   151,     0,     0,     0,     0,
       0,     0,     0,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,     0,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,     0,   171,   172,   173,   174,     0,
       0,   175,   176,   177,   178,   179,     0,     0,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,     0,   196,     0,   197,
     198,   199,   200,     0,   201,     0,   202,     0,     0,     0,
     205,   206,   207,     0,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,   214,   215,   216,   217,   218,     0,
     220,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,     0,   232,   233,   234,   235,   236,   237,
     238,     0,   239,     0,   240,     0,     0,   243,     0,   245,
     246,   247,   248,   249,     0,     0,   250,     0,   252,     0,
       0,   254,   255,   256,     0,     0,   257,   258,   259,   260,
     261,   262,     0,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   281,   282,   283,   284,     0,   285,     0,   286,   287,
       0,   289,     0,   290,   291,   292,   293,   294,   295,     0,
     296,   297,     0,     0,   298,   299,   300,     0,     0,   301,
     302,     0,   304,     0,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
     321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
     330,     0,     0,   331,   332,   333,   334,   335,   336,   337,
     338,   339,     0,   340,   341,   342,     0,   343,   344,   345,
     346,   347,   348,   349,   350,   351,     0,   352,   353,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,     0,   381,   382,
     383,   384,     0,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   401,     0,   403,   404,   405,   406,   407,     0,
     408,   409,     0,     0,   410,   411,   412,   413,   414,     0,
     415,   416,   417,   418,   419,   420,   421,     0,     0,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,     0,   434,     0,   436,     0,   437,   438,
     439,     0,     0,   440,     0,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   487,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    92,    93,    94,    95,    96,    97,    98,
      99,     0,   100,   101,   102,     0,     0,     0,     0,     0,
    2143,     0,   103,   104,     0,   105,   106,   107,     0,   109,
     110,   111,   112,   113,     0,   115,   116,     0,   117,   118,
     119,   120,   121,   122,     0,     0,   123,   124,   125,   126,
     127,     0,   128,   129,   130,   131,   132,     0,     0,     0,
       0,   134,   135,   136,   137,     0,   139,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,     0,   149,   150,
     151,     0,     0,     0,     0,     0,     0,     0,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,     0,
     171,   172,   173,   174,     0,     0,   175,   176,   177,   178,
     179,     0,     0,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,     0,   201,
       0,   202,     0,     0,     0,   205,   206,   207,     0,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,     0,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,     0,   232,
     233,   234,   235,   236,   237,   238,     0,   239,     0,   240,
       0,     0,   243,     0,   245,   246,   247,   248,   249,     0,
       0,   250,     0,   252,     0,     0,   254,   255,   256,     0,
       0,   257,   258,   259,   260,   261,   262,     0,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   281,   282,   283,   284,
       0,   285,     0,   286,   287,     0,   289,     0,   290,   291,
     292,   293,   294,   295,     0,   296,   297,     0,     0,   298,
     299,   300,     0,     0,   301,   302,     0,   304,     0,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
       0,   326,   327,   328,   329,   330,     0,     0,   331,   332,
     333,   334,   335,   336,   337,   338,   339,     0,   340,   341,
     342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
     351,     0,   352,   353,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,     0,   381,   382,   383,   384,     0,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   401,     0,   403,
     404,   405,   406,   407,     0,   408,   409,     0,     0,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
     420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,     0,   434,
       0,   436,     0,   437,   438,   439,     0,     0,   440,     0,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   487,     0,  2319,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,     0,   109,   110,   111,   112,   113,     0,
     115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
       0,   123,   124,   125,   126,   127,     0,   128,   129,   130,
     131,   132,     0,     0,     0,     0,   134,   135,   136,   137,
       0,   139,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,     0,   149,   150,   151,     0,     0,     0,     0,
       0,     0,     0,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,     0,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,     0,   171,   172,   173,   174,     0,
       0,   175,   176,   177,   178,   179,     0,     0,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,     0,   196,     0,   197,
     198,   199,   200,     0,   201,     0,   202,     0,     0,     0,
     205,   206,   207,     0,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,   214,   215,   216,   217,   218,     0,
     220,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,     0,   232,   233,   234,   235,   236,   237,
     238,     0,   239,     0,   240,     0,     0,   243,     0,   245,
     246,   247,   248,   249,     0,     0,   250,     0,   252,     0,
       0,   254,   255,   256,     0,     0,   257,   258,   259,   260,
     261,   262,     0,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   281,   282,   283,   284,     0,   285,     0,   286,   287,
       0,   289,     0,   290,   291,   292,   293,   294,   295,     0,
     296,   297,     0,     0,   298,   299,   300,     0,     0,   301,
     302,     0,   304,     0,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
     321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
     330,     0,     0,   331,   332,   333,   334,   335,   336,   337,
     338,   339,     0,   340,   341,   342,     0,   343,   344,   345,
     346,   347,   348,   349,   350,   351,     0,   352,   353,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,     0,   381,   382,
     383,   384,     0,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   401,     0,   403,   404,   405,   406,   407,     0,
     408,   409,     0,     0,   410,   411,   412,   413,   414,     0,
     415,   416,   417,   418,   419,   420,   421,     0,     0,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,     0,   434,     0,   436,     0,   437,   438,
     439,     0,     0,   440,     0,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   487,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    92,    93,    94,    95,    96,    97,    98,
      99,     0,   100,   101,   102,     0,     0,     0,     0,     0,
       0,     0,   103,   104,     0,   105,   106,   107,     0,   109,
     110,   111,   112,   113,     0,   115,   116,     0,   117,   118,
     119,   120,   121,   122,     0,     0,   123,   124,   125,   126,
     127,     0,   128,   129,   130,   131,   132,     0,     0,     0,
       0,   134,   135,   136,   137,     0,   139,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,     0,   149,   150,
     151,     0,     0,     0,     0,     0,     0,     0,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,     0,
     171,   172,   173,   174,     0,     0,   175,   176,   177,   178,
     179,     0,     0,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,     0,   201,
       0,   202,     0,     0,     0,   205,   206,   207,     0,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,     0,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,     0,   232,
     233,   234,   235,   236,   237,   238,     0,   239,     0,   240,
       0,     0,   243,     0,   245,   246,   247,   248,   249,     0,
       0,   250,     0,   252,     0,     0,   254,   255,   256,     0,
       0,   257,   258,   259,   260,   261,   262,     0,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   281,   282,   283,   284,
       0,   285,     0,   286,   287,     0,   289,     0,   290,   291,
     292,   293,   294,   295,     0,   296,   297,     0,     0,   298,
     299,   300,     0,     0,   301,   302,     0,   304,     0,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
       0,   326,   327,   328,   329,   330,     0,     0,   331,   332,
     333,   334,   335,   336,   337,   338,   339,     0,   340,   341,
     342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
     351,     0,   352,   353,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,     0,   381,   382,   383,   384,     0,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   401,     0,   403,
     404,   405,   406,   407,     0,   408,   409,     0,     0,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
     420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,     0,   434,
       0,   436,     0,   437,   438,   439,     0,     0,   440,     0,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   487,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,     0,   109,   110,   111,   112,   113,     0,
     115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
       0,   123,   124,   125,   126,   127,     0,   128,   129,   130,
     131,   132,     0,     0,     0,     0,   134,   135,   136,   137,
       0,   139,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,     0,   149,   150,   151,     0,     0,     0,     0,
       0,     0,     0,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,     0,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,     0,   171,   172,   173,   174,     0,
       0,   175,   176,   177,   178,   179,     0,     0,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,     0,   196,     0,   197,
     198,   199,   200,     0,   201,     0,   202,     0,     0,     0,
     205,   206,   207,     0,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,   214,   215,   216,   217,   218,     0,
     220,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,     0,   232,   233,   234,   235,   236,   237,
     238,     0,   239,     0,   240,     0,     0,   243,     0,   245,
     246,   247,   248,   249,     0,     0,   250,     0,   252,     0,
       0,   254,   255,   549,     0,     0,   257,   258,   259,   260,
     261,   262,     0,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   281,   282,   283,   284,     0,   285,     0,   286,   287,
       0,   289,     0,   290,   291,   292,   293,   294,   295,     0,
     296,   297,     0,     0,   298,   299,   300,     0,     0,   301,
     302,     0,   304,     0,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
     321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
     330,     0,     0,   331,   332,   333,   334,   335,   336,   337,
     338,   339,     0,   340,   341,   342,     0,   343,   344,   345,
     346,   347,   348,   349,   350,   351,     0,   352,   353,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   550,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     551,     0,   375,   376,   377,   378,   379,     0,   381,   382,
     383,   384,     0,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   401,     0,   403,   404,   405,   406,   407,     0,
     552,   409,     0,     0,   410,   411,   412,   413,   414,     0,
     415,   416,   417,   418,   419,   420,   421,     0,     0,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,     0,   434,     0,   436,     0,   437,   438,
     439,     0,     0,   440,     0,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   487,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    92,    93,    94,    95,    96,    97,    98,
      99,     0,   100,   101,   102,     0,     0,     0,     0,     0,
       0,     0,   103,   104,     0,   105,   106,   107,     0,   109,
     110,   111,   112,   113,     0,   115,   116,     0,   117,   118,
     119,   120,   121,   122,     0,     0,   123,   124,   125,   126,
     127,     0,   128,   129,   130,   131,   132,     0,     0,     0,
       0,   134,   135,   136,   137,     0,   139,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,     0,   149,   150,
     151,     0,     0,     0,     0,     0,     0,     0,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,     0,
     171,   172,   173,   174,     0,     0,   175,   176,   177,   178,
     179,     0,     0,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,     0,   201,
       0,   202,     0,     0,     0,   205,   206,   207,     0,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,     0,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,     0,   232,
     233,   234,   235,   236,   237,   238,     0,   239,     0,   240,
       0,     0,   243,     0,   245,   246,   247,   248,   249,     0,
       0,   250,     0,   252,     0,     0,   254,   255,   256,     0,
       0,   257,   258,   259,   260,   261,   262,     0,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   281,   282,   283,   284,
       0,   285,     0,   286,   287,     0,   289,     0,   290,   291,
     292,   293,   294,   295,     0,   296,   297,     0,     0,   298,
     299,   300,     0,     0,   301,   302,     0,   304,     0,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
       0,   326,   327,   328,   329,   330,     0,     0,   331,   332,
     333,   334,   335,   336,   337,   565,   339,     0,   340,   341,
     342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
     351,     0,   352,   353,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,     0,   381,   382,   383,   384,     0,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   401,     0,   403,
     404,   405,   406,   407,     0,   408,   409,     0,     0,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
     420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,     0,   434,
       0,   436,     0,   437,   438,   439,     0,     0,   440,     0,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   487,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,     0,   109,   110,   111,   112,   113,     0,
     115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
       0,   123,   124,   125,   126,   127,     0,   128,   129,   130,
     131,   132,     0,     0,     0,     0,   134,   135,   136,   137,
       0,   139,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,     0,   149,   150,   151,     0,     0,     0,     0,
       0,     0,     0,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,     0,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,     0,   171,   172,   173,   174,     0,
       0,   175,   176,   177,   178,   179,     0,     0,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,     0,   196,     0,   197,
     198,   199,   200,     0,   201,     0,   202,     0,     0,     0,
     205,   206,   207,     0,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,   214,   215,   216,   217,   598,     0,
     220,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,     0,   232,   233,   234,   235,   236,   237,
     238,     0,   239,     0,   240,     0,     0,   243,     0,   245,
     246,   247,   248,   249,     0,     0,   250,     0,   252,     0,
       0,   254,   255,   256,     0,     0,   257,   258,   259,   260,
     261,   262,     0,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   281,   282,   283,   284,     0,   285,     0,   286,   287,
       0,   289,     0,   290,   291,   292,   293,   294,   295,     0,
     296,   297,     0,     0,   298,   299,   300,     0,     0,   301,
     302,     0,   304,     0,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
     321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
     330,     0,     0,   331,   332,   333,   334,   335,   336,   337,
     338,   339,     0,   340,   341,   342,     0,   343,   344,   345,
     346,   347,   348,   349,   350,   351,     0,   352,   353,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,     0,   381,   382,
     383,   384,     0,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   401,     0,   403,   404,   405,   406,   407,     0,
     408,   409,     0,     0,   410,   411,   412,   413,   414,     0,
     415,   416,   417,   418,   419,   420,   421,     0,     0,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,     0,   434,     0,   436,     0,   437,   438,
     439,     0,     0,   440,     0,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   487,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    92,    93,    94,    95,    96,    97,    98,
      99,     0,   100,   101,   102,     0,     0,     0,     0,     0,
       0,     0,   103,   104,     0,   105,   106,   107,     0,   109,
     110,   111,   112,   113,     0,   115,   116,     0,   117,   118,
     119,   120,   121,   122,     0,     0,   123,   124,   125,   126,
     127,     0,   128,   129,   130,   131,   132,     0,     0,     0,
       0,   134,   135,   136,   137,     0,   139,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,     0,   149,   150,
     151,     0,     0,     0,     0,     0,     0,     0,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,     0,
     171,   172,   173,   174,     0,     0,   175,   176,   177,   178,
     179,     0,     0,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,     0,   201,
       0,   202,     0,     0,     0,   205,   206,   207,     0,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   601,     0,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,     0,   232,
     233,   234,   235,   236,   237,   238,     0,   239,     0,   240,
       0,     0,   243,     0,   245,   246,   247,   248,   249,     0,
       0,   250,     0,   252,     0,     0,   254,   255,   256,     0,
       0,   257,   258,   259,   260,   261,   262,     0,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   281,   282,   283,   284,
       0,   285,     0,   286,   287,     0,   289,     0,   290,   291,
     292,   293,   294,   295,     0,   296,   297,     0,     0,   298,
     299,   300,     0,     0,   301,   302,     0,   304,     0,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
       0,   326,   327,   328,   329,   330,     0,     0,   331,   332,
     333,   334,   335,   336,   337,   338,   339,     0,   340,   341,
     342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
     351,     0,   352,   353,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,     0,   381,   382,   383,   384,     0,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   401,     0,   403,
     404,   405,   406,   407,     0,   408,   409,     0,     0,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
     420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,     0,   434,
       0,   436,     0,   437,   438,   439,     0,     0,   440,     0,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   487,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,     0,   109,   110,   111,   112,   113,     0,
     115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
       0,   123,   124,   125,   126,   127,     0,   128,   129,   130,
     131,   132,     0,     0,     0,     0,   134,   135,   136,   137,
       0,   139,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,     0,   149,   150,   151,     0,     0,     0,     0,
       0,     0,     0,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,     0,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,     0,   171,   172,   173,   174,     0,
       0,   175,   176,   177,   178,   179,     0,     0,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,     0,   196,     0,   197,
     198,   199,   200,     0,   201,     0,   202,     0,     0,     0,
     205,   206,   207,     0,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,   214,   215,   216,   217,   605,     0,
     220,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,     0,   232,   233,   234,   235,   236,   237,
     238,     0,   239,     0,   240,     0,     0,   243,     0,   245,
     246,   247,   248,   249,     0,     0,   250,     0,   252,     0,
       0,   254,   255,   256,     0,     0,   257,   258,   259,   260,
     261,   262,     0,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   281,   282,   283,   284,     0,   285,     0,   286,   287,
       0,   289,     0,   290,   291,   292,   293,   294,   295,     0,
     296,   297,     0,     0,   298,   299,   300,     0,     0,   301,
     302,     0,   304,     0,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
     321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
     330,     0,     0,   331,   332,   333,   334,   335,   336,   337,
     338,   339,     0,   340,   341,   342,     0,   343,   344,   345,
     346,   347,   348,   349,   350,   351,     0,   352,   353,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,     0,   381,   382,
     383,   384,     0,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   401,     0,   403,   404,   405,   406,   407,     0,
     408,   409,     0,     0,   410,   411,   412,   413,   414,     0,
     415,   416,   417,   418,   419,   420,   421,     0,     0,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,     0,   434,     0,   436,     0,   437,   438,
     439,     0,     0,   440,     0,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   487,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    92,    93,    94,    95,    96,    97,    98,
      99,     0,   100,   101,   102,     0,     0,     0,     0,     0,
       0,     0,   103,   104,     0,   105,   106,   107,     0,   109,
     110,   111,   112,   113,     0,   115,   116,     0,   117,   118,
     119,   120,   121,   122,     0,     0,   123,   124,   125,   126,
     127,     0,   128,   129,   130,   131,   132,     0,     0,     0,
       0,   134,   135,   136,   137,     0,   139,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,     0,   149,   150,
     151,     0,     0,     0,     0,     0,     0,     0,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,     0,
     171,   172,   173,   174,     0,     0,   175,   176,   177,   178,
     179,     0,     0,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,     0,   201,
       0,   202,     0,     0,     0,   205,   206,   207,     0,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   624,     0,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,     0,   232,
     233,   234,   235,   236,   237,   238,     0,   239,     0,   240,
       0,     0,   243,     0,   245,   246,   247,   248,   249,     0,
       0,   250,     0,   252,     0,     0,   254,   255,   256,     0,
       0,   257,   258,   259,   260,   261,   262,     0,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   281,   282,   283,   284,
       0,   285,     0,   286,   287,     0,   289,     0,   290,   291,
     292,   293,   294,   295,     0,   296,   297,     0,     0,   298,
     299,   300,     0,     0,   301,   302,     0,   304,     0,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
       0,   326,   327,   328,   329,   330,     0,     0,   331,   332,
     333,   334,   335,   336,   337,   338,   339,     0,   340,   341,
     342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
     351,     0,   352,   353,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,     0,   381,   382,   383,   384,     0,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   401,     0,   403,
     404,   405,   406,   407,     0,   408,   409,     0,     0,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
     420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,     0,   434,
       0,   436,     0,   437,   438,   439,     0,     0,   440,     0,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   487,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,     0,   109,   110,   111,   112,   113,     0,
     115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
       0,   123,   124,   125,   126,   127,     0,   128,   129,   130,
     131,   132,     0,     0,     0,     0,   134,   135,   136,   137,
       0,   139,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,     0,   149,   150,   151,     0,     0,     0,     0,
       0,     0,     0,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,     0,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,     0,   171,   172,   173,   174,     0,
       0,   175,   176,   177,   178,   179,     0,     0,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,     0,   196,     0,   197,
     198,   199,   200,     0,   201,     0,   202,     0,     0,     0,
     205,   206,   207,     0,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,   214,   215,   216,   217,   640,     0,
     220,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,     0,   232,   233,   234,   235,   236,   237,
     238,     0,   239,     0,   240,     0,     0,   243,     0,   245,
     246,   247,   248,   249,     0,     0,   250,     0,   252,     0,
       0,   254,   255,   256,     0,     0,   257,   258,   259,   260,
     261,   262,     0,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   281,   282,   283,   284,     0,   285,     0,   286,   287,
       0,   289,     0,   290,   291,   292,   293,   294,   295,     0,
     296,   297,     0,     0,   298,   299,   300,     0,     0,   301,
     302,     0,   304,     0,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
     321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
     330,     0,     0,   331,   332,   333,   334,   335,   336,   337,
     338,   339,     0,   340,   341,   342,     0,   343,   344,   345,
     346,   347,   348,   349,   350,   351,     0,   352,   353,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,     0,   381,   382,
     383,   384,     0,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   401,     0,   403,   404,   405,   406,   407,     0,
     408,   409,     0,     0,   410,   411,   412,   413,   414,     0,
     415,   416,   417,   418,   419,   420,   421,     0,     0,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,     0,   434,     0,   436,     0,   437,   438,
     439,     0,     0,   440,     0,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   487,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    92,    93,    94,    95,    96,    97,    98,
      99,     0,   100,   101,   102,     0,     0,     0,     0,     0,
       0,     0,   103,   104,     0,   105,   106,   107,     0,   109,
     110,   111,   112,   113,     0,   115,   116,     0,   117,   118,
     119,   120,   121,   122,     0,     0,   123,   124,   125,   126,
     127,     0,   128,   129,   130,   131,   132,     0,     0,     0,
       0,   134,   135,   136,   137,     0,   139,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,     0,   149,   150,
     151,     0,     0,     0,     0,     0,     0,     0,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,     0,
     171,   172,   173,   174,     0,     0,   175,   176,   177,   178,
     179,     0,     0,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,     0,   201,
       0,   202,     0,     0,     0,   205,   206,   207,     0,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   644,     0,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,     0,   232,
     233,   234,   235,   236,   237,   238,     0,   239,     0,   240,
       0,     0,   243,     0,   245,   246,   247,   248,   249,     0,
       0,   250,     0,   252,     0,     0,   254,   255,   256,     0,
       0,   257,   258,   259,   260,   261,   262,     0,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   281,   282,   283,   284,
       0,   285,     0,   286,   287,     0,   289,     0,   290,   291,
     292,   293,   294,   295,     0,   296,   297,     0,     0,   298,
     299,   300,     0,     0,   301,   302,     0,   304,     0,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
       0,   326,   327,   328,   329,   330,     0,     0,   331,   332,
     333,   334,   335,   336,   337,   338,   339,     0,   340,   341,
     342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
     351,     0,   352,   353,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,     0,   381,   382,   383,   384,     0,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   401,     0,   403,
     404,   405,   406,   407,     0,   408,   409,     0,     0,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
     420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,     0,   434,
       0,   436,     0,   437,   438,   439,     0,     0,   440,     0,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   487,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,     0,   109,   110,   111,   112,   113,     0,
     115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
       0,   123,   124,   125,   126,   127,     0,   128,   129,   130,
     131,   132,     0,     0,     0,     0,   134,   135,   136,   137,
       0,   139,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,     0,   149,   150,   151,     0,     0,     0,     0,
       0,     0,     0,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,     0,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,     0,   171,   172,   173,   174,     0,
       0,   175,   176,   177,   178,   179,     0,     0,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,     0,   196,     0,   197,
     198,   199,   200,     0,   201,     0,   202,     0,     0,     0,
     205,   206,   207,     0,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,   214,   215,   216,   217,   647,     0,
     220,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,     0,   232,   233,   234,   235,   236,   237,
     238,     0,   239,     0,   240,     0,     0,   243,     0,   245,
     246,   247,   248,   249,     0,     0,   250,     0,   252,     0,
       0,   254,   255,   256,     0,     0,   257,   258,   259,   260,
     261,   262,     0,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   281,   282,   283,   284,     0,   285,     0,   286,   287,
       0,   289,     0,   290,   291,   292,   293,   294,   295,     0,
     296,   297,     0,     0,   298,   299,   300,     0,     0,   301,
     302,     0,   304,     0,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
     321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
     330,     0,     0,   331,   332,   333,   334,   335,   336,   337,
     338,   339,     0,   340,   341,   342,     0,   343,   344,   345,
     346,   347,   348,   349,   350,   351,     0,   352,   353,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,     0,   381,   382,
     383,   384,     0,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   401,     0,   403,   404,   405,   406,   407,     0,
     408,   409,     0,     0,   410,   411,   412,   413,   414,     0,
     415,   416,   417,   418,   419,   420,   421,     0,     0,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,     0,   434,     0,   436,     0,   437,   438,
     439,     0,     0,   440,     0,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   487,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    92,    93,    94,    95,    96,    97,    98,
      99,     0,   100,   101,   102,     0,     0,     0,     0,     0,
       0,     0,   103,   104,     0,   105,   106,   107,     0,   109,
     110,   111,   112,   113,     0,   115,   116,     0,   117,   118,
     119,   120,   121,   122,     0,     0,   123,   124,   125,   126,
     127,     0,   128,   129,   130,   131,   132,     0,     0,     0,
       0,   134,   135,   136,   137,     0,   139,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,     0,   149,   150,
     151,     0,     0,     0,     0,     0,     0,     0,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,     0,
     171,   172,   173,   174,     0,     0,   175,   176,   177,   178,
     179,     0,     0,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,     0,   201,
       0,   202,     0,     0,     0,   205,   206,   207,     0,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,     0,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,     0,   232,
     233,   234,   235,   236,   237,   238,     0,   239,     0,   240,
       0,     0,   243,     0,   245,   246,   247,   248,   249,     0,
       0,   250,     0,   252,     0,     0,   254,   255,   256,     0,
       0,   257,   258,   259,   260,   261,   262,     0,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   281,   282,   283,   284,
       0,   285,     0,   286,   287,     0,   289,     0,   290,   291,
     292,   293,   294,   295,     0,   296,   297,     0,     0,   298,
     299,   300,     0,     0,   301,   302,     0,   304,     0,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
       0,   326,   327,   328,   329,   330,     0,     0,   331,   332,
     333,   334,   335,   336,   337,   338,   339,     0,   340,   341,
     342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
     351,     0,   352,   353,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   550,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,     0,   381,   382,   383,   384,     0,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   401,     0,   403,
     404,   405,   406,   407,     0,   552,   409,     0,     0,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
     420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,     0,   434,
       0,   436,     0,   437,   438,   439,     0,     0,   440,     0,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   487,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,     0,   109,   110,   111,   112,   113,     0,
     115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
       0,   123,   124,   125,   126,   127,     0,   128,   129,   130,
     131,   132,     0,     0,     0,     0,   134,   135,   136,   137,
       0,   139,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,     0,   149,   150,   151,     0,     0,     0,     0,
       0,     0,     0,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,     0,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,     0,   171,   172,   173,   174,     0,
       0,   175,   176,   177,   178,   179,     0,     0,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,     0,   196,     0,   197,
     198,   199,   200,     0,   201,     0,   202,     0,     0,     0,
     205,   206,   207,     0,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,   214,   215,   216,   217,   979,     0,
     220,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,     0,   232,   233,   234,   235,   236,   237,
     238,     0,   239,     0,   240,     0,     0,   243,     0,   245,
     246,   247,   248,   249,     0,     0,   250,     0,   252,     0,
       0,   254,   255,   256,     0,     0,   257,   258,   259,   260,
     261,   262,     0,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   281,   282,   283,   284,     0,   285,     0,   286,   287,
       0,   289,     0,   290,   291,   292,   293,   294,   295,     0,
     296,   297,     0,     0,   298,   299,   300,     0,     0,   301,
     302,     0,   304,     0,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
     321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
     330,     0,     0,   331,   332,   333,   334,   335,   336,   337,
     338,   339,     0,   340,   341,   342,     0,   343,   344,   345,
     346,   347,   348,   349,   350,   351,     0,   352,   353,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,     0,   381,   382,
     383,   384,     0,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   401,     0,   403,   404,   405,   406,   407,     0,
     408,   409,     0,     0,   410,   411,   412,   413,   414,     0,
     415,   416,   417,   418,   419,   420,   421,     0,     0,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,     0,   434,     0,   436,     0,   437,   438,
     439,     0,     0,   440,     0,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   487,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    92,    93,    94,    95,    96,    97,    98,
      99,     0,   100,   101,   102,     0,     0,     0,     0,     0,
       0,     0,   103,   104,     0,   105,   106,   107,     0,   109,
     110,   111,   112,   113,     0,   115,   116,     0,   117,   118,
     119,   120,   121,   122,     0,     0,   123,   124,   125,   126,
     127,     0,   128,   129,   130,   131,   132,     0,     0,     0,
       0,   134,   135,   136,   137,     0,   139,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,     0,   149,   150,
     151,     0,     0,     0,     0,     0,     0,     0,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,     0,
     171,   172,   173,   174,     0,     0,   175,   176,   177,   178,
     179,     0,     0,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,     0,   201,
       0,   202,     0,     0,     0,   205,   206,   207,     0,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   981,     0,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,     0,   232,
     233,   234,   235,   236,   237,   238,     0,   239,     0,   240,
       0,     0,   243,     0,   245,   246,   247,   248,   249,     0,
       0,   250,     0,   252,     0,     0,   254,   255,   256,     0,
       0,   257,   258,   259,   260,   261,   262,     0,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   281,   282,   283,   284,
       0,   285,     0,   286,   287,     0,   289,     0,   290,   291,
     292,   293,   294,   295,     0,   296,   297,     0,     0,   298,
     299,   300,     0,     0,   301,   302,     0,   304,     0,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
       0,   326,   327,   328,   329,   330,     0,     0,   331,   332,
     333,   334,   335,   336,   337,   338,   339,     0,   340,   341,
     342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
     351,     0,   352,   353,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,     0,   381,   382,   383,   384,     0,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   401,     0,   403,
     404,   405,   406,   407,     0,   408,   409,     0,     0,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
     420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,     0,   434,
       0,   436,     0,   437,   438,   439,     0,     0,   440,     0,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   487,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,     0,  1243,     0,   103,   104,     0,
     105,   106,   107,     0,   109,   110,   111,   112,   113,     0,
     115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
       0,   123,   124,   125,   126,   127,     0,   128,   129,   130,
     131,   132,     0,     0,     0,     0,   134,   135,   136,   137,
       0,   139,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,     0,   149,   150,   151,     0,     0,     0,     0,
       0,     0,     0,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,     0,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,     0,   171,   172,   173,   174,     0,
       0,   175,   176,   177,   178,   179,     0,     0,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,     0,   196,     0,   197,
     198,   199,   200,     0,   201,     0,   202,     0,     0,     0,
     205,   206,   207,     0,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,   214,   215,   216,   217,   218,     0,
     220,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,     0,   232,   233,   234,   235,   236,   237,
     238,     0,   239,     0,   240,     0,     0,   243,     0,   245,
     246,   247,   248,   249,     0,     0,   250,     0,   252,     0,
       0,   254,   255,   256,     0,     0,   257,   258,   259,   260,
     261,   262,     0,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   281,   282,   283,   284,     0,   285,     0,   286,   287,
       0,   289,     0,   290,   291,   292,   293,   294,   295,     0,
     296,   297,     0,     0,   298,   299,   300,     0,     0,   301,
     302,     0,   304,     0,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
     321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
     330,     0,     0,   331,   332,   333,   334,   335,   336,   337,
     338,   339,     0,   340,   341,   342,     0,   343,   344,   345,
     346,   347,   348,   349,   350,   351,     0,   352,   353,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,     0,     0,   376,   377,   378,   379,     0,   381,   382,
     383,   384,     0,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   401,     0,   403,   404,   405,   406,   407,     0,
     408,   409,     0,     0,   410,   411,   412,   413,   414,     0,
     415,   416,   417,   418,   419,   420,   421,     0,     0,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,     0,   434,     0,   436,     0,   437,   438,
     439,     0,     0,   440,     0,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   487,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    92,    93,    94,    95,    96,    97,    98,
      99,     0,   100,   101,   102,     0,     0,     0,     0,     0,
       0,     0,   103,   104,     0,   105,   106,   107,     0,   109,
     110,   111,   112,   113,     0,   115,   116,     0,   117,   118,
     119,   120,   121,   122,     0,     0,   123,   124,   125,   126,
     127,     0,   128,   129,   130,   131,   132,     0,     0,     0,
       0,   134,   135,   136,   137,     0,   139,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,     0,   149,   150,
     151,     0,     0,     0,     0,     0,     0,     0,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,     0,
     171,   172,   173,   174,     0,     0,   175,   176,   177,   178,
     179,     0,     0,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,     0,   201,
       0,   202,     0,     0,     0,   205,   206,   207,     0,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,   214,
     215,   216,   217,  1337,     0,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,     0,   232,
     233,   234,   235,   236,   237,   238,     0,   239,     0,   240,
       0,     0,   243,     0,   245,   246,   247,   248,   249,     0,
       0,   250,     0,   252,     0,     0,   254,   255,   256,     0,
       0,   257,   258,   259,   260,   261,   262,     0,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   281,   282,   283,   284,
       0,   285,     0,   286,   287,     0,   289,     0,   290,   291,
     292,   293,   294,   295,     0,   296,   297,     0,     0,   298,
     299,   300,     0,     0,   301,   302,     0,   304,     0,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
       0,   326,   327,   328,   329,   330,     0,     0,   331,   332,
     333,   334,   335,   336,   337,   338,   339,     0,   340,   341,
     342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
     351,     0,   352,   353,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,     0,   381,   382,   383,   384,     0,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   401,     0,   403,
     404,   405,   406,   407,     0,   408,   409,     0,     0,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
     420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,     0,   434,
       0,   436,     0,   437,   438,   439,     0,     0,   440,     0,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   487,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,     0,   109,   110,   111,   112,   113,     0,
     115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
       0,   123,   124,   125,   126,   127,     0,   128,   129,   130,
     131,   132,     0,     0,     0,     0,   134,   135,   136,   137,
       0,   139,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,     0,   149,   150,   151,     0,     0,     0,     0,
       0,     0,     0,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,     0,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,     0,   171,   172,   173,   174,     0,
       0,   175,   176,   177,   178,   179,     0,     0,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,     0,   196,     0,   197,
     198,   199,   200,     0,   201,     0,   202,     0,     0,     0,
     205,   206,   207,     0,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,   214,   215,   216,   217,  1353,     0,
     220,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,     0,   232,   233,   234,   235,   236,   237,
     238,     0,   239,     0,   240,     0,     0,   243,     0,   245,
     246,   247,   248,   249,     0,     0,   250,     0,   252,     0,
       0,   254,   255,   256,     0,     0,   257,   258,   259,   260,
     261,   262,     0,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   281,   282,   283,   284,     0,   285,     0,   286,   287,
       0,   289,     0,   290,   291,   292,   293,   294,   295,     0,
     296,   297,     0,     0,   298,   299,   300,     0,     0,   301,
     302,     0,   304,     0,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
     321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
     330,     0,     0,   331,   332,   333,   334,   335,   336,   337,
     338,   339,     0,   340,   341,   342,     0,   343,   344,   345,
     346,   347,   348,   349,   350,   351,     0,   352,   353,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,     0,   381,   382,
     383,   384,     0,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   401,     0,   403,   404,   405,   406,   407,     0,
     408,   409,     0,     0,   410,   411,   412,   413,   414,     0,
     415,   416,   417,   418,   419,   420,   421,     0,     0,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,     0,   434,     0,   436,     0,   437,   438,
     439,     0,     0,   440,     0,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   487,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    92,    93,    94,    95,    96,    97,    98,
      99,     0,   100,   101,   102,     0,     0,     0,     0,     0,
       0,     0,   103,   104,     0,   105,   106,   107,     0,   109,
     110,   111,   112,   113,     0,   115,   116,     0,   117,   118,
     119,   120,   121,   122,     0,     0,   123,   124,   125,   126,
     127,     0,   128,   129,   130,   131,   132,     0,     0,     0,
       0,   134,   135,   136,   137,     0,   139,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,     0,   149,   150,
     151,     0,     0,     0,     0,     0,     0,     0,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,     0,
     171,   172,   173,   174,     0,     0,   175,   176,   177,   178,
     179,     0,     0,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,     0,   201,
       0,   202,     0,     0,     0,   205,   206,   207,     0,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,   214,
     215,   216,   217,  1626,     0,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,     0,   232,
     233,   234,   235,   236,   237,   238,     0,   239,     0,   240,
       0,     0,   243,     0,   245,   246,   247,   248,   249,     0,
       0,   250,     0,   252,     0,     0,   254,   255,   256,     0,
       0,   257,   258,   259,   260,   261,   262,     0,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   281,   282,   283,   284,
       0,   285,     0,   286,   287,     0,   289,     0,   290,   291,
     292,   293,   294,   295,     0,   296,   297,     0,     0,   298,
     299,   300,     0,     0,   301,   302,     0,   304,     0,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
       0,   326,   327,   328,   329,   330,     0,     0,   331,   332,
     333,   334,   335,   336,   337,   338,   339,     0,   340,   341,
     342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
     351,     0,   352,   353,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,     0,   381,   382,   383,   384,     0,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   401,     0,   403,
     404,   405,   406,   407,     0,   408,   409,     0,     0,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
     420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,     0,   434,
       0,   436,     0,   437,   438,   439,     0,     0,   440,     0,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   487,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,     0,   109,   110,   111,   112,   113,     0,
     115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
       0,   123,   124,   125,   126,   127,     0,   128,   129,   130,
     131,   132,     0,     0,     0,     0,   134,   135,   136,   137,
       0,   139,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,     0,   149,   150,   151,     0,     0,     0,     0,
       0,     0,     0,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,     0,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,     0,   171,   172,   173,   174,     0,
       0,   175,   176,   177,   178,   179,     0,     0,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,     0,   196,     0,   197,
     198,   199,   200,     0,   201,     0,   202,     0,     0,     0,
     205,   206,   207,     0,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,   214,   215,   216,   217,  1638,     0,
     220,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,     0,   232,   233,   234,   235,   236,   237,
     238,     0,   239,     0,   240,     0,     0,   243,     0,   245,
     246,   247,   248,   249,     0,     0,   250,     0,   252,     0,
       0,   254,   255,   256,     0,     0,   257,   258,   259,   260,
     261,   262,     0,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   281,   282,   283,   284,     0,   285,     0,   286,   287,
       0,   289,     0,   290,   291,   292,   293,   294,   295,     0,
     296,   297,     0,     0,   298,   299,   300,     0,     0,   301,
     302,     0,   304,     0,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
     321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
     330,     0,     0,   331,   332,   333,   334,   335,   336,   337,
     338,   339,     0,   340,   341,   342,     0,   343,   344,   345,
     346,   347,   348,   349,   350,   351,     0,   352,   353,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,     0,   381,   382,
     383,   384,     0,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   401,     0,   403,   404,   405,   406,   407,     0,
     408,   409,     0,     0,   410,   411,   412,   413,   414,     0,
     415,   416,   417,   418,   419,   420,   421,     0,     0,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,     0,   434,     0,   436,     0,   437,   438,
     439,     0,     0,   440,     0,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   487,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    92,    93,    94,    95,    96,    97,    98,
      99,     0,   100,   101,   102,     0,     0,     0,     0,     0,
       0,     0,   103,   104,     0,   105,   106,   107,     0,   109,
     110,   111,   112,   113,     0,   115,   116,     0,   117,   118,
     119,   120,   121,   122,     0,     0,   123,   124,   125,   126,
     127,     0,   128,   129,   130,   131,   132,     0,     0,     0,
       0,   134,   135,   136,   137,     0,   139,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,     0,   149,   150,
     151,     0,     0,     0,     0,     0,     0,     0,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,     0,
     171,   172,   173,   174,     0,     0,   175,   176,   177,   178,
     179,     0,     0,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,     0,   201,
       0,   202,     0,     0,     0,   205,   206,   207,     0,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,   214,
     215,   216,   217,  1640,     0,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,     0,   232,
     233,   234,   235,   236,   237,   238,     0,   239,     0,   240,
       0,     0,   243,     0,   245,   246,   247,   248,   249,     0,
       0,   250,     0,   252,     0,     0,   254,   255,   256,     0,
       0,   257,   258,   259,   260,   261,   262,     0,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   281,   282,   283,   284,
       0,   285,     0,   286,   287,     0,   289,     0,   290,   291,
     292,   293,   294,   295,     0,   296,   297,     0,     0,   298,
     299,   300,     0,     0,   301,   302,     0,   304,     0,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
       0,   326,   327,   328,   329,   330,     0,     0,   331,   332,
     333,   334,   335,   336,   337,   338,   339,     0,   340,   341,
     342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
     351,     0,   352,   353,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,     0,   381,   382,   383,   384,     0,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   401,     0,   403,
     404,   405,   406,   407,     0,   408,   409,     0,     0,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
     420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,     0,   434,
       0,   436,     0,   437,   438,   439,     0,     0,   440,     0,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   487,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,     0,   109,   110,   111,   112,   113,     0,
     115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
       0,   123,   124,   125,   126,   127,     0,   128,   129,   130,
     131,   132,     0,     0,     0,     0,   134,   135,   136,   137,
       0,   139,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,     0,   149,   150,   151,     0,     0,     0,     0,
       0,     0,     0,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,     0,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,     0,   171,   172,   173,   174,     0,
       0,   175,   176,   177,   178,   179,     0,     0,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,     0,   196,     0,   197,
     198,   199,   200,     0,   201,     0,   202,     0,     0,     0,
     205,   206,   207,     0,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,   214,   215,   216,   217,  2260,     0,
     220,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,     0,   232,   233,   234,   235,   236,   237,
     238,     0,   239,     0,   240,     0,     0,   243,     0,   245,
     246,   247,   248,   249,     0,     0,   250,     0,   252,     0,
       0,   254,   255,   256,     0,     0,   257,   258,   259,   260,
     261,   262,     0,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   281,   282,   283,   284,     0,   285,     0,   286,   287,
       0,   289,     0,   290,   291,   292,   293,   294,   295,     0,
     296,   297,     0,     0,   298,   299,   300,     0,     0,   301,
     302,     0,   304,     0,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
     321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
     330,     0,     0,   331,   332,   333,   334,   335,   336,   337,
     338,   339,     0,   340,   341,   342,     0,   343,   344,   345,
     346,   347,   348,   349,   350,   351,     0,   352,   353,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,     0,   381,   382,
     383,   384,     0,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   401,     0,   403,   404,   405,   406,   407,     0,
     408,   409,     0,     0,   410,   411,   412,   413,   414,     0,
     415,   416,   417,   418,   419,   420,   421,     0,     0,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,     0,   434,     0,   436,     0,   437,   438,
     439,     0,     0,   440,     0,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,  1033,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    92,    93,    94,    95,    96,    97,    98,
      99,     0,   100,   101,   102,     0,     0,     0,     0,     0,
       0,     0,   103,   104,     0,   105,   106,   107,   108,   109,
     110,   111,     0,  1034,   114,  1035,  1036,     0,   117,   118,
     119,   120,   121,   122,     0,     0,   123,   124,  1037,  1038,
     127,     0,   128,   129,   130,   131,     0,     0,   133,     0,
       0,   134,   135,   136,   137,   138,   139,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,   148,   149,   150,
     151,     0,     0,     0,   152,     0,     0,     0,   153,   154,
     155,   156,   157,   158,   159,  1039,  1040,   162,     0,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,     0,
     171,   172,   173,   174,     0,     0,   175,   176,   698,   178,
     179,     0,     0,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,   189,     0,   191,   192,   193,   194,
       0,     0,   196,     0,   197,   198,  1041,   200,     0,   201,
       0,   202,   203,     0,   204,   205,   206,   207,   208,   209,
       0,   210,     0,     0,     0,     0,   212,     0,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,   231,     0,
     233,   234,   235,   236,  1042,  1043,     0,  1044,     0,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,     0,
       0,   250,   251,   252,   253,     0,   254,   255,   256,     0,
       0,   257,   258,   259,   260,   261,   262,     0,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,  1045,   280,  1046,   282,   283,   284,
       0,     0,     0,   286,   287,   288,   289,     0,     0,   291,
    1047,   293,   294,   295,     0,   296,   297,     0,     0,   298,
     299,   300,     0,     0,   301,     0,   303,   304,   305,     0,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,     0,   320,   321,     0,   323,   324,   325,
       0,   326,   327,   328,   329,   330,     0,     0,   331,   332,
     333,   334,  1048,   336,   337,   338,   339,     0,   340,   341,
     342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
     351,     0,   352,   353,   354,   355,   356,   357,  1049,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,     0,   375,  1050,   377,
     378,   379,   380,   381,   382,  1051,   384,     0,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
    1052,   397,     0,     0,   399,   400,     0,   401,   402,   403,
     404,   405,   406,   407,     0,  1053,  1054,     0,     0,   410,
     411,     0,   413,     0,     0,   415,   416,   417,   418,   419,
     420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,     0,  1055,     0,   434,
     435,   436,     0,   437,   438,   439,     0,     0,   440,     0,
       0,   441,   442,   443,   444,   445,   446,   487,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   458,   459,
     460,   461,     0,    92,    93,    94,    95,    96,    97,    98,
      99,     0,   100,   101,   102,     0,     0,     0,     0,     0,
       0,     0,   103,   104,     0,   105,   106,   107,     0,   109,
     110,   111,   112,   113,     0,   115,   116,     0,   117,   118,
     119,   120,   121,   122,     0,     0,   123,   124,   125,   126,
     127,     0,   128,   129,   130,   131,   132,     0,     0,     0,
       0,   134,   135,   136,   137,     0,   139,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,     0,   149,   150,
     151,     0,     0,     0,     0,     0,     0,     0,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,     0,
     171,   172,   173,   174,     0,     0,   175,   176,   177,   178,
     179,     0,     0,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,     0,   201,
       0,   202,     0,     0,     0,   205,   206,   207,     0,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,     0,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,     0,   232,
     233,   234,   235,   236,   237,   238,     0,   239,     0,   240,
       0,     0,   243,     0,   245,   246,   247,   248,   249,     0,
       0,   250,     0,   252,     0,     0,   254,   255,   256,     0,
       0,   257,   258,   259,   260,   261,   262,     0,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   281,   282,   283,   284,
       0,   285,     0,   286,   287,     0,   289,     0,   290,   291,
     292,   293,   294,   295,     0,   296,   297,     0,     0,   298,
     299,   300,     0,     0,   301,   302,     0,   304,     0,   306,
     307,   308,   309,   310,   311,   312,     0,   314,   315,   316,
       0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
       0,   326,   327,   328,   329,   330,     0,     0,   331,   332,
       0,   334,   335,   336,   337,   338,   339,     0,   340,   341,
     342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
     351,     0,   352,   353,     0,   355,   356,   357,   358,     0,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,     0,   381,   382,   383,   384,     0,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   401,     0,   403,
     404,   405,   406,   407,     0,   408,   409,     0,     0,   410,
     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,
     420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,     0,   434,
       0,   436,     0,   437,   438,   439,     0,     0,   440,     0,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,  1033,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,   108,   109,   110,   111,     0,  1034,   114,
    1035,  1036,     0,   117,   118,   119,   120,   121,   122,     0,
       0,   123,   124,  1037,  1038,   127,     0,   128,   129,   130,
     131,     0,     0,   133,     0,     0,   134,   135,   136,   137,
     138,   139,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,   148,   149,   150,   151,     0,     0,     0,   152,
       0,     0,     0,   153,   154,   155,   156,   157,   158,   159,
    1039,  1040,   162,     0,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,     0,   171,   172,   173,   174,     0,
       0,   175,   176,   698,   178,   179,     0,     0,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,   189,
       0,   191,   192,   193,   194,     0,     0,   196,     0,   197,
     198,  1041,   200,     0,   201,     0,   202,   203,     0,   204,
     205,   206,   207,   208,   209,     0,   210,     0,     0,     0,
       0,   212,     0,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,   231,     0,   233,   234,   235,   236,  1042,
    1043,     0,  1044,     0,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,     0,     0,   250,   251,   252,   253,
       0,   254,   255,   256,     0,     0,   257,   258,   259,   260,
     261,   262,     0,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,  1045,
     280,  1046,   282,   283,   284,     0,     0,     0,   286,   287,
     288,   289,     0,     0,   291,  1047,   293,   294,   295,     0,
     296,   297,     0,     0,   298,   299,   300,     0,     0,   301,
       0,   303,   304,   305,     0,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,     0,   320,
     321,     0,   323,   324,   325,     0,   326,   327,   328,   329,
     330,     0,     0,   331,   332,   333,   334,  1048,   336,   337,
     338,   339,     0,   340,   341,   342,     0,   343,   344,   345,
     346,   347,   348,   349,   350,   351,     0,   352,   353,   354,
     355,   356,   357,     0,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,     0,   375,     0,   377,   378,   379,   380,   381,   382,
    1051,   384,     0,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,     0,   397,     0,     0,   399,
     400,     0,   401,   402,   403,   404,   405,   406,   407,     0,
    1053,  1054,     0,     0,   410,   411,     0,   413,     0,     0,
     415,   416,   417,   418,   419,   420,   421,     0,     0,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,     0,  1055,     0,   434,   435,   436,     0,   437,   438,
     439,     0,     0,   440,     0,     0,   441,   442,   443,   444,
     445,   446,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   458,   459,   460,   461
};

static const yytype_int16 yycheck[] =
{
       6,    34,   514,   548,   617,    11,   658,   602,    50,    15,
     658,   824,   850,   592,  1104,    21,    22,    23,   849,     0,
      26,  1070,   837,    29,     0,   723,    32,    33,   515,   695,
     696,   521,  1564,     0,   734,   829,   611,   560,    44,   977,
    1906,   609,     6,   977,  1576,   977,   977,   713,   826,    29,
     796,  1636,   808,  1093,     0,     0,   521,  1007,   645,   863,
     519,  1463,  1464,    44,  1973,  1997,  1468,  1093,   564,  1642,
      16,  1644,     0,    16,    52,  1521,   854,  1128,  1129,    85,
      86,    87,    88,    89,  2005,  1072,  1093,  1617,   602,  2009,
     604,    52,   606,    33,  1840,  1093,   666,     5,  1894,     9,
       5,     3,  1504,  1505,     3,    13,    14,  2266,    88,  1874,
      85,   520,    87,  2265,    89,     5,  1178,   769,   521,   609,
    2270,     0,    58,    13,    14,  1223,    50,    58,   995,     6,
      11,    11,  1633,  1561,    15,  2317,    11,     5,    75,    40,
       5,    22,     5,    40,   609,    13,    14,   116,    85,  1132,
       5,    32,    33,   649,     9,     5,   169,  1221,    58,     9,
     170,     5,     5,   622,  2340,  2253,    41,    15,   658,     5,
       5,     0,     5,     5,   106,   665,    27,   214,    27,  2421,
       5,  1609,  1868,    34,  1929,    34,   838,   523,  2370,   841,
     842,    82,     4,   658,    48,   146,    15,     9,    73,    27,
     665,   776,  1703,    11,    15,    86,    34,  2454,   121,     9,
    1810,     4,   735,    92,    67,  1873,     9,   138,     0,   220,
     289,   240,   216,   589,  2349,   589,   170,   169,    15,   116,
     137,   119,   240,    41,    16,  1050,   127,   733,  2215,   305,
     763,  2553,   283,  1744,  1745,   281,  2516,   269,   305,   106,
      11,    27,    34,   662,   266,     3,  2628,   130,   119,    37,
     331,   212,    44,    92,   265,    73,  2378,    11,  1944,   289,
      52,   130,  2454,  1256,   272,  2723,    73,    27,   105,   117,
    2439,   771,   772,    31,    32,   119,   117,  2399,   867,   355,
     159,   861,   862,   169,   453,   164,   367,    41,   157,    11,
     456,   135,    75,   790,  2694,  2695,   771,   772,   114,   161,
     607,   415,    85,   166,   216,    75,  2492,   216,   114,   453,
     174,  2758,   818,    75,   480,    85,     3,     4,     5,    73,
    2262,   402,     9,    85,     3,  1781,   190,  2161,   289,   498,
     359,   195,  2018,  2791,  2168,   123,   458,   208,   163,  2661,
    1106,   359,  2098,   191,   130,   459,  1054,   301,  1943,  2124,
     191,    73,   231,   495,   498,  2802,   498,  2739,   480,   666,
     667,   984,   224,  1039,  1040,   376,   230,   354,   449,  2816,
     130,  1047,   380,  2773,   159,    23,   273,  1789,  1790,  1791,
    1792,    11,   188,  1795,  1796,  1797,  1798,  1799,  1800,  1801,
    1802,  1803,  1804,   107,   283,   278,    44,  2589,   265,   300,
     346,   280,   434,   432,   273,   346,  2393,   987,   245,   278,
     168,  2691,   170,   489,   432,  2537,   253,   995,  1411,   498,
     337,  1521,   489,   434,  1247,   379,   448,   114,  1866,  1940,
    1868,  1942,  1844,  1845,  2189,  2757,   346,  2133,  2630,   785,
     816,  2137,   816,   494,   283,  1211,   231,  1025,   494,  2059,
    2702,   498,  2550,   316,    58,  2123,   472,   273,   347,   438,
     402,   413,   268,   479,  2721,   494,   413,   428,   498,  1346,
     486,   315,   994,   489,   494,   498,   494,   999,   521,  1587,
     471,  1581,  1330,  1005,  2619,   471,   311,   472,   399,  1303,
    2676,  1076,   399,  2662,   471,   995,   500,   294,   514,   515,
     516,   486,  2421,  2663,  1001,  1566,   407,   494,   347,  1009,
      31,    32,  1586,   436,   378,   471,   471,  2028,   391,   392,
     995,   452,   383,  2357,   383,  1025,   213,   413,   571,  2721,
     837,   483,   240,   549,  1009,   551,   434,  2293,  1123,  1124,
     592,   557,  2348,  2318,   496,   383,   326,   234,  1620,   565,
    1025,   420,   498,  2715,   861,   862,   863,   498,    68,  1137,
     494,   430,   578,   434,   520,  1379,   429,   456,   521,  1075,
     445,    92,   557,   493,   107,   355,   494,  1574,  1084,   494,
     492,   597,  1088,   492,   150,   576,   574,  1120,   500,  1008,
     576,   500,  1177,   578,   494,  1175,  1009,  2192,   489,   576,
     490,  1107,  1108,   574,   458,   490,   495,   597,   497,   562,
    2552,   627,   628,   629,  1276,   565,   494,   456,  1140,   494,
     576,   576,  2205,   458,  1286,   516,   480,  1289,   486,   494,
     413,  2327,  2563,   130,   494,  2565,  2332,  1137,   576,  2335,
     494,   494,   627,   628,   629,   480,   492,  2187,   494,   494,
     496,   494,   494,   456,     5,   671,   495,   486,   497,   494,
     481,   265,  1137,   485,   486,   486,   148,  1272,   494,   487,
     488,   489,   490,   494,   565,   485,   486,   480,    23,   471,
     987,  1781,   485,   486,     8,   492,  1264,   366,   446,   496,
     733,   446,    16,    17,    18,  2133,   268,  1463,  1464,  2137,
    1362,   273,  1468,    67,  1362,  2461,   662,  1757,  1758,  1759,
    1299,  1300,  1301,   240,   196,  2171,   487,   488,   489,   490,
    1756,  1245,  1715,   402,   432,   331,  2668,   345,   520,   521,
     497,   485,   486,   487,   488,   489,   490,  1413,  1504,  1505,
    1757,  1758,   346,  1050,  2255,  1705,   161,  1344,  1272,  1757,
     114,  1348,   436,   325,  1351,   373,   331,   773,   366,  1752,
    1282,   367,  1262,   442,  1264,  1287,  1827,  1291,  1346,   373,
     159,   268,  1296,   789,   790,  1768,   492,   456,  1488,   571,
     496,   278,   574,  2702,   576,  2380,   494,  1262,   773,  1264,
     135,  2487,     0,  1783,   402,  1788,   402,    59,   485,   486,
     366,   480,   498,   819,   820,    67,   822,   823,   824,   173,
     494,  1659,  1568,   801,   802,   494,   804,   186,   187,   494,
     836,  1811,    92,     4,  1817,  1132,   251,   252,     9,   819,
     801,   802,   359,   804,   442,   820,   402,   853,   823,   458,
     342,   857,   231,   449,   178,   366,  1346,   150,  2790,   264,
     220,   836,   436,  1322,   401,   485,   486,   487,   488,   489,
     490,   480,  1362,   853,  2740,  2741,    64,    65,  1175,  1683,
     662,  1346,   857,  1973,   449,   494,   442,  1377,  2290,  2317,
    1668,   402,   251,   252,   198,   198,   494,  1362,   435,  2327,
     456,   280,   240,    11,  2332,   265,   489,  2335,   789,   418,
     240,   494,  1377,   496,   268,   432,    30,   699,  1618,   273,
     494,  1417,  1716,   483,   480,  1719,   146,   170,  2794,     4,
      20,   442,   362,    41,     9,   446,   496,  2522,   494,   159,
      54,   116,  2370,    27,   164,   456,   246,     8,   363,   364,
      11,   733,   287,   449,  2527,    16,    17,    18,    23,  1256,
     494,   204,   316,   483,    29,    73,   972,   327,   406,   480,
     408,   285,   978,   240,   494,    23,   219,   494,   175,   333,
     986,    29,   234,   494,  1563,   228,  1482,   494,   994,  2391,
    1973,   477,   212,   999,    78,  1001,  1002,   495,  1004,  1005,
     498,  1007,    86,   978,   363,   364,  1303,   489,   218,   344,
     345,   231,   494,  1509,   496,   496,   376,  1556,  1557,   801,
     802,   359,   804,   159,   283,     4,  2454,   202,   164,   359,
       9,   115,  1007,  1789,  1790,  1791,  1792,   234,   373,  1795,
    1796,  1797,  1798,  1799,  1800,  1801,  1802,  1803,  1804,    13,
      14,  1369,  1639,  1549,  1641,  1373,   359,  1375,  2460,  2487,
     280,  1999,  1008,   477,   367,  1999,  1009,  1999,  1999,   289,
     135,  2021,     4,   366,   434,   429,   492,     9,   494,   487,
     496,  2171,  1379,   684,   685,  1733,  1699,   135,  1844,  1845,
     265,  1072,   359,   268,   432,   231,  1072,  2629,  1104,   402,
     168,     3,   432,     5,   188,  1072,   366,   350,   709,   402,
    1481,   498,  1483,  1484,  1411,   199,  1954,  1815,  1816,    13,
      14,  1002,  1953,  1004,   354,   355,  1072,  1072,  1941,   495,
     255,   256,   498,    23,  1140,    93,   498,   495,   495,    29,
     498,   498,   402,   494,   280,   495,   449,   114,   498,   442,
     354,   355,  1642,  1643,  1644,   216,   494,   477,  1952,   458,
    1954,  2589,  1993,   456,   494,   432,  1172,   481,   482,   483,
    1738,   485,   486,   487,   488,   489,   490,  1642,  1643,  1644,
     495,   480,   442,   498,   495,    23,  1192,   480,  1194,  2238,
    2722,    29,  2777,   363,   364,   494,   456,  1172,   495,   667,
     495,   494,  2630,   498,   771,   772,   108,   109,   428,   406,
    2742,   408,   170,   354,   355,    23,  1728,  1192,   218,  1194,
     480,    29,   287,    54,   285,  1925,  1008,   494,  1234,   495,
     354,   355,   498,    93,   494,   432,  1242,  1243,   494,   287,
    2223,  1247,  1248,  1733,   495,   135,   204,   498,  1738,  1824,
    1193,   169,  1258,  1259,  1260,  1261,   406,  1263,   408,  1234,
    1241,   219,   214,  1269,   495,  1271,   495,   498,  1733,   498,
     228,   495,  2804,  1738,   498,   340,  1282,  1283,   151,   344,
     495,  1287,  1288,   498,   186,   187,  1292,  1293,  1294,  1295,
    1072,  1297,  1298,  2721,   340,   151,   344,   135,    23,   495,
    2283,   769,   498,   261,    29,   494,   390,   496,   373,   393,
     170,  1317,   456,   495,   458,  1321,    36,  1856,  1857,  1858,
    1859,  1973,   494,   151,   496,   373,  1822,   135,  1334,   296,
     667,  2421,   151,   495,   495,    55,   498,   498,   495,     3,
     495,   498,  1317,   498,   204,   247,   248,   249,   250,   251,
     252,   494,  1333,   255,   256,  1878,    23,  1932,   586,   219,
     588,  1143,    29,     8,   268,    81,    11,  1248,   228,   837,
    2419,    16,    17,    18,   439,  1381,   449,  1258,     0,  1260,
    2193,   494,  1263,  2221,   495,   105,  1683,   498,  1269,   460,
    1271,   439,   350,   495,   151,   495,   498,   287,   498,   366,
     495,   261,  1283,   498,  1972,   496,  1974,  1288,   175,  1988,
     135,  1292,  1293,  1294,  1295,  2230,  1297,  1298,  1715,   151,
     481,   482,   483,   283,   485,   486,   487,   488,   489,   490,
     151,   198,  1465,  2020,    36,   402,  1037,  1038,  2421,   529,
     495,   531,   402,   498,   495,  1046,   130,   498,   495,   287,
     340,   498,   494,    55,   344,  1752,   406,   283,   408,  1241,
     550,   363,   364,   495,    36,   229,   498,   234,   135,   495,
      92,  1768,   498,   157,   494,   442,  1509,   197,   495,   287,
    1970,   498,  1972,   373,  1974,     8,     5,     5,    11,   456,
     350,  1788,   494,    16,    17,    18,   495,  1098,  1099,   498,
     837,   495,   340,   105,   498,  1970,   344,  1972,  2491,  1974,
      33,  2494,   494,   480,   495,  1521,   164,   498,   667,   495,
    1817,   288,   498,   495,   146,   245,   498,   494,  2142,   494,
     312,  2145,   340,   253,  2290,   373,   344,   159,   495,   494,
     494,   498,   164,  1840,   406,   265,   408,   169,  1554,   439,
     195,  1333,     5,   495,   495,  1561,   498,   498,   180,   494,
    2212,   183,   287,     5,   495,   373,   495,   498,   658,   498,
     494,   216,   474,   475,  2149,   665,   436,   297,   494,  1554,
     495,  1614,  1050,   498,   268,   495,   494,   494,   498,   273,
     212,   494,     5,  1574,   278,   197,  2427,  1561,  1574,   495,
       5,   439,   498,  1609,   457,  1611,  2181,  1574,  1614,   231,
     495,  1617,  2702,   498,   495,   340,   494,   498,   495,   344,
     287,   498,  2138,   495,  2140,   345,   498,  1633,  1574,  1574,
     494,   439,  2280,  2178,    15,  2391,   494,  2224,  2225,   406,
     285,   408,     6,   245,   494,  1609,   736,   367,   373,   495,
     495,   253,   498,   498,   495,   494,   746,   498,   280,   494,
     214,   283,   429,   265,  1132,   432,   498,   289,   388,   759,
      96,     5,   495,   340,     8,   498,  1973,   344,    36,   769,
      14,   771,   772,  1465,  1561,   243,    36,  1693,   837,   229,
      24,   164,  1698,   216,    28,   297,   280,  1703,  1704,  1705,
    1706,   549,  1708,   551,  2460,    55,   373,   164,   278,   494,
     373,   413,    85,  1050,   439,  2205,  1722,   494,   498,  2702,
     413,    54,  1728,  1698,    54,   347,   413,  1509,   258,  1704,
    1705,   413,  1609,  1708,   495,   500,   420,   413,  1744,  1745,
    2205,   456,   151,   345,   268,  1527,   430,  1722,    92,     8,
    1731,   268,    11,    36,  2420,   105,   494,    16,    17,    18,
      36,  1543,   285,   496,   498,   367,   445,   494,   494,  2421,
     494,    35,   439,     9,    33,  1781,   494,   452,   411,  1561,
     402,   494,   411,    11,   498,   411,   388,   494,  1256,   273,
    2280,   494,  1574,   413,   180,  1132,   495,   160,   146,   169,
     494,  2098,     3,   498,   212,   376,   428,   284,   220,   498,
    1852,   159,   436,    36,   436,  2280,   164,  1850,   220,   268,
     494,   220,   289,   173,   495,  1706,   321,  1609,   449,   281,
     403,   453,  1614,   455,   456,  1868,   481,   482,   483,   494,
     485,   486,   487,   488,   489,   490,   151,   197,  1854,   151,
     456,   268,   283,   283,   268,    36,  1862,  1863,  1864,    36,
    1866,    35,  1868,  1869,   212,   492,   413,  1873,  1874,   492,
     492,   413,   413,   495,   496,   497,   413,  2389,   495,  2545,
     495,   495,   169,   231,   495,   495,   495,  1862,  1863,  1864,
    2469,   495,   495,   495,   495,   245,   496,   495,   477,   498,
     477,  1050,  1866,   253,  1868,   495,   495,   495,   495,  1915,
     477,   169,   494,   413,   494,   265,   494,   293,  2756,  1256,
     494,   453,    36,   479,   284,  2538,  2223,  1933,   284,   284,
    1936,   434,   280,  2230,  1940,  1941,  1942,   498,  1944,   239,
    1915,   289,   453,  1411,   442,   366,   283,   297,   483,  1731,
     413,   268,   151,   198,  1960,  2523,  1962,   216,   481,   482,
     483,   494,   485,   486,   487,   488,   489,   490,   287,  1975,
    1976,  1977,  1978,  1979,  1980,  1981,  1982,  1983,  1984,   151,
     151,   402,   495,  1132,   413,   413,  2283,  2474,   413,  1866,
     413,  1868,  1998,   495,  2000,   345,  2293,   493,   495,  2495,
     494,   456,   495,  1093,  2010,  2492,   498,   296,   281,   283,
      36,   151,  2018,   151,   492,  2021,   273,   367,   142,   495,
    2633,   442,  2028,  1998,   169,  2000,   285,    11,   164,   495,
    2036,  2543,   169,  2523,   495,   456,  2017,  2527,   388,   495,
     494,   402,   453,   169,   495,   480,  2021,   494,   498,   180,
    2702,   495,   495,    76,   495,  1936,     3,    67,  2523,   480,
     494,   347,  2527,    73,   486,   284,   441,  2554,  1850,    83,
     151,   173,   423,   494,  1411,    85,   494,   366,   494,  1960,
     428,    36,    79,   436,  1866,   169,  1868,   494,   498,   493,
    2586,   494,  1182,   493,  1975,  1976,  1977,  1978,  1979,  1980,
    1981,  1982,  1983,  1984,   114,  2111,   116,  1256,  2114,  2115,
    2116,  2117,  2707,   402,  2626,  2602,   495,  2123,  2124,     3,
    2126,   495,   494,  2129,  2421,   404,   495,  2133,   495,   494,
     219,  2137,   292,  2701,   219,   494,   290,  2143,    54,  2114,
    2115,  2116,  2117,   183,   492,   494,     3,   495,   496,   495,
       3,   483,   495,   442,   200,   456,   189,   521,   273,   483,
     273,   413,   413,   173,  2461,  2171,   495,   456,    36,  2133,
     220,   268,   494,  2137,   106,   456,   283,  2183,   494,   493,
      36,  2187,   169,   547,   548,   494,   302,  2193,   494,   219,
     494,   480,   202,   455,  2491,   486,   493,  2494,    85,  2180,
     564,  2182,   495,   131,   333,   494,   494,   220,   114,   494,
      36,  2701,  2218,   151,    73,   221,   121,   494,   151,    36,
     495,   355,   481,   482,   483,   355,   485,   486,   487,   488,
     489,   490,    54,    36,   494,  2017,  2701,   498,   494,   494,
     436,   441,    73,   607,   608,   609,   493,  1715,    36,  2255,
     436,   188,     3,   423,   221,   403,  2133,    67,   268,  2265,
    2137,   286,  1411,   273,   494,    67,   498,    36,   486,  2275,
     357,   483,  1362,   373,   273,   188,   423,   243,  1368,   494,
      36,     3,   286,  2264,  1752,   649,   494,  1377,   494,   494,
     286,   495,   495,   265,   658,   283,   494,   354,     9,   341,
    1768,   665,   666,   667,   200,   283,   316,   283,    33,   434,
     495,  2317,  2318,   119,   494,   384,  2322,     9,   682,  2325,
    1788,  2327,    22,   333,   333,   125,  2332,   495,   333,  2335,
     576,  2337,  1009,  2780,  2340,  2704,  2530,  2755,  2743,   824,
    1631,  2444,  1643,  2349,  2350,  2701,   710,  2010,  1693,  1817,
    1972,  2133,  2753,  2317,  1628,  2137,     8,  2699,  1934,    11,
     819,  1578,   789,  2327,  2370,   729,   730,   731,  2332,   733,
     764,  2335,  1840,   811,  2349,  2350,    50,   810,  1715,  2599,
    1237,  2503,  2687,  2389,  2390,  1593,  1211,  1882,  2611,    41,
     754,  2154,  2398,  1236,   813,  1609,    48,  1868,  2180,  2124,
    2182,  2139,   667,  2488,  1866,  2702,  2370,   771,   772,  2589,
    2588,  2606,  1380,  1093,  2607,  1752,  2422,  2423,  2685,   429,
      94,    73,  2686,  2398,  1093,  1093,  2346,  1093,  2434,  2672,
    2436,  1768,  2438,  1169,  1581,  1527,  1419,  1524,  1309,   803,
    2317,  2434,  1173,   807,   808,  2451,   120,  2819,  2454,  2430,
    2327,  1788,  2789,  2581,   818,  2332,  1865,  1888,  2335,  2434,
    2157,  2357,  2495,  1701,  2160,  2351,   140,   994,  2474,  2002,
     144,  1193,  1697,   837,  2455,  2217,  2451,  1738,  2280,   667,
    1817,  2487,  2264,  1995,  1270,  1955,  2492,  1970,  1377,  1637,
    2454,   165,   144,  2370,   168,  2501,  1194,   861,   862,   863,
    2183,  1933,  2366,  1840,  2630,  1973,  2698,  2513,    -1,  2390,
     184,    -1,    -1,    -1,    -1,  2521,    -1,    -1,    -1,    -1,
      -1,    -1,   174,  2487,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    -1,    16,    17,    18,  2543,   190,    -1,
      -1,  2422,  2423,   195,    -1,  2327,  2521,    -1,  2554,    -1,
    2332,    33,    -1,  2335,    -1,  2561,  1646,  2438,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1715,    -1,    -1,    -1,
      -1,    -1,   837,    -1,    -1,    -1,    -1,  2454,   230,    -1,
      -1,  2562,    -1,  2589,    -1,    -1,  2561,    -1,    -1,    -1,
      -1,    -1,  2598,    -1,    -1,    -1,  2602,    -1,    -1,   273,
    2606,  1691,    -1,  1752,    -1,    -1,    -1,   281,    -1,    -1,
    2487,    -1,    -1,  2619,   667,    -1,    -1,    -1,    -1,  1768,
    2626,  2627,  2628,   987,  2630,  2589,    -1,    -1,    -1,    -1,
    2098,   995,  2513,   285,    -1,    -1,  1973,    -1,    -1,  1788,
      -1,    -1,  2623,  1733,  2619,  1009,   667,    -1,  2430,   837,
    1740,   325,  1742,    -1,    -1,    -1,  1746,  1747,    -1,    -1,
      -1,  1025,    -1,    -1,    -1,    -1,  2630,    -1,  1817,    -1,
    2676,    -1,    -1,  2455,    -1,    -1,    -1,    -1,    -1,  2685,
      -1,  2687,    -1,    -1,    -1,    -1,  1050,    -1,    -1,    -1,
      -1,  1840,  2698,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2487,    -1,    -1,  2714,  2715,
      -1,  1075,  2589,  2495,    -1,  2721,    -1,  1081,    -1,    -1,
    1084,    -1,    -1,    -1,  1088,    -1,   378,    -1,    -1,    -1,
    2711,    -1,    -1,  2739,   216,    -1,    -1,    -1,  1102,  2714,
      -1,  1105,  1106,  1107,  1108,    -1,    -1,    -1,    -1,    -1,
      -1,  1115,  1116,  2630,    -1,  2223,    -1,  2721,    -1,    -1,
      -1,  2098,  2230,  1127,    -1,    -1,    -1,    -1,  1132,  1133,
    1134,  1135,  1136,  1137,    -1,    -1,    -1,  1141,  1142,    -1,
    2562,    -1,  1146,  2789,   837,  1050,  1150,    -1,    -1,  1153,
    1154,  1155,  1156,  1157,  1158,  1159,  1160,  1161,    -1,    -1,
    1164,    -1,    -1,   285,  1168,    -1,    -1,  1171,  2814,  1173,
      -1,  1175,  2818,    -1,  2789,  2283,   837,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1973,  2293,   478,    -1,    -1,    -1,
      -1,    -1,  1196,   485,   486,   487,   488,   489,   490,  2814,
      -1,  2623,    -1,  2818,  2721,    -1,    -1,  1211,    23,    -1,
      -1,    -1,    -1,    -1,    29,     8,  1220,  1221,    11,    -1,
      -1,    36,  1050,    16,    17,    18,    -1,  1132,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      55,    -1,    -1,  1973,    -1,    -1,  2223,    -1,    41,    -1,
      -1,    -1,  1256,  2230,    -1,    48,    -1,    -1,  1262,    -1,
    1264,     8,    -1,    -1,    11,  1995,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      73,    11,    -1,    -1,    -1,    -1,    16,    17,    18,  2711,
     105,    -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,  1303,
      -1,    48,  1306,  1307,  1132,  1309,  2283,    -1,    -1,  2098,
      -1,    -1,    -1,  2421,    -1,    -1,  2293,    -1,    -1,    -1,
     135,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1343,
      -1,    -1,  1346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1256,    -1,  2461,    -1,    -1,    -1,  1050,  1362,   481,
     482,   483,    -1,   485,   486,   487,   488,   489,   490,    -1,
      -1,    -1,    -1,  1377,    -1,  1379,    -1,    -1,    -1,    -1,
      -1,   174,   197,  2491,    -1,    -1,  2494,    -1,    -1,  1050,
      -1,    -1,    -1,   547,   548,    -1,    -1,   190,    -1,    -1,
       8,    -1,   195,    11,    -1,    -1,    -1,  1411,    -1,    -1,
      -1,    -1,    -1,  1417,  1418,    -1,    -1,    -1,    -1,  1423,
      -1,    -1,    -1,  2153,    -1,  2155,    -1,   174,  1256,    -1,
     245,    -1,    -1,    41,  2223,    -1,    -1,   230,   253,  1132,
      48,  2230,    -1,   190,  2421,    -1,    -1,    -1,   195,    -1,
     265,    -1,    -1,   607,   608,    -1,    -1,    -1,    -1,  1463,
    1464,  1465,    -1,    -1,  1468,    73,    -1,    -1,    -1,    -1,
      -1,  1132,   287,    -1,    -1,    -1,    -1,  1481,  1482,  1483,
    1484,    -1,   297,   230,  2461,  1489,   216,    -1,    -1,    -1,
      -1,    -1,   285,    -1,  2283,    -1,    -1,    -1,    -1,    -1,
    1504,  1505,    -1,    -1,  2293,  1509,  1411,    -1,    -1,    -1,
      -1,    -1,   666,    -1,  2491,    -1,    -1,  2494,    -1,  1523,
      -1,    -1,  1526,    -1,  1528,   340,    -1,    -1,   682,   344,
     345,    -1,    -1,    -1,    -1,    -1,   144,    -1,   285,    -1,
      -1,    -1,    -1,    -1,    -1,  1549,  1106,    -1,    -1,    -1,
    2280,     8,   367,    -1,    11,   285,   710,  1561,   373,    16,
      17,    18,    -1,  1256,    -1,    -1,   174,    -1,    -1,    -1,
      -1,    -1,    -1,   388,  1578,   729,   730,   731,    -1,   733,
      -1,    -1,   190,  1411,    -1,   378,    -1,   195,    -1,  1593,
      -1,    -1,    -1,    -1,  2702,  1256,    -1,    -1,    -1,    -1,
     754,    -1,    -1,    -1,    -1,  1609,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1625,   230,    -1,   439,    -1,    -1,    -1,    -1,    -1,
      -1,   378,  2421,    -1,    -1,    -1,    -1,    -1,  1642,  1643,
    1644,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   803,
      -1,  1211,    -1,   807,   808,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    -1,    16,    17,    18,    -1,    -1,
      -1,    -1,  2461,    -1,    -1,    -1,    -1,   285,    -1,  1683,
      -1,    -1,    33,    -1,    -1,   478,    -1,    -1,   481,   482,
     483,  2421,   485,   486,   487,   488,   489,   490,    -1,    -1,
      -1,    -1,  2491,    -1,    -1,  2494,   171,   861,   862,   863,
     175,  1715,    -1,    -1,    -1,    -1,    -1,    -1,  1411,    -1,
      -1,    -1,    -1,    -1,    -1,  2702,    -1,    -1,    -1,  1733,
      -1,   478,    -1,   198,  1738,    -1,    -1,    -1,   485,   486,
     487,   488,   489,   490,    -1,    -1,    -1,    -1,  1752,    -1,
    1411,   481,   482,   483,    -1,   485,   486,   487,   488,   489,
     490,  1765,    -1,    -1,  1768,    -1,    -1,    -1,    -1,   234,
     378,  1775,    -1,    -1,    -1,  1779,   241,    -1,  1782,    -1,
      -1,    -1,    -1,    -1,  1788,  1789,  1790,  1791,  1792,    -1,
      -1,  1795,  1796,  1797,  1798,  1799,  1800,  1801,  1802,  1803,
    1804,    -1,    -1,    -1,  1808,  1809,    -1,    -1,    -1,    -1,
    1715,    -1,    -1,  1817,    -1,    -1,    -1,    -1,  1822,    -1,
      -1,  2551,    -1,   288,  1828,    -1,    -1,  1831,   285,  1833,
      -1,    -1,    -1,   987,    -1,    -1,  1840,  1841,    -1,    -1,
    1844,  1845,    -1,    -1,    -1,  1849,  1850,  1752,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   323,    -1,
      -1,    -1,  1866,  1768,  1868,   216,    -1,    -1,    -1,    -1,
     478,    -1,    -1,    -1,    -1,  1879,    -1,   485,   486,   487,
     488,   489,   490,  1788,    -1,    -1,    -1,  1715,    -1,    -1,
      -1,    -1,    -1,    -1,   359,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1463,  1464,    -1,    -1,    -1,  1468,    -1,
      -1,    -1,  1817,  2702,  1918,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1752,    -1,    -1,  1081,    -1,    -1,
      -1,  1935,    -1,    -1,   285,  1840,    -1,    -1,    -1,    -1,
    1768,   406,    -1,   408,  1504,  1505,    -1,    -1,  1102,    -1,
      -1,  1105,    -1,    -1,  1108,    -1,    -1,    -1,    -1,    -1,
    1788,  1115,  1116,    -1,   429,    -1,  1970,   432,  1972,  1973,
    1974,    -1,  2702,  1127,    -1,    -1,    -1,    -1,    -1,  1133,
    1134,  1135,  1136,    -1,    -1,    -1,    -1,  1141,  1142,  1817,
      -1,    -1,  1146,    -1,    -1,    -1,  1150,    -1,    -1,  1153,
    1154,  1155,  1156,  1157,  1158,  1159,  1160,  1161,    -1,    -1,
    1164,    -1,  1840,    -1,  1168,    -1,    -1,  1171,    -1,  1173,
      -1,  1175,  1715,    -1,   481,   482,   483,    -1,   485,   486,
     487,   488,   489,   490,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1196,    -1,    -1,    -1,  2050,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1715,    -1,    -1,    -1,    -1,  1752,
      -1,    -1,    -1,    -1,    -1,    -1,  1220,  1221,  1973,    -1,
      -1,    -1,    -1,   658,    -1,  1768,    -1,    -1,    -1,    -1,
     665,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2092,  2093,
      -1,  1752,    -1,  2097,  2098,  1788,    -1,    -1,  2102,    -1,
      -1,  2105,  2106,    -1,    -1,    -1,  2110,  1768,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1817,    -1,    -1,  1788,    -1,  2133,
     481,   482,   483,  2137,   485,   486,   487,   488,   489,   490,
      -1,    -1,    -1,    -1,    -1,  1973,    -1,  1840,    -1,  1303,
      -1,    -1,  1306,  1307,    -1,  1309,  1817,    -1,    -1,    -1,
      -1,   746,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2178,    -1,    -1,    -1,    -1,  1840,
      -1,    -1,    -1,    -1,   769,    -1,   771,   772,    -1,  1343,
      -1,    -1,    -1,  2098,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2205,    -1,    -1,   108,   109,    -1,    -1,    -1,    -1,
    2214,    -1,    -1,    -1,    -1,    -1,     0,   108,   109,  2223,
      -1,    -1,    -1,    -1,    -1,  1379,  2230,    -1,    -1,  1789,
    1790,  1791,  1792,    -1,    -1,  1795,  1796,  1797,  1798,  1799,
    1800,  1801,  1802,  1803,  1804,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   838,    -1,    -1,   841,   842,    -1,    -1,
      -1,    -1,    -1,    -1,  1418,    -1,    -1,    -1,    -1,  1423,
    2098,    -1,    -1,    -1,    -1,    -1,  2280,    -1,    -1,  2283,
    1973,    -1,   186,   187,  1844,  1845,  2290,    -1,    -1,  2293,
      -1,    -1,    -1,    -1,    -1,   186,   187,  2301,  2302,    -1,
      -1,  2305,    -1,    -1,    -1,    -1,    -1,    -1,    92,    -1,
      -1,  1465,  1973,  2317,    -1,    -1,    -1,    -1,  2223,    -1,
      -1,    -1,    -1,  2327,    -1,  2230,    -1,  1481,  2332,  1483,
    1484,  2335,    -1,    -1,    -1,  1489,    -1,    -1,  2342,  2343,
      -1,    -1,    -1,   247,   248,   249,   250,   251,   252,    -1,
      -1,   255,   256,    -1,    -1,    -1,   247,   248,   249,   250,
     251,   252,   146,    -1,   255,   256,  2370,    -1,  2372,  1523,
      -1,    -1,  1526,    -1,  1528,   159,    -1,    -1,  2283,    -1,
     164,    -1,    -1,    -1,    -1,   169,    -1,  2391,  2293,    -1,
      -1,    -1,    -1,    -1,    -1,  2223,   180,    -1,    -1,   183,
      -1,    -1,  2230,    -1,    -1,  2098,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,  2421,    -1,    -1,
      -1,    -1,    -1,    -1,  1578,    -1,    -1,    -1,   212,  1014,
    1015,    -1,    -1,    -1,    -1,    -1,    -1,  2098,    -1,  1593,
      -1,    -1,    -1,    -1,    -1,    41,    -1,   231,    -1,    -1,
    2454,    -1,    48,    -1,    -1,  2283,  2460,  2461,    -1,   363,
     364,    -1,    -1,    -1,    -1,  2293,    -1,    -1,    -1,    -1,
      -1,  1625,   363,   364,    -1,    -1,    -1,    73,    -1,  2483,
      -1,    -1,   747,  2487,    -1,    -1,    -1,  2491,    -1,    -1,
    2494,  2495,    -1,    -1,    -1,    -1,   280,    -1,    -1,   283,
      -1,  1086,  1087,    -1,    -1,   289,    -1,    -1,    -1,  1094,
    2514,  1096,  1097,    -1,    -1,    -1,  2421,    -1,    -1,  2523,
      -1,   786,    -1,  2527,  2528,    -1,  1111,    -1,  1113,  1683,
    2223,    -1,    -1,    -1,    -1,    -1,    -1,  2230,    -1,    -1,
      -1,  1126,    -1,    -1,    -1,    -1,    -1,    -1,   144,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2461,    -1,     8,    -1,
      -1,    11,  2223,   347,    -1,    -1,    -1,    -1,    -1,  2230,
     474,   475,    -1,    -1,    -1,    -1,    -1,    -1,   174,    -1,
      -1,    -1,  2586,   474,   475,  2589,  2491,    -1,    -1,  2494,
    2283,    41,    -1,  2421,   190,    -1,    -1,    -1,    48,   195,
    2293,   866,    -1,   494,    -1,    -1,   871,  2611,    -1,    -1,
      -1,  1765,    -1,    -1,    -1,    -1,    -1,    -1,   402,    -1,
      -1,  1775,  2283,    73,    -1,  1779,  2630,    -1,  1782,    -1,
       0,    -1,  2293,  2461,   230,  1220,  1221,    -1,    -1,    -1,
      -1,    -1,    -1,  2647,   428,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   436,    -1,  1808,  1809,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2491,    -1,    -1,  2494,  2671,  2672,   453,
      -1,   455,   456,    -1,  1828,    -1,    -1,  1831,    -1,  1833,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1841,    -1,   285,
      -1,  1276,    -1,    -1,   144,  1849,  1850,  2701,  2702,    -1,
      -1,  1286,    -1,    -1,  1289,    -1,    -1,    -1,   492,    -1,
      -1,   495,   496,   497,    -1,    -1,    -1,  2721,    -1,  2723,
      -1,    -1,    92,    -1,   174,  1879,    -1,    -1,  2421,    -1,
    2290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     190,    -1,    -1,    -1,    -1,   195,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2421,    -1,    -1,    -1,  1918,    -1,    -1,    -1,  2461,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   146,  1362,    -1,    -1,
     230,  1935,   378,    -1,    -1,    -1,    -1,  2791,    -1,   159,
      -1,    -1,  1377,    -1,   164,    -1,    -1,  2702,  2491,   169,
    2461,  2494,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     180,    -1,    -1,   183,  1079,  1400,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2491,  2391,    -1,  2494,    -1,   285,  1101,    -1,    -1,     0,
      -1,  1106,   212,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1117,  1118,  1119,    -1,  1121,    -1,    19,    -1,
      -1,   231,    -1,    -1,    -1,    -1,    -1,    -1,    29,    -1,
      31,    32,    -1,    -1,  2702,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   478,    -1,    -1,    -1,    47,    -1,    -1,   485,
     486,   487,   488,   489,   490,    56,  2050,    -1,    -1,    -1,
    2460,    -1,    -1,    -1,    -1,  1170,    -1,    68,    -1,    -1,
     280,    -1,    -1,   283,    -1,    -1,    -1,    -1,    79,   289,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,    90,
      -1,    92,    -1,    -1,    -1,    -1,    -1,    -1,  2092,  2093,
      -1,    -1,  1207,  2097,    -1,    -1,    -1,    -1,  2102,   110,
      -1,  2105,  2106,    -1,  1219,    -1,  2110,    -1,    -1,  1224,
      -1,    -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   135,    -1,    -1,   347,    -1,    -1,
    1565,   142,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   150,
      -1,   152,   153,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1585,  1586,    -1,    -1,   165,    -1,    -1,    -1,    -1,  2702,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2178,    -1,    -1,    -1,   478,    -1,
      -1,    -1,   402,   194,    -1,   485,   486,   487,   488,   489,
     490,  2702,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   428,    -1,
    2214,    -1,    -1,    -1,    -1,    -1,   436,    -1,    -1,    -1,
      -1,     8,   233,    -1,    11,    -1,    -1,    -1,    -1,    16,
      17,    18,    -1,   453,    -1,   455,   456,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,    -1,
      -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   492,    -1,    -1,   495,   496,   497,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2301,  2302,   310,
      -1,  2305,   313,    -1,    -1,    -1,  1421,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1753,  1754,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1444,
      -1,    -1,    -1,   344,    -1,    -1,    -1,    -1,  2342,  2343,
      -1,   352,    -1,    -1,    -1,    -1,  1461,    -1,  1463,  1464,
      -1,  1466,    -1,  1468,    -1,   366,    -1,    -1,  1473,    -1,
      -1,    -1,   373,    -1,    -1,  1480,   377,    -1,  2372,    -1,
    1485,    -1,    -1,    -1,    -1,    -1,  1491,   388,    -1,    -1,
    1495,  1496,  1497,  1498,    -1,    -1,    -1,   174,    -1,  1504,
    1505,   402,  1507,  1508,    -1,    36,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   190,  1519,    -1,    -1,  1522,   195,    -1,
      -1,    -1,    -1,    -1,    55,  1530,  1531,  1532,  1533,  1534,
    1535,  1536,  1537,  1538,  1539,    -1,   437,    -1,    -1,   216,
     217,   442,  1547,    -1,    -1,    -1,  1551,    -1,    -1,    -1,
      -1,    -1,    -1,   230,    -1,   456,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1572,    -1,    -1,
      -1,    -1,    -1,    -1,   105,   106,    -1,    -1,    -1,   480,
      -1,    -1,    -1,   114,    -1,    -1,    -1,    -1,    -1,  2483,
      -1,   268,    -1,   494,   271,    -1,   497,    -1,    -1,    -1,
      -1,  2495,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,
      -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2514,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2528,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   173,    -1,    -1,    -1,    -1,    -1,  1973,    -1,
      -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,   197,    -1,    16,    17,
      18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1686,  1687,  1688,    -1,    33,    -1,    -1,    36,    -1,
      -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,    -1,    -1,
      48,   378,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2034,
      -1,    -1,    -1,    -1,   245,    -1,    -1,  2611,    -1,  1724,
      -1,    -1,   253,    -1,    -1,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   265,    -1,    -1,   268,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2647,    -1,    -1,    -1,    -1,    -1,  1764,
      -1,    -1,    -1,    -1,    -1,  1770,   297,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2671,  2672,    -1,
    1785,  1786,  1787,    -1,  1789,  1790,  1791,  1792,    -1,    -1,
    1795,  1796,  1797,  1798,  1799,  1800,  1801,  1802,  1803,  1804,
    1805,   478,    -1,    -1,   481,   482,   483,    -1,   485,   486,
     487,   488,   489,   490,   345,    -1,    -1,    -1,    -1,    -1,
    1825,   498,    -1,    -1,  1829,  1830,   174,    -1,    -1,  2723,
       8,    -1,    -1,    11,    -1,    -1,   367,    -1,  1843,  1844,
    1845,  1846,   190,  1848,    -1,    -1,    -1,   195,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   388,    -1,   390,
      -1,    -1,   393,    41,    -1,    -1,    -1,    -1,   216,   217,
      48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   230,    -1,    -1,    -1,    -1,  2212,    -1,    -1,
      -1,    -1,  2217,    -1,    -1,    73,    -1,  2791,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2231,  2232,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     268,    -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1937,    -1,    -1,     8,    -1,   285,    11,    -1,
     288,    -1,    -1,    16,    17,    18,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      33,    -1,    -1,   494,    -1,    -1,   144,    -1,    41,    -1,
      -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,   174,    -1,    11,    -1,
      73,    -1,    -1,    16,    17,    18,    -1,    -1,    -1,    -1,
      -1,    -1,   190,    -1,    -1,    -1,    -1,   195,    -1,    -1,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,
     378,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2051,    -1,    -1,    -1,
    2055,  2056,   230,  2058,    -1,    -1,  2061,  2062,  2063,  2064,
      73,    -1,    -1,  2068,  2069,  2070,  2071,  2072,  2073,  2074,
    2075,  2076,  2077,  2078,  2079,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2091,  2412,  2413,  2094,
      -1,  2096,    -1,    -1,    -1,  2100,  2421,    -1,  2103,  2104,
      -1,   174,  2107,  2108,    -1,    -1,    -1,   285,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   190,    -1,    -1,
      -1,    -1,   195,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     478,    -1,    -1,   481,   482,   483,    -1,   485,   486,   487,
     488,   489,   490,   216,   217,  2150,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    -1,    -1,   230,    -1,    -1,
      -1,   174,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,  2177,    -1,    16,    17,    18,   190,    -1,    -1,
      -1,    41,   195,    -1,    -1,  2190,    -1,    -1,    48,    -1,
      -1,    33,    -1,    -1,    -1,   268,    -1,    -1,   271,    41,
     378,    -1,    -1,   216,   217,    -1,    48,    -1,    -1,    -1,
      21,    -1,   285,    73,    -1,   288,    -1,   230,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   268,    -1,    -1,   271,    -1,
      -1,    -1,    -1,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    89,    -1,
      -1,  2286,    -1,    -1,   144,  2290,    -1,    -1,    -1,    -1,
    2295,  2296,  2297,    -1,    -1,  2300,    -1,    -1,  2303,  2304,
     478,    -1,    -1,  2308,    -1,   378,    -1,   485,   486,   487,
     488,   489,   490,    -1,   174,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     190,    -1,   174,    -1,   145,   195,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   154,    -1,    -1,    -1,    -1,   190,    -1,
      -1,    -1,    -1,   195,    -1,   166,    -1,    -1,    -1,    -1,
     171,    -1,    -1,    -1,    -1,   378,    -1,    -1,    -1,    -1,
     230,    -1,    -1,    -1,   216,   217,    -1,  2702,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2391,   198,   230,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2409,   478,    -1,    -1,   481,   482,
     483,    -1,   485,   486,   487,   488,   489,   490,    -1,    -1,
      -1,    -1,   495,    -1,    -1,   285,   268,    -1,    -1,   271,
     241,    -1,    -1,   244,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2459,  2460,    -1,    -1,    -1,  2464,
    2465,  2466,    -1,    -1,    -1,   478,    -1,    -1,   481,   482,
     483,    -1,   485,   486,   487,   488,   489,   490,    -1,    -1,
      -1,    -1,   495,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2499,  2500,    -1,   308,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   324,    -1,  2520,    -1,    -1,   378,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2531,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   378,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   356,    -1,    -1,   359,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,   370,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2583,   390,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,  2601,    -1,   409,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   418,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   478,    -1,
    2625,    -1,    -1,    -1,    -1,   485,   486,   487,   488,   489,
     490,    -1,    -1,    -1,  2639,    -1,   478,    -1,   449,   481,
     482,   483,    -1,   485,   486,   487,   488,   489,   490,    -1,
      -1,    -1,    -1,   495,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,  2709,    -1,    38,    39,    -1,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,  2726,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    74,    -1,    -1,    77,    78,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
      -1,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,   124,    -1,   126,   127,   128,   129,   130,    -1,
     132,   133,   134,   135,   136,    -1,    -1,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,    -1,   170,   171,
     172,   173,   174,   175,    -1,   177,    -1,    -1,    -1,   181,
     182,    -1,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,    -1,    -1,   227,   228,   229,   230,    -1,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,    -1,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,    -1,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,    -1,   307,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,   317,   318,   319,   320,   321,
      -1,    -1,   324,   325,   326,   327,   328,   329,   330,   331,
     332,    -1,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
      -1,   403,   404,   405,   406,   407,   408,   409,    -1,   411,
     412,    -1,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,   435,    -1,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,    -1,   449,   450,   451,
      -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,    -1,    -1,    -1,
      -1,    -1,    -1,   485,   486,   487,    -1,    -1,    -1,    -1,
      -1,    -1,   494,   495,    -1,    -1,    -1,   499,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    74,
      -1,    -1,    77,    78,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    90,    91,    -1,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
      -1,   126,   127,   128,   129,    -1,    -1,   132,   133,   134,
     135,   136,    -1,    -1,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,    -1,   170,   171,   172,   173,   174,
     175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
      -1,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
      -1,    -1,   227,   228,   229,   230,    -1,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,    -1,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,    -1,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,   317,   318,   319,   320,   321,    -1,    -1,   324,
     325,   326,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,    -1,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,    -1,   411,   412,    -1,    -1,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,    -1,    -1,   430,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,    -1,
     445,   446,   447,    -1,   449,   450,   451,    -1,    -1,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,    -1,   480,    -1,    -1,    -1,    -1,
     485,   486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,
     495,    -1,    -1,    -1,   499,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    -1,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    -1,
      68,    69,    70,    71,    72,    -1,    74,    -1,    -1,    77,
      78,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    90,    91,    -1,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,   124,    -1,   126,   127,
     128,   129,    -1,    -1,   132,   133,   134,   135,   136,    -1,
      -1,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,    -1,   170,   171,   172,   173,   174,   175,    -1,   177,
      -1,    -1,    -1,   181,   182,    -1,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,    -1,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,    -1,    -1,   227,
     228,   229,   230,    -1,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,    -1,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,    -1,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,   317,
     318,   319,   320,   321,    -1,    -1,   324,   325,   326,   327,
     328,   329,   330,   331,   332,    -1,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,    -1,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,    -1,   411,   412,    -1,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,   432,   433,   434,   435,    -1,   437,
     438,   439,   440,   441,   442,   443,    -1,   445,   446,   447,
      -1,   449,   450,   451,    -1,    -1,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,    -1,   480,    -1,    -1,    -1,    -1,   485,   486,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   494,    -1,    -1,    -1,
      -1,   499,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    74,    -1,    -1,    77,    78,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,    -1,   126,   127,   128,   129,    -1,
      -1,   132,   133,   134,   135,   136,    -1,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,   169,   170,
     171,   172,   173,   174,   175,    -1,   177,    -1,    -1,    -1,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,    -1,   226,   227,   228,   229,   230,
      -1,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,    -1,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,    -1,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,    -1,   403,   404,   405,   406,   407,   408,   409,    -1,
     411,   412,    -1,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,   440,
     441,   442,   443,    -1,   445,   446,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,    -1,    -1,
      -1,    -1,    -1,    -1,   485,   486,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   494,    -1,    -1,    -1,    -1,   499,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      74,    -1,    -1,    77,    78,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,    -1,   170,   171,   172,   173,
     174,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,    -1,    -1,   227,   228,   229,   230,    -1,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,    -1,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
     404,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,   435,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,   446,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,    -1,    -1,    -1,
      -1,   485,   486,   487,    -1,    -1,    -1,    -1,    -1,    -1,
     494,    -1,    -1,    -1,    -1,   499,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    74,    -1,    -1,
      77,    78,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    89,    90,    91,    -1,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,    -1,
     117,   118,   119,   120,   121,   122,    -1,   124,    -1,   126,
     127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
      -1,    -1,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,    -1,   170,   171,   172,   173,   174,   175,    -1,
     177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,    -1,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,    -1,    -1,
     227,   228,   229,   230,    -1,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,    -1,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,    -1,
     307,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
     317,   318,   319,   320,   321,    -1,    -1,   324,   325,   326,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
      -1,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,    -1,   403,   404,   405,   406,
     407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,   440,   441,   442,   443,    -1,   445,   446,
     447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,    -1,    -1,    -1,    -1,    -1,    -1,   485,   486,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,    -1,    -1,
      -1,    -1,   499,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
      30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    -1,    68,    69,
      70,    71,    72,    -1,    74,    -1,    -1,    77,    78,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      90,    91,    -1,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,   124,    -1,   126,   127,   128,   129,
      -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,    -1,
     170,   171,   172,   173,   174,   175,    -1,   177,    -1,    -1,
      -1,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,    -1,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,    -1,    -1,   227,   228,   229,
     230,    -1,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,    -1,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,    -1,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,    -1,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,   317,   318,   319,
     320,   321,    -1,    -1,   324,   325,   326,   327,   328,   329,
     330,   331,   332,    -1,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,    -1,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,    -1,
     400,   401,    -1,   403,   404,   405,   406,   407,   408,   409,
      -1,   411,   412,    -1,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,    -1,
     430,   431,   432,   433,   434,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,    -1,   445,   446,   447,    -1,   449,
     450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,    -1,
      -1,    -1,    -1,    -1,    -1,   485,   486,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   494,   495,    -1,    -1,    -1,   499,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    74,    -1,    -1,    77,    78,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,    -1,   117,   118,   119,   120,   121,   122,
      -1,   124,    -1,   126,   127,   128,   129,    -1,    -1,   132,
     133,   134,   135,   136,    -1,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,    -1,   170,   171,   172,
     173,   174,   175,    -1,   177,    -1,    -1,    -1,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,    -1,    -1,   227,   228,   229,   230,    -1,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
      -1,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,    -1,   307,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,   321,    -1,
      -1,   324,   325,   326,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    -1,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,   400,   401,    -1,
     403,   404,   405,   406,   407,   408,   409,    -1,   411,   412,
      -1,    -1,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,   440,   441,   442,
     443,    -1,   445,   446,   447,    -1,   449,   450,   451,    -1,
      -1,   454,    -1,    -1,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,    -1,    -1,    -1,    -1,
      -1,    -1,   485,   486,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   494,   495,    -1,    -1,    -1,   499,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    74,    -1,
      -1,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,    -1,
     126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
     136,    -1,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
      -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,    -1,
      -1,   227,   228,   229,   230,    -1,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,    -1,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
      -1,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,   400,   401,    -1,   403,   404,   405,
     406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,   435,
      -1,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,    -1,    -1,    -1,    -1,    -1,    -1,   485,
     486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,    -1,
      -1,    -1,    -1,   499,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    74,    -1,    -1,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
     169,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,    -1,    -1,   227,   228,
     229,   230,    -1,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,    -1,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    -1,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,   435,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,   446,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
      -1,    -1,    -1,    -1,    -1,    -1,   485,   486,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   494,    -1,    -1,    -1,    -1,
     499,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    74,    -1,    -1,    77,    78,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
      -1,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,   124,    -1,   126,   127,   128,   129,    -1,    -1,
     132,   133,   134,   135,   136,    -1,    -1,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,    -1,   170,   171,
     172,   173,   174,   175,    -1,   177,    -1,    -1,    -1,   181,
     182,    -1,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,    -1,    -1,   227,   228,   229,   230,    -1,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,    -1,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,    -1,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,    -1,   307,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,   317,   318,   319,   320,   321,
      -1,    -1,   324,   325,   326,   327,   328,   329,   330,   331,
     332,    -1,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
      -1,   403,   404,   405,   406,   407,   408,   409,    -1,   411,
     412,    -1,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,   435,    -1,   437,   438,   439,   440,   441,
     442,   443,    -1,   445,   446,   447,    -1,   449,   450,   451,
      -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,    -1,    -1,    -1,
      -1,    -1,    -1,   485,   486,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   494,    -1,    -1,    -1,    -1,   499,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    74,
      -1,    -1,    77,    78,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    90,    91,    -1,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
      -1,   126,   127,   128,   129,    -1,    -1,   132,   133,   134,
     135,   136,    -1,    -1,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,    -1,   170,   171,   172,   173,   174,
     175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
      -1,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
      -1,    -1,   227,   228,   229,   230,    -1,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,    -1,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,    -1,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,   317,   318,   319,   320,   321,    -1,    -1,   324,
     325,   326,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,    -1,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,   400,   401,    -1,   403,   404,
     405,   406,   407,   408,   409,    -1,   411,   412,    -1,    -1,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,    -1,    -1,   430,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,    -1,
     445,   446,   447,    -1,   449,   450,   451,    -1,    -1,   454,
      -1,    -1,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,    -1,    -1,    -1,    -1,    -1,    -1,
     485,   486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,
      -1,    -1,    -1,    -1,   499,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    -1,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    -1,
      68,    69,    70,    71,    72,    -1,    74,    -1,    -1,    77,
      78,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    90,    91,    -1,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,   124,    -1,   126,   127,
     128,   129,    -1,    -1,   132,   133,   134,   135,   136,    -1,
      -1,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,    -1,   170,   171,   172,   173,   174,   175,    -1,   177,
      -1,    -1,    -1,   181,   182,    -1,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,    -1,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,    -1,    -1,   227,
     228,   229,   230,    -1,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,    -1,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,    -1,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,   317,
     318,   319,   320,   321,    -1,    -1,   324,   325,   326,   327,
     328,   329,   330,   331,   332,    -1,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,    -1,   400,   401,    -1,   403,   404,   405,   406,   407,
     408,   409,    -1,   411,   412,    -1,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,   431,   432,   433,   434,   435,    -1,   437,
     438,   439,   440,   441,   442,   443,    -1,   445,   446,   447,
      -1,   449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,    -1,    -1,    -1,    -1,    -1,    -1,   485,   486,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   494,    -1,    -1,    -1,
      -1,   499,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    74,    -1,    -1,    77,    78,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,    -1,   126,   127,   128,   129,    -1,
      -1,   132,   133,   134,   135,   136,    -1,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,    -1,   170,
     171,   172,   173,   174,   175,    -1,   177,    -1,    -1,    -1,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,    -1,    -1,   227,   228,   229,   230,
      -1,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,    -1,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,    -1,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,    -1,   403,   404,   405,   406,   407,   408,   409,    -1,
     411,   412,    -1,    -1,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,   440,
     441,   442,   443,    -1,   445,   446,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,    -1,    -1,
      -1,    -1,    -1,    -1,   485,   486,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   494,    -1,    -1,    -1,    -1,   499,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      74,    -1,    -1,    77,    78,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,    -1,   170,   171,   172,   173,
     174,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,    -1,    -1,   227,   228,   229,   230,    -1,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,    -1,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
     404,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,   435,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,   446,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,    -1,    -1,    -1,
      -1,   485,   486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     494,    -1,    -1,    -1,    -1,   499,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    74,    -1,    -1,
      77,    78,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    89,    90,    91,    -1,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,    -1,
     117,   118,   119,   120,   121,   122,    -1,   124,    -1,   126,
     127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
      -1,    -1,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,    -1,   170,   171,   172,   173,   174,   175,    -1,
     177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,    -1,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,    -1,    -1,
     227,   228,   229,   230,    -1,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,    -1,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,    -1,
     307,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
     317,   318,   319,   320,   321,    -1,    -1,   324,   325,   326,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
      -1,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,    -1,   403,   404,   405,   406,
     407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,   440,   441,   442,   443,    -1,   445,   446,
     447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,    -1,    -1,    -1,    -1,    -1,    -1,   485,   486,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,    -1,    -1,
      -1,    -1,   499,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
      30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    -1,    68,    69,
      70,    71,    72,    -1,    74,    -1,    -1,    77,    78,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      90,    91,    -1,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,    -1,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,   124,    -1,   126,   127,   128,   129,
      -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,    -1,
     170,   171,   172,   173,   174,   175,    -1,   177,    -1,    -1,
      -1,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,    -1,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,    -1,    -1,   227,   228,   229,
     230,    -1,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,    -1,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,    -1,   267,    -1,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,    -1,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,   317,   318,   319,
     320,   321,    -1,    -1,   324,   325,   326,   327,   328,   329,
     330,   331,   332,    -1,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,    -1,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,    -1,
     400,   401,    -1,   403,   404,   405,   406,   407,   408,   409,
      -1,   411,   412,    -1,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,    -1,
     430,   431,   432,   433,   434,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,    -1,   445,   446,   447,    -1,   449,
     450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   485,   486,    -1,    -1,     3,
       4,     5,     6,     7,   494,     9,    10,    -1,    -1,   499,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      74,    -1,    -1,    77,    78,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,    -1,   170,   171,   172,   173,
     174,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,    -1,    -1,   227,   228,   229,   230,    -1,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,    -1,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
     404,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,   435,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,   446,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   485,   486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     494,    -1,    -1,    -1,    -1,   499,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    74,    -1,    -1,
      77,    78,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    89,    90,    91,    -1,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,    -1,   115,    -1,
     117,   118,   119,   120,   121,   122,    -1,   124,    -1,   126,
     127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
      -1,    -1,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,    -1,   170,   171,   172,   173,   174,   175,    -1,
     177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,    -1,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,    -1,
     217,   218,   219,   220,   221,   222,   223,   224,    -1,    -1,
     227,   228,   229,   230,    -1,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,    -1,
     267,    -1,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,    -1,
     307,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
     317,   318,   319,   320,   321,    -1,    -1,   324,   325,   326,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
      -1,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,    -1,   403,   404,   405,   406,
     407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,   440,   441,   442,   443,    -1,   445,   446,
     447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   485,   486,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,    -1,    -1,
      -1,    -1,   499,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
      30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    -1,    68,    69,
      70,    71,    72,    -1,    74,    -1,    -1,    77,    78,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      90,    91,    -1,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,   124,    -1,   126,   127,   128,   129,
      -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,    -1,
     170,   171,   172,   173,   174,   175,    -1,   177,    -1,    -1,
      -1,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,    -1,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,   219,
     220,   221,   222,   223,   224,    -1,    -1,   227,   228,   229,
     230,    -1,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,    -1,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,    -1,   267,    -1,   269,
     270,    -1,   272,   273,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,    -1,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,   317,   318,   319,
     320,   321,    -1,    -1,   324,   325,   326,   327,   328,   329,
     330,   331,   332,    -1,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,    -1,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,    -1,
     400,   401,    -1,   403,   404,   405,   406,   407,   408,   409,
      -1,   411,   412,    -1,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,    -1,
     430,   431,   432,   433,   434,   435,    -1,   437,   438,   439,
     440,   441,   442,   443,    -1,   445,   446,   447,    -1,   449,
     450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,    -1,
      -1,    -1,    -1,    -1,    -1,   485,   486,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   494,    -1,    -1,    -1,    -1,   499,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    44,    45,    46,    47,    -1,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    74,    -1,    -1,    77,    78,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,    -1,   117,   118,   119,   120,   121,   122,
      -1,   124,    -1,   126,   127,   128,   129,    -1,    -1,   132,
     133,   134,   135,   136,    -1,    -1,   139,   140,   141,    -1,
     143,    -1,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,    -1,   170,   171,   172,
     173,    -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,    -1,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,    -1,    -1,   218,   219,   220,   221,   222,
     223,   224,    -1,    -1,   227,   228,   229,    -1,    -1,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
      -1,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,    -1,   269,   270,    -1,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,    -1,   307,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,   321,    -1,
      -1,   324,   325,   326,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    -1,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,    -1,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,   400,   401,    -1,
     403,   404,   405,   406,   407,   408,   409,    -1,   411,   412,
      -1,    -1,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,   440,   441,   442,
     443,    -1,   445,   446,   447,    -1,   449,   450,   451,    -1,
      -1,   454,    -1,    -1,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,    -1,    -1,    -1,    -1,    -1,
      -1,     3,   485,   486,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   494,    -1,    -1,    -1,    -1,   499,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    36,    -1,    38,    39,    -1,    41,
      42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    -1,    -1,    -1,    77,    78,    79,    80,    -1,
      82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
      -1,    93,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,    -1,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,   124,    -1,   126,   127,   128,   129,    -1,    -1,
     132,   133,   134,   135,   136,    -1,    -1,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,    -1,   160,   161,
     162,   163,    -1,   165,    -1,   167,    -1,    -1,   170,   171,
     172,   173,    -1,   175,    -1,   177,    -1,    -1,    -1,   181,
     182,    -1,   184,   185,   186,   187,   188,   189,    -1,   191,
     192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,    -1,    -1,   218,   219,   220,   221,
     222,   223,   224,    -1,    -1,   227,   228,   229,    -1,    -1,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,   241,
     242,    -1,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,    -1,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
      -1,   293,    -1,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,    -1,   307,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,   317,   318,   319,   320,   321,
      -1,    -1,   324,   325,   326,   327,   328,   329,   330,   331,
     332,    -1,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
      -1,   373,   374,   375,   376,   377,    -1,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
      -1,   403,   404,   405,   406,   407,   408,   409,    -1,   411,
     412,    -1,    -1,   415,   416,   417,   418,   419,    -1,   421,
     422,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,    -1,    -1,   437,   438,   439,   440,   441,
     442,   443,    -1,   445,    -1,   447,    -1,   449,   450,   451,
      -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,    -1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   495,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    74,
      -1,    -1,    77,    78,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    90,    91,    -1,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,    -1,
     115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
      -1,   126,   127,   128,   129,    -1,    -1,   132,   133,   134,
     135,   136,    -1,    -1,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,    -1,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,    -1,   170,   171,   172,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,    -1,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
      -1,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,    -1,   227,   228,   229,   230,    -1,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,    -1,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,    -1,   269,   270,   271,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,   284,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,    -1,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,   317,   318,   319,   320,   321,    -1,    -1,   324,
     325,   326,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,    -1,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,    -1,   411,   412,    -1,    -1,
     415,   416,   417,   418,   419,    -1,   421,   422,   423,   424,
     425,   426,   427,    -1,    -1,   430,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,    -1,
     445,   446,   447,    -1,   449,   450,   451,    -1,    -1,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,    -1,     3,   480,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    74,    -1,    -1,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
      -1,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
     179,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,    -1,   227,   228,
     229,   230,    -1,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,    -1,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,   271,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,   284,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,   435,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,   446,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   494,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    74,    -1,    -1,    77,    78,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,    -1,   115,    -1,   117,   118,   119,   120,   121,   122,
      -1,   124,    -1,   126,   127,   128,   129,    -1,    -1,   132,
     133,   134,   135,   136,    -1,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,    -1,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,    -1,   170,   171,   172,
     173,   174,   175,    -1,   177,    -1,    -1,    -1,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,    -1,    -1,   227,   228,   229,   230,    -1,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
      -1,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,    -1,   269,   270,   271,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,    -1,   307,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,   321,    -1,
      -1,   324,   325,   326,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    -1,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,    -1,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,   400,   401,    -1,
     403,   404,   405,   406,   407,   408,   409,    -1,   411,   412,
      -1,    -1,   415,   416,   417,   418,   419,    -1,   421,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,   440,   441,   442,
     443,    -1,   445,   446,   447,    -1,   449,   450,   451,    -1,
      -1,   454,    -1,    -1,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   494,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    74,    -1,    -1,
      77,    78,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    89,    90,    91,    -1,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,    -1,   115,    -1,
     117,   118,   119,   120,   121,   122,    -1,   124,    -1,   126,
     127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
      -1,    -1,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
     167,   168,    -1,   170,   171,   172,   173,   174,   175,    -1,
     177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,    -1,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,    -1,    -1,
     227,   228,   229,   230,    -1,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,    -1,
     267,    -1,   269,   270,   271,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,    -1,
     307,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
     317,   318,   319,   320,   321,    -1,    -1,   324,   325,   326,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
      -1,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,    -1,   403,   404,   405,   406,
     407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
     417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,   440,   441,   442,   443,    -1,   445,   446,
     447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,     3,     4,     5,    -1,    -1,    -1,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    74,    -1,    -1,    77,    78,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    93,    94,    95,    96,    -1,    -1,    -1,   100,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,    -1,   126,   127,   128,   129,    -1,
      -1,   132,   133,   134,   135,   136,    -1,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,    -1,   170,
     171,   172,   173,   174,   175,    -1,   177,    -1,    -1,    -1,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,    -1,    -1,   227,   228,   229,   230,
      -1,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
     241,   242,    -1,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,    -1,   267,    -1,   269,   270,
     271,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,   283,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,    -1,   403,   404,   405,   406,   407,   408,   409,    -1,
     411,   412,    -1,    -1,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,    -1,   445,   446,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,    -1,     3,    -1,
      -1,    -1,    -1,    -1,   485,   486,   487,    -1,    -1,    -1,
      -1,    -1,    -1,   494,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    74,
      -1,    -1,    77,    78,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    90,    91,    -1,    93,    94,
      95,    96,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,    -1,
     115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
      -1,   126,   127,   128,   129,    -1,    -1,   132,   133,   134,
     135,   136,    -1,    -1,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,    -1,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,    -1,   170,   171,   172,   173,   174,
     175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
      -1,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
      -1,    -1,   227,   228,   229,   230,    -1,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,   241,   242,    -1,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,    -1,   269,   270,   271,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,    -1,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,   317,   318,   319,   320,   321,    -1,    -1,   324,
     325,   326,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,    -1,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,    -1,   411,   412,    -1,    -1,
     415,   416,   417,   418,   419,    -1,   421,   422,   423,   424,
     425,   426,   427,    -1,    -1,   430,   431,   432,   433,   434,
      -1,    -1,   437,   438,   439,   440,   441,   442,   443,    -1,
     445,   446,   447,    -1,   449,   450,   451,    -1,    -1,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,    -1,     3,   480,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    -1,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,    -1,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,   402,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
       3,   480,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   494,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    -1,    -1,    -1,    77,    78,    79,    80,    -1,    82,
      83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
      -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,    -1,   115,    -1,   117,   118,   119,   120,   121,   122,
      -1,   124,    -1,   126,   127,   128,   129,    -1,    -1,   132,
     133,   134,   135,   136,    -1,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,    -1,   160,   161,   162,
     163,    -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,
     173,    -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,    -1,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,
     223,   224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,   241,   242,
      -1,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,    -1,   262,
     263,   264,   265,    -1,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,
     293,    -1,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,    -1,   307,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,   321,    -1,
      -1,   324,   325,   326,   327,   328,   329,   330,   331,   332,
      -1,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    -1,   348,   349,    -1,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,    -1,
     373,   374,   375,   376,   377,    -1,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,   400,   401,   402,
     403,    -1,   405,   406,   407,   408,   409,    -1,   411,   412,
      -1,    -1,   415,   416,   417,   418,   419,    -1,   421,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,   440,   441,   442,
     443,    -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,
      -1,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,    -1,     3,   480,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   494,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
      47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    -1,
      77,    78,    79,    80,    -1,    82,    83,    84,    -1,    86,
      87,    88,    89,    90,    91,    -1,    -1,    94,    95,    96,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,    -1,   115,    -1,
     117,   118,   119,   120,   121,   122,    -1,   124,    -1,   126,
     127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
      -1,    -1,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
     167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,    -1,
     177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,   186,
     187,   188,   189,    -1,   191,   192,   193,   194,    -1,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,    -1,
      -1,   218,    -1,   220,   221,   222,   223,   224,    -1,    -1,
     227,    -1,   229,    -1,    -1,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,   241,   242,    -1,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,    -1,   262,   263,   264,   265,    -1,
     267,    -1,   269,   270,    -1,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,    -1,   293,    -1,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,    -1,
     307,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
     317,   318,   319,   320,   321,    -1,    -1,   324,   325,   326,
     327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
      -1,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
     377,    -1,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,    -1,   403,    -1,   405,   406,
     407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
     417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,   440,   441,   442,   443,    -1,   445,    -1,
     447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    -1,    77,    78,    79,    80,
      -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,    -1,   126,   127,   128,   129,    -1,
      -1,   132,   133,   134,   135,   136,    -1,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
     161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
     171,   172,   173,    -1,   175,    -1,   177,    -1,    -1,    -1,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,    -1,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,
     221,   222,   223,   224,    -1,    -1,   227,    -1,   229,    -1,
      -1,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
     241,   242,    -1,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
      -1,   262,   263,   264,   265,    -1,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
     411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,    -1,   445,    -1,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   494,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,
      45,    46,    47,    48,    49,    -1,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    -1,
      -1,    -1,    77,    78,    79,    80,    -1,    82,    83,    84,
      -1,    86,    87,    88,    89,    90,    91,    -1,    -1,    94,
      95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,    -1,
     115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
      -1,   126,   127,   128,   129,    -1,    -1,   132,   133,   134,
     135,   136,    -1,    -1,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,    -1,   160,   161,   162,   163,    -1,
     165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,
     175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,
     185,   186,   187,   188,   189,    -1,   191,   192,   193,   194,
      -1,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,    -1,    -1,   218,    -1,   220,   221,   222,   223,   224,
      -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,   241,   242,    -1,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,    -1,   262,   263,   264,
     265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,    -1,   293,    -1,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,    -1,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,   317,   318,   319,   320,   321,    -1,    -1,   324,
     325,   326,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,    -1,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,   369,   370,   371,    -1,   373,   374,
     375,   376,   377,    -1,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,   400,   401,    -1,   403,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,    -1,    -1,
     415,   416,   417,   418,   419,    -1,   421,   422,   423,   424,
     425,   426,   427,    -1,    -1,   430,   431,   432,   433,   434,
      -1,    -1,   437,   438,   439,   440,   441,   442,   443,    -1,
     445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,   454,
      -1,    -1,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    -1,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
      -1,    -1,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,    -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,   241,   242,    -1,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,    -1,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,    -1,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
      -1,    -1,    -1,     3,     4,     5,    -1,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,   494,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    -1,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,    -1,   152,   153,   154,   155,    -1,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,    -1,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,    -1,   292,   293,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,    -1,
     310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,    -1,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,    -1,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   474,   475,   476,   477,    -1,     3,
      -1,   481,   482,   483,     8,   485,   486,   487,   488,   489,
     490,    -1,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    -1,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,    -1,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,    -1,    -1,   227,    -1,   229,    -1,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,   241,   242,    -1,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,    -1,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,    -1,    -1,    -1,   481,   482,   483,
      -1,   485,   486,   487,   488,   489,   490,     8,    -1,    -1,
      11,    -1,    -1,    -1,    -1,    16,    17,    18,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    33,    16,    17,    18,    -1,    -1,    -1,    -1,
      41,    -1,    -1,     8,    -1,    -1,    11,    48,    -1,    -1,
      33,    16,    17,    18,    -1,    -1,    -1,    -1,    41,    -1,
      -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    33,    -1,
      -1,     8,    73,    -1,    11,    -1,    41,    -1,    -1,    16,
      17,    18,    -1,    48,    -1,    -1,    -1,    -1,    -1,     8,
      73,    -1,    11,    -1,    -1,    -1,    33,    16,    17,    18,
      -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    73,    -1,
      -1,    48,    -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    41,    -1,    -1,    -1,    -1,    -1,    -1,    48,
      -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    -1,    16,    17,    18,
      -1,    -1,    -1,   174,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    33,    16,    17,    18,    -1,   190,
      -1,   174,    41,    -1,   195,    -1,    -1,    -1,    -1,    48,
      -1,    -1,    33,    -1,    -1,    -1,    -1,   190,    -1,   174,
      41,    -1,   195,    -1,    -1,   216,   217,    48,    -1,    -1,
      -1,    -1,    -1,    -1,    73,   190,    -1,    -1,    -1,   230,
     195,    -1,    -1,   216,   217,    -1,    -1,   174,    -1,    -1,
      -1,    -1,    73,    -1,    -1,    -1,    -1,   230,    -1,    -1,
      -1,   216,   217,   190,    -1,   174,    -1,    -1,   195,    -1,
      -1,    -1,    -1,    -1,    -1,   230,    -1,   268,    -1,    -1,
     271,   190,    -1,    -1,    -1,    -1,   195,    -1,    -1,   216,
     217,    -1,    -1,    -1,   285,   268,    -1,   288,   271,    -1,
      -1,    -1,    -1,   230,    -1,    -1,    -1,   216,   217,    -1,
      -1,    -1,   285,   268,    -1,   288,   271,    -1,    -1,    -1,
      -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     285,    -1,    -1,   288,    -1,   174,    -1,    -1,    -1,    -1,
      -1,   268,    -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,
      -1,   190,    -1,   174,    -1,    -1,   195,    -1,   285,   268,
      -1,   288,   271,    -1,    -1,    -1,    -1,    -1,    -1,   190,
      -1,    -1,    -1,    -1,   195,    -1,   285,   216,   217,   288,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,    -1,    -1,
      -1,   230,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   378,    -1,    -1,    -1,   230,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   378,    -1,    -1,    -1,    -1,    -1,   268,
      -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,   268,    -1,   288,
     271,   378,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,   378,
      -1,    23,    -1,    -1,    -1,    -1,    -1,    29,    -1,    -1,
      -1,    -1,    -1,    -1,    36,    -1,    -1,   478,    -1,    -1,
     481,   482,   483,    -1,   485,   486,   487,   488,   489,   490,
      -1,    -1,    -1,    55,   495,   478,    -1,    -1,   481,   482,
     483,    -1,   485,   486,   487,   488,   489,   490,    -1,    -1,
      -1,    -1,   495,   478,    -1,    -1,   481,   482,   483,    -1,
     485,   486,   487,   488,   489,   490,    -1,    -1,    -1,   378,
     495,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   478,    -1,   105,   481,   482,   483,   378,   485,   486,
     487,   488,   489,   490,    -1,    -1,    -1,    -1,   495,   478,
      -1,    -1,   481,   482,   483,    -1,   485,   486,   487,   488,
     489,   490,    -1,   135,    -1,    -1,   495,     8,    -1,    -1,
      11,    -1,    -1,    -1,    -1,    16,    17,    18,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      41,    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   478,
      -1,    -1,   481,   482,   483,   197,   485,   486,   487,   488,
     489,   490,    73,    -1,    -1,    -1,   495,   478,    -1,    -1,
     481,   482,   483,    -1,   485,   486,   487,   488,   489,   490,
      -1,    -1,    -1,    -1,   495,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   245,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   253,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   265,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   287,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   297,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   174,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   190,
      -1,    -1,    -1,    -1,   195,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   340,    -1,
      -1,    -1,   344,   345,    -1,   216,   217,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   230,
      -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,
      -1,   373,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   388,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,    -1,    -1,
     271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   439,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   478,     3,    -1,
     481,   482,   483,    -1,   485,   486,   487,   488,   489,   490,
      -1,    -1,   493,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   487,    -1,    -1,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
      30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      -1,    41,    42,    43,    -1,    45,    46,    47,    48,    49,
      -1,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      -1,    -1,    62,    63,    64,    65,    66,    -1,    68,    69,
      70,    71,    72,    -1,    -1,    -1,    -1,    77,    78,    79,
      80,    -1,    82,    83,    84,    -1,    86,    87,    88,    89,
      90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,    -1,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,   124,    -1,   126,   127,   128,   129,
      -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,    -1,   158,    -1,
     160,   161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,
      -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,    -1,
      -1,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
      -1,   191,   192,   193,   194,    -1,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,    -1,
     220,   221,   222,   223,   224,    -1,    -1,   227,    -1,   229,
      -1,    -1,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,   241,   242,    -1,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,    -1,   262,   263,   264,   265,    -1,   267,    -1,   269,
     270,    -1,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,    -1,   293,    -1,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,    -1,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,   317,   318,   319,
     320,   321,    -1,    -1,   324,   325,   326,   327,   328,   329,
     330,   331,   332,    -1,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,    -1,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,   369,
     370,   371,    -1,   373,   374,   375,   376,   377,    -1,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,    -1,
     400,   401,    -1,   403,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,    -1,    -1,   415,   416,   417,   418,   419,
      -1,   421,   422,   423,   424,   425,   426,   427,    -1,    -1,
     430,   431,   432,   433,   434,    -1,    -1,   437,   438,   439,
     440,   441,   442,   443,    -1,   445,    -1,   447,    -1,   449,
     450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,     3,     4,
       5,    -1,    -1,    -1,     9,    -1,    -1,   487,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    74,
      -1,    -1,    77,    78,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    90,    91,    -1,    93,    94,
      95,    96,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
      -1,   126,   127,   128,   129,    -1,    -1,   132,   133,   134,
     135,   136,    -1,    -1,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,    -1,   170,   171,   172,   173,   174,
     175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
      -1,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
      -1,    -1,   227,   228,   229,   230,    -1,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,   241,   242,    -1,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,    -1,   269,   270,   271,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,   283,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,    -1,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,   317,   318,   319,   320,   321,    -1,    -1,   324,
     325,   326,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,    -1,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,   369,   370,   371,    -1,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,   400,   401,    -1,   403,   404,
     405,   406,   407,   408,   409,    -1,   411,   412,    -1,    -1,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,    -1,    -1,   430,   431,   432,   433,   434,
      -1,    -1,   437,   438,   439,   440,   441,   442,   443,    -1,
     445,   446,   447,    -1,   449,   450,   451,    -1,    -1,   454,
      -1,    -1,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,     3,     4,     5,    -1,    -1,    -1,     9,
     485,   486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
      30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      -1,    -1,    62,    63,    64,    65,    66,    -1,    68,    69,
      70,    71,    72,    -1,    74,    -1,    -1,    77,    78,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      90,    91,    -1,    93,    94,    95,    96,    -1,    -1,    -1,
     100,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,   124,    -1,   126,   127,   128,   129,
      -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,    -1,
     170,   171,   172,   173,   174,   175,    -1,   177,    -1,    -1,
      -1,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,    -1,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,    -1,    -1,   227,   228,   229,
     230,    -1,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,   241,   242,    -1,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,    -1,   267,    -1,   269,
     270,   271,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,   283,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,    -1,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,   317,   318,   319,
     320,   321,    -1,    -1,   324,   325,   326,   327,   328,   329,
     330,   331,   332,    -1,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,    -1,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,   369,
     370,   371,    -1,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,    -1,
     400,   401,    -1,   403,   404,   405,   406,   407,   408,   409,
      -1,   411,   412,    -1,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,    -1,
     430,   431,   432,   433,   434,    -1,    -1,   437,   438,   439,
     440,   441,   442,   443,    -1,   445,   446,   447,    -1,   449,
     450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,     3,     4,
       5,    -1,    -1,    -1,     9,   485,   486,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    74,
      -1,    -1,    77,    78,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    90,    91,    -1,    93,    94,
      95,    96,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,    -1,
     115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
      -1,   126,   127,   128,   129,    -1,    -1,   132,   133,   134,
     135,   136,    -1,    -1,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,    -1,   170,   171,   172,   173,   174,
     175,    -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
      -1,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
      -1,    -1,   227,   228,   229,   230,    -1,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,   241,   242,    -1,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,    -1,   269,   270,   271,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,   283,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,    -1,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,   317,   318,   319,   320,   321,    -1,    -1,   324,
     325,   326,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,    -1,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    -1,   367,   368,   369,   370,   371,    -1,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,   400,   401,    -1,   403,   404,
     405,   406,   407,   408,   409,    -1,   411,   412,    -1,    -1,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,    -1,    -1,   430,   431,   432,   433,   434,
      -1,    -1,   437,   438,   439,   440,   441,   442,   443,    -1,
     445,   446,   447,    -1,   449,   450,   451,    -1,    -1,   454,
      -1,    -1,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,    -1,     8,    -1,    -1,    11,    -1,    -1,
     485,   486,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    33,
      16,    17,    18,    37,    -1,    -1,    -1,    41,    -1,    -1,
       8,    -1,    -1,    11,    48,    -1,    -1,    33,    16,    17,
      18,    -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,
      -1,    -1,    48,    -1,    -1,    33,    -1,    -1,     8,    73,
      -1,    11,    -1,    41,    -1,    -1,    16,    17,    18,    -1,
      48,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,
      -1,    -1,    -1,    33,    -1,    -1,    36,    -1,    -1,    -1,
      -1,    41,    -1,    -1,    -1,    73,    -1,    -1,    48,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    73,    -1,    -1,    16,    17,    18,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    41,    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,
     174,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   164,    -1,
      -1,    -1,    -1,   169,    -1,    -1,   190,    -1,   174,    -1,
      -1,   195,    -1,    73,    -1,   163,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   190,    -1,   174,    -1,    -1,   195,
      -1,    -1,   216,   217,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   190,    -1,    -1,    -1,   230,   195,    -1,    -1,
     216,   217,    -1,    -1,   174,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,   216,   217,
     190,    -1,    -1,    -1,    -1,   195,    -1,    -1,    -1,    -1,
      -1,    -1,   230,    -1,   268,    -1,    -1,   271,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   216,   217,    -1,    -1,
      -1,   285,   268,    -1,   288,   271,    -1,    -1,    -1,    -1,
     230,    -1,    -1,    -1,   174,    -1,    -1,    -1,    -1,   285,
     268,    -1,   288,   271,    -1,    -1,    -1,    -1,    -1,    -1,
     190,    -1,    -1,    -1,    -1,   195,    -1,   285,    -1,    -1,
     288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,    -1,
      -1,   271,    -1,    -1,    -1,    -1,   216,   217,    -1,    -1,
      -1,    -1,    -1,   311,    -1,   285,    -1,    -1,   288,    -1,
     230,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    -1,    16,    17,    18,    -1,    -1,
      -1,    -1,    -1,    -1,   378,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    33,    -1,    -1,    36,    -1,    -1,   268,    -1,
      41,   271,   378,    -1,    -1,    -1,    -1,    48,    -1,    -1,
      -1,    -1,    -1,     8,    -1,   285,    11,    -1,   288,    -1,
     378,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    73,    -1,    -1,    -1,   306,    -1,    33,    -1,
      -1,    -1,   436,    -1,    -1,    -1,    41,    -1,   378,    -1,
      -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,
      -1,    -1,    -1,    -1,   478,    -1,    -1,   481,   482,   483,
      -1,   485,   486,   487,   488,   489,   490,    -1,    -1,    -1,
      -1,    -1,   478,    -1,    -1,   481,   482,   483,   378,   485,
     486,   487,   488,   489,   490,    -1,    -1,    -1,    -1,    -1,
     478,    -1,    -1,   481,   482,   483,    -1,   485,   486,   487,
     488,   489,   490,   174,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    -1,    16,    17,    18,   478,   190,
      -1,   481,   482,   483,   195,   485,   486,   487,   488,   489,
     490,    -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      41,    -1,    -1,    -1,   169,   216,   217,    48,    -1,   174,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   230,
      -1,    -1,    -1,    -1,    -1,   190,    -1,    -1,    -1,    -1,
     195,    -1,    73,    -1,    -1,    -1,    -1,    -1,   478,    -1,
      -1,   481,   482,   483,    -1,   485,   486,   487,   488,   489,
     490,   216,   217,    -1,    -1,    -1,    -1,   268,    -1,    -1,
     271,    -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    -1,
      16,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   268,    -1,    -1,   271,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,     8,    -1,
     285,    11,    48,   288,    -1,    -1,    16,    17,    18,    -1,
      -1,    -1,    -1,   174,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    33,    -1,    -1,    -1,    73,    -1,   190,
      -1,    41,    -1,    -1,   195,    -1,    -1,    -1,    48,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,
      -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,   230,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    -1,    16,    17,    18,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   378,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,    41,    -1,
     271,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,   174,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      73,    -1,    -1,    -1,   190,    -1,    -1,   478,    -1,   195,
     481,   482,   483,    -1,   485,   486,   487,   488,   489,   490,
      -1,    -1,    -1,    -1,   174,    -1,    -1,    -1,    -1,    -1,
     216,   217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     190,    -1,    -1,    -1,   230,   195,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   478,    -1,    -1,   481,   482,   483,    -1,
     485,   486,   487,   488,   489,   490,   216,   217,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,    -1,    -1,
     230,    -1,   268,    -1,    -1,   271,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,
      -1,   174,   288,    -1,    -1,    -1,    -1,    -1,    -1,   410,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   190,   268,    -1,
      -1,   271,   195,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   216,   217,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   230,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    -1,    16,    17,
      18,    -1,    -1,    -1,    -1,    -1,    -1,   478,    -1,    -1,
     481,   482,   483,    -1,   485,   486,   487,   488,   489,   490,
      -1,    -1,   378,    41,    -1,   268,    -1,    -1,   271,    -1,
      48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,   378,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   478,    -1,    -1,   481,   482,   483,    -1,   485,
     486,   487,   488,   489,   490,   378,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   174,    -1,   478,    -1,
      -1,   481,   482,   483,    -1,   485,   486,   487,   488,   489,
     490,    -1,   190,    -1,    -1,    -1,    -1,   195,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   216,   217,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   478,    -1,    -1,   481,   482,
     483,    -1,   485,   486,   487,   488,   489,   490,    -1,    -1,
      -1,    -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     378,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,     5,
     478,    -1,    -1,   481,   482,   483,    -1,   485,   486,   487,
     488,   489,   490,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    74,    -1,    -1,    77,    78,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,    -1,   126,   127,   128,   129,    -1,
      -1,   132,   133,   134,   135,   136,    -1,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,    -1,   170,
     171,   172,   173,   174,   175,    -1,   177,    -1,    -1,    -1,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,    -1,    -1,   227,   228,   229,   230,
      -1,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,    -1,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,    -1,   267,    -1,   269,   270,
     271,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,    -1,   403,   404,   405,   406,   407,   408,   409,    -1,
     411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,   440,
     441,   442,   443,    -1,   445,   446,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    74,    -1,
      -1,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    93,    94,    95,
      96,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,    -1,
     126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
     136,    -1,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
      -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,    -1,
      -1,   227,   228,   229,   230,    -1,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,   241,   242,    -1,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
      -1,   267,    -1,   269,   270,   271,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,   283,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,   400,   401,    -1,   403,   404,   405,
     406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,   440,   441,   442,   443,    -1,   445,
     446,   447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      31,    32,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    74,    -1,    -1,    77,    78,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    93,    94,    95,    96,    -1,    -1,    -1,   100,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,    -1,   126,   127,   128,   129,    -1,
      -1,   132,   133,   134,   135,   136,    -1,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,    -1,   170,
     171,   172,   173,   174,   175,    -1,   177,    -1,    -1,    -1,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,    -1,    -1,   227,   228,   229,   230,
      -1,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
     241,   242,    -1,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,    -1,   267,    -1,   269,   270,
     271,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,    -1,   403,   404,   405,   406,   407,   408,   409,    -1,
     411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,    -1,   445,   446,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    74,    -1,
      -1,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    93,    94,    95,
      96,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,    -1,
     126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
     136,    -1,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
      -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,    -1,
      -1,   227,   228,   229,   230,    -1,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,   241,   242,    -1,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
      -1,   267,    -1,   269,   270,   271,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,   400,   401,    -1,   403,   404,   405,
     406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,   440,   441,   442,   443,    -1,   445,
     446,   447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    -1,    -1,    75,    -1,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,    -1,   126,   127,   128,   129,    -1,
      -1,   132,   133,   134,   135,   136,    -1,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
     161,   162,   163,    -1,   165,   166,   167,    -1,    -1,    -1,
     171,   172,   173,    -1,   175,    -1,   177,    -1,    -1,    -1,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,    -1,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,
     221,   222,   223,   224,    -1,    -1,   227,    -1,   229,    -1,
      -1,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
     241,   242,    -1,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
      -1,   262,   263,   264,   265,    -1,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
     411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,   429,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,    -1,   445,    -1,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
      46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    -1,    -1,    -1,
      -1,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
      96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,    -1,
     126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
     136,    -1,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
     166,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
      -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
      -1,    -1,   218,    -1,   220,   221,   222,   223,   224,    -1,
      -1,   227,    -1,   229,   230,    -1,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,   241,   242,    -1,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,    -1,   262,   263,   264,   265,
      -1,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,    -1,   293,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,   348,   349,    -1,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
     376,   377,    -1,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,   400,   401,    -1,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
     426,   427,    -1,   429,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,   440,   441,   442,   443,    -1,   445,
      -1,   447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      31,    32,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    -1,    77,    78,    79,    80,
      -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,    -1,   126,   127,   128,   129,    -1,
      -1,   132,   133,   134,   135,   136,    -1,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
     161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
     171,   172,   173,    -1,   175,    -1,   177,    -1,    -1,    -1,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,    -1,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,
     221,   222,   223,   224,    -1,    -1,   227,    -1,   229,    -1,
      -1,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
     241,   242,    -1,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
      -1,   262,   263,   264,   265,    -1,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
     411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,    -1,   445,    -1,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,     3,     4,    -1,
      -1,    -1,    -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
      46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
      -1,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
      96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,    -1,
     126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
     136,    -1,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
      -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
      -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
      -1,    -1,   218,    -1,   220,   221,   222,   223,   224,    -1,
      -1,   227,    -1,   229,    -1,    -1,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,   241,   242,    -1,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,    -1,   262,   263,   264,   265,
      -1,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,    -1,   293,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,   348,   349,    -1,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
     376,   377,    -1,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,   400,   401,    -1,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,   440,   441,   442,   443,    -1,   445,
      -1,   447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    -1,    77,    78,    79,    80,
      -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,    -1,   126,   127,   128,   129,    -1,
      -1,   132,   133,   134,   135,   136,    -1,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
     161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
     171,   172,   173,    -1,   175,    -1,   177,    -1,    -1,    -1,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,    -1,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,
     221,   222,   223,   224,    -1,    -1,   227,    -1,   229,    -1,
      -1,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
     241,   242,    -1,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
      -1,   262,   263,   264,   265,    -1,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
     411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,    -1,   445,    -1,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
      46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
      -1,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
      96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,    -1,
     126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
     136,    -1,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
      -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
      -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
      -1,    -1,   218,    -1,   220,   221,   222,   223,   224,    -1,
      -1,   227,    -1,   229,    -1,    -1,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,   241,   242,    -1,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,    -1,   262,   263,   264,   265,
      -1,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,    -1,   293,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,   348,   349,    -1,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
     376,   377,    -1,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,   400,   401,    -1,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,   440,   441,   442,   443,    -1,   445,
      -1,   447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    -1,    77,    78,    79,    80,
      -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,    -1,   126,   127,   128,   129,    -1,
      -1,   132,   133,   134,   135,   136,    -1,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
     161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
     171,   172,   173,    -1,   175,    -1,   177,    -1,    -1,    -1,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,    -1,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,
     221,   222,   223,   224,    -1,    -1,   227,    -1,   229,    -1,
      -1,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
     241,   242,    -1,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
      -1,   262,   263,   264,   265,    -1,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,   284,   285,   286,   287,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
     411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,    -1,   445,    -1,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
      46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
      -1,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
      96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,    -1,
     126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
     136,    -1,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
      -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
      -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
      -1,    -1,   218,    -1,   220,   221,   222,   223,   224,    -1,
      -1,   227,    -1,   229,    -1,    -1,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,   241,   242,    -1,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,    -1,   262,   263,   264,   265,
      -1,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,   284,   285,
     286,   287,    -1,    -1,   290,   291,    -1,   293,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,   348,   349,    -1,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
     376,   377,    -1,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,   400,   401,    -1,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,   440,   441,   442,   443,    -1,   445,
      -1,   447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    -1,    77,    78,    79,    80,
      -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,    -1,   126,   127,   128,   129,    -1,
      -1,   132,   133,   134,   135,   136,    -1,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
     161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
     171,   172,   173,    -1,   175,    -1,   177,    -1,    -1,    -1,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,    -1,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,
     221,   222,   223,   224,    -1,    -1,   227,    -1,   229,    -1,
      -1,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
     241,   242,    -1,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
      -1,   262,   263,   264,   265,    -1,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
     411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,    -1,   445,    -1,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
      46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
      -1,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
      96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,    -1,
     126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
     136,    -1,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
      -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
      -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
      -1,    -1,   218,    -1,   220,   221,   222,   223,   224,    -1,
      -1,   227,    -1,   229,    -1,    -1,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,   241,   242,    -1,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,    -1,   262,   263,   264,   265,
      -1,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,    -1,   293,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,   348,   349,    -1,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
     376,   377,    -1,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,   400,   401,   402,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,   440,   441,   442,   443,    -1,   445,
      -1,   447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    36,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    -1,    77,    78,    79,    80,
      -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,    -1,   126,   127,   128,   129,    -1,
      -1,   132,   133,   134,   135,   136,    -1,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
     161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
     171,   172,   173,    -1,   175,    -1,   177,    -1,    -1,    -1,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,    -1,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,
     221,   222,   223,   224,    -1,    -1,   227,    -1,   229,    -1,
      -1,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
     241,   242,    -1,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
      -1,   262,   263,   264,   265,    -1,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
     411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,    -1,   445,    -1,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      36,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
      46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
      -1,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
      96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,    -1,
     126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
     136,    -1,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
      -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
      -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
      -1,    -1,   218,    -1,   220,   221,   222,   223,   224,    -1,
      -1,   227,    -1,   229,    -1,    -1,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,   241,   242,    -1,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,    -1,   262,   263,   264,   265,
      -1,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,    -1,   293,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,   348,   349,    -1,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
     376,   377,    -1,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,   400,   401,    -1,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,   440,   441,   442,   443,    -1,   445,
      -1,   447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    -1,    77,    78,    79,    80,
      -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,    -1,   126,   127,   128,   129,    -1,
      -1,   132,   133,   134,   135,   136,    -1,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
     161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
     171,   172,   173,    -1,   175,    -1,   177,    -1,    -1,    -1,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,    -1,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,
     221,   222,   223,   224,    -1,    -1,   227,    -1,   229,    -1,
      -1,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
     241,   242,    -1,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
      -1,   262,   263,   264,   265,    -1,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
     411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,    -1,   445,    -1,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
      46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
      -1,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
      96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,    -1,
     126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
     136,    -1,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
      -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
      -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
      -1,    -1,   218,    -1,   220,   221,   222,   223,   224,    -1,
      -1,   227,    -1,   229,    -1,    -1,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,   241,   242,    -1,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,    -1,   262,   263,   264,   265,
      -1,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,    -1,   293,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,   348,   349,    -1,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
     376,   377,    -1,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,   400,   401,    -1,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,   440,   441,   442,   443,    -1,   445,
      -1,   447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    -1,    77,    78,    79,    80,
      -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,    -1,   126,   127,   128,   129,    -1,
      -1,   132,   133,   134,   135,   136,    -1,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
     161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
     171,   172,   173,    -1,   175,    -1,   177,    -1,    -1,    -1,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,    -1,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,
     221,   222,   223,   224,    -1,    -1,   227,    -1,   229,    -1,
      -1,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
     241,   242,    -1,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
      -1,   262,   263,   264,   265,    -1,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
     411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,    -1,   445,    -1,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
      46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
      -1,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
      96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,    -1,
     126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
     136,    -1,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
      -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
      -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
      -1,    -1,   218,    -1,   220,   221,   222,   223,   224,    -1,
      -1,   227,    -1,   229,    -1,    -1,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,   241,   242,    -1,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,    -1,   262,   263,   264,   265,
      -1,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,    -1,   293,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,   348,   349,    -1,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
     376,   377,    -1,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,   400,   401,    -1,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,   440,   441,   442,   443,    -1,   445,
      -1,   447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    -1,    77,    78,    79,    80,
      -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,    -1,   126,   127,   128,   129,    -1,
      -1,   132,   133,   134,   135,   136,    -1,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
     161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
     171,   172,   173,    -1,   175,    -1,   177,    -1,    -1,    -1,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,    -1,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,
     221,   222,   223,   224,    -1,    -1,   227,    -1,   229,    -1,
      -1,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
     241,   242,    -1,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
      -1,   262,   263,   264,   265,    -1,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
     411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,    -1,   445,    -1,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
      46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
      -1,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
      96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,    -1,
     126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
     136,    -1,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
      -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
      -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
      -1,    -1,   218,    -1,   220,   221,   222,   223,   224,    -1,
      -1,   227,    -1,   229,    -1,    -1,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,   241,   242,    -1,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,    -1,   262,   263,   264,   265,
      -1,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,    -1,   293,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,   348,   349,    -1,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
     376,   377,    -1,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,   400,   401,    -1,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,   440,   441,   442,   443,    -1,   445,
      -1,   447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    -1,    77,    78,    79,    80,
      -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,    -1,   126,   127,   128,   129,    -1,
      -1,   132,   133,   134,   135,   136,    -1,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
     161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
     171,   172,   173,    -1,   175,    -1,   177,    -1,    -1,    -1,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,    -1,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,
     221,   222,   223,   224,    -1,    -1,   227,    -1,   229,    -1,
      -1,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
     241,   242,    -1,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
      -1,   262,   263,   264,   265,    -1,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
     411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,    -1,   445,    -1,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
      46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
      -1,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
      96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,    -1,
     126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
     136,    -1,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
      -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
      -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
      -1,    -1,   218,    -1,   220,   221,   222,   223,   224,    -1,
      -1,   227,    -1,   229,    -1,    -1,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,   241,   242,    -1,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,    -1,   262,   263,   264,   265,
      -1,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,    -1,   293,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,   348,   349,    -1,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
     376,   377,    -1,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,   400,   401,    -1,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,   440,   441,   442,   443,    -1,   445,
      -1,   447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    -1,    77,    78,    79,    80,
      -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,    -1,   126,   127,   128,   129,    -1,
      -1,   132,   133,   134,   135,   136,    -1,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
     161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
     171,   172,   173,    -1,   175,    -1,   177,    -1,    -1,    -1,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,    -1,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,
     221,   222,   223,   224,    -1,    -1,   227,    -1,   229,    -1,
      -1,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
     241,   242,    -1,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
      -1,   262,   263,   264,   265,    -1,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
     411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,    -1,   445,    -1,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
      46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
      -1,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
      96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,    -1,
     126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
     136,    -1,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
      -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
      -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
      -1,    -1,   218,    -1,   220,   221,   222,   223,   224,    -1,
      -1,   227,    -1,   229,    -1,    -1,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,   241,   242,    -1,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,    -1,   262,   263,   264,   265,
      -1,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,    -1,   293,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,   348,   349,    -1,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
     376,   377,    -1,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,   400,   401,    -1,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,   440,   441,   442,   443,    -1,   445,
      -1,   447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    -1,    77,    78,    79,    80,
      -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,    -1,   126,   127,   128,   129,    -1,
      -1,   132,   133,   134,   135,   136,    -1,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
     161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
     171,   172,   173,    -1,   175,    -1,   177,    -1,    -1,    -1,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,    -1,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,
     221,   222,   223,   224,    -1,    -1,   227,    -1,   229,    -1,
      -1,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
     241,   242,    -1,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
      -1,   262,   263,   264,   265,    -1,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
     411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,    -1,   445,    -1,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
      46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
      -1,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
      96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,    -1,
     126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
     136,    -1,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
      -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
      -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
      -1,    -1,   218,    -1,   220,   221,   222,   223,   224,    -1,
      -1,   227,    -1,   229,    -1,    -1,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,   241,   242,    -1,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,    -1,   262,   263,   264,   265,
      -1,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,    -1,   293,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,   348,   349,    -1,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
     376,   377,    -1,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,   400,   401,    -1,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,   440,   441,   442,   443,    -1,   445,
      -1,   447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    -1,    77,    78,    79,    80,
      -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,    -1,   126,   127,   128,   129,    -1,
      -1,   132,   133,   134,   135,   136,    -1,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
     161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
     171,   172,   173,    -1,   175,    -1,   177,    -1,    -1,    -1,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,    -1,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,
     221,   222,   223,   224,    -1,    -1,   227,    -1,   229,    -1,
      -1,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
     241,   242,    -1,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
      -1,   262,   263,   264,   265,    -1,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
     411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,    -1,   445,    -1,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
      46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
      -1,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
      96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,    -1,
     126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
     136,    -1,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
      -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
      -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
      -1,    -1,   218,    -1,   220,   221,   222,   223,   224,    -1,
      -1,   227,    -1,   229,    -1,    -1,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,   241,   242,    -1,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,    -1,   262,   263,   264,   265,
      -1,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,    -1,   293,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,   348,   349,    -1,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
     376,   377,    -1,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,   400,   401,    -1,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,   440,   441,   442,   443,    -1,   445,
      -1,   447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    36,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    -1,    77,    78,    79,    80,
      -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,    -1,   126,   127,   128,   129,    -1,
      -1,   132,   133,   134,   135,   136,    -1,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
     161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
     171,   172,   173,    -1,   175,    -1,   177,    -1,    -1,    -1,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,    -1,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,
     221,   222,   223,   224,    -1,    -1,   227,    -1,   229,    -1,
      -1,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
     241,   242,    -1,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
      -1,   262,   263,   264,   265,    -1,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,    -1,    -1,   374,   375,   376,   377,    -1,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
     411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,    -1,   445,    -1,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
      46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
      -1,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
      96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,    -1,
     126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
     136,    -1,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
      -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
      -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
      -1,    -1,   218,    -1,   220,   221,   222,   223,   224,    -1,
      -1,   227,    -1,   229,    -1,    -1,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,   241,   242,    -1,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,    -1,   262,   263,   264,   265,
      -1,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,    -1,   293,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,   348,   349,    -1,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
     376,   377,    -1,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,   400,   401,    -1,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,   440,   441,   442,   443,    -1,   445,
      -1,   447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    -1,    77,    78,    79,    80,
      -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,    -1,   126,   127,   128,   129,    -1,
      -1,   132,   133,   134,   135,   136,    -1,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
     161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
     171,   172,   173,    -1,   175,    -1,   177,    -1,    -1,    -1,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,    -1,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,
     221,   222,   223,   224,    -1,    -1,   227,    -1,   229,    -1,
      -1,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
     241,   242,    -1,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
      -1,   262,   263,   264,   265,    -1,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
     411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,    -1,   445,    -1,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
      46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
      -1,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
      96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,    -1,
     126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
     136,    -1,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
      -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
      -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
      -1,    -1,   218,    -1,   220,   221,   222,   223,   224,    -1,
      -1,   227,    -1,   229,    -1,    -1,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,   241,   242,    -1,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,    -1,   262,   263,   264,   265,
      -1,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,    -1,   293,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,   348,   349,    -1,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
     376,   377,    -1,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,   400,   401,    -1,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,   440,   441,   442,   443,    -1,   445,
      -1,   447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    -1,    77,    78,    79,    80,
      -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,    -1,   126,   127,   128,   129,    -1,
      -1,   132,   133,   134,   135,   136,    -1,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
     161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
     171,   172,   173,    -1,   175,    -1,   177,    -1,    -1,    -1,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,    -1,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,
     221,   222,   223,   224,    -1,    -1,   227,    -1,   229,    -1,
      -1,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
     241,   242,    -1,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
      -1,   262,   263,   264,   265,    -1,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
     411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,    -1,   445,    -1,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
      46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
      -1,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
      96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,    -1,
     126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
     136,    -1,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
      -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
      -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
      -1,    -1,   218,    -1,   220,   221,   222,   223,   224,    -1,
      -1,   227,    -1,   229,    -1,    -1,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,   241,   242,    -1,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,    -1,   262,   263,   264,   265,
      -1,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,    -1,   293,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,   348,   349,    -1,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
     376,   377,    -1,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,   400,   401,    -1,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,   440,   441,   442,   443,    -1,   445,
      -1,   447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    -1,    77,    78,    79,    80,
      -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,    -1,   126,   127,   128,   129,    -1,
      -1,   132,   133,   134,   135,   136,    -1,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
     161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
     171,   172,   173,    -1,   175,    -1,   177,    -1,    -1,    -1,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,    -1,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,
     221,   222,   223,   224,    -1,    -1,   227,    -1,   229,    -1,
      -1,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
     241,   242,    -1,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
      -1,   262,   263,   264,   265,    -1,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
     411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,    -1,   445,    -1,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    -1,    -1,    74,    -1,
      -1,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    93,    94,    95,
      96,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,    -1,
     126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
     136,    -1,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,    -1,   152,   153,   154,   155,
      -1,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
      -1,   177,    -1,    -1,    -1,    -1,   182,    -1,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,    -1,
      -1,   227,   228,   229,   230,    -1,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,   241,   242,    -1,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
      -1,    -1,    -1,   269,   270,   271,   272,    -1,    -1,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,    -1,   292,   293,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,    -1,   310,   311,    -1,   313,   314,   315,
      -1,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
     326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,    -1,    -1,   400,   401,    -1,   403,   404,   405,
     406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
     416,    -1,   418,    -1,    -1,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,   440,   441,    -1,   443,    -1,   445,
     446,   447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,
      -1,   457,   458,   459,   460,   461,   462,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   474,   475,
     476,   477,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
      46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
      -1,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
      96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,    -1,
     126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
     136,    -1,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
      -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
      -1,   177,    -1,    -1,    -1,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
      -1,    -1,   218,    -1,   220,   221,   222,   223,   224,    -1,
      -1,   227,    -1,   229,    -1,    -1,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,   241,   242,    -1,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,    -1,   262,   263,   264,   265,
      -1,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,    -1,   293,    -1,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
      -1,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
      -1,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,   348,   349,    -1,   351,   352,   353,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
     376,   377,    -1,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,   400,   401,    -1,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,   440,   441,   442,   443,    -1,   445,
      -1,   447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    44,    45,    46,    47,    -1,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    -1,    -1,    74,    -1,    -1,    77,    78,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    93,    94,    95,    96,    -1,    -1,    -1,   100,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,    -1,   126,   127,   128,   129,    -1,
      -1,   132,   133,   134,   135,   136,    -1,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
      -1,   152,   153,   154,   155,    -1,    -1,   158,    -1,   160,
     161,   162,   163,    -1,   165,    -1,   167,   168,    -1,   170,
     171,   172,   173,   174,   175,    -1,   177,    -1,    -1,    -1,
      -1,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,    -1,    -1,   227,   228,   229,   230,
      -1,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
     241,   242,    -1,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,    -1,    -1,    -1,   269,   270,
     271,   272,    -1,    -1,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
      -1,   292,   293,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,    -1,   310,
     311,    -1,   313,   314,   315,    -1,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,   350,
     351,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,    -1,   373,    -1,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,    -1,    -1,   400,
     401,    -1,   403,   404,   405,   406,   407,   408,   409,    -1,
     411,   412,    -1,    -1,   415,   416,    -1,   418,    -1,    -1,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,    -1,   443,    -1,   445,   446,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
     461,   462,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   474,   475,   476,   477
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    19,    29,    31,    32,    47,    56,    68,    79,    90,
      92,   110,   124,   135,   142,   150,   152,   153,   165,   194,
     233,   310,   313,   344,   352,   366,   373,   377,   388,   402,
     437,   442,   456,   480,   494,   502,   503,   504,   505,   506,
     513,   517,   563,   566,   567,   569,   571,   575,   576,   577,
     578,   579,   580,   624,   751,   761,   763,   764,   765,   766,
     773,   794,   797,   802,   805,   808,   809,   811,   812,   818,
     825,   827,   844,   847,   858,   864,   865,   866,   868,   870,
     871,   875,   415,   459,   867,   198,   359,   367,   402,   449,
     867,     3,    19,    20,    21,    22,    23,    24,    25,    26,
      28,    29,    30,    38,    39,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    54,    55,    56,
      57,    58,    59,    62,    63,    64,    65,    66,    68,    69,
      70,    71,    72,    74,    77,    78,    79,    80,    81,    82,
      83,    84,    86,    87,    88,    89,    90,    91,    93,    94,
      95,    96,   100,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   115,   117,   118,   119,   120,   121,   122,
     124,   126,   127,   128,   129,   132,   133,   134,   135,   136,
     139,   140,   141,   143,   144,   145,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   158,   160,   161,   162,
     163,   165,   167,   168,   170,   171,   172,   173,   174,   175,
     177,   181,   182,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   196,   197,   198,   199,   200,   201,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   213,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     227,   228,   229,   230,   232,   233,   234,   237,   238,   239,
     240,   241,   242,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   267,   269,   270,   271,   272,
     274,   275,   276,   277,   278,   279,   281,   282,   285,   286,
     287,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   317,   318,   319,   320,
     321,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     334,   335,   336,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     367,   368,   369,   370,   371,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   400,
     401,   403,   404,   405,   406,   407,   408,   409,   411,   412,
     415,   416,   417,   418,   419,   421,   422,   423,   424,   425,
     426,   427,   430,   431,   432,   433,   434,   437,   438,   439,
     440,   441,   442,   443,   445,   446,   447,   449,   450,   451,
     454,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   680,   738,   742,   744,   889,   890,   891,   867,
      50,   494,   839,   171,   175,   234,   241,   288,   323,   359,
     406,   408,   429,   432,   561,   772,   845,     3,    27,   313,
     736,   742,   889,    21,    74,    89,   145,   154,   166,   171,
     198,   241,   244,   308,   324,   356,   359,   367,   370,   390,
     402,   409,   418,   449,   813,   814,   817,   867,   736,    92,
     446,   494,   509,   513,   563,   571,   575,   865,   871,   107,
      68,   107,     5,   741,   762,   742,   736,    27,   411,   415,
     568,   742,   806,   807,   867,    27,   130,   587,   588,   234,
     359,   371,   411,   568,   859,   860,   867,   284,   635,   734,
     742,   170,   494,   799,   494,   331,   581,   582,   736,   581,
       3,   494,   576,   577,   580,     0,   497,   446,   507,    27,
     411,   415,   442,   568,   575,   146,   212,   289,   428,   589,
     590,   576,   578,   579,   498,   119,   208,   434,   189,   734,
     736,   189,   734,   189,   635,   189,   734,   494,   492,   496,
     725,   727,   571,   575,   804,   865,   871,   734,   406,   408,
     406,   408,   342,   178,   189,   742,   331,   367,   402,   449,
     198,   734,    27,   736,   246,   418,   106,   402,   449,   362,
     189,   742,   745,   815,   189,   735,   736,   189,   736,   494,
     869,   561,   509,     3,   510,   512,   513,   515,   516,   889,
     890,   891,   507,   741,   741,   483,   494,   494,   803,   477,
     218,   496,   283,     4,     6,     7,     8,     9,    10,    49,
      51,    52,    60,    61,    64,    65,    72,    74,    97,    98,
      99,   100,   101,   102,   103,   111,   112,   114,   134,   151,
     156,   157,   162,   210,   211,   213,   235,   236,   260,   262,
     268,   273,   274,   276,   285,   295,   309,   328,   354,   372,
     381,   398,   411,   412,   417,   419,   420,   435,   443,   478,
     485,   486,   487,   494,   499,   576,   650,   653,   656,   657,
     658,   660,   661,   662,   663,   665,   666,   677,   679,   680,
     681,   683,   696,   697,   701,   719,   724,   731,   732,   738,
     739,   740,   741,   742,   730,   731,   859,   741,   859,   477,
     169,   413,   483,   494,   734,   487,   727,     3,   168,   170,
     446,   513,   798,   800,   168,   801,   677,   705,   581,   498,
     494,   747,   498,   495,   495,   504,   734,   477,   218,    27,
     130,   586,   586,    54,   586,   159,   164,   231,   280,   595,
     597,   598,   617,   619,   620,   621,   589,   590,   494,   169,
     214,   572,   635,   151,    23,    29,   135,   287,   340,   344,
     373,   439,   852,   855,   856,   340,   151,    36,    55,   105,
     197,   245,   253,   265,   297,   340,   345,   367,   373,   388,
     819,   822,   855,   151,   340,   373,   855,   151,   340,   373,
     855,    27,   130,   444,   487,   495,   677,   706,   707,   744,
     748,   677,   726,     3,    27,    31,    32,    33,    34,    35,
      36,    37,    40,    53,    60,    61,    67,    73,    75,    76,
      85,    92,    97,    98,    99,   101,   102,   103,   114,   116,
     123,   125,   130,   131,   137,   138,   142,   146,   157,   159,
     164,   166,   169,   176,   178,   179,   180,   183,   195,   202,
     212,   214,   225,   226,   231,   235,   236,   243,   266,   268,
     273,   280,   283,   284,   288,   289,   306,   316,   322,   323,
     333,   337,   347,   366,   372,   383,   384,   399,   402,   410,
     413,   414,   420,   428,   429,   435,   436,   444,   448,   452,
     453,   455,   456,   487,   737,   749,   889,   890,   891,   892,
     725,   495,   494,   551,   561,     3,   268,   795,   449,   189,
     734,   189,   565,   734,   734,    81,   769,   494,   846,   460,
      82,   127,   300,   407,   151,   496,   746,    58,   346,   498,
     816,   151,   498,   816,   151,   283,   705,   402,   495,   498,
       4,   157,   283,   420,   485,   486,   508,   510,   511,   514,
     740,   741,   821,   824,   509,   494,   834,   838,   514,   821,
     861,   863,   706,     3,    49,    51,    52,    64,    65,   111,
     112,   162,   210,   211,   213,   260,   262,   276,   328,   354,
     374,   381,   396,   411,   412,   443,   646,   647,   649,   651,
     653,   655,   657,   658,   659,   661,   662,   665,   666,   708,
     744,   889,    36,   229,   742,   494,   728,   445,   664,   677,
     723,   494,   664,   664,   494,   164,   494,   494,   494,   652,
     652,   312,   576,   494,   494,   654,   494,   494,    64,    65,
     664,   677,   494,   652,   494,   494,   494,   494,   494,   458,
     480,   494,   667,   494,   667,   494,   494,   677,   677,   677,
     576,   677,   705,   728,   727,   741,   494,   494,   740,   741,
       3,     8,    11,    16,    17,    18,    33,    36,    41,    48,
      73,   174,   190,   195,   216,   217,   230,   268,   271,   285,
     288,   378,   478,   481,   482,   483,   485,   486,   487,   488,
     489,   490,   699,   700,   701,   703,   457,   684,    15,   294,
     677,    15,   214,   498,   583,   494,   741,   727,   583,     3,
     114,   234,   666,   741,   821,   862,    96,   114,   863,   114,
     863,   734,   495,   498,   507,   495,   498,   582,   735,    36,
     243,   747,   229,   578,   578,   591,   592,   677,   578,   161,
     264,   611,   220,   265,   327,   376,   434,    27,   606,   677,
     485,   486,   607,   608,   677,   679,   617,   618,   598,   597,
     595,   596,   164,   620,   278,   622,   595,   617,   705,   572,
     734,   873,   373,    36,   742,   734,    67,    75,    85,   166,
     189,   316,   429,   532,   542,   557,   742,    75,    85,   810,
      85,   810,   494,   413,   494,   530,   240,   432,   530,    85,
     498,   413,   734,   649,   821,    54,   823,   821,   821,   105,
     245,   253,    54,   413,   456,   480,   820,   258,   359,   820,
     822,   635,    85,   413,   810,   359,   734,   413,   359,   706,
     706,   707,   495,   498,   589,   590,    13,    14,   493,   500,
     413,   550,   555,   742,   456,   837,   331,   449,   266,   448,
     752,   151,    92,   517,   569,   766,   796,   825,   734,   268,
     819,   826,   268,    36,   494,   551,   551,   189,   545,   742,
     770,   495,   706,    36,   815,   737,   496,   745,   735,   736,
     736,   745,   495,   189,   565,   734,   509,   515,     4,   740,
       4,   740,   749,   836,   843,    50,    94,   120,   140,   144,
     165,   168,   184,   273,   281,   325,   840,   498,   495,   498,
     649,   494,    35,   648,   108,   109,   186,   187,   247,   248,
     249,   250,   251,   252,   255,   256,   363,   364,   474,   475,
     494,   668,   669,   670,   671,   672,   673,   674,   675,   676,
     495,   498,   652,   746,   804,   705,   725,   494,   452,   720,
     721,   677,   705,   494,   740,   740,   705,     3,   668,   669,
     670,   671,   672,   673,   674,   675,   709,   710,   741,   740,
     740,   740,   664,   664,   677,     8,    16,    17,    18,   481,
     482,   483,   485,   486,   487,   488,   489,   490,   699,   704,
     742,   677,   711,   485,   486,   494,   678,   679,   701,   713,
     724,   495,   705,   677,   705,   714,   411,   411,   740,   740,
     677,    53,   169,   226,   414,   677,   705,   717,   495,   498,
     740,   677,   676,   676,   647,   677,   677,   677,   677,     5,
     749,   750,   411,    40,   399,   729,   745,   677,   677,   494,
     576,   718,   130,   157,   268,   273,   278,   420,   430,   677,
     273,   494,   677,   413,    48,   174,   190,   195,   230,   378,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
      27,    34,   383,   698,   180,   160,   685,   677,   354,   494,
     697,   677,   175,   234,   402,   406,   408,   432,   584,   734,
     732,   169,   625,   706,   625,   494,   741,   495,   734,   798,
     734,   864,   677,   495,   494,     3,   776,   777,   498,    37,
     123,   436,   593,   354,   355,   485,   486,   608,   610,   679,
     376,   220,   284,   498,     4,   609,   740,   609,   354,   355,
     610,   733,   734,   272,   380,   623,   618,   596,   495,   436,
     574,    36,   114,   296,   494,   575,   872,   494,   742,   877,
     886,   888,   742,   340,   855,   494,   189,   542,   736,   220,
     268,   220,   436,   494,   535,   647,   736,   742,   189,   736,
     189,   742,    23,   135,   373,   525,   540,   749,   851,   854,
     736,   534,   554,   749,   736,   852,   736,   340,   373,   819,
     855,   821,   745,   736,   821,   745,   736,   821,   340,   373,
     855,   736,   736,   736,   736,   340,   373,   855,   736,   736,
     589,   589,   589,   444,   707,   495,   677,   677,   677,   726,
     321,   833,   495,   498,   281,   169,   413,   828,   449,   734,
     403,   742,   561,   494,   151,   151,   150,   575,   230,   532,
     542,   546,   549,   558,   560,   742,   456,   458,   537,   456,
     771,   268,   283,   495,   677,   816,   737,   816,   283,   816,
     268,    36,   487,   494,   514,   821,   835,   495,   498,    36,
     832,   741,   832,   268,   273,   325,   832,   832,   861,    35,
     648,   645,   742,   492,   492,   740,   413,   413,   413,   413,
     647,   652,   495,   705,   677,   138,   721,   722,    36,   495,
     677,   495,   495,   495,   495,   169,   495,   495,   495,   498,
     495,   496,   306,   712,   495,   678,   678,   677,    11,    16,
      17,    18,   195,   216,   285,   481,   482,   483,   485,   486,
     487,   488,   489,   490,   701,   678,   495,   495,   164,   169,
     715,   716,   495,   477,   477,   495,   495,    36,   717,   705,
     717,   717,   169,   495,   728,   677,   495,   495,   477,   678,
     678,   144,   705,   169,   130,   157,   273,   278,   420,   430,
     494,   144,   704,   677,   399,   729,   677,   718,   677,   413,
     494,   576,   494,   494,   293,   689,   406,   408,   406,   408,
     734,   402,   585,   585,   585,   179,   225,   355,   494,   576,
     626,   627,   628,   635,   636,   680,   682,   683,   742,   453,
     641,   589,   641,   740,   676,   747,   804,    36,   498,   641,
      15,   481,   486,   494,   778,   779,   782,   788,   789,   790,
     791,   792,   793,   592,   285,   699,   702,   479,   594,     4,
     740,   610,   284,   434,   607,   498,   239,   626,   453,   573,
     742,   442,   401,   435,   881,   742,   876,   885,   283,   878,
     882,   888,   728,   498,   625,   483,   413,   677,   268,   557,
     494,   151,   494,   535,   198,   555,   518,   287,   528,   518,
      23,   135,   344,   345,   373,   848,   849,   850,   856,   857,
     151,   816,   151,   816,   525,   540,   525,   521,   741,   495,
     498,   495,   498,   483,   496,   413,   359,    85,   413,   810,
     359,   413,   413,   413,   359,   495,   495,   495,   707,   493,
     391,   392,   741,   842,   550,   833,   734,   551,   494,   795,
     402,   555,   734,   565,   734,   736,   456,   564,   734,   495,
     498,   281,   530,   281,   283,   529,   530,    36,   151,   734,
     745,   151,   514,   830,   841,   836,   741,   741,   273,   555,
     487,   555,   741,   741,   492,   495,   498,   647,   740,   493,
     740,   495,   669,   671,   672,   673,   672,   673,   673,   495,
     410,   677,   142,   647,   495,   677,   677,   704,   677,   715,
     647,   678,   678,   678,   678,   130,   268,   278,   678,   678,
     678,   678,   678,   678,   678,   678,   678,   678,   677,   677,
     716,   715,   667,   667,   647,   495,   495,   495,   705,   495,
     676,   677,    33,    33,   677,   495,   677,   169,   494,   708,
     677,   495,   144,   678,   678,   144,   144,   677,   677,   590,
     453,   494,   690,   742,   585,   585,   585,   585,   734,   734,
     734,   494,   773,   576,   636,   169,   576,   627,   628,    36,
     629,   630,   742,   498,    93,   170,   204,   219,   228,   261,
     350,   632,   630,    36,   629,   631,   742,   480,   640,   727,
     677,   180,   612,   495,   612,   495,   495,   777,    76,   774,
     486,     3,   216,   492,   500,   784,   786,   787,     3,   781,
     779,   494,   594,   161,   224,   284,   734,   677,   347,   880,
     441,   728,   495,   498,    83,   880,   495,   498,   877,   573,
     677,   736,   495,   151,   555,   542,   555,   518,   545,   495,
     116,   202,   265,   268,   541,   494,   552,   173,   114,   188,
     268,   530,   820,   106,   114,   173,   268,   390,   393,   530,
     822,   373,   850,   423,   736,   742,   854,   554,   267,   285,
     374,   485,   486,   519,   556,   647,   702,   741,   744,   821,
     892,   749,   736,   736,   736,   736,   736,   736,   736,   736,
     736,   736,   589,   820,   842,   494,   771,   734,   754,   755,
     189,   734,   495,   826,    36,   494,   869,   106,   265,   539,
     537,   546,    79,   575,   545,   436,   768,   816,   565,   495,
     498,   555,   740,   742,   493,   493,   677,   495,   495,   716,
     169,   130,   278,   494,   495,   677,   677,   677,   708,   495,
     677,    33,    33,   677,   677,   144,   495,   495,   677,   691,
     742,   734,   734,   734,   734,   630,   631,   494,   495,     5,
     742,   743,   404,   603,   604,   494,   627,   219,   292,   633,
     627,   633,   219,   632,   633,   219,   604,   494,   742,   604,
     494,   290,    54,   183,   616,   741,   616,   741,   778,   494,
     495,   492,   787,   784,   785,     3,   780,   783,     3,    15,
     486,   784,   495,   704,   731,   575,   296,   575,   876,   283,
     494,   874,   483,   888,   880,   518,   542,   495,   495,   456,
     548,   117,   191,   200,   116,   438,   525,   543,    67,    73,
      85,   114,   116,   173,   202,   268,   273,   316,   333,   429,
     523,   524,   536,    30,    54,   562,   189,   273,   821,   677,
     562,   273,   485,   486,   824,   742,   647,   816,   816,   744,
     746,   483,   413,   413,   495,   834,   436,   829,   831,   555,
      36,   220,   756,   495,   498,   268,   494,   771,   150,   575,
     549,   564,   106,   148,   196,   529,   119,   135,   315,   456,
     570,   283,   742,   767,   494,    36,   841,   493,   647,   678,
     169,   494,   708,   495,   677,   677,   677,   495,   302,   692,
     637,   638,   682,   629,   494,     4,     9,   599,   601,   602,
     742,   735,   627,   283,   436,   634,   627,   219,   627,   642,
     643,   742,   494,   642,   742,   494,   613,   614,   615,   677,
     677,   455,   686,   686,   775,   873,   734,   780,   486,   493,
     785,   495,   881,    85,   494,   682,   742,   879,   887,   131,
     677,   333,   548,   494,   538,   518,   495,   498,   494,   745,
     736,   678,   562,   117,   191,   116,   273,   220,   734,   548,
     114,    36,   151,    73,   644,   746,   489,   519,   736,   736,
     820,   121,   495,   575,   494,   221,   757,   137,   337,   753,
     755,   151,    36,   736,   564,   495,    27,    78,    86,   115,
     188,   199,   390,   393,   533,   533,   355,   355,    59,    67,
     234,   734,   887,   678,   708,   495,    54,   589,   495,   498,
      36,   639,   735,   305,   489,   305,   355,   489,   494,   494,
     495,   677,   494,   627,   634,   495,   498,   647,   642,   495,
     495,   498,   687,   688,   742,   436,   600,   600,   495,   498,
     493,    15,   486,   441,   736,   677,    73,   883,   883,   495,
     498,   269,   434,   734,   518,   544,   547,   749,   525,   677,
     268,   524,    36,   548,   551,   188,   745,   436,   853,   489,
     423,   834,   741,   771,   570,   735,     3,   758,   221,   403,
     734,   575,   869,   537,    67,   286,    67,   768,   495,   495,
     705,   326,   355,   693,   640,   637,   494,   495,   742,   599,
     735,   643,   644,   495,   614,   498,    36,   357,   873,   486,
     575,   495,   745,   745,   884,   884,   641,   879,   373,   551,
     495,   498,   483,   495,   188,   243,   559,   494,   520,   677,
     423,    36,   495,     3,   494,   494,   570,   564,   529,   286,
     286,   494,   771,    48,    96,   425,   677,   694,   695,   694,
     495,   642,   495,   498,   495,   495,   688,   690,   602,   883,
     593,   593,   886,   559,   547,   519,   265,   531,   520,   170,
     301,   379,   283,   526,   527,   553,   819,   575,   734,   759,
     760,   887,   641,   695,   354,   163,   311,   163,   311,   495,
       9,   341,   605,   884,   594,   594,   641,   527,   200,   119,
     434,   283,   553,   283,   526,   495,   570,   756,   495,   498,
     495,    33,   495,   494,   593,   518,    58,   265,   346,   373,
     522,   522,   384,   760,   771,   695,     9,   594,    22,   114,
     273,   756,   641,   495,   333,   734,   125,   756,   333,   734,
     757
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_int16 yyr1[] =
{
       0,   501,   502,   503,   503,   504,   504,   504,   504,   504,
     504,   504,   504,   504,   504,   504,   504,   504,   504,   504,
     504,   504,   504,   504,   504,   504,   504,   504,   504,   504,
     504,   504,   504,   504,   504,   504,   504,   504,   504,   504,
     504,   505,   506,   506,   506,   506,   507,   507,   508,   508,
     508,   509,   509,   509,   509,   509,   510,   510,   510,   510,
     511,   511,   512,   512,   513,   513,   514,   514,   514,   514,
     515,   516,   516,   517,   517,   518,   518,   519,   519,   519,
     519,   519,   519,   520,   520,   521,   522,   522,   522,   522,
     522,   523,   523,   523,   523,   524,   524,   524,   524,   524,
     524,   524,   524,   525,   526,   527,   527,   527,   527,   527,
     528,   528,   529,   529,   529,   529,   530,   531,   531,   532,
     532,   533,   533,   533,   533,   533,   533,   533,   533,   534,
     534,   535,   536,   536,   536,   536,   537,   537,   537,   537,
     538,   539,   539,   539,   540,   541,   541,   541,   541,   541,
     541,   542,   543,   543,   544,   544,   545,   546,   546,   546,
     547,   547,   548,   548,   549,   549,   550,   551,   551,   552,
     552,   553,   554,   554,   554,   554,   555,   555,   556,   556,
     556,   557,   557,   557,   557,   557,   557,   558,   558,   559,
     559,   559,   559,   560,   561,   561,   561,   561,   561,   561,
     561,   561,   562,   562,   563,   563,   564,   564,   564,   565,
     566,   566,   566,   566,   566,   567,   567,   568,   568,   569,
     569,   569,   569,   570,   570,   570,   570,   571,   572,   572,
     572,   573,   573,   574,   574,   575,   575,   576,   576,   577,
     577,   577,   577,   577,   577,   577,   577,   578,   578,   579,
     579,   579,   579,   579,   579,   579,   580,   580,   580,   581,
     581,   582,   583,   583,   584,   584,   584,   584,   584,   584,
     584,   584,   584,   585,   585,   586,   586,   586,   587,   587,
     588,   588,   589,   589,   590,   591,   591,   592,   592,   593,
     593,   593,   594,   594,   594,   595,   595,   595,   595,   596,
     596,   597,   597,   597,   597,   598,   598,   599,   599,   599,
     599,   599,   599,   600,   600,   601,   601,   602,   602,   602,
     602,   603,   604,   604,   605,   605,   606,   606,   607,   608,
     608,   608,   609,   609,   610,   610,   611,   611,   612,   612,
     613,   613,   614,   614,   615,   616,   616,   617,   617,   618,
     618,   619,   619,   620,   621,   621,   621,   621,   622,   622,
     623,   623,   623,   624,   624,   625,   625,   626,   626,   627,
     627,   627,   627,   627,   627,   627,   627,   628,   628,   628,
     628,   628,   628,   629,   629,   629,   629,   630,   630,   631,
     631,   631,   631,   631,   632,   632,   632,   632,   633,   633,
     634,   634,   635,   635,   635,   635,   636,   636,   637,   638,
     638,   639,   639,   640,   640,   641,   641,   642,   642,   643,
     644,   644,   645,   645,   646,   646,   647,   647,   647,   647,
     647,   647,   647,   648,   648,   648,   649,   649,   649,   649,
     649,   649,   649,   650,   650,   650,   650,   651,   651,   652,
     652,   653,   653,   653,   653,   653,   653,   653,   653,   653,
     653,   653,   654,   654,   655,   655,   656,   656,   657,   658,
     659,   659,   660,   660,   661,   662,   663,   663,   663,   663,
     663,   663,   664,   664,   665,   665,   665,   665,   666,   667,
     667,   667,   668,   668,   669,   669,   670,   670,   671,   671,
     672,   672,   673,   673,   674,   674,   675,   675,   676,   676,
     676,   676,   676,   676,   676,   676,   676,   676,   676,   676,
     676,   676,   676,   676,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     678,   678,   678,   678,   678,   678,   678,   678,   678,   678,
     678,   678,   678,   678,   678,   678,   678,   678,   678,   678,
     678,   678,   678,   679,   679,   679,   679,   679,   679,   679,
     679,   679,   679,   680,   680,   680,   680,   680,   680,   680,
     681,   681,   682,   682,   683,   683,   683,   683,   683,   683,
     683,   683,   683,   683,   683,   683,   683,   683,   683,   683,
     683,   683,   683,   683,   683,   683,   683,   683,   683,   683,
     683,   683,   684,   684,   685,   685,   686,   686,   687,   687,
     688,   689,   689,   689,   690,   691,   691,   692,   692,   693,
     693,   693,   694,   694,   695,   695,   695,   695,   695,   696,
     696,   697,   697,   698,   698,   698,   699,   699,   700,   700,
     700,   700,   700,   700,   700,   700,   700,   700,   700,   700,
     701,   701,   702,   702,   703,   703,   703,   703,   703,   703,
     703,   703,   704,   704,   705,   705,   706,   706,   707,   707,
     707,   708,   708,   709,   709,   710,   710,   710,   710,   710,
     710,   710,   710,   710,   710,   711,   711,   712,   713,   713,
     714,   714,   714,   714,   714,   714,   715,   716,   717,   717,
     717,   718,   718,   719,   720,   720,   721,   722,   722,   723,
     723,   724,   724,   725,   725,   725,   725,   726,   726,   727,
     727,   728,   728,   729,   729,   730,   730,   731,   731,   732,
     732,   732,   732,   733,   733,   734,   734,   735,   735,   736,
     737,   738,   738,   739,   739,   739,   739,   739,   739,   739,
     739,   739,   739,   739,   739,   739,   739,   740,   741,   742,
     742,   742,   743,   743,   744,   744,   744,   745,   745,   746,
     746,   747,   747,   748,   749,   749,   749,   749,   749,   750,
     750,   751,   751,   752,   752,   753,   753,   754,   754,   755,
     756,   757,   757,   758,   759,   759,   760,   761,   762,   763,
     764,   765,   765,   765,   765,   766,   766,   767,   768,   768,
     769,   769,   770,   770,   771,   771,   772,   772,   773,   774,
     774,   775,   775,   776,   776,   777,   777,   778,   778,   779,
     779,   780,   781,   782,   783,   783,   784,   785,   785,   786,
     786,   787,   787,   788,   788,   789,   789,   789,   790,   790,
     791,   791,   792,   792,   793,   793,   793,   794,   794,   795,
     795,   796,   796,   796,   796,   797,   797,   797,   797,   797,
     798,   798,   798,   798,   798,   799,   799,   800,   800,   801,
     801,   802,   803,   803,   804,   804,   804,   804,   805,   806,
     806,   807,   807,   807,   808,   808,   809,   809,   809,   809,
     809,   809,   809,   809,   809,   809,   809,   809,   809,   810,
     810,   811,   811,   811,   812,   812,   812,   812,   812,   812,
     813,   813,   813,   813,   813,   813,   813,   813,   813,   813,
     813,   813,   813,   813,   813,   814,   814,   814,   814,   814,
     814,   814,   815,   815,   816,   816,   816,   817,   817,   817,
     818,   818,   819,   819,   820,   820,   820,   821,   821,   821,
     821,   822,   822,   822,   822,   822,   822,   822,   822,   822,
     822,   822,   822,   822,   822,   823,   823,   824,   824,   824,
     825,   825,   826,   826,   827,   827,   828,   828,   829,   829,
     830,   830,   831,   831,   832,   832,   833,   833,   834,   834,
     835,   835,   835,   835,   835,   836,   837,   837,   838,   838,
     839,   839,   840,   840,   840,   840,   840,   840,   840,   840,
     840,   840,   840,   840,   840,   840,   841,   842,   842,   842,
     843,   843,   844,   845,   845,   846,   846,   847,   847,   847,
     847,   847,   847,   847,   847,   848,   848,   849,   849,   850,
     850,   850,   850,   851,   851,   852,   852,   852,   852,   852,
     852,   852,   852,   852,   852,   852,   852,   852,   852,   852,
     852,   852,   852,   852,   852,   852,   852,   852,   852,   852,
     852,   852,   852,   852,   853,   853,   854,   854,   854,   854,
     855,   855,   856,   857,   857,   858,   858,   858,   859,   859,
     859,   859,   860,   860,   860,   860,   861,   861,   862,   862,
     862,   862,   862,   862,   862,   863,   863,   864,   864,   865,
     866,   866,   866,   866,   866,   866,   867,   867,   867,   868,
     868,   868,   869,   869,   870,   870,   870,   870,   870,   870,
     871,   872,   872,   872,   872,   872,   873,   873,   874,   874,
     874,   875,   875,   876,   877,   877,   878,   878,   878,   879,
     879,   879,   880,   880,   881,   881,   882,   882,   883,   883,
     884,   884,   885,   885,   886,   886,   887,   887,   888,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   891,   891,   891,   891,   891,
     891,   891,   891,   891,   891,   891,   891,   891,   891,   891,
     891,   891,   891,   891,   891,   891,   891,   891,   891,   892,
     892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
     892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
     892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
     892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
     892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
     892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
     892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
     892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
     892,   892,   892,   892,   892,   892,   892,   892
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     2,     2,     4,     3,     5,     1,     0,     1,     1,
       0,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     1,     1,     1,     1,     1,     1,
       2,     1,     1,     9,    12,     0,     2,     1,     1,     1,
       1,     1,     1,     3,     0,     1,     2,     1,     1,     2,
       2,     3,     1,     1,     2,     2,     1,     2,     3,     5,
       2,     5,     5,     2,     3,     1,     1,     2,     2,     0,
       4,     0,     3,     4,     4,     0,     3,     2,     0,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     3,     1,     2,     2,     2,     2,     2,     2,     0,
       3,     3,     3,     0,     1,     2,     1,     2,     2,     2,
       2,     4,     1,     3,     1,     3,     1,     1,     1,     1,
       3,     1,     2,     0,     1,     0,     1,     3,     0,     2,
       0,     3,     3,     1,     5,     3,     1,     3,     1,     4,
       5,     5,     6,     3,     7,     4,    11,     1,     3,     2,
       2,     2,     0,     3,     1,     1,     2,     2,     2,     2,
       1,     0,     1,     2,     7,    10,     2,     3,     0,     4,
       2,     2,     3,     4,     2,     1,     1,     1,     3,     9,
      11,    12,    14,     3,     4,     4,     0,     7,     1,     2,
       3,     2,     0,     2,     0,     1,     1,     3,     3,     1,
       2,     4,     4,     2,     3,     5,     5,     1,     1,    10,
      10,     1,     2,     4,     4,     4,     2,     2,     3,     1,
       3,     6,     2,     0,     3,     3,     4,     4,     4,     4,
       3,     2,     1,     1,     0,     1,     1,     0,     1,     5,
       1,     0,     1,     0,     3,     1,     3,     4,     3,     1,
       1,     0,     2,     2,     0,     2,     2,     1,     1,     1,
       0,     2,     4,     5,     4,     2,     3,     2,     2,     2,
       2,     1,     2,     3,     0,     1,     0,     5,     1,     4,
       6,     2,     1,     0,     4,     0,     1,     1,     1,     1,
       2,     2,     1,     1,     1,     1,     1,     1,     3,     0,
       1,     3,     1,     1,     2,     2,     0,     1,     3,     1,
       0,     1,     2,     3,     2,     4,     2,     3,     2,     0,
       1,     2,     0,     4,     5,     2,     0,     1,     3,     3,
       3,     3,     3,     3,     1,     4,     2,     3,     4,     5,
       4,     5,     4,     5,     2,     4,     1,     1,     0,     1,
       4,     5,     4,     0,     2,     2,     2,     1,     1,     0,
       4,     2,     1,     2,     2,     4,     2,     6,     2,     1,
       3,     4,     0,     2,     0,     2,     0,     1,     3,     3,
       2,     0,     2,     4,     1,     1,     2,     3,     5,     6,
       2,     3,     4,     3,     4,     0,     1,     1,     1,     1,
       1,     2,     4,     1,     1,     1,     1,     2,     3,     3,
       0,     1,     1,     1,     1,     1,     2,     2,     2,     2,
       2,     1,     3,     0,     1,     1,     1,     1,     5,     2,
       1,     1,     1,     1,     4,     1,     2,     2,     1,     3,
       3,     2,     1,     0,     5,     2,     5,     2,     1,     3,
       3,     0,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     3,     3,     3,
       3,     3,     3,     0,     1,     3,     3,     5,     2,     2,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     2,     2,     3,     3,     2,     2,     3,
       3,     5,     4,     6,     3,     5,     4,     6,     4,     6,
       5,     7,     3,     2,     4,     3,     2,     1,     3,     3,
       3,     3,     4,     3,     4,     3,     4,     5,     6,     6,
       7,     6,     7,     6,     7,     3,     4,     4,     6,     1,
       1,     3,     2,     2,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     2,     2,     5,
       6,     6,     7,     1,     1,     2,     2,     4,     1,     1,
       1,     2,     2,     3,     5,     6,     8,     6,     6,     4,
       4,     1,     1,     1,     5,     1,     1,     4,     1,     4,
       1,     4,     1,     4,     1,     1,     1,     1,     1,     1,
       6,     4,     4,     4,     4,     6,     5,     5,     5,     4,
       6,     4,     5,     0,     5,     0,     2,     0,     1,     3,
       3,     2,     2,     0,     6,     1,     0,     3,     0,     2,
       2,     0,     1,     4,     2,     2,     2,     2,     2,     4,
       3,     1,     5,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     4,     1,     4,     1,     4,     1,     2,     1,     2,
       1,     2,     1,     3,     1,     3,     1,     3,     1,     3,
       3,     1,     3,     3,     0,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     4,     3,     2,     3,     0,
       3,     3,     2,     2,     1,     0,     2,     2,     3,     2,
       1,     1,     3,     5,     1,     2,     4,     2,     0,     1,
       0,     1,     2,     2,     2,     3,     5,     1,     0,     1,
       2,     0,     2,     1,     0,     1,     0,     1,     3,     3,
       2,     1,     1,     1,     3,     1,     2,     1,     3,     1,
       1,     1,     2,     1,     1,     1,     1,     1,     2,     6,
       2,     5,     3,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       3,     3,     0,     1,     1,     1,     1,     1,     1,     1,
       1,    14,     4,     1,     1,     1,     1,     1,     3,     3,
       4,     2,     3,     1,     1,     3,    11,     2,     1,     4,
       3,     2,     3,     2,     3,    13,    16,     1,     2,     0,
       1,     0,     1,     0,     2,     0,     1,     0,     9,     4,
       0,     1,     3,     2,     4,     2,     0,     1,     2,     1,
       1,     2,     2,     3,     1,     0,     2,     1,     0,     1,
       1,     2,     1,     1,     1,     1,     1,     1,     5,     3,
       6,     4,     5,     3,     1,     1,     2,     4,     7,     2,
       0,     1,     1,     1,     1,     4,     5,     5,     4,     6,
       1,     1,     1,     1,     1,     1,     0,     1,     3,     1,
       0,     5,     3,     0,     1,     1,     1,     1,     2,     1,
       1,     1,     2,     3,     2,     1,     6,     6,     8,     6,
       8,     6,     8,     6,     8,     8,    10,     8,    10,     1,
       0,     2,     4,     5,     6,     4,     6,     4,     6,     8,
       1,     1,     1,     1,     1,     2,     1,     2,     1,     1,
       1,     3,     3,     3,     3,     2,     2,     1,     3,     1,
       1,     1,     1,     3,     1,     1,     0,     1,     1,     1,
       4,     6,     1,     2,     1,     1,     0,     1,     2,     2,
       1,     2,     2,     1,     2,     3,     2,     2,     2,     2,
       3,     3,     3,     1,     3,     1,     0,     1,     2,     2,
       5,     8,     1,     0,    11,     9,     1,     1,     3,     0,
       1,     3,     1,     0,     1,     0,     1,     0,     1,     3,
       1,     1,     1,     3,     0,     2,     2,     0,     2,     0,
       1,     0,     1,     1,     1,     3,     3,     1,     1,     3,
       3,     3,     3,     4,     3,     2,     1,     1,     1,     1,
       1,     3,     6,     1,     1,     2,     3,     4,     6,     4,
       6,     4,     6,     4,     6,     1,     2,     3,     2,     1,
       3,     2,     3,     1,     3,     2,     5,     3,     6,     4,
       6,     6,     6,     5,     5,     6,     9,     4,     5,     7,
       6,     4,     8,     4,     2,     4,     3,     6,     4,     2,
       2,     2,     2,     1,     2,     0,     1,     2,     2,     2,
       1,     3,     4,     2,     0,     2,     3,     3,     1,     3,
       3,     2,     3,     3,     3,     3,     1,     1,     1,     1,
       3,     5,     1,     1,     1,     1,     3,     2,     4,     8,
       2,     2,     2,     2,     2,     2,     1,     1,     0,     3,
       9,    12,     3,     0,     6,     8,     6,     8,     6,     8,
       7,     1,     4,     4,     7,     2,     1,     3,     4,     3,
       0,     1,     0,     2,     3,     5,     8,     5,     0,     5,
       5,     7,     2,     0,     1,     1,     1,     3,     2,     0,
       1,     0,     1,     3,     1,     3,     1,     3,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YYUSE (yyoutput);
  YYUSE (yylocationp);
  YYUSE (yyscanner);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyo, yytoknum[yytype], *yyvaluep);
# endif
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  YY_LOCATION_PRINT (yyo, *yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yytype, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[+yyssp[yyi + 1 - yynrhs]],
                       &yyvsp[(yyi + 1) - (yynrhs)]
                       , &(yylsp[(yyi + 1) - (yynrhs)])                       , yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen(S) (YY_CAST (YYPTRDIFF_T, strlen (S)))
#  else
/* Return the length of YYSTR.  */
static YYPTRDIFF_T
yystrlen (const char *yystr)
{
  YYPTRDIFF_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYPTRDIFF_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYPTRDIFF_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            else
              goto append;

          append:
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (yyres)
    return yystpcpy (yyres, yystr) - yyres;
  else
    return yystrlen (yystr);
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYPTRDIFF_T *yymsg_alloc, char **yymsg,
                yy_state_t *yyssp, int yytoken)
{
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat: reported tokens (one for the "unexpected",
     one per "expected"). */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Actual size of YYARG. */
  int yycount = 0;
  /* Cumulated lengths of YYARG.  */
  YYPTRDIFF_T yysize = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[+*yyssp];
      YYPTRDIFF_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
      yysize = yysize0;
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYPTRDIFF_T yysize1
                    = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
                    yysize = yysize1;
                  else
                    return 2;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
    default: /* Avoid compiler warnings. */
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    /* Don't count the "%s"s in the final size, but reserve room for
       the terminator.  */
    YYPTRDIFF_T yysize1 = yysize + (yystrlen (yyformat) - 2 * yycount) + 1;
    if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
      yysize = yysize1;
    else
      return 2;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          ++yyp;
          ++yyformat;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);
  YYUSE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs;

    yy_state_fast_t yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.
       'yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss;
    yy_state_t *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYPTRDIFF_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYPTRDIFF_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    goto yyexhaustedlab;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
# undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2:
#line 483 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 13591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3:
#line 499 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 13607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4:
#line 511 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 13618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 40:
#line 555 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 13624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 41:
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 13634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 42:
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 13645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 43:
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 13659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 44:
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 13670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 45:
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 13681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 46:
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 13687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 47:
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 13693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48:
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 13699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49:
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 13705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50:
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 13711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56:
#line 65 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 13717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57:
#line 66 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 13723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58:
#line 67 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 13729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59:
#line 68 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 13735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60:
#line 73 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 13741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61:
#line 74 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 13747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62:
#line 80 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 13755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63:
#line 84 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 13763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64:
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 13769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65:
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 13775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66:
#line 97 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 13781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67:
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 13787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68:
#line 99 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 13793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69:
#line 105 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 13799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70:
#line 111 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 13807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71:
#line 118 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 13813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72:
#line 119 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 13819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73:
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->if_not_exists = false;
					(yyval.node) = (PGNode *)n;
				}
#line 13836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74:
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->if_not_exists = true;
					(yyval.node) = (PGNode *)n;
				}
#line 13853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75:
#line 41 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 13859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76:
#line 43 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 13887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77:
#line 69 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 13893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78:
#line 70 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 13899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79:
#line 71 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 13905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80:
#line 72 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 13911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81:
#line 73 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 13917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82:
#line 74 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 13923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83:
#line 78 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 13929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84:
#line 79 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 13935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85:
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 13941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86:
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 13947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87:
#line 90 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 13953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88:
#line 91 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 13959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89:
#line 92 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 13965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90:
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 13971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91:
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 13982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92:
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 13988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93:
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 13994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94:
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 14011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95:
#line 125 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 14022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 96:
#line 132 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 14033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97:
#line 139 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 14047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98:
#line 149 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 14061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99:
#line 159 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 14077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100:
#line 171 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 14090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101:
#line 180 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 14103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102:
#line 189 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 14122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103:
#line 208 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 14130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104:
#line 214 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 14136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105:
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 14142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106:
#line 222 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 14148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107:
#line 224 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 14154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108:
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 14160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109:
#line 228 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 14166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110:
#line 233 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 14172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111:
#line 234 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                        { (yyval.list) = NIL; }
#line 14178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112:
#line 238 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 14184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113:
#line 239 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 14190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114:
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 14196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115:
#line 241 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 14202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116:
#line 246 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 14208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117:
#line 250 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 14214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118:
#line 251 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 14220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119:
#line 257 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 14231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120:
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 14237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121:
#line 268 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 14243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122:
#line 269 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 14249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123:
#line 270 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 14255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124:
#line 271 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 14261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125:
#line 272 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 14267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126:
#line 273 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 14273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127:
#line 274 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 14279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128:
#line 275 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 14285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129:
#line 281 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 14291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130:
#line 282 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 14297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131:
#line 286 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 14303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132:
#line 292 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 14314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133:
#line 299 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 14325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134:
#line 306 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 14336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135:
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 14347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136:
#line 324 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 14353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137:
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 14359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138:
#line 326 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 14365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139:
#line 327 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 14371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140:
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 14377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141:
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 14383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142:
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 14389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143:
#line 338 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 14395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144:
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 14401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145:
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 14407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146:
#line 349 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 14413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147:
#line 350 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 14419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148:
#line 351 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 14425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149:
#line 352 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 14431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150:
#line 353 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 14437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151:
#line 359 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					n->fdwoptions = (yyvsp[-1].list);
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
				}
#line 14460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152:
#line 382 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 14468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153:
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 14476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154:
#line 392 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 14482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155:
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 14488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156:
#line 397 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 14494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157:
#line 401 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 14500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158:
#line 402 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 14506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159:
#line 403 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 14512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160:
#line 408 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 14520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161:
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 14528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162:
#line 419 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 14534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163:
#line 420 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 14540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164:
#line 425 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 14546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165:
#line 426 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 14552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166:
#line 431 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 14560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167:
#line 438 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 14566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168:
#line 439 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 14572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169:
#line 444 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 14578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170:
#line 445 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 14584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171:
#line 449 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 14590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172:
#line 455 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 14598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173:
#line 459 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 14606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174:
#line 463 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 14615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175:
#line 468 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 14623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176:
#line 475 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 14629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177:
#line 476 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 14635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178:
#line 480 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 14641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179:
#line 482 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 14651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180:
#line 488 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 14662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181:
#line 499 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 14679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182:
#line 513 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 14696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183:
#line 526 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 14714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184:
#line 541 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 14731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185:
#line 554 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 14749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186:
#line 569 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 14771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187:
#line 591 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 14779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188:
#line 595 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 14787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189:
#line 602 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 14795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190:
#line 606 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 14807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191:
#line 614 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 14815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192:
#line 618 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 14823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193:
#line 626 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 14834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194:
#line 635 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 14840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195:
#line 636 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 14846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196:
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 14852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197:
#line 638 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 14858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198:
#line 640 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 14869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199:
#line 647 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 14880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200:
#line 653 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 14886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201:
#line 654 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 14892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202:
#line 659 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 14898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203:
#line 660 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 14904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204:
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->if_not_exists = false;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 14921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205:
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->if_not_exists = true;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 14938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206:
#line 41 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 14944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207:
#line 42 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 14950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208:
#line 43 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 14956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209:
#line 49 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 14970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210:
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				(yyval.node) = (PGNode *) n;
			}
#line 14981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211:
#line 11 "third_party/libpg_query/grammar/statements/variable_show.y"
                                {
					PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *) n;
				}
#line 14991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212:
#line 17 "third_party/libpg_query/grammar/statements/variable_show.y"
                                {
					PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
					n->name = (char*) "timezone";
					(yyval.node) = (PGNode *) n;
				}
#line 15001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213:
#line 23 "third_party/libpg_query/grammar/statements/variable_show.y"
                                {
					PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
					n->name = (char*) "transaction_isolation";
					(yyval.node) = (PGNode *) n;
				}
#line 15011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214:
#line 29 "third_party/libpg_query/grammar/statements/variable_show.y"
                                {
					PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
					n->name = (char*) "all";
					(yyval.node) = (PGNode *) n;
				}
#line 15021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217:
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 15027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218:
#line 41 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 15033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219:
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->replace = false;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 15049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220:
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->replace = true;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 15065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221:
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->replace = false;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 15086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222:
#line 54 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->replace = true;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 15107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223:
#line 74 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 15113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224:
#line 75 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 15119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225:
#line 76 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 15125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226:
#line 77 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 15131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227:
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 15145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228:
#line 22 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 15153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229:
#line 26 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 15164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230:
#line 33 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 15175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231:
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 15181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232:
#line 44 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 15187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233:
#line 50 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 15193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234:
#line 51 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 15199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237:
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 15205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238:
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 15211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239:
#line 68 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 15217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 240:
#line 70 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 15228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 241:
#line 77 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 15240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 242:
#line 85 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 15252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 243:
#line 93 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 15264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244:
#line 101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 15276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245:
#line 109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 15288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246:
#line 117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 15300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247:
#line 127 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 15306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248:
#line 128 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 15312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249:
#line 158 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->intoClause = (yyvsp[-6].into);
					n->fromClause = (yyvsp[-5].list);
					n->whereClause = (yyvsp[-4].node);
					n->groupClause = (yyvsp[-3].list);
					n->havingClause = (yyvsp[-2].node);
					n->windowClause = (yyvsp[-1].list);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 15329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250:
#line 173 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-8].list);
					n->targetList = (yyvsp[-7].list);
					n->intoClause = (yyvsp[-6].into);
					n->fromClause = (yyvsp[-5].list);
					n->whereClause = (yyvsp[-4].node);
					n->groupClause = (yyvsp[-3].list);
					n->havingClause = (yyvsp[-2].node);
					n->windowClause = (yyvsp[-1].list);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 15347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251:
#line 186 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 15353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252:
#line 188 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 15376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253:
#line 207 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 15384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254:
#line 211 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 15392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255:
#line 215 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 15400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256:
#line 236 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 15411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257:
#line 243 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 15422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 258:
#line 250 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 15433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 259:
#line 259 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 15439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260:
#line 260 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 15445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261:
#line 264 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-5].str);
				n->aliascolnames = (yyvsp[-4].list);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-5]);
				(yyval.node) = (PGNode *) n;
			}
#line 15458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262:
#line 276 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 15472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263:
#line 286 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 15478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264:
#line 295 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 15487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265:
#line 300 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 15496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266:
#line 305 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 15505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267:
#line 310 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 15514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268:
#line 315 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 15526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269:
#line 323 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 15538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270:
#line 331 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 15547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271:
#line 336 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 15556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272:
#line 341 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 15565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273:
#line 347 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 15571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274:
#line 348 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 15577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275:
#line 352 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 15583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276:
#line 353 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 15589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277:
#line 354 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 15595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278:
#line 361 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 15601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279:
#line 362 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 15607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280:
#line 366 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 15613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 281:
#line 367 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 15619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 282:
#line 371 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 15625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 283:
#line 372 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 15631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284:
#line 376 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 15637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285:
#line 380 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 15643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286:
#line 381 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 15649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287:
#line 385 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 15662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288:
#line 394 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 15675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289:
#line 404 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 15681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290:
#line 405 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 15687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291:
#line 406 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 15693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292:
#line 409 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 15699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293:
#line 410 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 15705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294:
#line 411 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 15711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295:
#line 415 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 15717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296:
#line 416 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 15723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297:
#line 417 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 15729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298:
#line 418 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 15735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299:
#line 422 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 15741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300:
#line 423 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 15747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301:
#line 428 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 15753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302:
#line 430 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 15766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303:
#line 446 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 15772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304:
#line 448 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 15778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305:
#line 453 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 15784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306:
#line 456 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 15790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307:
#line 464 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 15798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308:
#line 468 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 15806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309:
#line 472 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 15814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310:
#line 476 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 15822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311:
#line 480 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 15830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312:
#line 484 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 15838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313:
#line 491 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 15846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314:
#line 495 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 15852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315:
#line 502 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 15858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316:
#line 503 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 15864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317:
#line 508 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), (yyvsp[0].ival), (yylsp[-4]));
				}
#line 15872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318:
#line 512 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, -1, (yylsp[0]));
		}
#line 15880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319:
#line 516 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), -1, (yylsp[-3]));
		}
#line 15888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320:
#line 520 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), (yyvsp[-1].ival), (yylsp[-5]));
		}
#line 15896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321:
#line 527 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 15904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322:
#line 533 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 15910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323:
#line 534 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 15916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324:
#line 539 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 15922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325:
#line 540 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 15928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326:
#line 544 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 15934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327:
#line 546 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 15943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328:
#line 553 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 15949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329:
#line 573 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 15955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330:
#line 575 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 15961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331:
#line 577 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 15967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332:
#line 581 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 15973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333:
#line 582 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 15979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334:
#line 586 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 15985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335:
#line 587 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 15991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336:
#line 590 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 15997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337:
#line 591 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 16003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338:
#line 616 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 16009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339:
#line 617 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 16015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340:
#line 621 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 16021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341:
#line 622 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 16027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 342:
#line 626 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343:
#line 627 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344:
#line 632 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 16047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345:
#line 644 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 16053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346:
#line 645 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 16059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347:
#line 649 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 16065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348:
#line 650 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 16071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349:
#line 654 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 16077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350:
#line 655 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 16083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351:
#line 659 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 16089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352:
#line 660 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 16095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353:
#line 665 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 16107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354:
#line 675 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 16113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355:
#line 676 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 16119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356:
#line 677 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 16125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357:
#line 678 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 16131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358:
#line 682 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 16137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359:
#line 683 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 16143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360:
#line 688 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 16149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361:
#line 689 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 16155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362:
#line 690 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 16161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363:
#line 700 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 16171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364:
#line 706 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 16181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365:
#line 723 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 16187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366:
#line 725 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 16193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367:
#line 729 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 16199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368:
#line 730 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 16205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369:
#line 737 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 16215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370:
#line 743 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 16227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371:
#line 751 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 16239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372:
#line 759 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					/*
					 * The SQL spec does not permit a subselect
					 * (<derived_table>) without an alias clause,
					 * so we don't either.  This avoids the problem
					 * of needing to invent a unique refname for it.
					 * That could be surmounted if there's sufficient
					 * popular demand, but for now let's just implement
					 * the spec and see if anyone complains.
					 * However, it does seem like a good idea to emit
					 * an error message that's better than "syntax error".
					 */
					if ((yyvsp[-1].alias) == NULL)
					{
						if (IsA((yyvsp[-2].node), PGSelectStmt) &&
							((PGSelectStmt *) (yyvsp[-2].node))->valuesLists)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("VALUES in FROM must have an alias"),
									 errhint("For example, FROM (VALUES ...) [AS] foo."),
									 parser_errposition((yylsp[-2]))));
						else
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("subquery in FROM must have an alias"),
									 errhint("For example, FROM (SELECT ...) [AS] foo."),
									 parser_errposition((yylsp[-2]))));
					}
					(yyval.node) = (PGNode *) n;
				}
#line 16279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373:
#line 795 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					/* same comment as above */
					if ((yyvsp[0].alias) == NULL)
					{
						if (IsA((yyvsp[-1].node), PGSelectStmt) &&
							((PGSelectStmt *) (yyvsp[-1].node))->valuesLists)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("VALUES in FROM must have an alias"),
									 errhint("For example, FROM (VALUES ...) [AS] foo."),
									 parser_errposition((yylsp[-1]))));
						else
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("subquery in FROM must have an alias"),
									 errhint("For example, FROM (SELECT ...) [AS] foo."),
									 parser_errposition((yylsp[-1]))));
					}
					(yyval.node) = (PGNode *) n;
				}
#line 16309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374:
#line 821 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 16317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375:
#line 825 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 16326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376:
#line 830 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 16334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377:
#line 855 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 16342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378:
#line 859 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 16359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379:
#line 872 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->isNatural = false;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 16377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380:
#line 886 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 16396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 381:
#line 901 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->isNatural = true;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 16412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 382:
#line 913 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = true;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 16429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383:
#line 929 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 16439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384:
#line 935 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 16448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385:
#line 940 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 16458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 386:
#line 946 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 16467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 387:
#line 952 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 16473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 388:
#line 953 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 16479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 389:
#line 962 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 16487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 390:
#line 966 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 16495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 391:
#line 970 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 16505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 392:
#line 976 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 16515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 393:
#line 982 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 16523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 394:
#line 987 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 16529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 395:
#line 988 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 16535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 396:
#line 989 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 16541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 397:
#line 990 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 16547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 398:
#line 994 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 16553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399:
#line 995 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 16559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400:
#line 1007 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 16565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401:
#line 1008 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402:
#line 1014 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 16582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403:
#line 1021 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 16593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404:
#line 1028 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 16604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405:
#line 1035 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 16615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406:
#line 1067 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 16630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407:
#line 1078 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 16645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408:
#line 1091 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 16651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409:
#line 1095 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 16657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410:
#line 1096 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 16663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411:
#line 1099 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 16669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412:
#line 1100 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 16675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413:
#line 1103 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 16681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414:
#line 1104 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 16687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415:
#line 1109 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 16693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416:
#line 1110 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 16699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417:
#line 1116 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 16707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418:
#line 1120 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 16715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419:
#line 1126 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 16737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420:
#line 1147 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 16749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421:
#line 1154 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 16755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422:
#line 1167 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 16763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423:
#line 1170 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 16771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426:
#line 1177 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 16780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427:
#line 1182 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 16790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428:
#line 1189 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 16799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429:
#line 1194 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 16809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430:
#line 1200 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 16818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431:
#line 1205 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 16828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432:
#line 1210 "third_party/libpg_query/grammar/statements/select.y"
                                                              {
               (yyval.typnam) = SystemTypeName("struct");
               (yyval.typnam)->typmods = (yyvsp[-1].list);
               (yyval.typnam)->location = (yylsp[-3]);
			}
#line 16838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433:
#line 1219 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 16844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434:
#line 1221 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 16850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435:
#line 1223 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 16856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436:
#line 1227 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437:
#line 1228 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438:
#line 1229 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439:
#line 1230 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440:
#line 1231 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441:
#line 1233 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 16895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442:
#line 1238 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 16905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443:
#line 1257 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444:
#line 1258 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445:
#line 1259 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446:
#line 1260 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447:
#line 1272 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 16939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448:
#line 1278 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-2].str)), (yyvsp[-1].list)));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-2]);
				}
#line 16949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449:
#line 1285 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 16955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450:
#line 1286 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 16961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 451:
#line 1293 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 16970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452:
#line 1298 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 16979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453:
#line 1303 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 16988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454:
#line 1308 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 16997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455:
#line 1313 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 17006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456:
#line 1318 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457:
#line 1323 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458:
#line 1328 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459:
#line 1334 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460:
#line 1340 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461:
#line 1346 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 17063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462:
#line 1353 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 17088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463:
#line 1374 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 17096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464:
#line 1384 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 17104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465:
#line 1388 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 17112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466:
#line 1396 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 17120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467:
#line 1400 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 17129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468:
#line 1408 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 17142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469:
#line 1420 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470:
#line 1441 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 17168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471:
#line 1445 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 17176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472:
#line 1451 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 17184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473:
#line 1455 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 17199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474:
#line 1468 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 17209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475:
#line 1476 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 17221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476:
#line 1486 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 17227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477:
#line 1488 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 17233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478:
#line 1490 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 17239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479:
#line 1492 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 17245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480:
#line 1494 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 17251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481:
#line 1496 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 17257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482:
#line 1500 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 17263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483:
#line 1501 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 17269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484:
#line 1509 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 17282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485:
#line 1518 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486:
#line 1526 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 17307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487:
#line 1535 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488:
#line 1546 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 17328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489:
#line 1553 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 17334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490:
#line 1554 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 17340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491:
#line 1555 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 17346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508:
#line 1584 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 17352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509:
#line 1586 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 17358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 510:
#line 1588 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 17364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 511:
#line 1590 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 17370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512:
#line 1592 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 17376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 513:
#line 1594 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 17382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 514:
#line 1596 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 17388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515:
#line 1598 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 17394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516:
#line 1600 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 17403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517:
#line 1605 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 17412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518:
#line 1610 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 17422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519:
#line 1616 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 17433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520:
#line 1623 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 17442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521:
#line 1628 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 17452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522:
#line 1634 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 17461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523:
#line 1639 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 17467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524:
#line 1670 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 17473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525:
#line 1673 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), (yylsp[-1])); }
#line 17479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526:
#line 1675 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 17491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527:
#line 1683 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 17501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528:
#line 1698 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 17507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529:
#line 1700 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 17513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530:
#line 1702 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531:
#line 1704 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532:
#line 1706 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533:
#line 1708 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534:
#line 1710 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535:
#line 1712 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536:
#line 1714 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537:
#line 1716 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538:
#line 1718 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539:
#line 1720 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540:
#line 1722 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541:
#line 1724 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542:
#line 1727 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543:
#line 1729 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 17597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544:
#line 1731 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 17603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545:
#line 1734 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 546:
#line 1736 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 547:
#line 1738 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 17621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 548:
#line 1740 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 17627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 549:
#line 1743 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 17636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 550:
#line 1748 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 17645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 551:
#line 1753 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 17656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552:
#line 1760 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 17665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553:
#line 1765 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 17676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554:
#line 1772 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 17685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555:
#line 1777 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 17697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556:
#line 1785 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 17706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557:
#line 1790 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 17718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558:
#line 1799 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 17730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559:
#line 1807 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 17742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560:
#line 1815 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 17754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561:
#line 1823 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 17766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562:
#line 1841 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 17778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563:
#line 1849 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 17790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564:
#line 1857 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 17802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565:
#line 1865 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 17814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566:
#line 1873 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 17826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567:
#line 1880 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 17835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568:
#line 1885 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->parameters = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 17847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569:
#line 1893 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->parameters = list_make1((yyvsp[-2].node));
				n->function = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 17859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570:
#line 1901 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 17879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571:
#line 1917 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 17891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572:
#line 1925 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 17903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573:
#line 1933 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 17915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574:
#line 1941 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 17927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575:
#line 1949 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 17939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576:
#line 1957 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 17951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577:
#line 1965 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 17959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578:
#line 1969 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 17967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579:
#line 1973 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 17975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580:
#line 1977 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 17983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581:
#line 1981 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 17995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582:
#line 1989 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 18007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583:
#line 1997 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 18019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584:
#line 2005 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 18031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585:
#line 2013 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 18055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586:
#line 2033 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 18081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587:
#line 2055 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 18096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588:
#line 2066 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 18107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589:
#line 2073 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 18125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590:
#line 2098 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 18131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591:
#line 2100 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), (yylsp[-1])); }
#line 18137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592:
#line 2102 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 18143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593:
#line 2104 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 18149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594:
#line 2106 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595:
#line 2108 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596:
#line 2110 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597:
#line 2112 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598:
#line 2114 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599:
#line 2116 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600:
#line 2118 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601:
#line 2120 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602:
#line 2122 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 603:
#line 2124 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 604:
#line 2126 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 605:
#line 2128 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606:
#line 2130 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607:
#line 2132 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 18233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608:
#line 2134 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 18239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609:
#line 2136 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 18247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610:
#line 2140 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 18255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611:
#line 2144 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 18263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612:
#line 2148 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 18271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613:
#line 2161 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 18277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614:
#line 2162 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 18283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615:
#line 2164 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeParamRef(0, (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeParamRef(0, (yylsp[-1]));
				}
#line 18299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616:
#line 2176 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[-1].ival);
					p->location = (yylsp[-1]);
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) p;
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) p;
				}
#line 18318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617:
#line 2191 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (yyvsp[-2].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *)n;
					}
					else
						(yyval.node) = (yyvsp[-2].node);
				}
#line 18334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618:
#line 2203 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 18340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619:
#line 2205 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 18346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620:
#line 2207 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 18361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621:
#line 2218 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 18389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622:
#line 2242 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 18404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623:
#line 2255 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 18412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624:
#line 2259 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-4].list), (yyvsp[-2].list), (yylsp[-4]));
					n->agg_order = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625:
#line 2265 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), list_make1((yyvsp[-2].node)), (yylsp[-5]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626:
#line 2272 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-7].list), lappend((yyvsp[-5].list), (yyvsp[-2].node)), (yylsp[-7]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627:
#line 2279 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-2].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-1].list);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 18458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628:
#line 2289 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-2].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-1].list);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629:
#line 2296 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * We consider AGGREGATE(*) to invoke a parameterless
					 * aggregate.  This does the right thing for COUNT(*),
					 * and there are no other aggregates in SQL that accept
					 * '*' as parameter.
					 *
					 * The PGFuncCall node is also marked agg_star = true,
					 * so that later processing can detect what the argument
					 * really was.
					 */
					PGFuncCall *n = makeFuncCall((yyvsp[-3].list), NIL, (yylsp[-3]));
					n->agg_star = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630:
#line 2324 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-3].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-2].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-2]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-2]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-2]))));
						n->agg_order = (yyvsp[-2].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-1].node);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 18528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631:
#line 2359 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 18534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632:
#line 2369 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 18540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633:
#line 2370 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634:
#line 2378 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 18556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635:
#line 2384 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_DATE, -1, (yylsp[0]));
				}
#line 18564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636:
#line 2388 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME, -1, (yylsp[0]));
				}
#line 18572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637:
#line 2392 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 18580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638:
#line 2396 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP, -1, (yylsp[0]));
				}
#line 18588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639:
#line 2400 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 18596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 640:
#line 2404 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME, -1, (yylsp[0]));
				}
#line 18604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 641:
#line 2408 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 18612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642:
#line 2412 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP, -1, (yylsp[0]));
				}
#line 18620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643:
#line 2416 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 18628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644:
#line 2420 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_ROLE, -1, (yylsp[0]));
				}
#line 18636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645:
#line 2424 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_USER, -1, (yylsp[0]));
				}
#line 18644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646:
#line 2428 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_SESSION_USER, -1, (yylsp[0]));
				}
#line 18652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647:
#line 2432 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_USER, -1, (yylsp[0]));
				}
#line 18660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648:
#line 2436 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_CATALOG, -1, (yylsp[0]));
				}
#line 18668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649:
#line 2440 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_SCHEMA, -1, (yylsp[0]));
				}
#line 18676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650:
#line 2444 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), (yylsp[-5])); }
#line 18682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651:
#line 2446 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 18690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652:
#line 2450 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 18703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653:
#line 2459 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position(B, A) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 18712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654:
#line 2464 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 18723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655:
#line 2471 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 18742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656:
#line 2486 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 18753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657:
#line 2493 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 18761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658:
#line 2497 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 18769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659:
#line 2501 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 18777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660:
#line 2505 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 18785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661:
#line 2509 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 18796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662:
#line 2522 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 18802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663:
#line 2523 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 18808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664:
#line 2527 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 18814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665:
#line 2528 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 18820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666:
#line 2536 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 18826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667:
#line 2537 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 18832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668:
#line 2541 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 18838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669:
#line 2543 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 18844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670:
#line 2548 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 18854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671:
#line 2556 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 18860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672:
#line 2558 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 18877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673:
#line 2571 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 18883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674:
#line 2576 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 18901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675:
#line 2601 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 18907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676:
#line 2602 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 18913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677:
#line 2605 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 18919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678:
#line 2606 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 18925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679:
#line 2618 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					if (n->frameOptions & (FRAMEOPTION_START_VALUE_PRECEDING |
										   FRAMEOPTION_END_VALUE_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("RANGE PRECEDING is only supported with UNBOUNDED"),
								 parser_errposition((yylsp[-1]))));
					if (n->frameOptions & (FRAMEOPTION_START_VALUE_FOLLOWING |
										   FRAMEOPTION_END_VALUE_FOLLOWING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("RANGE FOLLOWING is only supported with UNBOUNDED"),
								 parser_errposition((yylsp[-1]))));
					(yyval.windef) = n;
				}
#line 18947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680:
#line 2636 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					(yyval.windef) = n;
				}
#line 18957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681:
#line 2642 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 18969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682:
#line 2652 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 18990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683:
#line 2669 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);
					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_VALUE_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_VALUE_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 19031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684:
#line 2714 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 19043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685:
#line 2722 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 19055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686:
#line 2730 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 19067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687:
#line 2738 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 19079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688:
#line 2746 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 19091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689:
#line 2766 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 19097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690:
#line 2767 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 19103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691:
#line 2770 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 19109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692:
#line 2771 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 19115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693:
#line 2774 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 19121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694:
#line 2775 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 19127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695:
#line 2776 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 19133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696:
#line 2779 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 19139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697:
#line 2780 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 19145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698:
#line 2783 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 19151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699:
#line 2784 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 19157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700:
#line 2785 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 19163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701:
#line 2786 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 19169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702:
#line 2787 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 19175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703:
#line 2788 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 19181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704:
#line 2789 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 19187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705:
#line 2790 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 19193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706:
#line 2791 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 19199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707:
#line 2792 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 19205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708:
#line 2793 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 19211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709:
#line 2794 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 19217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710:
#line 2798 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 19223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711:
#line 2800 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 19229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712:
#line 2805 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 19235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713:
#line 2807 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 19241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714:
#line 2812 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 19247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715:
#line 2814 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 19253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716:
#line 2816 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 19259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717:
#line 2818 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 19265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718:
#line 2820 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 19271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719:
#line 2822 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 19277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720:
#line 2824 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 19283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721:
#line 2826 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 19289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722:
#line 2840 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 19295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723:
#line 2842 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 19301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724:
#line 2846 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 19309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725:
#line 2850 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 19317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726:
#line 2857 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 19325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727:
#line 2861 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 19333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728:
#line 2867 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 19341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729:
#line 2871 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 19354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730:
#line 2880 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 19367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731:
#line 2890 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 19373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732:
#line 2891 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 19379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733:
#line 2896 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 19387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734:
#line 2899 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 19393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735:
#line 2906 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 19399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736:
#line 2907 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 19405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737:
#line 2908 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 19411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738:
#line 2909 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 19417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739:
#line 2910 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 19423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740:
#line 2911 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 19429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741:
#line 2912 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 19435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742:
#line 2913 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 19441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743:
#line 2914 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 19447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744:
#line 2915 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 19453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745:
#line 2926 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 19461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746:
#line 2930 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 19469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747:
#line 2937 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 19475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748:
#line 2943 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-2].node)); }
#line 19481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749:
#line 2944 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 19487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750:
#line 2961 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 19495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751:
#line 2965 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 19504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752:
#line 2970 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 19512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753:
#line 2974 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), -1));
				}
#line 19531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754:
#line 2989 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 19539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755:
#line 2993 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 19545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756:
#line 2997 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757:
#line 3000 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758:
#line 3003 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 19563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759:
#line 3004 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760:
#line 3005 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 19575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761:
#line 3009 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 19586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762:
#line 3015 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 19592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763:
#line 3026 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 19606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764:
#line 3039 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765:
#line 3040 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 19618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766:
#line 3045 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 19630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767:
#line 3055 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768:
#line 3056 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 19642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769:
#line 3059 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 19648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770:
#line 3060 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 19654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771:
#line 3064 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 19662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772:
#line 3068 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 19670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773:
#line 3075 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 19678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774:
#line 3079 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeNode(PGAStar);
				}
#line 19686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775:
#line 3083 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 19698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776:
#line 3091 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 19710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777:
#line 3101 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778:
#line 3102 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 19722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779:
#line 3106 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780:
#line 3107 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 19734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781:
#line 3111 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 19740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 782:
#line 3112 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 19746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785:
#line 3126 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786:
#line 3127 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 19758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787:
#line 3131 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 19764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788:
#line 3132 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 19770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789:
#line 3136 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 19782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790:
#line 3152 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 19794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791:
#line 3160 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 19806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792:
#line 3168 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnRef *n = makeNode(PGColumnRef);
					n->fields = list_make1(makeNode(PGAStar));
					n->location = (yylsp[0]);

					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)n;
					(yyval.target)->location = (yylsp[0]);
				}
#line 19822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793:
#line 3189 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 19828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794:
#line 3190 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 19834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795:
#line 3202 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 19842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796:
#line 3206 "third_party/libpg_query/grammar/statements/select.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 19871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797:
#line 3233 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 19877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798:
#line 3235 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 19883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799:
#line 3239 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800:
#line 3241 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801:
#line 3252 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 19901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802:
#line 3254 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 19910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803:
#line 3265 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 19918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804:
#line 3269 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 19926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805:
#line 3273 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 19934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806:
#line 3277 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 19942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807:
#line 3281 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 19955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808:
#line 3290 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 19966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809:
#line 3297 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-5].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, nor ORDER BY.
					 */
					foreach(lc, (yyvsp[-3].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-2].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-2]))));

					t->typmods = (yyvsp[-3].list);
					t->location = (yylsp[-5]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 20002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810:
#line 3329 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 20010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811:
#line 3333 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 20018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 812:
#line 3337 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 20026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813:
#line 3341 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 20034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814:
#line 3345 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 20042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815:
#line 3349 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 20050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816:
#line 3353 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 20058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817:
#line 3358 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 20064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818:
#line 3359 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819:
#line 3375 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820:
#line 3376 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821:
#line 3377 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822:
#line 3380 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823:
#line 3381 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824:
#line 3386 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825:
#line 3387 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826:
#line 3388 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827:
#line 3391 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 20124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828:
#line 3392 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 20130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829:
#line 3396 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 20136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830:
#line 3398 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 20142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831:
#line 3402 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832:
#line 3403 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 20154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834:
#line 3414 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835:
#line 3415 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836:
#line 3416 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837:
#line 3417 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838:
#line 3418 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839:
#line 3421 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840:
#line 3422 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841:
#line 15 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                {
					PGCreatePropertyGraphStmt *n = makeNode(PGCreatePropertyGraphStmt);
					n->name = (yyvsp[-10].str);
					n->vertex_tables = 	(yyvsp[-6].list);
					n->edge_tables = (yyvsp[-1].list);
					// n->property_graph_content = $5;
					(yyval.node) = (PGNode *)n;
					// n = $5;
				}
#line 20210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842:
#line 25 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                {
					PGCreatePropertyGraphStmt *n = makeNode(PGCreatePropertyGraphStmt);
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847:
#line 47 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 20226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848:
#line 48 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 20232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 849:
#line 54 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                {
					PGPropertyGraphTable *n = makeNode(PGPropertyGraphTable);
					n->name = (yyvsp[-2].range);
					n->labels = (yyvsp[0].list);
					n->keys = (yyvsp[-1].list);
					n->is_vertex_table = true;
					(yyval.node) = (PGNode *) n;
				}
#line 20245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 850:
#line 66 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 851:
#line 70 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].str)); }
#line 20257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 852:
#line 71 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].str)); }
#line 20263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 853:
#line 75 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 854:
#line 81 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 20275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 855:
#line 82 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 20281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 856:
#line 89 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                {
					PGPropertyGraphTable *n = makeNode(PGPropertyGraphTable);
					n->name = (yyvsp[-10].range);
					n->keys = (yyvsp[-9].list);
					n->is_vertex_table = false;
					n->source_key = (yyvsp[-7].list);
					n->source_key_reference = (yyvsp[-5].range);
					n->destination_key = (yyvsp[-3].list);
					n->destination_key_reference = (yyvsp[-1].range);
					n->labels = (yyvsp[0].list); 
					(yyval.node) = (PGNode *) n;
				}
#line 20298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 857:
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 858:
#line 16 "third_party/libpg_query/grammar/statements/load.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 859:
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 20328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 860:
#line 21 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 861:
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 20348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 862:
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 20358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 863:
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 20368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 864:
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 20378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 865:
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->if_not_exists = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 866:
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->if_not_exists = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 867:
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 868:
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 869:
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 20450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 870:
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 20456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 871:
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 20462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 872:
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 873:
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 20474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 874:
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 875:
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 20486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 876:
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 20492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 877:
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 20498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 878:
#line 12 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
    {
        PGMatchPattern *n = makeNode(PGMatchPattern);
        n->pg_name = (yyvsp[-7].str);
        n->pattern = (yyvsp[-4].list);
        n->where_clause = (yyvsp[-3].node);
        n->columns = (yyvsp[-2].list);
        
        n->name = (yyvsp[0].range);
        // n->pg_name = $6;
        // n->pattern = $9;
        // n->where_clause = $10;
        // n->columns = $11;
        
        // n->name = $13;
        (yyval.node) = (PGNode *) n;
    }
#line 20519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 879:
#line 53 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 880:
#line 54 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                               { (yyval.list) = NIL; }
#line 20531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 881:
#line 59 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                { 
                    (yyval.list) = list_make1((yyvsp[0].range)); 
                }
#line 20539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 882:
#line 63 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                {
                     (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); 
                }
#line 20547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 883:
#line 83 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
    { 
        (yyval.list) = list_make1(list_make2((yyvsp[-1].str),(yyvsp[0].list))); 
    }
#line 20555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884:
#line 87 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
    { 
        (yyval.list) = lappend((yyvsp[-3].list), list_make1(list_make2((yyvsp[-1].str),(yyvsp[0].list))));
    }
#line 20563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885:
#line 94 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                            {(yyval.str) = (yyvsp[-1].str); }
#line 20569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886:
#line 95 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                            {(yyval.str) = NULL;}
#line 20575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887:
#line 99 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                            {(yyval.list) = list_make1((yyvsp[0].node));}
#line 20581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888:
#line 100 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                            { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));}
#line 20587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889:
#line 104 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                    { (yyval.node) = (yyvsp[0].node); }
#line 20593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890:
#line 105 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                    { (yyval.node) = (yyvsp[0].node); }
#line 20599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891:
#line 111 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
    {
        PGGraphVariablePattern *n = makeNode(PGGraphVariablePattern);
        n->variable_name = (yyvsp[-1].str);
        n->label_name = (yyvsp[0].str);
        (yyval.node) = (PGNode *) n;
        
    }
#line 20611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892:
#line 119 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
    {
        PGGraphVariablePattern *n = makeNode(PGGraphVariablePattern);
        n->variable_name = (yyvsp[-1].str);
        n->label_name = (yyvsp[0].str);
        (yyval.node) = (PGNode *) n;
    }
#line 20622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893:
#line 127 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
    { 
        // $$ = $2;
        PGGraphElementPattern *n = makeNode(PGGraphElementPattern);
        n->pattern_clause = (yyvsp[-1].node);
        // n->label_name = $3;
        n->is_vertex_pattern = true;
        (yyval.node) = (PGNode *) n;
        // $2->alias = makeAlias($3, NIL);
		// 	$$ = $2;
        }
#line 20637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894:
#line 141 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 20643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895:
#line 142 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                { (yyval.str) = NULL; }
#line 20649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896:
#line 146 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                            { (yyval.str) = (yyvsp[0].str);}
#line 20655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897:
#line 150 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 20661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898:
#line 151 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                { (yyval.str) = NULL; }
#line 20667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901:
#line 162 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
    { 
        PGGraphVariablePattern *n = makeNode(PGGraphVariablePattern);
        n->variable_name = (yyvsp[-1].str);
        n->label_name = (yyvsp[0].str);
        (yyval.node) = (PGNode *) n;
        // // $$ = $1;
        // $$ = makeNode(PGAlias);
		// $$->aliasname = $2;
            // $1->alias = makeAlias($2, NIL);
			// $$ = $1;
    }
#line 20683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902:
#line 175 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
    { 
        // $$ = $1;
        PGGraphVariablePattern *n = makeNode(PGGraphVariablePattern);
        n->variable_name = (yyvsp[0].str);
        (yyval.node) = (PGNode *) n;
         // $$ = $2; 
        // $$ = makeNode(PGAlias);
		// $$->aliasname = $2;
    }
#line 20697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903:
#line 187 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                                {(yyval.node) = (yyvsp[0].node);}
#line 20703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904:
#line 190 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
    {
        //how to handle this for conversion in tranform
        (yyval.node) = (PGNode *) makeString((yyvsp[0].str));
    }
#line 20712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905:
#line 197 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                                {(yyval.node) = (yyvsp[0].node);}
#line 20718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906:
#line 198 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                                {(yyval.node) = (yyvsp[0].node);}
#line 20724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907:
#line 199 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                                {(yyval.node) = (yyvsp[0].node);}
#line 20730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908:
#line 206 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
        {
            PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
            n->pattern_clause = (yyvsp[-2].node);
            n->direction = PG_MATCH_DIR_RIGHT;
            n->is_vertex_pattern = false;
            // $$ = $3;
            (yyval.node) = (PGNode *) n;
        }
#line 20743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909:
#line 215 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
        { 
            PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
            n->pattern_clause = (yyvsp[-1].node);
            n->direction = PG_MATCH_DIR_RIGHT;
            n->is_vertex_pattern = false;
            // $$ = $3;
            (yyval.node) = (PGNode *) n;
            // $$ = $2;
        }
#line 20757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910:
#line 228 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
        { 
            // $$ = $4;
            PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
            n->pattern_clause = (yyvsp[-2].node);
            n->direction = PG_MATCH_DIR_LEFT;
            n->is_vertex_pattern = false;
            // $$ = $3;
            (yyval.node) = (PGNode *) n;
        }
#line 20771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911:
#line 238 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
        { 
            
            PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
            n->pattern_clause = (yyvsp[-1].node);
            n->direction = PG_MATCH_DIR_LEFT;
            n->is_vertex_pattern = false;
            // $$ = $3;
            (yyval.node) = (PGNode *) n;
        }
#line 20785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912:
#line 251 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
        { 
            // $$ =$3;
            PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
            n->pattern_clause = (yyvsp[-2].node);
            n->direction = PG_MATCH_DIR_ANY;
            n->is_vertex_pattern = false;
            (yyval.node) = (PGNode *) n;
        }
#line 20798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913:
#line 260 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
        { 
            // $$ = $2;
            PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
            n->pattern_clause = (yyvsp[-1].node);
            n->direction = PG_MATCH_DIR_ANY;
            n->is_vertex_pattern = false;
            (yyval.node) = (PGNode *) n;
        }
#line 20811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914:
#line 271 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                { (yyval.str) = "-"; }
#line 20817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915:
#line 272 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                     { (yyval.str) = "->"; }
#line 20823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916:
#line 273 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                               { (yyval.str) = "<-"; }
#line 20829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917:
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					/* ...but not both */
					n->schemaname = (yyvsp[-1].str);
					n->schemaElts = (yyvsp[0].list);
					n->if_not_exists = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918:
#line 17 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					/* ...but not here */
					n->schemaname = (yyvsp[-1].str);
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->if_not_exists = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919:
#line 35 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 20870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920:
#line 41 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 20876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925:
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926:
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[0].range);
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927:
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 20928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928:
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 20940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929:
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 20954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930:
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 20960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931:
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 20966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932:
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 20972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933:
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 20978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934:
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 20992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935:
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 20998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936:
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 21004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937:
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 21010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938:
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 21016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939:
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 21022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940:
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 21028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941:
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 21040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942:
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943:
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 21052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948:
#line 2 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].vsetstmt); }
#line 21058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949:
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 21069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950:
#line 15 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					(yyval.vsetstmt) = n;
				}
#line 21079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951:
#line 24 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 21085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 952:
#line 26 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 21096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 953:
#line 33 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 21107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 954:
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 955:
#line 12 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 956:
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 957:
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 958:
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 959:
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 960:
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 961:
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 962:
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 963:
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 964:
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 965:
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 966:
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 967:
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 968:
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969:
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 21316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970:
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 21322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971:
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972:
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973:
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974:
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975:
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976:
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 977:
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 978:
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 21427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 979:
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 21441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 980:
#line 73 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 21447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981:
#line 74 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 21453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982:
#line 75 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 21459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983:
#line 76 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 21465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984:
#line 77 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 21471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985:
#line 78 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 21477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986:
#line 79 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 21483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987:
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 21489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988:
#line 81 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 21495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989:
#line 82 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 21501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990:
#line 83 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 21507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 991:
#line 84 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 21513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 992:
#line 85 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 21519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 993:
#line 86 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 21525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 994:
#line 87 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 21531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 995:
#line 92 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 21537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 996:
#line 93 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 21543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997:
#line 94 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 21549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 998:
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 21555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 999:
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 21561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1000:
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 21567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1001:
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 21573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1002:
#line 103 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 21579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1003:
#line 104 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 21585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1004:
#line 109 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 21591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1005:
#line 110 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 21597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1006:
#line 111 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 21603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1007:
#line 116 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 21609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1008:
#line 117 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 21615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1009:
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 21621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1010:
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1011:
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1012:
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 21651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1013:
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 21657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1014:
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 21663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1015:
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 21669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1016:
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 21675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1017:
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 21681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1018:
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 21687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1019:
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 21696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1020:
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 21702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1021:
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 21710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1022:
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1023:
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 21726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1024:
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 21734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1025:
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1026:
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027:
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028:
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 21766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029:
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 21774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030:
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 21782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031:
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 21791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032:
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033:
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 21807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034:
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035:
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 21821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036:
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 21827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037:
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038:
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 21839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039:
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 21845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040:
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->if_not_exists = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041:
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->if_not_exists = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042:
#line 32 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043:
#line 33 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 21885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044:
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 21917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045:
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 21940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046:
#line 53 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 21946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047:
#line 54 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 21952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048:
#line 60 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 21960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049:
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 21966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050:
#line 69 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 21974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051:
#line 73 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 21982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1052:
#line 80 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 21988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053:
#line 81 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 21994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054:
#line 85 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 22000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055:
#line 86 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 22006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056:
#line 91 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 22012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057:
#line 92 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 22018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058:
#line 96 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059:
#line 97 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060:
#line 102 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 22036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061:
#line 103 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 22042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062:
#line 104 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 22048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063:
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 22054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064:
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 22060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065:
#line 112 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 22068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066:
#line 120 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 22076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067:
#line 123 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 22082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068:
#line 128 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 22088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069:
#line 129 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 22094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070:
#line 135 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 22102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071:
#line 138 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 22108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072:
#line 144 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 22116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073:
#line 148 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 22124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1074:
#line 152 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 22132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075:
#line 156 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076:
#line 160 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077:
#line 164 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 22156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078:
#line 168 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 22164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079:
#line 172 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080:
#line 176 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081:
#line 180 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 22188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082:
#line 184 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 22196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083:
#line 188 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 22204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084:
#line 192 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 22212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085:
#line 196 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 22220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086:
#line 203 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 22226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087:
#line 209 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088:
#line 210 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 22238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089:
#line 211 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 22244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090:
#line 217 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 22252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091:
#line 221 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 22260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092:
#line 8 "third_party/libpg_query/grammar/statements/create_function.y"
                                {
					PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
					n->name = (yyvsp[-3].range);
					n->params = (yyvsp[-2].list);
					n->function = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095:
#line 24 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 22280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096:
#line 28 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 22288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097:
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098:
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099:
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100:
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101:
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102:
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103:
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104:
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105:
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 22398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106:
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 22404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107:
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108:
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 22416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109:
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 22424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110:
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 22432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111:
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 22447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112:
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 22455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113:
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 22463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114:
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 22471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115:
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116:
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117:
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118:
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119:
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120:
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 22542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121:
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 22553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122:
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 22565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123:
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124:
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125:
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 22601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126:
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 22621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127:
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128:
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129:
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130:
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131:
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132:
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 22701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133:
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134:
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1135:
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1136:
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 22753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1137:
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1138:
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1139:
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 22789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1140:
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 22799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1141:
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1142:
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1143:
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 22832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1144:
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1145:
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 22844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1146:
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 22852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1147:
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 22861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1148:
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 22870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1149:
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 22878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1150:
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 22884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1151:
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 22890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1152:
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1153:
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 22902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1154:
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 22908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1155:
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->is_local = false;
					(yyval.node) = (PGNode *) n;
				}
#line 22918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1156:
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->is_local = true;
					(yyval.node) = (PGNode *) n;
				}
#line 22928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1157:
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->is_local = false;
					(yyval.node) = (PGNode *) n;
				}
#line 22938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1158:
#line 32 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 22944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1159:
#line 34 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 22955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1160:
#line 42 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 22970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1161:
#line 53 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 22982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1162:
#line 65 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 22994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1163:
#line 73 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 23006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1164:
#line 81 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 23017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1165:
#line 88 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 23028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1166:
#line 98 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 23034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1167:
#line 100 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 23040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1168:
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 23048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1169:
#line 110 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 23056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170:
#line 114 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 23075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171:
#line 129 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 23086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172:
#line 135 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 23092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173:
#line 136 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 23098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174:
#line 137 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 23104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175:
#line 141 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176:
#line 142 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 23116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177:
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 23130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178:
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 23144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179:
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 23159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180:
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 23170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181:
#line 10 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 23180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182:
#line 16 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 23190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183:
#line 22 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 23201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184:
#line 29 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 23212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185:
#line 36 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 23223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186:
#line 45 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 23229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187:
#line 46 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 23235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1188:
#line 47 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 23241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1189:
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 23252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190:
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->if_not_exists = false;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 23272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191:
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->if_not_exists = true;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 23292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192:
#line 51 "third_party/libpg_query/grammar/statements/execute.y"
                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 23298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193:
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 23304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194:
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195:
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196:
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197:
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198:
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199:
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1200:
#line 10 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-3].range);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 23394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1201:
#line 22 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 23404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202:
#line 29 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 23415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203:
#line 36 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 23425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204:
#line 42 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 23436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1205:
#line 49 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 23446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1206:
#line 59 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 23454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1207:
#line 63 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 23463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1208:
#line 72 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 23475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1209:
#line 81 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 23487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1210:
#line 89 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 23495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1211:
#line 96 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 23501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1212:
#line 97 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 23507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1213:
#line 103 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 23519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1214:
#line 115 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 23528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1215:
#line 120 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 23553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1216:
#line 145 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 23566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1217:
#line 155 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 23579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1218:
#line 164 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 23587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1219:
#line 171 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 23602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1220:
#line 182 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 23617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1221:
#line 193 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 23632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1222:
#line 207 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1223:
#line 208 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 23644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1224:
#line 214 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 23650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1225:
#line 215 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 23656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1226:
#line 220 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 23662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1227:
#line 221 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 23668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1228:
#line 227 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1229:
#line 228 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 23680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1230:
#line 232 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1231:
#line 233 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 23692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1232:
#line 239 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 23698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1233:
#line 241 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 23704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1234:
#line 246 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1235:
#line 247 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 23716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236:
#line 251 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 23722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237:
#line 252 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 23728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238:
#line 258 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 23740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 23744 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = YY_CAST (char *, YYSTACK_ALLOC (YY_CAST (YYSIZE_T, yymsg_alloc)));
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (&yylloc, yyscanner, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;


#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif


/*-----------------------------------------------------.
| yyreturn -- parsing is finished, return the result.  |
`-----------------------------------------------------*/
yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[+*yyssp], yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
#line 274 "third_party/libpg_query/grammar/statements/insert.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	n->seed = seed;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	return (PGNode *) p;
}

static PGNode *
makeParamRefCast(int number, int location, PGTypeName *tpname)
{
	PGNode *p = makeParamRef(number, location);
	return makeTypeCast(p, tpname, -1);
}

/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make2(makeString(DEFAULT_SCHEMA),
											   makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

static PGNode *
makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod, int location)
{
	PGSQLValueFunction *svf = makeNode(PGSQLValueFunction);

	svf->op = op;
	/* svf->type will be filled during parse analysis */
	svf->typmod = typmod;
	svf->location = location;
	return (PGNode *) svf;
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
