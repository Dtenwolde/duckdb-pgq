/* A Bison parser, made by GNU Bison 3.5.1.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2020 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Undocumented macros, especially those whose name start with YY_,
   are private implementation details.  Do not rely on them.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.5.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static PGNode *makeParamRefCast(int number, int location, PGTypeName *tpname);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static PGNode *makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod,
								  int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);


#line 241 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Use api.header.include to #include this header
   instead of duplicating it here.  */
#ifndef YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED
# define YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int base_yydebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    IDENT = 258,
    FCONST = 259,
    SCONST = 260,
    BCONST = 261,
    XCONST = 262,
    Op = 263,
    ICONST = 264,
    PARAM = 265,
    TYPECAST = 266,
    DOT_DOT = 267,
    COLON_EQUALS = 268,
    EQUALS_GREATER = 269,
    LAMBDA_ARROW = 270,
    LESS_EQUALS = 271,
    GREATER_EQUALS = 272,
    NOT_EQUALS = 273,
    ABORT_P = 274,
    ABSOLUTE_P = 275,
    ACCESS = 276,
    ACTION = 277,
    ADD_P = 278,
    ADMIN = 279,
    AFTER = 280,
    AGGREGATE = 281,
    ALL = 282,
    ALSO = 283,
    ALTER = 284,
    ALWAYS = 285,
    ANALYSE = 286,
    ANALYZE = 287,
    AND = 288,
    ANY = 289,
    ARRAY = 290,
    AS = 291,
    ASC_P = 292,
    ASSERTION = 293,
    ASSIGNMENT = 294,
    ASYMMETRIC = 295,
    AT = 296,
    ATTACH = 297,
    ATTRIBUTE = 298,
    AUTHORIZATION = 299,
    BACKWARD = 300,
    BEFORE = 301,
    BEGIN_P = 302,
    BETWEEN = 303,
    BIGINT = 304,
    BINARY = 305,
    BIT = 306,
    BOOLEAN_P = 307,
    BOTH = 308,
    BY = 309,
    CACHE = 310,
    CALL_P = 311,
    CALLED = 312,
    CASCADE = 313,
    CASCADED = 314,
    CASE = 315,
    CAST = 316,
    CATALOG_P = 317,
    CHAIN = 318,
    CHAR_P = 319,
    CHARACTER = 320,
    CHARACTERISTICS = 321,
    CHECK_P = 322,
    CHECKPOINT = 323,
    CLASS = 324,
    CLOSE = 325,
    CLUSTER = 326,
    COALESCE = 327,
    COLLATE = 328,
    COLLATION = 329,
    COLUMN = 330,
    COLUMNS = 331,
    COMMENT = 332,
    COMMENTS = 333,
    COMMIT = 334,
    COMMITTED = 335,
    CONCURRENTLY = 336,
    CONFIGURATION = 337,
    CONFLICT = 338,
    CONNECTION = 339,
    CONSTRAINT = 340,
    CONSTRAINTS = 341,
    CONTENT_P = 342,
    CONTINUE_P = 343,
    CONVERSION_P = 344,
    COPY = 345,
    COST = 346,
    CREATE_P = 347,
    CROSS = 348,
    CSV = 349,
    CUBE = 350,
    CURRENT_P = 351,
    CURRENT_CATALOG = 352,
    CURRENT_DATE = 353,
    CURRENT_ROLE = 354,
    CURRENT_SCHEMA = 355,
    CURRENT_TIME = 356,
    CURRENT_TIMESTAMP = 357,
    CURRENT_USER = 358,
    CURSOR = 359,
    CYCLE = 360,
    DATA_P = 361,
    DATABASE = 362,
    DAY_P = 363,
    DAYS_P = 364,
    DEALLOCATE = 365,
    DEC = 366,
    DECIMAL_P = 367,
    DECLARE = 368,
    DEFAULT = 369,
    DEFAULTS = 370,
    DEFERRABLE = 371,
    DEFERRED = 372,
    DEFINER = 373,
    DELETE_P = 374,
    DELIMITER = 375,
    DELIMITERS = 376,
    DEPENDS = 377,
    DESC_P = 378,
    DESCRIBE = 379,
    DESTINATION = 380,
    DETACH = 381,
    DICTIONARY = 382,
    DISABLE_P = 383,
    DISCARD = 384,
    DISCRIMINATOR = 385,
    DISTINCT = 386,
    DO = 387,
    DOCUMENT_P = 388,
    DOMAIN_P = 389,
    DOUBLE_P = 390,
    DROP = 391,
    EACH = 392,
    EDGE = 393,
    ELSE = 394,
    ENABLE_P = 395,
    ENCODING = 396,
    ENCRYPTED = 397,
    END_P = 398,
    ENUM_P = 399,
    ESCAPE = 400,
    EVENT = 401,
    EXCEPT = 402,
    EXCLUDE = 403,
    EXCLUDING = 404,
    EXCLUSIVE = 405,
    EXECUTE = 406,
    EXISTS = 407,
    EXPLAIN = 408,
    EXPORT_P = 409,
    EXTENSION = 410,
    EXTERNAL = 411,
    EXTRACT = 412,
    FALSE_P = 413,
    FAMILY = 414,
    FETCH = 415,
    FILTER = 416,
    FIRST_P = 417,
    FLOAT_P = 418,
    FOLLOWING = 419,
    FOR = 420,
    FORCE = 421,
    FOREIGN = 422,
    FORWARD = 423,
    FREEZE = 424,
    FROM = 425,
    FULL = 426,
    FUNCTION = 427,
    FUNCTIONS = 428,
    GENERATED = 429,
    GLOB = 430,
    GLOBAL = 431,
    GRANT = 432,
    GRANTED = 433,
    GRAPH = 434,
    GRAPH_TABLE = 435,
    GROUP_P = 436,
    GROUPING = 437,
    HANDLER = 438,
    HAVING = 439,
    HEADER_P = 440,
    HOLD = 441,
    HOUR_P = 442,
    HOURS_P = 443,
    IDENTITY_P = 444,
    IF_P = 445,
    ILIKE = 446,
    IMMEDIATE = 447,
    IMMUTABLE = 448,
    IMPLICIT_P = 449,
    IMPORT_P = 450,
    IN_P = 451,
    INCLUDING = 452,
    INCREMENT = 453,
    INDEX = 454,
    INDEXES = 455,
    INHERIT = 456,
    INHERITS = 457,
    INITIALLY = 458,
    INLINE_P = 459,
    INNER_P = 460,
    INOUT = 461,
    INPUT_P = 462,
    INSENSITIVE = 463,
    INSERT = 464,
    INSTEAD = 465,
    INT_P = 466,
    INTEGER = 467,
    INTERSECT = 468,
    INTERVAL = 469,
    INTO = 470,
    INVOKER = 471,
    IS = 472,
    ISNULL = 473,
    ISOLATION = 474,
    JOIN = 475,
    KEY = 476,
    LABEL = 477,
    LANGUAGE = 478,
    LARGE_P = 479,
    LAST_P = 480,
    LATERAL_P = 481,
    LEADING = 482,
    LEAKPROOF = 483,
    LEFT = 484,
    LEVEL = 485,
    LIKE = 486,
    LIMIT = 487,
    LISTEN = 488,
    LOAD = 489,
    LOCAL = 490,
    LOCALTIME = 491,
    LOCALTIMESTAMP = 492,
    LOCATION = 493,
    LOCK_P = 494,
    LOCKED = 495,
    LOGGED = 496,
    MACRO = 497,
    MAPPING = 498,
    MATCH = 499,
    MATERIALIZED = 500,
    MAXVALUE = 501,
    METHOD = 502,
    MICROSECOND_P = 503,
    MICROSECONDS_P = 504,
    MILLISECOND_P = 505,
    MILLISECONDS_P = 506,
    MINUTE_P = 507,
    MINUTES_P = 508,
    MINVALUE = 509,
    MODE = 510,
    MONTH_P = 511,
    MONTHS_P = 512,
    MOVE = 513,
    NAME_P = 514,
    NAMES = 515,
    NATIONAL = 516,
    NATURAL = 517,
    NCHAR = 518,
    NEW = 519,
    NEXT = 520,
    NO = 521,
    NODE = 522,
    NONE = 523,
    NOT = 524,
    NOTHING = 525,
    NOTIFY = 526,
    NOTNULL = 527,
    NOWAIT = 528,
    NULL_P = 529,
    NULLIF = 530,
    NULLS_P = 531,
    NUMERIC = 532,
    OBJECT_P = 533,
    OF = 534,
    OFF = 535,
    OFFSET = 536,
    OIDS = 537,
    OLD = 538,
    ON = 539,
    ONLY = 540,
    OPERATOR = 541,
    OPTION = 542,
    OPTIONS = 543,
    OR = 544,
    ORDER = 545,
    ORDINALITY = 546,
    OUT_P = 547,
    OUTER_P = 548,
    OVER = 549,
    OVERLAPS = 550,
    OVERLAY = 551,
    OVERRIDING = 552,
    OWNED = 553,
    OWNER = 554,
    PARALLEL = 555,
    PARSER = 556,
    PARTIAL = 557,
    PARTITION = 558,
    PASSING = 559,
    PASSWORD = 560,
    PERCENT = 561,
    PLACING = 562,
    PLANS = 563,
    POLICY = 564,
    POSITION = 565,
    PRAGMA_P = 566,
    PRECEDING = 567,
    PRECISION = 568,
    PREPARE = 569,
    PREPARED = 570,
    PRESERVE = 571,
    PRIMARY = 572,
    PRIOR = 573,
    PRIVILEGES = 574,
    PROCEDURAL = 575,
    PROCEDURE = 576,
    PROGRAM = 577,
    PROPERTIES = 578,
    PROPERTY = 579,
    PUBLICATION = 580,
    QUOTE = 581,
    RANGE = 582,
    READ_P = 583,
    REAL = 584,
    REASSIGN = 585,
    RECHECK = 586,
    RECURSIVE = 587,
    REF = 588,
    REFERENCES = 589,
    REFERENCING = 590,
    REFRESH = 591,
    REINDEX = 592,
    RELATIONSHIP = 593,
    RELATIVE_P = 594,
    RELEASE = 595,
    RENAME = 596,
    REPEATABLE = 597,
    REPLACE = 598,
    REPLICA = 599,
    RESET = 600,
    RESTART = 601,
    RESTRICT = 602,
    RETURNING = 603,
    RETURNS = 604,
    REVOKE = 605,
    RIGHT = 606,
    ROLE = 607,
    ROLLBACK = 608,
    ROLLUP = 609,
    ROW = 610,
    ROWS = 611,
    RULE = 612,
    SAMPLE = 613,
    SAVEPOINT = 614,
    SCHEMA = 615,
    SCHEMAS = 616,
    SCROLL = 617,
    SEARCH = 618,
    SECOND_P = 619,
    SECONDS_P = 620,
    SECURITY = 621,
    SELECT = 622,
    SEQUENCE = 623,
    SEQUENCES = 624,
    SERIALIZABLE = 625,
    SERVER = 626,
    SESSION = 627,
    SESSION_USER = 628,
    SET = 629,
    SETOF = 630,
    SETS = 631,
    SHARE = 632,
    SHOW = 633,
    SIMILAR = 634,
    SIMPLE = 635,
    SKIP = 636,
    SMALLINT = 637,
    SNAPSHOT = 638,
    SOME = 639,
    SOURCE = 640,
    SQL_P = 641,
    STABLE = 642,
    STANDALONE_P = 643,
    START = 644,
    STATEMENT = 645,
    STATISTICS = 646,
    STDIN = 647,
    STDOUT = 648,
    STORAGE = 649,
    STRICT_P = 650,
    STRIP_P = 651,
    STRUCT = 652,
    SUBSCRIPTION = 653,
    SUBSTRING = 654,
    SYMMETRIC = 655,
    SYSID = 656,
    SYSTEM_P = 657,
    TABLE = 658,
    TABLES = 659,
    TABLESAMPLE = 660,
    TABLESPACE = 661,
    TEMP = 662,
    TEMPLATE = 663,
    TEMPORARY = 664,
    TEXT_P = 665,
    THEN = 666,
    TIME = 667,
    TIMESTAMP = 668,
    TO = 669,
    TRAILING = 670,
    TRANSACTION = 671,
    TRANSFORM = 672,
    TREAT = 673,
    TRIGGER = 674,
    TRIM = 675,
    TRUE_P = 676,
    TRUNCATE = 677,
    TRUSTED = 678,
    TYPE_P = 679,
    TYPES_P = 680,
    UNBOUNDED = 681,
    UNCOMMITTED = 682,
    UNENCRYPTED = 683,
    UNION = 684,
    UNIQUE = 685,
    UNKNOWN = 686,
    UNLISTEN = 687,
    UNLOGGED = 688,
    UNTIL = 689,
    UPDATE = 690,
    USER = 691,
    USING = 692,
    VACUUM = 693,
    VALID = 694,
    VALIDATE = 695,
    VALIDATOR = 696,
    VALUE_P = 697,
    VALUES = 698,
    VARCHAR = 699,
    VARIADIC = 700,
    VARYING = 701,
    VERBOSE = 702,
    VERSION_P = 703,
    VERTEX = 704,
    VIEW = 705,
    VIEWS = 706,
    VOLATILE = 707,
    WHEN = 708,
    WHERE = 709,
    WHITESPACE_P = 710,
    WINDOW = 711,
    WITH = 712,
    WITHIN = 713,
    WITHOUT = 714,
    WORK = 715,
    WRAPPER = 716,
    WRITE_P = 717,
    XML_P = 718,
    XMLATTRIBUTES = 719,
    XMLCONCAT = 720,
    XMLELEMENT = 721,
    XMLEXISTS = 722,
    XMLFOREST = 723,
    XMLNAMESPACES = 724,
    XMLPARSE = 725,
    XMLPI = 726,
    XMLROOT = 727,
    XMLSERIALIZE = 728,
    XMLTABLE = 729,
    YEAR_P = 730,
    YEARS_P = 731,
    YES_P = 732,
    ZONE = 733,
    NOT_LA = 734,
    NULLS_LA = 735,
    WITH_LA = 736,
    POSTFIXOP = 737,
    UMINUS = 738
  };
#endif

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
union YYSTYPE
{
#line 14 "third_party/libpg_query/grammar/grammar.y"

	core_YYSTYPE		core_yystype;
	/* these fields must match core_YYSTYPE: */
	int					ival;
	char				*str;
	const char			*keyword;
	const char          *conststr;

	char				chr;
	bool				boolean;
	PGJoinType			jtype;
	PGDropBehavior		dbehavior;
	PGOnCommitAction		oncommit;
	PGList				*list;
	PGNode				*node;
	PGValue				*value;
	PGObjectType			objtype;
	PGTypeName			*typnam;
	PGObjectWithArgs		*objwithargs;
	PGDefElem				*defelt;
	PGSortBy				*sortby;
	PGWindowDef			*windef;
	PGJoinExpr			*jexpr;
	PGIndexElem			*ielem;
	PGAlias				*alias;
	PGRangeVar			*range;
	PGIntoClause			*into;
	PGWithClause			*with;
	PGInferClause			*infer;
	PGOnConflictClause	*onconflict;
	PGAIndices			*aind;
	PGResTarget			*target;
	PGInsertStmt			*istmt;
	PGVariableSetStmt		*vsetstmt;
	PGOverridingKind       override;
	PGSortByDir            sortorder;
	PGSortByNulls          nullorder;
	PGLockClauseStrength lockstrength;
	PGLockWaitPolicy lockwaitpolicy;
	PGSubLinkType subquerytype;
	PGViewCheckOption viewcheckoption;

#line 820 "third_party/libpg_query/grammar/grammar_out.cpp"

};
typedef union YYSTYPE YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif

/* Location type.  */
#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE YYLTYPE;
struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
};
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif



int base_yyparse (core_yyscan_t yyscanner);

#endif /* !YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED  */



#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))

/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && ! defined __ICC && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                            \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  586
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   48650

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  502
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  392
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1706
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  2843

#define YYUNDEFTOK  2
#define YYMAXUTOK   738


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,   490,     2,     2,
     495,   496,   488,   486,   499,   487,   497,   489,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   501,   498,
     482,   484,   483,   500,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   493,     2,   494,   491,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   485,   492
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   482,   482,   498,   510,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   537,   538,   539,   540,   541,   542,   543,
     544,   545,   546,   547,   548,   549,   550,   551,   552,   553,
     555,     6,     9,    16,    26,    33,    44,    45,    50,    51,
      52,    57,    58,    59,    60,    61,    65,    66,    67,    68,
      73,    74,    79,    83,    91,    92,    97,    98,    99,   105,
     110,   118,   119,     7,    21,    41,    42,    69,    70,    71,
      72,    73,    74,    78,    79,    84,    89,    90,    91,    92,
      93,    98,   105,   106,   107,   124,   131,   138,   148,   158,
     170,   179,   188,   207,   214,   219,   221,   223,   225,   228,
     233,   234,   238,   239,   240,   241,   246,   250,   251,   256,
     263,   268,   269,   270,   271,   272,   273,   274,   275,   281,
     282,   286,   291,   298,   305,   312,   324,   325,   326,   327,
     331,   336,   337,   338,   343,   348,   349,   350,   351,   352,
     353,   358,   381,   385,   392,   393,   397,   401,   402,   403,
     407,   411,   419,   420,   425,   426,   430,   438,   439,   444,
     445,   449,   454,   458,   462,   467,   475,   476,   480,   481,
     487,   498,   511,   525,   539,   553,   567,   590,   594,   601,
     605,   613,   618,   625,   635,   636,   637,   638,   639,   646,
     653,   654,   659,   660,    11,    24,    41,    42,    43,    48,
       3,    10,    16,    22,    28,    37,    37,    39,    40,     8,
      21,    34,    52,    74,    75,    76,    77,     7,    21,    25,
      32,    43,    44,    50,    51,    47,    48,    52,    53,    68,
      69,    76,    84,    92,   100,   108,   116,   127,   128,   155,
     170,   186,   187,   206,   210,   214,   235,   242,   249,   259,
     260,   263,   275,   286,   294,   299,   304,   309,   314,   322,
     330,   335,   340,   347,   348,   352,   353,   354,   361,   362,
     366,   367,   371,   372,   376,   380,   381,   384,   393,   404,
     405,   406,   409,   410,   411,   415,   416,   417,   418,   422,
     423,   427,   429,   445,   447,   452,   455,   463,   467,   471,
     475,   479,   483,   490,   495,   502,   503,   507,   511,   515,
     519,   526,   533,   534,   539,   540,   544,   545,   553,   573,
     574,   576,   581,   582,   586,   587,   590,   591,   616,   617,
     621,   622,   626,   627,   631,   644,   645,   649,   650,   654,
     655,   659,   660,   664,   675,   676,   677,   678,   682,   683,
     688,   689,   690,   699,   705,   723,   725,   729,   730,   736,
     742,   750,   758,   794,   820,   824,   829,   854,   858,   871,
     885,   900,   912,   928,   934,   939,   945,   952,   953,   961,
     965,   969,   975,   982,   987,   988,   989,   990,   994,   995,
    1007,  1008,  1013,  1020,  1027,  1034,  1066,  1077,  1090,  1095,
    1096,  1099,  1100,  1103,  1104,  1109,  1110,  1115,  1119,  1125,
    1146,  1154,  1167,  1170,  1174,  1174,  1176,  1181,  1188,  1193,
    1199,  1204,  1210,  1218,  1220,  1223,  1227,  1228,  1229,  1230,
    1231,  1232,  1237,  1257,  1258,  1259,  1260,  1271,  1277,  1285,
    1286,  1292,  1297,  1302,  1307,  1312,  1317,  1322,  1327,  1333,
    1339,  1345,  1352,  1374,  1383,  1387,  1395,  1399,  1407,  1419,
    1440,  1444,  1450,  1454,  1467,  1475,  1485,  1487,  1489,  1491,
    1493,  1495,  1500,  1501,  1508,  1517,  1525,  1534,  1545,  1553,
    1554,  1555,  1559,  1559,  1562,  1562,  1565,  1565,  1568,  1568,
    1571,  1571,  1574,  1574,  1577,  1577,  1580,  1580,  1583,  1585,
    1587,  1589,  1591,  1593,  1595,  1597,  1599,  1604,  1609,  1615,
    1622,  1627,  1633,  1639,  1670,  1672,  1674,  1682,  1697,  1699,
    1701,  1703,  1705,  1707,  1709,  1711,  1713,  1715,  1717,  1719,
    1721,  1723,  1726,  1728,  1730,  1733,  1735,  1737,  1739,  1742,
    1747,  1752,  1759,  1764,  1771,  1776,  1784,  1789,  1798,  1806,
    1814,  1822,  1840,  1848,  1856,  1864,  1872,  1880,  1884,  1892,
    1900,  1916,  1924,  1932,  1940,  1948,  1956,  1964,  1968,  1972,
    1976,  1980,  1988,  1996,  2004,  2012,  2032,  2054,  2065,  2072,
    2097,  2099,  2101,  2103,  2105,  2107,  2109,  2111,  2113,  2115,
    2117,  2119,  2121,  2123,  2125,  2127,  2129,  2131,  2133,  2135,
    2139,  2143,  2147,  2161,  2162,  2163,  2175,  2190,  2202,  2204,
    2206,  2217,  2241,  2254,  2258,  2264,  2271,  2278,  2288,  2295,
    2323,  2358,  2369,  2370,  2377,  2383,  2387,  2391,  2395,  2399,
    2403,  2407,  2411,  2415,  2419,  2423,  2427,  2431,  2435,  2439,
    2443,  2445,  2449,  2458,  2463,  2470,  2485,  2492,  2496,  2500,
    2504,  2508,  2522,  2523,  2527,  2528,  2536,  2537,  2541,  2542,
    2547,  2555,  2557,  2571,  2574,  2601,  2602,  2605,  2606,  2617,
    2635,  2642,  2651,  2668,  2713,  2721,  2729,  2737,  2745,  2766,
    2767,  2770,  2771,  2774,  2775,  2776,  2779,  2780,  2783,  2784,
    2785,  2786,  2787,  2788,  2789,  2790,  2791,  2792,  2793,  2794,
    2797,  2799,  2804,  2806,  2811,  2813,  2815,  2817,  2819,  2821,
    2823,  2825,  2839,  2841,  2845,  2849,  2856,  2860,  2866,  2870,
    2879,  2890,  2891,  2895,  2899,  2906,  2907,  2908,  2909,  2910,
    2911,  2912,  2913,  2914,  2915,  2925,  2929,  2936,  2943,  2944,
    2960,  2964,  2969,  2973,  2988,  2993,  2997,  3000,  3003,  3004,
    3005,  3008,  3015,  3025,  3039,  3040,  3044,  3055,  3056,  3059,
    3060,  3063,  3067,  3074,  3078,  3082,  3090,  3101,  3102,  3106,
    3107,  3111,  3112,  3115,  3116,  3126,  3127,  3131,  3132,  3135,
    3151,  3159,  3167,  3189,  3190,  3201,  3205,  3232,  3234,  3239,
    3241,  3251,  3253,  3264,  3268,  3272,  3276,  3280,  3289,  3296,
    3328,  3332,  3336,  3340,  3344,  3348,  3352,  3358,  3359,  3375,
    3376,  3377,  3380,  3381,  3386,  3387,  3388,  3391,  3392,  3395,
    3397,  3402,  3403,  3406,  3414,  3415,  3416,  3417,  3418,  3421,
    3422,    11,    24,    35,    36,    41,    42,    46,    47,    51,
      63,    78,    82,    83,    87,    89,    93,    94,    98,     7,
      16,     7,    20,     7,    13,    19,    25,     8,    33,    62,
      66,    67,    72,    73,    78,    79,    83,    84,    89,    90,
       7,    32,    33,    37,    41,    48,    52,    60,    61,    65,
      66,    70,    71,    76,    85,    93,   105,   106,   110,   114,
     115,   119,   120,   126,   133,   142,   144,   152,   153,   154,
     160,   169,   179,   190,   202,   212,   222,   233,   246,   255,
     264,   276,   288,   289,   290,     7,    16,    34,    41,    46,
      47,    48,    49,     8,    22,    36,    48,    56,    70,    71,
      72,    73,    74,    87,    88,    93,    94,    98,    99,     7,
      18,    19,    23,    24,    25,    26,     2,     7,    14,    24,
      25,    32,     5,    11,     6,    15,    25,    35,    45,    55,
      65,    75,    85,    95,   106,   117,   127,   140,   141,     7,
      14,    22,     9,    19,    29,    39,    49,    59,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    92,    93,    94,    95,    96,    97,    98,
     103,   104,   109,   110,   111,   116,   117,   118,     9,    17,
      29,    30,    34,    35,    36,    41,    42,    43,    48,    52,
      56,    60,    64,    68,    72,    76,    80,    84,    88,    92,
      97,   101,   105,   112,   113,   117,   118,   119,     9,    19,
      32,    33,     1,    30,    53,    54,    59,    63,    68,    72,
      80,    81,    85,    86,    91,    92,    96,    97,   102,   103,
     104,   105,   106,   111,   119,   123,   128,   129,   134,   138,
     143,   147,   151,   155,   159,   163,   167,   171,   175,   179,
     183,   187,   191,   195,   203,   209,   210,   211,   216,   220,
       7,    18,    19,    23,    27,     9,    18,    27,    36,    45,
      54,    63,    72,    85,    87,    93,    94,    99,   103,   107,
     118,   126,   130,   139,   148,   157,   166,   175,   184,   192,
     200,   209,   218,   227,   236,   253,   262,   271,   280,   290,
     303,   318,   327,   335,   350,   358,   368,   378,   385,   392,
     400,   407,   418,   419,   424,   428,   433,   438,   446,   447,
     452,   456,   457,    10,    16,    22,    32,    33,    41,    52,
      64,    72,    80,    87,    97,    99,   105,   109,   113,   128,
     135,   136,   137,   141,   142,     9,    19,     7,     2,     9,
      15,    21,    28,    35,    45,    46,    47,     7,    14,    31,
      51,    52,     7,    16,    25,    34,    43,    52,     8,    21,
      27,    34,    40,    47,    57,    61,    70,    79,    88,    95,
      96,   101,   113,   118,   143,   153,   163,   169,   180,   191,
     206,   207,   213,   214,   219,   220,   226,   227,   231,   232,
     237,   239,   245,   246,   250,   251,   256,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   269,   269,   269,   269,   269,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   270,   270,
     270,   270,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   270,   270
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "IDENT", "FCONST", "SCONST", "BCONST",
  "XCONST", "Op", "ICONST", "PARAM", "TYPECAST", "DOT_DOT", "COLON_EQUALS",
  "EQUALS_GREATER", "LAMBDA_ARROW", "LESS_EQUALS", "GREATER_EQUALS",
  "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS", "ACTION", "ADD_P",
  "ADMIN", "AFTER", "AGGREGATE", "ALL", "ALSO", "ALTER", "ALWAYS",
  "ANALYSE", "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC_P", "ASSERTION",
  "ASSIGNMENT", "ASYMMETRIC", "AT", "ATTACH", "ATTRIBUTE", "AUTHORIZATION",
  "BACKWARD", "BEFORE", "BEGIN_P", "BETWEEN", "BIGINT", "BINARY", "BIT",
  "BOOLEAN_P", "BOTH", "BY", "CACHE", "CALL_P", "CALLED", "CASCADE",
  "CASCADED", "CASE", "CAST", "CATALOG_P", "CHAIN", "CHAR_P", "CHARACTER",
  "CHARACTERISTICS", "CHECK_P", "CHECKPOINT", "CLASS", "CLOSE", "CLUSTER",
  "COALESCE", "COLLATE", "COLLATION", "COLUMN", "COLUMNS", "COMMENT",
  "COMMENTS", "COMMIT", "COMMITTED", "CONCURRENTLY", "CONFIGURATION",
  "CONFLICT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS", "CONTENT_P",
  "CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CREATE_P", "CROSS", "CSV",
  "CUBE", "CURRENT_P", "CURRENT_CATALOG", "CURRENT_DATE", "CURRENT_ROLE",
  "CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER",
  "CURSOR", "CYCLE", "DATA_P", "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE",
  "DEC", "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE",
  "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS",
  "DESC_P", "DESCRIBE", "DESTINATION", "DETACH", "DICTIONARY", "DISABLE_P",
  "DISCARD", "DISCRIMINATOR", "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P",
  "DOUBLE_P", "DROP", "EACH", "EDGE", "ELSE", "ENABLE_P", "ENCODING",
  "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE", "EVENT", "EXCEPT", "EXCLUDE",
  "EXCLUDING", "EXCLUSIVE", "EXECUTE", "EXISTS", "EXPLAIN", "EXPORT_P",
  "EXTENSION", "EXTERNAL", "EXTRACT", "FALSE_P", "FAMILY", "FETCH",
  "FILTER", "FIRST_P", "FLOAT_P", "FOLLOWING", "FOR", "FORCE", "FOREIGN",
  "FORWARD", "FREEZE", "FROM", "FULL", "FUNCTION", "FUNCTIONS",
  "GENERATED", "GLOB", "GLOBAL", "GRANT", "GRANTED", "GRAPH",
  "GRAPH_TABLE", "GROUP_P", "GROUPING", "HANDLER", "HAVING", "HEADER_P",
  "HOLD", "HOUR_P", "HOURS_P", "IDENTITY_P", "IF_P", "ILIKE", "IMMEDIATE",
  "IMMUTABLE", "IMPLICIT_P", "IMPORT_P", "IN_P", "INCLUDING", "INCREMENT",
  "INDEX", "INDEXES", "INHERIT", "INHERITS", "INITIALLY", "INLINE_P",
  "INNER_P", "INOUT", "INPUT_P", "INSENSITIVE", "INSERT", "INSTEAD",
  "INT_P", "INTEGER", "INTERSECT", "INTERVAL", "INTO", "INVOKER", "IS",
  "ISNULL", "ISOLATION", "JOIN", "KEY", "LABEL", "LANGUAGE", "LARGE_P",
  "LAST_P", "LATERAL_P", "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE",
  "LIMIT", "LISTEN", "LOAD", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP",
  "LOCATION", "LOCK_P", "LOCKED", "LOGGED", "MACRO", "MAPPING", "MATCH",
  "MATERIALIZED", "MAXVALUE", "METHOD", "MICROSECOND_P", "MICROSECONDS_P",
  "MILLISECOND_P", "MILLISECONDS_P", "MINUTE_P", "MINUTES_P", "MINVALUE",
  "MODE", "MONTH_P", "MONTHS_P", "MOVE", "NAME_P", "NAMES", "NATIONAL",
  "NATURAL", "NCHAR", "NEW", "NEXT", "NO", "NODE", "NONE", "NOT",
  "NOTHING", "NOTIFY", "NOTNULL", "NOWAIT", "NULL_P", "NULLIF", "NULLS_P",
  "NUMERIC", "OBJECT_P", "OF", "OFF", "OFFSET", "OIDS", "OLD", "ON",
  "ONLY", "OPERATOR", "OPTION", "OPTIONS", "OR", "ORDER", "ORDINALITY",
  "OUT_P", "OUTER_P", "OVER", "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNED",
  "OWNER", "PARALLEL", "PARSER", "PARTIAL", "PARTITION", "PASSING",
  "PASSWORD", "PERCENT", "PLACING", "PLANS", "POLICY", "POSITION",
  "PRAGMA_P", "PRECEDING", "PRECISION", "PREPARE", "PREPARED", "PRESERVE",
  "PRIMARY", "PRIOR", "PRIVILEGES", "PROCEDURAL", "PROCEDURE", "PROGRAM",
  "PROPERTIES", "PROPERTY", "PUBLICATION", "QUOTE", "RANGE", "READ_P",
  "REAL", "REASSIGN", "RECHECK", "RECURSIVE", "REF", "REFERENCES",
  "REFERENCING", "REFRESH", "REINDEX", "RELATIONSHIP", "RELATIVE_P",
  "RELEASE", "RENAME", "REPEATABLE", "REPLACE", "REPLICA", "RESET",
  "RESTART", "RESTRICT", "RETURNING", "RETURNS", "REVOKE", "RIGHT", "ROLE",
  "ROLLBACK", "ROLLUP", "ROW", "ROWS", "RULE", "SAMPLE", "SAVEPOINT",
  "SCHEMA", "SCHEMAS", "SCROLL", "SEARCH", "SECOND_P", "SECONDS_P",
  "SECURITY", "SELECT", "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER",
  "SESSION", "SESSION_USER", "SET", "SETOF", "SETS", "SHARE", "SHOW",
  "SIMILAR", "SIMPLE", "SKIP", "SMALLINT", "SNAPSHOT", "SOME", "SOURCE",
  "SQL_P", "STABLE", "STANDALONE_P", "START", "STATEMENT", "STATISTICS",
  "STDIN", "STDOUT", "STORAGE", "STRICT_P", "STRIP_P", "STRUCT",
  "SUBSCRIPTION", "SUBSTRING", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE",
  "TABLES", "TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY",
  "TEXT_P", "THEN", "TIME", "TIMESTAMP", "TO", "TRAILING", "TRANSACTION",
  "TRANSFORM", "TREAT", "TRIGGER", "TRIM", "TRUE_P", "TRUNCATE", "TRUSTED",
  "TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED", "UNENCRYPTED", "UNION",
  "UNIQUE", "UNKNOWN", "UNLISTEN", "UNLOGGED", "UNTIL", "UPDATE", "USER",
  "USING", "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES",
  "VARCHAR", "VARIADIC", "VARYING", "VERBOSE", "VERSION_P", "VERTEX",
  "VIEW", "VIEWS", "VOLATILE", "WHEN", "WHERE", "WHITESPACE_P", "WINDOW",
  "WITH", "WITHIN", "WITHOUT", "WORK", "WRAPPER", "WRITE_P", "XML_P",
  "XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT", "XMLEXISTS", "XMLFOREST",
  "XMLNAMESPACES", "XMLPARSE", "XMLPI", "XMLROOT", "XMLSERIALIZE",
  "XMLTABLE", "YEAR_P", "YEARS_P", "YES_P", "ZONE", "NOT_LA", "NULLS_LA",
  "WITH_LA", "'<'", "'>'", "'='", "POSTFIXOP", "'+'", "'-'", "'*'", "'/'",
  "'%'", "'^'", "UMINUS", "'['", "']'", "'('", "')'", "'.'", "';'", "','",
  "'?'", "':'", "$accept", "stmtblock", "stmtmulti", "stmt", "CallStmt",
  "ExplainStmt", "opt_verbose", "explain_option_arg", "ExplainableStmt",
  "NonReservedWord", "NonReservedWord_or_Sconst", "explain_option_list",
  "analyze_keyword", "opt_boolean_or_string", "explain_option_elem",
  "explain_option_name", "CreateStmt", "ConstraintAttributeSpec",
  "def_arg", "OptParenthesizedSeqOptList", "generic_option_arg",
  "key_action", "ColConstraint", "ColConstraintElem",
  "generic_option_elem", "key_update", "key_actions",
  "create_generic_options", "OnCommitOption", "reloptions",
  "opt_no_inherit", "TableConstraint", "TableLikeOption", "reloption_list",
  "ExistingIndex", "ConstraintAttr", "OptWith", "definition",
  "TableLikeOptionList", "generic_option_name", "ConstraintAttributeElem",
  "columnDef", "generic_option_list", "def_list", "index_name",
  "TableElement", "def_elem", "opt_definition", "OptTableElementList",
  "columnElem", "opt_column_list", "ColQualList", "key_delete",
  "reloption_elem", "columnList", "func_type", "ConstraintElem",
  "TableElementList", "key_match", "TableLikeClause", "OptTemp",
  "generated_when", "CreateAsStmt", "opt_with_data", "create_as_target",
  "VariableShowStmt", "show_or_describe", "var_name", "ViewStmt",
  "opt_check_option", "DeleteStmt", "relation_expr_opt_alias",
  "where_or_current_clause", "using_clause", "SelectStmt",
  "select_with_parens", "select_no_parens", "select_clause",
  "simple_select", "with_clause", "cte_list", "common_table_expr",
  "into_clause", "OptTempTableName", "opt_table", "all_or_distinct",
  "distinct_clause", "opt_all_clause", "opt_sort_clause", "sort_clause",
  "sortby_list", "sortby", "opt_asc_desc", "opt_nulls_order",
  "select_limit", "opt_select_limit", "limit_clause", "offset_clause",
  "sample_count", "sample_clause", "opt_sample_func", "tablesample_entry",
  "tablesample_clause", "opt_tablesample_clause", "opt_repeatable_clause",
  "select_limit_value", "select_offset_value", "select_fetch_first_value",
  "I_or_F_const", "row_or_rows", "first_or_next", "group_clause",
  "group_by_list", "group_by_item", "empty_grouping_set", "having_clause",
  "for_locking_clause", "opt_for_locking_clause", "for_locking_items",
  "for_locking_item", "for_locking_strength", "locked_rels_list",
  "opt_nowait_or_skip", "values_clause", "from_clause", "from_list",
  "table_ref", "joined_table", "alias_clause", "opt_alias_clause",
  "func_alias_clause", "join_type", "join_outer", "join_qual",
  "relation_expr", "func_table", "rowsfrom_item", "rowsfrom_list",
  "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "Typename", "opt_array_bounds",
  "SimpleTypename", "ConstTypename", "GenericType", "opt_type_modifiers",
  "Numeric", "opt_float", "Bit", "ConstBit", "BitWithLength",
  "BitWithoutLength", "Character", "ConstCharacter", "CharacterWithLength",
  "CharacterWithoutLength", "character", "opt_varying", "ConstDatetime",
  "ConstInterval", "opt_timezone", "year_keyword", "month_keyword",
  "day_keyword", "hour_keyword", "minute_keyword", "second_keyword",
  "millisecond_keyword", "microsecond_keyword", "opt_interval", "a_expr",
  "b_expr", "c_expr", "func_application", "func_expr",
  "func_expr_windowless", "func_expr_common_subexpr",
  "within_group_clause", "filter_clause", "window_clause",
  "window_definition_list", "window_definition", "over_clause",
  "window_specification", "opt_existing_window_name",
  "opt_partition_clause", "opt_frame_clause", "frame_extent",
  "frame_bound", "qualified_row", "row", "sub_type", "all_Op", "MathOp",
  "qual_Op", "qual_all_Op", "subquery_Op", "any_operator", "expr_list",
  "func_arg_list", "func_arg_expr", "type_list", "extract_list",
  "extract_arg", "overlay_list", "overlay_placing", "position_list",
  "substr_list", "substr_from", "substr_for", "trim_list", "in_expr",
  "case_expr", "when_clause_list", "when_clause", "case_default",
  "case_arg", "columnref", "indirection_el", "opt_slice_bound",
  "indirection", "opt_indirection", "opt_asymmetric", "opt_target_list",
  "target_list", "target_el", "qualified_name_list", "qualified_name",
  "name_list", "name", "attr_name", "func_name", "AexprConst", "Iconst",
  "Sconst", "ColId", "ColIdOrString", "type_function_name", "any_name",
  "attrs", "opt_name_list", "param_name", "ColLabel", "ColLabelOrString",
  "CreatePropertyGraphStmt", "vertex_alias", "edge_alias",
  "VertexTableDefinitionList", "VertexTableDefinition",
  "GraphTableKeyClause", "LabelList", "LabelEnd",
  "EdgeTableDefinitionList", "EdgeTableDefinition", "LoadStmt",
  "file_name", "ExportStmt", "ImportStmt", "DeallocateStmt", "IndexStmt",
  "access_method", "access_method_clause", "opt_concurrently",
  "opt_index_name", "opt_reloptions", "opt_unique", "GraphTableStmt",
  "ColumnsClauseOptional", "ColumnList", "PathPatternList",
  "PathPatternNameOptional", "PathConcatenation", "ElementPattern",
  "ElementPatternFillerOptional", "VertexPatternFiller", "VertexPattern",
  "GraphPatternVariableDeclarationOptional", "IsLabelExpression",
  "IsLabelExpressionOptional", "IsOrColon", "MandatoryEdgePatternFiller",
  "EdgePattern", "FullEdgePattern", "FullEdgePointingRight",
  "FullEdgePointingLeft", "FullEdgeAnyDirection", "AbbreviatedEdgePattern",
  "CreateSchemaStmt", "OptSchemaEltList", "schema_stmt", "VacuumStmt",
  "vacuum_option_elem", "opt_full", "vacuum_option_list", "opt_freeze",
  "PrepareStmt", "prep_type_clause", "PreparableStmt", "VariableResetStmt",
  "generic_reset", "reset_rest", "CheckPointStmt", "RenameStmt",
  "opt_column", "PragmaStmt", "DropStmt", "drop_type_any_name",
  "drop_type_name", "any_name_list", "opt_drop_behavior",
  "drop_type_name_on_any_name", "AlterSeqStmt", "SeqOptList", "opt_with",
  "NumericOnly", "SeqOptElem", "opt_by", "SignedIconst", "CreateSeqStmt",
  "OptSeqOptList", "CopyStmt", "copy_from", "copy_delimiter",
  "copy_generic_opt_arg_list", "opt_using", "opt_as", "opt_program",
  "copy_options", "copy_generic_opt_arg", "copy_generic_opt_elem",
  "opt_oids", "copy_opt_list", "opt_binary", "copy_opt_item",
  "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CreateFunctionStmt", "macro_alias",
  "param_list", "AlterTableStmt", "alter_identity_column_option_list",
  "alter_column_default", "alter_identity_column_option",
  "alter_generic_option_list", "alter_table_cmd", "alter_using",
  "alter_generic_option_elem", "alter_table_cmds", "alter_generic_options",
  "opt_set_data", "VariableSetStmt", "set_rest", "generic_set",
  "var_value", "zone_value", "var_list", "AnalyzeStmt", "UpdateStmt",
  "TransactionStmt", "opt_transaction", "ExecuteStmt",
  "execute_param_clause", "AlterObjectSchemaStmt", "InsertStmt",
  "insert_rest", "insert_target", "opt_conf_expr", "opt_with_clause",
  "insert_column_item", "set_clause", "opt_on_conflict", "index_elem",
  "returning_clause", "override_kind", "set_target_list", "opt_collate",
  "opt_class", "insert_column_list", "set_clause_list", "index_params",
  "set_target", "unreserved_keyword", "col_name_keyword",
  "type_func_name_keyword", "reserved_keyword", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_int16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,    60,    62,    61,   737,    43,    45,    42,    47,
      37,    94,   738,    91,    93,    40,    41,    46,    59,    44,
      63,    58
};
# endif

#define YYPACT_NINF (-2452)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-1610)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const int yypact[] =
{
    4810,   405,    63, -2452, -2452,   405, 31051, -2452,   405,    62,
    2463, 33431, -2452,  5755,   405, 37715,  1279,   204,   299,   224,
     451, 37715, 37715, 33907,   405,   247, 38191, -2452,   405, 34383,
     -20,    34, 38667, 37715,   279,   577,    93, -2452, -2452, -2452,
     236, -2452, -2452, -2452, 20019, -2452, -2452, -2452,    77, -2452,
      96,   196,   -84,   305, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452,    30, -2452, -2452, -2452, 39143, 37715, 39619, 34859, 40095,
   -2452,   117, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452,   248,   491, -2452,   140, -2452, -2452,
   -2452, -2452,  1251, 37715, -2452,   323,   644, -2452,   425,   695,
   40571, -2452, -2452, -2452, -2452,   447,   746, 37715, -2452, -2452,
   35335, -2452, -2452, -2452,   689, -2452, -2452,   572, -2452,    80,
   -2452, -2452, -2452,   545, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452,   640, -2452, -2452, 41047, 41523, 41999, -2452,   530,
     573,   942, 19542, -2452,   236, -2452, -2452, -2452, -2452, -2452,
     451, -2452,   451, -2452, -2452, -2452,  -180,   580, -2452,   616,
     898,   625, -2452, -2452, -2452, -2452, -2452,   863,  8240,  8240,
   42475,   451, 42475,   660,   -27, -2452, -2452, -2452, 21450, -2452,
     685,   491, -2452,   244,   996, 11228, 37715,   686, -2452,   698,
     686,   717,  1251,   712,   735,   -84, -2452,  4810, -2452, 37715,
   -2452,   757,  1021,    34,   625, -2452,   257,   257,  1191,   257,
     649,   720, -2452,  1299, -2452,   773,  1105,  1069, 34383,  1139,
    1108,   955,  1161, 24204,  1168,  1143,  1175,  1198,  6248, 11228,
   24734, -2452,   491, -2452, -2452,   839, -2452, -2452,   846, -2452,
   -2452, -2452, -2452,   573,  1360,  1111, -2452,   954, 42951, 43427,
   37715,  1317,   931, -2452, -2452, -2452, -2452,   971, -2452, -2452,
     380,  1282,   939, -2452,   188,  1286,   194, -2452,  1293,  1163,
   11228, -2452,  1057, -2452, -2452, -2452,   396, -2452, -2452, 26638,
   -2452, -2452, -2452,   942,   972, -2452, 26638, 11228, 47235,  1439,
   -2452,  1250, 37715,   998, -2452, -2452, -2452, -2452, -2452, -2452,
    1510,    87,  1515, 11228,  1029,    87,    87,  1059,  1372, -2452,
   -2452, -2452,   143,  1076,  1084, -2452,    97,    97, -2452,  1256,
    1089,  1091, -2452,   114,  1583,  1595,   159,  1120,  1122,  1242,
      87, 11228, -2452,  1125,    97,  1137,  1144,  1146,  1637,  1148,
   -2452,  1642,  1154,   189,   219,  1155,  1157, -2452, -2452,   145,
   11228, 11228, 11228, -2452,  7244, -2452,   491,   451, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452,  1158, -2452,   162,  4740, -2452,
    1197, -2452, -2452, -2452,   165, 11228, -2452,  1641,   -50, -2452,
     171, -2452, -2452, -2452,   491,  1443,  1160, -2452, -2452, -2452,
     212,  1564, 25686, 26162, 37715, -2452, -2452,   491, -2452, -2452,
   -2452, -2452, -2452, -2452,   589, -2452,   236, 27662,   590,   686,
   37715, 37715,  1625,  1418, -2452, -2452, -2452,   698, -2452,  1433,
   -2452, -2452,   -84,   -84, 11228,   -84,    95,    -7,  8738, 11726,
    1499,  1384,   163,   677,  1511, -2452,  1401,   649,   720, 11228,
   34383, 37715,  1309, 43903, 37715, 31527,   682,   725,  1189,  1271,
    1192,   312,  1604, -2452,  1193, -2452,  1277, 37715, 48172,   186,
   -2452,  1643,   186,   186,   653,  1652,  1281,   223,  1448,   -16,
    -144,  1885, -2452,  1193, 34383,   137,    17,  1193, 37715,  1296,
     480,  1193, 11228, 11228, 11228,  1215, -2452, 27662,   -60, -2452,
    1356,  1379, 24257,  1213, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452,  1302, 37715,  1264,   -40,    -1,  1572,  1633, 37715,
    1458,  1885,  1461,  1697,  1236,   846, -2452, 44379,  9236,  1701,
   -2452, -2452, -2452, -2452, -2452, 37715, 28671,  1241, -2452, -2452,
   37715, -2452, 37715, 37715, -2452, 37715, 37715,   596, 44855,   942,
   30575, -2452, -2452, -2452, -2452,   826,   970, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, 28671, -2452,  2117, -2452,
   -2452, -2452,  1246,   608, -2452, -2452,  1295, -2452,  1295,  1295,
    1252,  1252,  1255, -2452, -2452, -2452,  1242,  1295,  1252, -2452,
   -2452, 48172, -2452, -2452,   512,   528, -2452,  1258, -2452,  1716,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,  1695,
     617,     0, -2452,  1251, -2452, -2452, 11228,   491, -2452,  1260,
   27662,  1304, 11228, -2452, -2452, 11228,  1266,  1747,  1747, 11228,
   -2452, -2452, -2452, -2452,  2960,  1747, -2452,  1747,  1747,  1295,
    1295, -2452,  4887, 11228, -2452, 23361, 11228, 14216,  9734, 11228,
    1347,  1350,  1747, -2452,  1747, -2452, 11228,  7742,  4887,  1752,
    1752,  1942,  4969,  1267,   491,   491, -2452,  1747, 11228,  3047,
    3047, -2452,   132, 47235, 11228, 11228, 11228, 11228, 28195,  1355,
     100, 37715, 11228, 11228,  1274,   775, -2452, 11228,  1503, -2452,
    1278, 11228,  1364,   626, 11228, 11228, 11228, 11228, 11228, 11228,
   11228, 11228, 11228, -2452, -2452, 16197,   301,  1598,  1620, 11228,
    -106,   275, 11228, 35811,  8240,  1612,  6248, -2452,    92,  1612,
   -2452, -2452, -2452,   173, -2452, -2452, -2452, -2452, -2452,  1246,
   -2452,  1246,  1287, 37715,   244, 32479, -2452, 11228, -2452,   622,
    1289,  1783, -2452, -2452,  1574, -2452,  1290, -2452, 27110,  1574,
   -2452, -2452, 14703,  1413,  1570,  1507, -2452, -2452, -2452,  1298,
   27662, 12224, 12224, -2452,  1180, 27662,  1190, -2452, -2452, -2452,
   -2452, -2452, -2452,   533, -2452, 37715,   -10,  1499,   677,   637,
    1362,  1758,   547, 21927, 37715, -2452,  1303,  1307, 45331, 37715,
    1587,  1541,  1594,   440, -2452, -2452, -2452, 47235, -2452, 37715,
   37715, 45807, 46283, 29147, 37715, 28671, -2452, -2452, -2452, -2452,
   37715,   841, 37715, 27654, -2452, -2452, -2452,   186, -2452, -2452,
   -2452, -2452, -2452, 37715, 37715, -2452, -2452,   186, 37715, 37715,
     186, -2452,  1345, 37715, 37715, 37715, 37715,  1427, 37715, 37715,
     -46,   -46,  1526, -2452, 10232,  1321, -2452, 11228, 11228, -2452,
   11228,  1497, -2452,   646, -2452,  1548,    40,  1373, 37715, -2452,
   -2452,  1428, 37715,  1272, -2452, -2452, -2452, -2452, -2452,  1336,
    1681,  1885, -2452,  1682,  1558, 32003,   740,  1380,  1571, -2452,
   -2452,  1557, -2452,   708, 11228,   188, -2452, 28671, -2452,   194,
   -2452,  1559,   121, -2452,  1573,  1809,   846, -2452, -2452, -2452,
   -2452, -2452, -2452, 19065, -2452,   723, -2452, -2452,  1810,   451,
    1810,   709, -2452, -2452,  1810, -2452,  1810, -2452, 26638, -2452,
   11228,  1812, 37715,  1358,  1359, -2452, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452,  1747,  1440, -2452,  1441,  1442,  1446, -2452, -2452, -2452,
   -2452, -2452, 47235, -2452,   579, -2452,   729, -2452, 11228, 11228,
      43, -2452, 27174,   737, 11228,  1366,  1369,   751, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452,  1376,  1683, -2452,
    1378,  1381,  1382, -2452, -2452,  3242, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
    1385,  1387, 27234,  1392, 14216, 14216,  7244,   923, -2452, 14216,
    1394, -2452, -2452,   799, 27128,  1371,  1395,  1398,  1417,  1400,
    1402, 27263, 10730, 11228, 10730, 10730, 27497,  1371,  1403, -2452,
   11228,  1404,  5529, -2452, -2452, -2452,  2535,  2535,  2535,  4887,
   -2452, -2452, -2452,  1419, -2452, 14216, 14216, -2452,  5741,  2192,
    7244, -2452, -2452,  1731, -2452,   680, -2452,  1407, -2452, -2452,
    3359, -2452, 23361, 27722, 11228,   106, -2452, 11228,  1274, 11228,
    1491,  2535,  2535,  2535,   237,   237,   195,   195,   195,   855,
     275, -2452, -2452, -2452,  1411,  1412,  1414,  1614, 27662,  1148,
   11228, -2452, 27662,   850,   854, 37715,  3539,  3759,  4197, -2452,
   -2452, -2452, 17634,  1459,   -60,  1459,  1747,  3047, -2452,   698,
   -2452, -2452, -2452, 27662, -2452,  1251,  1876,  -157,    85, 11228,
   -2452, -2452,  1338,  1435,  1631,  1632,  1058,  1058,  1180,  1635,
   -2452, -2452,  1483, -2452, 11228,  1203, -2452,  1209, -2452, -2452,
   -2452, -2452,  1423, -2452, -2452,  1684, -2452, -2452, -2452, -2452,
   17634,  1469, 37715,  1484,  -111, 20496, -2452,  1648, 37715, -2452,
   -2452,   -28,  1449, -2452,  1512,  1193, 11228,  1665, -2452,   141,
    1447,  1789,   475,  1750, 37715, -2452,  1662, -2452,   181,  1802,
     121,  1804,   121, 28671, 28671, 28671, -2452,   451, -2452,   801,
   -2452, -2452,   806, -2452,  -112, -2452, -2452, -2452,  1544,   710,
    1885,  1193, -2452, -2452, -2452, -2452, -2452, -2452, -2452,   138,
     843,  1193,  1545, -2452,  1546, -2452,  1549,   900,  1193, -2452,
   -2452,  1466,  1468,  1470, 11228, -2452, -2452, 27662, 27662, 27662,
    1471, -2452,   147, -2452, 37715, -2452, -2452, -2452,  1497, 37715,
     846,  1472, -2452,   458, 37715, 37715, 37715, 37715,  1523, 37715,
   -2452, -2452, -2452,  1473,  1482, -2452, 47235,   -62,  1686,  1698,
    1192,  1947,  1832, 37715, -2452, 27662, -2452, -2452, -2452, 37715,
   -2452,  1833,  1251, -2452, 30099, -2452, -2452, -2452, -2452, 28671,
   -2452,   451, -2452,   451,  1712, 37715, 25210,   451,   451, -2452,
    1494,  1359,   819, 47235,  1747,   107,  1492,  1357,  1098,  1114,
    1261, -2452, -2452, -2452,   825, 27633, 11228, -2452,  1846, 47235,
   -2452,  5547, -2452, -2452, -2452, -2452, 11228, -2452, -2452, -2452,
   11228, -2452, 23361, 11228,  1821, -2452,  1981,  1981,  4969, 47235,
   14216, 14216, 14216, 14216,   658,  1137, 14216, 14216, 14216, 14216,
   14216, 14216, 14216, 14216, 14216, 15201,   432, -2452, -2452, 11228,
   11228,  1834,  1821, -2452, -2452, -2452,   443,   443, 47235,  1501,
    1371,  1502,  1504, 11228, -2452,   491, 23845, -2452,  3047, 11228,
    1013,  1184, 11228,   832, 11228,  1836, -2452, -2452,  1508, -2452,
   -2452, 47235, 11228,  1514,  3896, 14216, 14216,  4178, -2452,  4823,
   11228,  7244, -2452,  1526,  1550, 22404, -2452,  1605,  1605,  1605,
    1605, -2452, -2452, 37715, 37715, 37715,  1517, 18111,  1837, 17157,
   36287,  1520,   929, -2452, 36287, 36763, -2452,  1530, -2452,   491,
   11228,  1839,  1525,  1839,  1528, -2452, -2452,  1531, -2452,  1783,
    1946, -2452,  1539,   124,  2026,    85, -2452, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452,  1535, -2452,  1435,   115, -2452,
   -2452, -2452,  1748, -2452, -2452, -2452, 37715, -2452,  1520, 11228,
    1687, -2452, -2452, -2452, -2452,  1590, -2452, -2452,   840,  1951,
    1687,   844, -2452,   491, 21927,  1469, 11228, 37715, 23863,  1886,
   -2452, 37715, 37715, 37715, -2452, 37715,   866,   700,  1547, -2452,
     700,  1873,   656,  1192,   223,  3753,   569, -2452, -2452, -2452,
    1626, 37715, -2452, 37715, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, 29147, -2452, 28671, 22884, 28671, 37715, 37715, 37715, 37715,
   37715, 37715, 37715, 37715, 37715, 37715, -2452, -2452, -2452,  1526,
   -2452, -2452, -2452, -2452,  -144, -2452,   147,  1560,  1380, 37715,
    1633, 46759,   895,  1885,  2016,  1561,   530,   155, -2452, -2452,
     740, 32003, -2452, -2452, -2452,  1979, -2452, -2452,  1251, 37715,
    1624,   121, 37715, -2452,   901, -2452, -2452, -2452, -2452, 37715,
    1575, -2452,  1575, -2452, -2452,  1747, -2452, 37715, -2452,  1581,
   -2452,  1584, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
   -2452, 11228, 27662, -2452,  1585, -2452, 27662, 23881, -2452, 27662,
    1834, -2452,  1039,  1039,  1039,  2865,  1909,   156,  1591,  1039,
    1039,  1039,   294,   294,    83,    83,    83,  1981,   432, 27662,
   27662, -2452, -2452, -2452, -2452,  1586, -2452, -2452, -2452,  1371,
   -2452, -2452,   335, 11228, 11228,  5741, -2452,  5501, 11228, 47235,
     920,  5741,   322, 11228,  2364,  3054, 11228, 11228,  5713, 23909,
    1589, 11228, 47696, -2452, -2452, 37715, 37715, 37715, 37715, -2452,
   -2452, -2452,  2077, -2452, 36287, 36763,  1592, 16679,   929,  1596,
   37239, -2452,  1685,  1593, 17634,  1875,  1800, -2452, 17634,  1800,
     634,  1800,  1877,  1685, 20973, -2452,  1685,  1606,  1813, -2452,
     651, 27662,  2046,  1919,   451,  1919,   451, -2452,    85,  1610,
    1617,   136,   -14, -2452,  2111, -2452, -2452,  2112,    94,   -14,
    1621, -2452, 23361, -2452, -2452, -2452, -2452, -2452, 27662,  8240,
   -2452,  1251,   491,  1868, 37715,   -55, -2452,  1638, 37715, -2452,
    1687, 27662, -2452, -2452, 37715,   921, -2452,   926,   700, -2452,
    1669, -2452,   153,  1926,    47, -2452, 28671,  2176,   300, -2452,
    1939,  1856, -2452,   186, -2452, 11228,   300,  1861,   232, 37715,
   -2452, -2452,  3497, -2452, 47235,   121,   121, -2452, -2452, -2452,
    1535, 48172,   826,   970, -2452, -2452, -2452, -2452, -2452,     0,
   -2452, -2452,  1653, -2452, -2452,  1722, -2452,  1727, -2452, -2452,
   -2452, -2452, -2452,  1646,   972,    41, 37715,  2107,  1924,   928,
   -2452,  1878,  1651,  1380, -2452,  1753, 32003,  1523, -2452,  2042,
     187,  1698, -2452,   243,  1692,  1866, 37715,  1657, -2452,  2118,
   -2452, 30099,  1575,  1663, 47235, -2452, -2452, 27662, -2452, -2452,
   -2452, 14216,  1988,  1666, 47235, -2452,  5741,  5741,  5501,   944,
   -2452,  5741, 11228, 11228,  5741,  5741, 11228, -2452, -2452, 23927,
    1857, -2452, -2452, -2452, -2452, -2452, -2452, -2452, 29623, 36287,
   -2452,  1667, -2452, 32955, -2452, -2452, 37715,   929, 17634, -2452,
   -2452,  1361, -2452, 17634,  1944, -2452, 17634, -2452, 37715,  1677,
   -2452, 37715, -2452, 12722, 11228,  1717, -2452,  1717, -2452,    85,
    8240, 37715,  2111,  1688, -2452, -2452, -2452,   532,   -14, -2452,
   -2452, -2452, -2452, -2452,  1680,  1160, -2452,  -111, -2452, -2452,
    2092, 18588,  2048, 11228, -2452, -2452,   700, -2452,  1850,  1669,
    1690, -2452, -2452, -2452, -2452, -2452, -2452, -2452,   956,  1691,
   37715, 37715, 14216, -2452,   300,   263,   144, -2452,  1966, 37715,
    1669, -2452, -2452, -2452, -2452,  2078,  2159,  2045, -2452, -2452,
   27662, -2452, -2452,  1747,  1747, -2452, -2452,  2125, -2452, -2452,
       0,   522, 22884, 37715, 37715, -2452, -2452, -2452,  -144,  2080,
     969,  1251,  1704,  1982,   104, 37715,  2053, 32003,  2170, 37715,
    1523,  1711, -2452, -2452,   871,   871, -2452,  1852, -2452,  1853,
     253, -2452, 37715, -2452, -2452, 18588,  1251, -2452, -2452, -2452,
    2895, 14216, 47235,   973, -2452,  5741,  5741,  5741, -2452,  2158,
    1526, -2452,   977,  2178, -2452, 37715,   -53,   -56,  1721,  1724,
   -2452, -2452,   993, -2452, 11228,  1726, -2452, -2452, 17634,  1361,
     995, -2452, 47235, 37715,  1009, 47235,  6746,  1718, -2452, -2452,
   27662, 27662, 37715,  1787,  1787, -2452,  1010, -2452,   564, -2452,
     164,    99, -2452, -2452,  1784, 37715, 11228,  2154,    71, -2452,
    1014,   -15, 27662, 37715, -2452, 28671, -2452,   700, -2452, 28671,
   11228, -2452,   764,  2865,  2193, -2452, -2452, -2452, -2452,  1669,
     846, -2452, -2452,  2039, -2452, 37715,  1799,   542,  1814, -2452,
   -2452, -2452,   972,   451,  1380,  1692, 37715,   269,   184, -2452,
   -2452,  1835, -2452, 37715,  1251,   530, -2452,   740, -2452, -2452,
   -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452, -2452,
    2175,  1957,  2179,  1624,  1015,  2895,  1042, -2452, 11228,   -24,
    1530, 29623,  1756, -2452,  1051, -2452, -2452, -2452, -2452, -2452,
   37715,  1060, -2452, 27662, 37715, -2452, -2452, -2452, 37715,  2125,
    1056, -2452, -2452, 12722,  1746, -2452,  2211,  1894, -2452, -2452,
   -2452,  8240,   166,  1767,  2243,   118, -2452, -2452,  1251, -2452,
   23994, 37715, 37715, 37715,  1459, 18588, -2452,  1882,   846,   700,
    1061, -2452,  1775, -2452, 24228,  1989, -2452,  2075, -2452,  2022,
    1772, -2452, 11228, -2452,  1844, -2452, -2452, -2452,  2233, -2452,
    1074, -2452, -2452, -2452, 37715,  2269,  1778,  1781,  1692,  1523,
    1698,  1990, -2452,  1991,  1785,  1380, -2452,  1371, 13220, 13220,
    1788, -2452, -2452, 37715, -2452,  1079,  1791,  1096, -2452, -2452,
   -2452, -2452, 37715,  1786, 32955, -2452,  2267,  1798, -2452,  2279,
   -2452, -2452, -2452,  2154, -2452, -2452,   227,   227, -2452, -2452,
   21927,  2022, -2452, 28671, 22884,  2023,  1772,   496,  2007,  1885,
   -2452, 27662, -2452,  1251, -2452, -2452, -2452, 37715, 32003, -2452,
   -2452, -2452, -2452, -2452, 18588,  1459, 15699,  1938,   544, 27146,
   -2452, -2452, -2452, -2452,  1100, -2452,  2285,  1958, -2452, -2452,
   -2452, -2452,  2290, -2452,  1807, 37715,  1435,  1435,   277,  2007,
   -2452, -2452,  2102, -2452, -2452, -2452, -2452, -2452,    39,  2020,
   -2452,  2021,  1498,  1692,  1924,  1102, -2452,  1106, -2452,  2273,
   -2452, -2452, -2452, -2452, -2452, -2452,  1811,  1815, -2452,  1822,
     120,   227, -2452, -2452, -2452, -2452, -2452,    89,    89,  2189,
   -2452,  1874, -2452, -2452, -2452,  1930, -2452, 37715,  1380, 13718,
   -2452,  2309,  1841, -2452, -2452,  1435,   700, -2452,  2297, -2452,
     215, -2452, -2452,  1924, -2452,  1459, -2452,  1825, -2452, -2452,
   -2452, -2452, -2452,  1995, -2452, -2452, 37715,  2198,  1924,  1997,
   37715,  1982,  2114
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_int16 yydefact[] =
{
    1220,  1196,     0,    65,    64,  1196,     0,   963,  1196,  1079,
     201,     0,   216,     0,  1196,     0,  1220,     0,     0,     0,
       0,     0,     0,     0,  1196,   281,     0,   215,  1196,     0,
     944,     0,     0,     0,     0,     0,     2,     4,     9,    22,
      47,    17,    12,    38,     0,    39,    19,    32,   248,   235,
     283,   247,  1219,   251,    14,    28,    23,    25,    18,    26,
      24,    15,    35,    30,    36,    10,    31,    29,    20,     6,
      16,    11,    13,     7,    37,     8,    34,    33,    21,     5,
      27,     0,  1195,  1194,  1188,     0,     0,     0,     0,     0,
    1189,   819,  1247,  1248,  1249,  1250,  1251,  1252,  1253,  1254,
    1255,  1256,  1257,  1258,  1259,  1260,  1261,  1262,  1604,  1263,
    1264,  1265,  1555,  1556,  1605,  1557,  1558,  1266,  1267,  1268,
    1269,  1270,  1271,  1272,  1273,  1559,  1560,  1274,  1275,  1276,
    1277,  1278,  1561,  1606,  1279,  1280,  1281,  1282,  1283,  1607,
    1284,  1285,  1286,  1287,  1288,  1289,  1290,  1291,  1292,  1608,
    1293,  1294,  1295,  1609,  1296,  1297,  1298,  1299,  1300,  1301,
    1302,  1562,  1563,  1303,  1304,  1305,  1306,  1307,  1308,  1309,
    1310,  1311,  1312,  1313,  1314,  1315,  1316,  1317,  1318,  1319,
    1320,  1321,  1322,  1323,  1324,  1325,  1326,  1327,  1328,  1329,
    1330,  1331,  1332,  1333,  1564,  1334,  1335,  1336,  1337,  1565,
    1338,  1339,  1340,  1566,  1341,  1342,  1343,  1610,  1611,  1344,
    1345,  1346,  1612,  1347,  1348,  1567,  1349,  1350,  1351,  1352,
    1353,  1354,  1355,  1613,  1356,  1357,  1358,  1359,  1360,  1361,
    1362,  1363,  1364,  1365,  1366,  1614,  1568,  1367,  1368,  1369,
    1370,  1569,  1570,  1571,  1371,  1615,  1616,  1372,  1617,  1373,
    1374,  1375,  1376,  1377,  1378,  1618,  1379,  1619,  1380,  1381,
    1382,  1383,  1384,  1385,  1386,  1387,  1388,  1389,  1390,  1391,
    1392,  1393,  1394,  1395,  1396,  1397,  1398,  1399,  1400,  1401,
    1402,  1403,  1404,  1405,  1572,  1620,  1573,  1406,  1407,  1408,
    1409,  1574,  1410,  1411,  1621,  1412,  1575,  1413,  1576,  1414,
    1415,  1416,  1417,  1418,  1419,  1420,  1421,  1422,  1577,  1622,
    1423,  1623,  1578,  1424,  1425,  1426,  1427,  1428,  1429,  1430,
    1431,  1432,  1433,  1434,  1435,  1579,  1436,  1437,  1580,  1438,
    1439,  1440,  1441,  1442,  1443,  1444,  1445,  1446,  1447,  1448,
    1449,  1450,  1451,  1581,  1452,  1453,  1454,  1455,  1456,  1457,
    1458,  1459,  1460,  1461,  1462,  1463,  1464,  1465,  1466,  1467,
    1468,  1469,  1470,  1624,  1471,  1472,  1473,  1582,  1474,  1475,
    1476,  1477,  1478,  1479,  1480,  1481,  1482,  1483,  1484,  1485,
    1486,  1487,  1488,  1489,  1490,  1583,  1491,  1492,  1493,  1625,
    1494,  1495,  1584,  1496,  1497,  1498,  1499,  1500,  1501,  1502,
    1503,  1504,  1505,  1506,  1507,  1508,  1585,  1509,  1586,  1510,
    1511,  1512,  1626,  1513,  1514,  1515,  1516,  1517,  1587,  1588,
    1518,  1519,  1589,  1520,  1590,  1521,  1522,  1523,  1524,  1525,
    1526,  1527,  1528,  1529,  1530,  1531,  1532,  1533,  1534,  1535,
    1536,  1537,  1591,  1592,  1538,  1627,  1539,  1540,  1541,  1542,
    1543,  1544,  1545,  1546,  1547,  1548,  1549,  1550,  1593,  1594,
    1595,  1596,  1597,  1598,  1599,  1600,  1601,  1602,  1603,  1551,
    1552,  1553,  1554,    41,     0,     0,   801,   820,   821,   826,
    1191,  1078,  1220,     0,  1101,     0,     0,  1102,     0,     0,
       0,   195,   194,   878,   200,     0,     0,     0,   819,   865,
    1438,   863,   799,   820,     0,   996,   997,     0,  1005,     0,
     990,   994,   991,     0,  1015,  1007,  1016,  1008,   989,  1009,
     998,   988,     0,  1017,   992,     0,     0,     0,  1192,  1201,
     201,  1220,     0,    42,    47,    55,    54,    51,    53,    52,
       0,   962,     0,   818,   860,   859,   979,   951,   958,  1587,
    1518,   957,   217,   959,   956,  1193,   280,   278,     0,   786,
    1382,  1478,  1489,  1587,     0,  1163,  1166,  1190,     0,   252,
     402,   795,   943,     0,   948,     0,  1454,   256,   259,   832,
     257,     0,     0,   248,     0,     0,     1,  1220,    46,  1185,
     214,  1587,  1518,  1591,   211,   210,   277,   277,     0,   277,
       0,   240,   248,   243,   247,     0,     0,     0,     0,  1355,
       0,     0,  1355,     0,  1355,     0,  1355,     0,     0,   778,
       0,   779,   802,   955,   952,     0,   954,   953,   168,   199,
     198,   197,   196,   201,     0,  1355,   928,     0,     0,     0,
       0,   873,     0,   866,   864,  1003,  1004,     0,   995,   993,
       0,  1355,   827,  1010,  1014,  1355,  1014,   797,  1355,     0,
       0,  1197,     0,    44,    56,    71,     0,    72,    62,    50,
      57,    58,    59,  1220,  1077,   862,     0,     0,     0,     0,
     960,     0,     0,     0,   804,   806,   807,   710,   817,   781,
    1556,  1557,  1558,   770,     0,  1559,  1560,  1561,  1606,   648,
     635,   644,   649,   636,   638,   645,  1562,  1563,   589,  1320,
    1564,  1565,   815,  1566,  1569,  1570,  1571,   640,   642,  1572,
    1573,     0,   816,  1575,  1576,  1419,  1578,  1579,  1581,  1582,
     646,  1584,  1586,  1587,  1588,  1589,  1590,   814,   647,  1592,
       0,     0,     0,   792,     0,   781,   620,     0,   443,   444,
     466,   467,   445,   472,   473,   475,   446,     0,   791,   524,
     663,   619,   631,   691,   567,     0,   618,   613,   263,   787,
       0,   614,   803,   805,   771,   263,   785,  1164,  1169,  1165,
       0,     0,     0,     0,     0,   404,   403,   796,   942,   940,
     941,   939,   938,   945,     0,   947,    47,   724,     0,   258,
       0,     0,     0,     0,   238,   237,     3,   832,   212,     0,
     275,   276,     0,     0,     0,     0,     0,     0,     0,     0,
     350,   297,   298,   300,   347,   351,   359,     0,   244,     0,
       0,     0,     0,   228,     0,     0,   978,   978,     0,     0,
       0,     0,     0,  1158,  1107,  1151,     0,     0,     0,     0,
    1031,  1044,     0,     0,     0,     0,     0,  1041,     0,     0,
    1024,  1018,  1020,  1109,     0,   978,     0,  1105,     0,     0,
       0,  1111,     0,     0,     0,     0,   623,   728,   283,   726,
     801,     0,   777,     0,   834,  1628,  1629,  1630,  1631,  1632,
    1633,  1634,  1635,  1636,  1637,  1638,  1639,  1640,  1641,  1642,
    1643,  1644,  1645,  1646,  1647,  1648,  1649,  1650,  1651,  1652,
    1653,  1654,  1655,  1656,  1657,  1658,  1659,  1660,  1661,  1662,
    1663,  1664,  1665,  1666,  1667,  1668,  1669,  1670,  1671,  1672,
    1673,  1674,  1675,  1676,  1677,  1678,  1679,  1680,  1681,  1682,
    1683,  1684,  1685,  1686,  1687,  1688,  1689,  1690,  1691,  1692,
    1693,  1694,  1695,  1696,  1697,  1698,  1699,  1700,  1701,  1702,
    1703,  1704,  1705,  1706,   774,   773,   800,   835,   836,   837,
     838,   780,     0,     0,  1075,     0,   842,     0,   925,     0,
    1355,  1051,  1355,     0,   168,   168,   872,   875,     0,     0,
    1006,  1002,  1000,   999,  1001,     0,     0,   828,  1012,  1013,
       0,   983,     0,     0,   985,     0,     0,     0,     0,  1220,
       0,  1025,    67,    68,    66,     0,     0,    70,    60,    69,
      48,  1045,    61,    49,  1028,    43,     0,   861,  1066,  1174,
    1175,  1183,   980,     0,   824,   454,   483,   461,   483,   483,
     450,   450,   463,   451,   452,   488,     0,   483,   450,   455,
     424,     0,   453,   425,   491,   491,   478,     0,   731,   435,
     436,   437,   438,   464,   465,   439,   470,   471,   440,   523,
       0,   450,   825,  1220,   961,   218,     0,   616,   482,   469,
     769,     0,     0,   477,   476,     0,     0,     0,     0,     0,
     459,   458,   457,   622,   734,     0,   456,     0,     0,   483,
     483,   481,   547,     0,   460,     0,     0,   749,     0,   755,
       0,     0,     0,   487,     0,   485,     0,     0,   548,   528,
     529,   620,   724,     0,   615,   621,   810,     0,     0,   523,
     523,   790,   710,     0,   707,   708,   709,     0,     0,     0,
     784,     0,   718,   720,     0,     0,   563,   716,     0,   566,
       0,     0,     0,     0,   704,   705,   706,   698,   699,   700,
     701,   702,   703,   714,   697,   544,     0,     0,   665,     0,
       0,   543,     0,     0,     0,   366,     0,   808,   772,   366,
    1177,  1181,  1182,     0,  1176,  1180,  1168,  1167,  1172,  1170,
    1173,  1171,     0,   936,     0,   933,   363,     0,   260,     0,
       0,   888,  1186,   213,   255,   254,   284,   285,   291,   253,
     336,   337,     0,     0,     0,     0,   356,   354,   327,   301,
     326,     0,     0,   305,     0,   328,   524,   349,   242,   295,
     296,   299,   241,     0,   352,     0,   362,   350,   300,     0,
     234,  1214,     0,     0,     0,   229,     0,     0,     0,     0,
       0,  1355,     0,     0,  1142,  1123,   120,     0,   977,     0,
       0,     0,     0,     0,     0,     0,  1150,  1147,  1148,  1149,
       0,     0,     0,     0,  1029,  1030,  1043,     0,  1034,  1035,
    1032,  1036,  1037,     0,     0,  1022,  1023,     0,     0,     0,
       0,  1021,     0,     0,     0,     0,     0,     0,     0,     0,
     283,   283,   283,   629,     0,     0,   282,     0,     0,   775,
     778,  1065,   176,     0,   166,     0,     0,     0,     0,   844,
     843,     0,     0,   201,   929,   932,   930,   927,   931,     0,
       0,  1050,  1048,     0,     0,   165,   139,   877,  1355,   874,
     156,     0,  1103,     0,     0,  1014,   829,     0,  1011,  1014,
     798,     0,  1014,  1200,  1355,     0,   168,    45,    63,  1026,
    1046,  1027,  1047,  1072,  1098,     0,  1080,  1085,  1063,     0,
    1063,     0,  1082,  1086,  1063,  1081,  1063,  1076,     0,   981,
       0,   435,     0,   430,   426,   496,   497,   498,   499,   506,
     507,   504,   505,   500,   501,   494,   495,   502,   503,   492,
     493,     0,   508,   509,   510,   511,   512,   513,   514,   515,
     441,   950,     0,   447,   450,   949,     0,   782,     0,     0,
     768,   764,     0,     0,     0,     0,     0,     0,   735,   736,
     737,   738,   739,   740,   741,   742,   743,     0,     0,   744,
       0,     0,     0,   480,   479,     0,   696,   707,   708,   709,
     704,   705,   706,   698,   699,   700,   701,   702,   703,   722,
       0,     0,     0,     0,     0,     0,     0,     0,   590,     0,
       0,   613,   690,     0,   724,   754,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   724,   760,     0,   781,
       0,     0,     0,   812,   813,   525,   539,   540,   541,   545,
     840,   839,   789,     0,   783,     0,     0,   526,   549,   554,
       0,   761,   585,     0,   573,     0,   562,     0,   571,   575,
     550,   565,     0,   546,     0,   784,   719,   721,     0,   717,
       0,   536,   537,   538,   530,   531,   532,   533,   534,   535,
     542,   695,   693,   694,     0,     0,     0,   673,   568,     0,
       0,   570,   569,  1347,  1382,     0,   274,   274,   274,   262,
     272,   788,     0,   416,   283,   416,     0,   523,   405,   832,
     946,   934,   935,   725,   831,  1220,     0,   416,     0,     0,
     289,   290,     0,   294,  1582,  1474,     0,     0,     0,     0,
     329,   357,     0,   348,     0,   804,   330,   803,   331,   334,
     335,   306,   358,   793,   360,     0,   353,   246,   245,   364,
       0,   232,     0,     0,     0,     0,  1209,  1226,     0,   781,
    1242,   366,     0,   230,     0,  1108,     0,  1355,  1125,     0,
       0,     0,     0,     0,     0,    75,   111,    75,  1162,  1355,
    1014,  1355,  1014,  1251,  1321,  1490,  1154,     0,   144,     0,
    1121,   971,     0,   129,   173,  1144,  1159,   964,     0,     0,
    1019,  1110,  1033,  1038,   967,  1042,  1039,  1204,  1040,   978,
       0,  1106,     0,   965,     0,  1202,     0,     0,  1112,   969,
    1206,     0,     0,     0,     0,   727,   624,   729,   730,   777,
       0,  1064,     0,   167,     0,  1074,  1054,  1055,  1065,     0,
     168,     0,   928,     0,     0,     0,     0,     0,   208,     0,
     159,   157,   187,     0,   164,   158,   166,     0,     0,   115,
       0,     0,     0,     0,  1104,  1100,   982,   830,   984,     0,
     986,     0,     0,  1070,     0,  1068,  1069,  1073,  1067,     0,
    1062,     0,  1093,     0,     0,     0,     0,     0,     0,  1184,
     431,   427,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   732,   448,   279,     0,     0,     0,   765,     0,     0,
     661,     0,   637,   639,   449,   651,     0,   462,   641,   643,
       0,   711,     0,     0,     0,   652,   592,   593,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   608,   607,   653,   689,     0,
       0,   752,   753,   654,   490,   489,   491,   491,     0,     0,
     759,     0,     0,     0,   659,   617,   725,   474,   523,     0,
       0,     0,     0,     0,     0,     0,   574,   564,     0,   572,
     576,     0,     0,     0,   558,     0,     0,   556,   586,   552,
       0,     0,   587,     0,     0,     0,   630,   274,   274,   274,
     274,   271,   273,     0,     0,     0,     0,     0,  1474,     0,
     388,   365,   367,   374,   388,   393,   632,   414,   633,   795,
       0,   339,     0,   339,     0,  1178,   937,     0,   887,   888,
     882,   923,     0,   922,     0,   885,   889,   891,   892,   905,
     907,   908,   909,   906,   286,     0,   712,   294,     0,   288,
     333,   332,     0,   304,   355,   302,     0,   361,   233,     0,
    1231,  1215,  1213,  1233,  1232,     0,   781,  1240,     0,     0,
    1231,     0,  1234,  1246,     0,   232,     0,     0,     0,     0,
     119,     0,     0,     0,    75,     0,     0,   183,     0,   170,
    1143,     0,     0,     0,  1117,     0,  1135,  1127,  1113,  1141,
       0,     0,  1146,     0,  1139,  1156,  1157,  1155,   103,    85,
    1160,     0,   116,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   627,   628,   625,   283,
     776,  1096,  1097,  1095,  1024,   177,     0,     0,   877,     0,
     926,     0,     0,  1051,     0,   168,  1201,     0,   204,   143,
     139,     0,   137,   136,   138,     0,   209,   876,     0,     0,
     871,  1014,     0,  1094,     0,  1058,  1099,  1083,  1088,     0,
    1092,  1090,  1089,  1084,  1087,     0,   432,     0,   422,     0,
     433,     0,   442,   516,   517,   518,   519,   520,   521,   522,
     468,     0,   767,   763,     0,   634,   733,     0,   723,   747,
     746,   591,   603,   604,   605,   748,     0,     0,     0,   600,
     601,   602,   594,   595,   596,   597,   598,   599,   606,   757,
     756,   750,   751,   486,   484,     0,   656,   657,   658,   758,
     692,   811,   527,     0,     0,   555,   762,   577,     0,     0,
       0,   551,   711,     0,     0,     0,     0,     0,   560,     0,
       0,     0,   676,   671,   672,     0,     0,     0,     0,   265,
     264,   270,     0,   376,   388,   393,     0,   248,     0,   374,
       0,   387,   323,   386,     0,     0,   399,   397,     0,   399,
       0,   399,     0,   323,     0,   389,   323,   386,     0,   406,
     796,   415,     0,   346,   624,   346,     0,   261,     0,     0,
       0,   924,   900,   901,   897,   902,   904,     0,     0,   900,
       0,   890,     0,   287,   292,   293,   303,   794,   231,     0,
     227,     0,  1221,     0,     0,  1218,  1208,     0,     0,  1243,
    1231,  1222,   972,    75,     0,     0,  1124,     0,   185,   131,
     163,   146,     0,     0,     0,    76,     0,   151,     0,  1116,
    1136,     0,  1132,     0,  1161,     0,     0,     0,     0,     0,
    1131,  1119,     0,  1114,     0,  1014,  1014,  1122,   130,    82,
    1419,     0,   698,   699,   172,    77,   178,    79,    81,   450,
      80,    78,   175,   968,  1205,     0,   966,     0,  1203,   975,
     973,   970,  1207,     0,  1077,  1057,     0,     0,     0,     0,
     847,  1355,     0,   877,  1049,     0,   165,   208,   206,     0,
     193,   115,   188,     0,   226,     0,     0,     0,   987,     0,
    1071,     0,  1091,     0,     0,   428,   434,   766,   650,   660,
     745,     0,     0,     0,     0,   655,   583,   581,   578,     0,
     579,   559,     0,     0,   557,   553,     0,   588,   662,     0,
     678,   675,   269,   268,   267,   266,   373,   371,     0,   377,
     823,   822,   384,   316,   322,   372,     0,   368,     0,   398,
     394,     0,   395,     0,     0,   396,     0,   369,     0,   822,
     370,     0,   413,     0,     0,   667,   809,   667,  1179,   886,
       0,     0,   897,     0,   899,   903,   896,     0,   900,   898,
     913,   921,   894,   895,     0,  1230,  1210,     0,  1211,  1241,
       0,     0,     0,     0,  1235,  1187,   181,  1126,     0,   163,
       0,    75,   148,   147,   150,   145,   149,   152,     0,     0,
       0,     0,     0,   132,     0,     0,     0,    96,     0,     0,
     163,   169,    92,    93,   202,     0,     0,     0,  1128,  1118,
    1115,  1120,  1129,     0,     0,  1130,  1133,   421,  1145,  1138,
     450,   450,     0,     0,     0,   626,  1053,  1060,  1024,     0,
       0,     0,     0,     0,     0,     0,     0,   165,     0,     0,
     208,     0,  1198,   207,     0,     0,    73,     0,   112,     0,
       0,   219,     0,   869,   870,     0,     0,  1059,   429,   423,
     609,     0,     0,     0,   580,   584,   582,   561,   664,     0,
     283,   409,     0,   412,   375,     0,     0,   311,   318,     0,
     321,   315,     0,   378,     0,     0,   380,   382,     0,     0,
       0,   417,     0,     0,     0,   799,     0,   338,   340,   343,
     342,   345,     0,   314,   314,   883,     0,   880,     0,   917,
       0,     0,   893,   713,     0,     0,     0,  1237,  1237,  1244,
       0,     0,  1223,     0,    75,     0,   162,   182,   110,     0,
       0,    94,     0,   100,     0,   134,   135,   133,    95,   163,
     168,    97,   203,     0,  1137,     0,  1153,   450,     0,   174,
     976,   974,  1077,     0,   877,   226,     0,     0,   850,   845,
     846,     0,   848,     0,     0,  1201,   205,   139,   128,   121,
     122,   123,   124,   125,   126,   127,   142,   141,   113,   114,
       0,     0,     0,   871,     0,   610,     0,   611,     0,   681,
     414,     0,     0,   408,     0,   309,   307,   310,   312,   308,
       0,     0,   385,   401,     0,   381,   379,   390,     0,   421,
       0,   392,   344,     0,   666,   668,     0,     0,   250,   249,
     881,     0,     0,     0,     0,     0,   910,   918,     0,  1217,
       0,     0,  1239,  1239,   416,     0,  1225,     0,   168,   184,
       0,   154,   161,   153,     0,     0,    91,     0,    98,   192,
      84,   420,     0,  1140,     0,   179,  1052,  1056,     0,   220,
       0,   854,   855,   852,     0,     0,     0,     0,   226,   208,
     115,     0,   223,     0,     0,   877,   612,   677,     0,     0,
       0,   407,   410,     0,   383,     0,     0,     0,   418,   419,
     391,   341,     0,     0,   316,   884,     0,     0,   914,     0,
     911,   919,  1212,  1237,  1236,  1238,   291,   291,  1216,  1245,
       0,   192,   140,     0,     0,   118,    84,     0,   109,     0,
    1134,  1152,   180,     0,   851,   849,   853,     0,   165,   221,
    1199,    74,   224,   225,     0,   416,  1555,  1295,  1525,     0,
     679,   682,   680,   674,     0,   319,     0,   325,   400,   669,
     670,   313,     0,   915,     0,  1239,   294,   294,   416,   109,
     155,   160,     0,    99,   101,   189,   190,   191,     0,   105,
     102,   106,     0,   226,     0,     0,   856,     0,   867,     0,
     686,   685,   684,   688,   687,   411,     0,     0,   317,     0,
       0,   291,  1228,  1227,  1224,    75,   117,     0,     0,     0,
     107,     0,   108,    83,   222,     0,   841,     0,   877,     0,
     320,     0,     0,   912,   920,   294,   186,    88,     0,    87,
       0,   171,   104,     0,   857,   416,   683,     0,   916,  1229,
      86,    90,    89,     0,   868,   324,     0,     0,     0,     0,
       0,     0,   858
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -2452, -2452, -2452,  1751, -2452, -2452,  -335, -2452,  -393,  -434,
   -2452, -2452,    26,  -647,  1323, -2452,  -935, -1569, -2250,  -372,
   -2452,  -452, -2452,  -184, -1585,  -419,  -408, -2452, -2134,  -791,
   -2452,  1519,   -90, -2452,   724, -2452, -1915, -2452, -2452,   715,
   -2452,  -816, -2452, -2452, -1656,   349,  -351, -2098, -2162,   672,
    -621, -2452,  -401,   403, -1527, -2452,   744, -2452,  -342, -2452,
    -463, -1965,    84, -2139,  -956, -2452, -2452,   736,  -932, -2329,
      33,  1556,   452, -2452,    10,  2002,   -33,    56,    74,    32,
      55,  1578,  1615, -2452,  -706,   642, -2452, -2452,  -599,   -42,
   -2452,   810, -1746, -1852,  -400,  1156,  1576,  1582,  -209,  -109,
   -2452,  -290, -2452, -1103, -2452, -2452,   811,  1194, -1086, -1083,
   -2452,   524, -2452,  -204, -2452,   255,  -389,  1174, -2452,  1597,
   -2452, -2452, -2452, -2452, -1061,   803, -1791,   546, -1644, -1581,
     289,   276,  -872,   -70,    37,   553,  -169, -2452, -2452,  -166,
   -1524, -2136,  -183,  -182, -2452, -2452, -1074,  1045,  -823, -2452,
   -2452,  -667,   958, -2452, -2452, -2452,  1000,  1275, -2452, -2452,
    1516,  1851, -2452,   419,  1927,  -657,  -689,  1334, -1001,  1340,
   -1024, -1018, -1007,  1342,  1343, -1057,  3427, -1400,  -622,     6,
   -2452, -2184, -1014, -2452, -2452,   101, -2452,  -262, -2452,  -261,
   -2452, -2452, -2452,  -239, -2451, -2452,  1283, -2452, -1092, -2452,
    3594,   862, -2452, -1448,  -420,  -566,  -811, -1766, -2452, -2452,
   -2452, -2452, -2452, -2452, -1494, -1578,  -469,   919, -2452, -2452,
    1032, -2452, -2452,  1374,  -531,  1145,  -537,  -708,   932, -2452,
    -548, -1160, -2452,   180,  -479,    88,  -836,    25, -2452,  -484,
      66,    -6, -2452,   400,  -497, -1041,  -736, -2452,  -614, -2452,
   -2452, -2452, -2452, -2452,    19, -2051,  -385, -2452, -2452,  -345,
   -2452, -2452, -2452, -2452, -2452,  -928, -2452,  -119, -2452, -2452,
   -1936, -2452,   599, -2452, -2452, -2452,   578,   310, -1771,   119,
   -2452, -2452, -2452, -1709, -1934, -2452,   309, -2452, -2452, -2452,
   -2452, -2452, -2452, -2452,   770, -2452, -2452,  1280, -2452, -2452,
   -2452, -2452, -2452,  -977, -2452, -2452, -2452, -2452, -2452,  -776,
   -2452, -2452, -2452, -2452,  1478,  -632, -2452, -2452,  -611,  -831,
    -651,  -858, -2452,   258,  -927,   474, -2452, -2452, -2452, -2452,
   -2452,  -428,   785, -2093, -2452,   747, -2452, -2452, -2452, -2452,
     208,   489, -2452, -2452, -2452, -2452, -2452, -2452, -2452,   534,
   -2452,  1220, -2452,   521,  -500,   857, -2452, -2452,   868, -2452,
    1119, -2452,   847,  1305,    35, -2452,   948, -2452, -1916, -2452,
      36, -2452, -2452, -2452, -2452,   314,   567, -2452,  -133, -1723,
     139, -2452, -2284, -2379, -2452,  -206, -2262, -1533,  1782,  -488,
    -431, -1918
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    35,    36,    37,    38,    39,   589,  1017,   533,  1018,
    1019,   666,    40,  1029,   668,   669,    41,  1947,  2234,  2720,
    1968,  2821,  2401,  2402,  1646,  2769,  2770,  1949,  2016,  1269,
    2763,  1710,  2576,  1652,  1635,  2403,  1719,  2526,  2270,  1647,
    2205,  1711,  2388,  2640,  1339,  1712,  2641,  2381,  1713,  1312,
    1336,  2207,  2771,  1653,  1313,  2235,  1256,  1714,  2718,  1715,
     495,  2406,   535,  2008,   983,    43,    44,   564,    45,  2451,
     536,   832,  1920,  1611,   537,   746,    49,    50,    51,   585,
     577,   578,  1175,  1559,  1863,   812,   558,   559,   600,  1306,
    1206,  1207,  1583,  1909,  1231,  1232,   821,   822,  2478,  2618,
    2479,  2480,  2324,  2325,  2788,  1219,  1223,  1224,  1596,  1589,
    1212,  2153,  2497,  2498,  2499,  2345,  1227,  1228,   824,   825,
     826,  1236,  1606,    53,  1563,  1871,  1872,  1873,  2131,  2132,
    2146,  2142,  2330,  2486,  1874,  1875,  2471,  2472,  2593,  2149,
    1881,  2490,  2491,  2546,  1752,  1057,  1058,  1384,  1059,   747,
    1060,  1413,   748,  1096,  1062,   749,   750,   751,  1065,   752,
     753,   754,   755,  1079,   756,   757,  1113,  1402,  1403,  1404,
    1405,  1406,  1407,  1408,  1409,  1410,   797,  1467,   759,   760,
     761,  1877,   762,  1168,  1547,  2503,  2614,  2615,  1856,  2113,
    2310,  2470,  2680,  2740,  2741,   763,   764,  1544,  1163,  1164,
     765,  2237,  1166,  1460,  1487,   878,   879,  1070,  1437,  1438,
    1463,  1784,  1470,  1476,  1811,  1812,  1488,  1512,   766,  1420,
    1421,  1768,  1081,   767,   621,   883,   622,  1077,  1506,   775,
     768,   769,  1602,   570,  2482,   657,   965,   770,   771,   772,
     773,   774,  2322,   476,  2705,   997,   802,   881,  1648,  1502,
      54,  1321,  2561,  2259,  2260,  2433,  2558,  2663,  2775,  2776,
      55,   545,    56,    57,    58,    59,  2454,  2277,   987,  1341,
    1721,   496,    60,  2160,  2506,  1577,  1578,  1895,  1896,  2357,
    2170,  1897,  2358,  2354,  2355,  2167,  2168,  1898,  1899,  1900,
    1901,  1902,  1903,    61,   978,  1327,    62,   793,   574,   794,
     796,    63,   679,   625,    64,   553,   554,    65,    66,  1260,
      67,    68,   525,   526,   654,  1001,   527,    69,  1331,  1287,
    1030,   862,  1277,  1024,    70,  1332,    71,  1698,  2428,  2024,
    2429,  1741,  1692,  1027,  1737,  1364,  1316,  1028,   483,  1377,
    2025,  1994,  1365,    72,   497,   989,    73,  1956,  1957,  1958,
    1649,   843,  2653,  1650,   844,   845,  1960,    74,   565,   566,
    1031,  1186,  1032,    75,   538,    77,    84,    78,   661,    79,
     539,  1617,  1242,  2372,    81,  1927,  1620,  1930,  2519,  2180,
    1925,  1931,  2632,  2706,  1928,  1621,  2520,  1622,   503,   478,
     479,   970
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     475,   584,   861,  1291,   827,   502,   966,   974,   601,   502,
      47,   776,   473,  1459,  1561,   546,   502,   552,  1023,  1255,
     552,  1069,  1020,   571,  1004,  1274,   502,   502,   653,  1290,
    1414,   474,    52,    46,   787,    76,    80,  1124,   552,  1090,
    1091,  1883,   534,  1324,   671,  1115,  1325,   656,    52,  1266,
    1326,  1328,  1355,  1890,   595,  2173,  2241,  1104,  1965,  1495,
    1967,  1262,  2257,  1302,  1786,  1787,   569,   662,  1950,  1806,
    1432,  1202,  1493,  1494,  1843,  2100,  1433,  -236,  2128,   571,
     502,   571,   571,   571,    42,  1932,   544,  1434,   580,  1295,
    2267,   971,  -483,  1430,  1789,  2271,  1415,  -802,   665,   501,
    1891,   672,  -450,   529,  2441,  1830,  1831,  1946,   603,  2360,
     547,  1033,   481,   863,  2626,   867,   688,   871,  1565,  -463,
     579,   579,  -824,  1183,  2171,   615,   604,  2162,  2442,  1185,
    -824,  -824,   968,  2700,  2473,  2813,  1598,  2446,   663,  2162,
    1504,  1601,  1562,   781,  2631,  -825,  1504,  2817, -1609,   606,
    -478,   572,   543,  -825,  -825,   798, -1609, -1609,  2797,  -696,
    1346,  2426, -1061,  2385,  -488,  1173,  -696,   543,  -488,  -236,
     975,   688,  2549,  2624,   611,  2696,   543,  2002,   543,   998,
    1169,   671,  1766,  1636,  2166,  1021,   647,  2517,   671,   969,
    1011,  1069,  1021,  2584,  -491,   688,  -239,  1226,  1275,   673,
     820,  1278,  1279,  2163,  1951,  2494,  1133,  2186,  1247,  1125,
    1696,   823,  1258,  1258,  1213,  1180,  1011,   543,  2030,  2032,
    2012,   688,  1293,  1978,  -491,  1267,  2659, -1024,  1381,  2370,
     598,  2145, -1024,  2081,  2633,  2362,  1139,  1178,   672,   607,
    1007,   688,  2559,   596,   598,   672,   998,   788,  1133,  1549,
    2597,  2411,   998,  2595,  2707,  2636,   971,  1210,  1267,  1214,
    2537,  2268,    85,  1604,  1580,   610,  1319,   613,  1141,   617,
    2382,  2517,  2661,  1129,   556,     3,     4,  2174,  1139,  1305,
    1025,  2524,   581,    25,   810,  2779,  1133,  2292,  -239,  2199,
    2060,  1923,  1317,  2143,   671,   671,  1021,  1880,  1021,  1021,
    2598,  2566,  2541,  2678,   676,  1789,  1300,  1301,  1250,   597,
    1141,   540,  2580,  1285,  2664,   677,  1139,  1952,  2082,    29,
    2581,  1215,  1199,   816,  1123,  1924,  1181,  2438,  1541,  2831,
    2404,   542,  2679,  2299,  2058,  1542,  2444,  1286,  1761,  2729,
    2175,  2163,  1889,  2327,  1289,  2383,  1133,  2331,  1141,  -715,
    1581,   672,   672,  2163,  2405,  2818,  -715,  2610,  2826,    31,
    1211,  -236,  2447,  2275,  1337,  1021,  1115,   541,  1021,  1021,
    1216,  1605,  1974,  1090,  1091,  2198,  2791,  1296,   557,  2448,
    2535,  1104,   966,  2662,  2445,  1975,   598,   782,   811,  1550,
    2062,  2063,  2064,  2065,  1069,   818,  2069,  2070,  2071,  2072,
    2073,  2074,  2075,  2076,  2077,  2078,  2665,  2473,  1141,  1239,
    1318,   582,  1363,   789,  2195,   790,  2197,  1268,  2538,  2755,
    2637,  2269,  1343,    86,  2512,  -236,  1045,  1237,  1217,  2534,
    1459,    87,  1628,  1265,  2599,  2293,  2819,  2596,  1238,  1304,
    2371,  2648,  2560,  1789,  2804,  2104,  2105,  1182,  1320,  1174,
    1268,  2517,  2166,  1380,  1697,  2536,   543,   783,  1252,  2656,
    1170,  1195,   991,  2820,  2761,   608,    88,  2375,   999,   838,
     682,  1934,  2777,  1291,  2798,   573,  1069,   571,  2427,  1265,
    -239,  2145,  2290,   648,   636,  1468,  2386,  2165,  2582,  2832,
    1906,   571,   624,  1685,   502,  1089,  1419,   996,   653,   584,
    1505,  1598,  2282,  1348,  2241,  1912,  1845,   992,   968,  1352,
    1885,  1727,  1265,    89,    52,   623,  -696,   626,   627,   652,
     502,   502,   671,  1349,  1501,   599,  1953,  1954,  2463,   575,
    2730,  1360,  1362,  1078,  -236,   999,  2731,  2483,   968,  1991,
    1992,   999,  2487,  2316,  -239,  2489,  1417,  2744,  1878,   584,
    2517,  1294,  1979,  1267,   552,  1955,   552,   482,   667,  2449,
    1935,   828,   571,    52,   619,   969,  2441,  1892,   620,  1685,
     502,  1253,  1893,  -236,  1804,  -236,   665,   586,  2171,   672,
    1894,  2361,  -483,   571,  1125,   619,  2627,  -802,   644,   620,
    1590,   587,  1089,  1417,   971,   969,  1878,    47,  1887,   792,
    1069,  2040,   571,  1425,  1426,  2701,   674,  2814,   675,  1095,
    1564,  1440,  -824,  1441,  1442,   659,  1357,  2164,  2658,    52,
      46,  2387,    76,    80,  2376,  2165,  1662,   778,  1479,  2352,
    1480,   799,   571,   571,   571,  -825,  1665,  2165, -1609,  1668,
    -478,   603,  1636,  1491,  1507,   833,    25,   971,  1110,  2669,
     968,  1654,  2670,  -239,  -488,  2374,  1416,  1128,  2625,   604,
    2697,  1613,  1660,   628,   579,  1423,  1176,  2765,  1566,  1427,
    1111,    42,  1015,  1016,  1525,  2474,  1075,   642,  1110,  2038,
    1285,   993,    29,   588,  1112,  1543,  1162,  1000,  1473,  1475,
    1459,   791,  -239,  1003,  -239,  2054,  2586,  2605,  1015,  1016,
    1111,  1681,  1682,  1683,  1286,    52,  -715,   969,  2781, -1024,
   -1024,   584,  1736,  1726,  1114,  2061,  1735,  1728,  2413,  2414,
    1730,  1267,    31,  2805,  2364,  1159,  1160,  1161,  1162,  2430,
     629,  1880,   630,   966,  2044,  1022,    32,  1597,  1597,  2735,
    2045,  2047,  1022,   618,  2085,  1268,  1625,  1762,   785,   485,
    2004,  2046,  2048,  2049,  1213,  1069,  2043,  1258,  1280,   551,
      33,  1157,  1158,  1159,  1160,  1161,  1162,  1259,   633,   807,
    2209,  2091,  2833,  1661,   582,   968,  1934,   968,   571,   637,
     594,  1825,  1801,  1802,  1803,  1804,  1663,  2839,   994,  2066,
     637,  1666,  1671,  1021,   502,   502,  2241,  1678,  2766,  1214,
    1258,  1526,  1291,  1021,   605,  2136,  1021,  1265,   486,   816,
    1261,  1835,  2527,  1126,   817,   638,  2201,  1527,   981,   984,
     985,    82,  1528,  1130,   571,   571,   638,  1245,   571,  1257,
    1359,  2389,   969,  1886,   969,   688,  1177,   816,  1836,  2137,
    1299,   571,  1468,  1468,  1614,  2210,  1184,  1468,  1022,  1022,
     639,  1864,  1865,  1878,  2333,  1878,  2782,  1529,   571,   968,
    1703,  2001,   571,  2139,   835,    83,  1133,   833,  1204,  1205,
     836,  1209,  2825,  1989,   634,   671,  2767,  1633,  2392,  1021,
    -282,   818,  1906,  1468,  1468,  -282,   604,   604,   579,   604,
     671,  2460,  1009,  1980,  1021,  1010,  1139,   640,  2568,  1281,
    2236,  1292,  1110,  2202,  2792,  2793,  1513,  1282,   640,   818,
    1216,  1933,  1633,  1268,    25,  1954,   969,  1756,  1799,  1800,
    1801,  1802,  1803,  1804,  1111,  2211,  2013,  2067,  1141,  2017,
     819,   687,   672,  1514,  1789,  1634,   645,  2068,  2394,  1790,
    1791,  1792,  1743,  2222,  2643,   641,  1747,   672,  1748,  2569,
      29,  1267,  -282,    90,  1837,  2639,   480,  2570,   819,  1838,
    2756,  2757,   528,  2829,  1192,  1882,  2203,  1314,  1217,  2204,
    1943,  1110,   555,   571,  1361,  1265,   567,   837,  1744,   688,
     491,  1340,   492,  1745,   619,  2141,  2571,  1110,   620,   652,
      31,   646,  2533,  1111,   652,   649,   502,   502,  1764,   502,
     652,  -282,   571,   650,    32,  1530,   494,  1112,  1962,  1111,
    1964,  1241,  2548,  1819,  1246,  1821,  1822,  1089,   880,  1347,
    2510,   687,  2135,  1114,  1789,   660,  2511,  1273,    33,  1790,
    1791,  1792,  2654,  2645,   530,  1746,   667,  1089,  2397,  1347,
    2337,    52,  1615,  2340,  1515,  2815,  2093,   687,  1297,  1516,
    1789,   631,  2622,   632,  1517, -1610, -1610, -1610,  2623,  1069,
    2572,  2585,  1910,  1820,  2476,  1324,  2279,   688,  1325,  2477,
    1977,  2573,  1326,  1328,  1089,   678,  1347,   880,  1071,  1998,
    1459,  2398,  1884,   624,  1267,  1193,  1196,  2023,  1194,  1197,
    1833,  1350,  1353,  1351,   680,  1197,  1069,  2221,  2399,  1461,
    2136,  1839,  1911,  1911,  1379,    52,   623,  1380,   626,   627,
    2708,  1840,  1069,  1411,  1083,  1084,  1412,   681,  1574,  1793,
    1878,  1003,   682,  2213,  1878,  1363,  2196,  2083,  2084,   838,
    1123,   835,  1069,  1609,  2137,   652,  1197,   836,   780,  1101,
    1794,  1267,  1693,  1268,   619,  1694,  -802,   683,   620,  2138,
    2417,  2115,  2116,  2117,  2118,   968,   968,   968,  2139,  1329,
    1439,  1069,  2212,  2254,  2220,   795,   835,   571,  1468,  1468,
    1468,  1468,   836,   786,  1468,  1468,  1468,  1468,  1468,  1468,
    1468,  1468,  1468,  1468,  1069,   800,   840,   571,  1356,   571,
    2505,  2140,   687,   801,  2400,  1789,  1518,  1717,  2421,  1718,
    1790,  1791,  1792,  1981,  1724,  1265,  1519,  1380,   804,  1795,
    2459,  2778,   969,   969,   969,   841,   803,  2094,  2182,  1738,
     792,   835,  1739,  1468,  1468,  1763,  2816,   836,  1197,   571,
    1794,   805,  2021,  1770,  2794,   808,  1197,  1619,  1623,   813,
     809,   815,  1257,   502,   837,   814,   671,  1774,  1071,  1567,
    1197,   968,  1616,   502,  1638,   502,  1642,  1857,   502,  1858,
    1985,  1859,  2574,  1860,   502,  2575,   502,  2332,   829,  2335,
    2039,  2041,   880,   880,   880,   830,  1268,   652,   502,   837,
    2141,   842,   652,   502,   831,  1387,  1388,   502,   502,   502,
     502,   834,   502,   502,  1417,  1808,   846,  1970,  1197,  1795,
    1971,  2834,  1972,   672,  1878,  1973,  1099,  1100,   969,    25,
       3,     4,   571,   847,  1878,  2036,  1702,  1069,  2037,  1878,
     864,  2050,  1878,  2240,  1197,  1795,   835,   868,  2096,  1716,
    1906,  1197,   836,  1268,   837,   972,  2183,  1629,  1265,  2184,
    2187,   973,  2150,  2188,  1708,    29,  1446,  1637,  2236,  1640,
    1393,  1394,  1651,  1560,  1447,  1448,  1449,  1878,  1655,  1654,
    1657,  2242,  2200,   976,  2221,  1694,  1393,  1394,   835,  -833,
    -833,   530,  1664,  1569,   836,  1571,  1753,  1667,  2377,  2547,
     977,  1672,  1673,  1674,  1675,    31,  1679,  1680,   880,  2278,
    2253,  2263,  1307,  1308,  1694,  1265,   838,  2280,   986,    32,
    2281,  1794,  1417,  2089,   979,  1796,  1797,  1798,  1381,  1799,
    1800,  1801,  1802,  1803,  1804,  1603,  2300,  2378,  2609,  1412,
    1694,  2609,  2379,    33,  2434,  1694,   988,  2435,   777,  1022,
     779,   838,   990,   584,   995,  1742,   996,   582,  1002,   837,
    2464,  1878,  1069,  1412,  1022,  1005,   596,  1006,   485,   839,
     835,  1071,  2528,   840,  2135,  2529,   836,  1083,  1084,  -283,
    1008,  2695,  1397,  1398,  -283,  2554,  1101,  1026,  1694,  2587,
    1795,  -879,  1412,  2590,  1878,  1073,  2591,   584,  1397,  1398,
    1074,   837,   841,   968,   865,   968,   838,   968,   840,  2602,
    1021,  2607,  1003,  1076,  2608,  1796,  1797,  1798,  1700,  1799,
    1800,  1801,  1802,  1803,  1804,  2611,  2620,   486,  2608,  2621,
    2634,  2675,   597,  2635,  2635,  -454,  1461,   866,  1443,  1444,
    -461, -1610, -1610, -1610,  1082,  1799,  1800,  1801,  1802,  1803,
    1804,  -283,  2136,  1071,   848,  1599,  1600,  1086,  2676,   869,
     969,  1412,   969,   840,   969,  -329,  -329,  2684,   842,   571,
    1003,  2283,  2690,   849,  1085,  2608,  1879,  2712,  -333,  -333,
    2713,   488,  2409,   837,  -332,  -332,  2137,  1069,  1876,  1092,
    2724,  1087,   870,  1003,  1069,  2745,   880,  1878,  2746,  1088,
    -283,  2138,   584,   842,   582,   624,  1094,   474,  -451,   598,
    2139,   838,  2748,  2418,  2419,  1003,  2785,  2552,  2806,  2608,
    -452,  2807,  2808,   850,  1879,  2635,  1921,    52,   623,  1926,
     626,   627,  1619,  1395,  1396,  1097,  1876,  1098,    25,   971,
    1103,  1878,  1906,  2140,  1905,  1397,  1398,  1069,  1314,  1189,
    1191,  2365,  1105,   838,  2023,   474,  1061,  1069,   842,  1106,
    2236,  1107,  -455,  1108,  1624,  2484,    25,  -453,   840,  1109,
    1116,  1417,  1117,  1127,    29,  1167,  1172,  1071,  1173,  1174,
    1187,  1200,  1201,  1203,   817,   819,  1796,  1797,  1798,  1468,
    1799,  1800,  1801,  1802,  1803,  1804,  1233,   841,  1063,   491,
    1235,   492,    29,  1243,  1263,  1264,  1669,  1265,  1314,  1270,
     840,  1272,  1271,   571,    31,  1284,   851,  1276,  1314,   571,
     571,   502,   493,   571,   880,   494,  1283,  1288,    32,  1707,
    1298,  1303,  2141,  1969,  1310,   838,  1311,   571,   968,  1670,
    1878,  1315,    31,   652,  1322,  1323,   531,  1330,   599,  1021,
    1333,  1335,    33,  1334,  1021,  1861,    32,  1344,  1347,  1314,
    1314,  1078,  1708,   842,   852,  1378,   582,  1089,  1360,  1362,
    1095,  1383,   853,  1382,  1762,  1418,   688,  1419,  1993,  1477,
      33,  1424,  1478,  1133,   854,  1069,  1490,  1503,  1676,  1510,
    1468,  2240,   840,  1522,   532,   969,  1461,  1521,  1524,  1545,
     880,  1546,  1562,  1568,  1575,   842,  1576,   597,   477,  1579,
    1591,  1592,  1593,   671,  1612,  2006,   855,  1594,  2485,  1610,
    1022,  1677,  1626,  1385,  1386,  1069,  1061,  2027,  1630,  2028,
    1631,  2110,  1071,  2033,  2034,  1632,   598,  1686,   584,  1691,
    1450,  1451,  1452,  1699,  1453,  1454,  1455,  1456,  1457,  1458,
    1695,  1704,  1701,  1705,  1706,  1069,   584,  1720,  1069,  1468,
    1722,  1723,  1731,  1729,   857,  1732,  1740,  1750,  1063,  2114,
     672,  1754,  1755,  1776,  1757,  1758,  1759,   571,   571,   571,
    1760,   475,  1772,  1879,  2133,  1773,   858,   842,  2133,  2147,
    1197,  2589,  1775,  1876,  1777,  1876,  1814,  1778,  1779,  1997,
    1762,  1781,  1387,  1388,  1782,  2003,  2005,   860,  1785,  2009,
    1807,  1813,   474,  2531,   474,  1815,  1816,  1829,  1817,  1824,
    1827,  1834,  1841,  2020,  2439,  1850,  1851,  1853,  1855,  1854,
     571,  2642,  1888,  1880,  1291,  1908,  -334,  -335,  1914,  2649,
    1913,   848,  1916,  1919,  1917,    25,  1937,  1922,  1619,  1360,
    1362,   502,  1929,  1936,  1939,  1314,  1257,  1314,  1021,  1340,
     849,  1942,  1941,  1389,  1390,  1391,  1392,  1393,  1394,  1945,
    1948,  1395,  1396,  1064,  1961,   502,  1963,  2226,  1976,  1982,
    1983,    29,  1986,  1984,  1987,  1990,  1988,  1999,  2014,  2010,
     502,   502,   502,   502,   502,   502,   502,   502,   502,   502,
    2007,  2011,  2015,  2018,  2019,  2022,  2029,  2035,  2042,  2053,
     850,  1810,  1789,   571,  2803,   571,  2594,  2086,  2087,  1809,
    2088,    31,    48,  2099,  2111,  1257,  2098,  2126,  1862,  1061,
    2102,  2148,  2122,  1340,  2594,    32,   571,  2711,    48,  2134,
    2152,  2154,  2159,  1314,  2156,  2192,  2161,  2157,  2274,  2169,
    2172,  2284,  2181,  2176,  2185,  2179,   583,   968,  2194,    33,
    2238,   968,  2206,  2119,  2120,  2121,    48,  2208,  2651,  2225,
    2224,  1063,  2265,   582,   602,  2256,  2266,  1069,  2273,  1397,
    1398,  2276,  1993,  2240,  2243,  2244,  2245,  2246,  2247,  2248,
    2249,  2250,  2251,  2252,  1694,  2285,  1123,  2660,  2286,  2291,
     581,  2288,  2295,   851,   880,  2308,  2294,  2318,  2326,  -248,
    2323,  1061,  2319,  2329,   969,  2328,  2177,  2336,   969,  2642,
    2343,  2341,  -248,  2344,  2342,  2350,  2311,  -248,  2772,   571,
     571,   571,   571,  2351,  2356,  2359,  1071,  2363,  2133,  2147,
      25,  2133,  2373,  1064,  2321,  2687,  2380,  2384,  1879,  2407,
    2408,   852,  1879,  1063,  2704,  2412,  2423,  2422,  2339,   853,
    1876,  2424,  2425,  2431,  1876,  2432,  2437,  2436,  2443,  2450,
    2452,   854,  2455,  1071,  2456,  -248,    29,  2458,  2461,   474,
    2469,  2462,  2475,   474,  2488,  2367,  1461,  1366,  2677,  1071,
    1399,  1400,  2493,  2502,  -248,  2509,  2513,  2515,  1926,  2258,
    2521,  2262,  1619,   855,  2523,  2525,  2530,  2539,  1257,  1071,
    1401,  2366,  2542,  2368,  1066,  2543,    31,  2544,  2545,  2556,
    1132,  2553,  1356,  1133,  2557,  2563,  2564,  2567,  2578,  2579,
      32,  1367,  2588,  2416,  2592,  1061,  2600,  2613,  1071,  2601,
    2346,  2604,  2348,  -248,  2617,   968,  2628,  2631,  2650,  2647,
    1021,   857,  -248,  1139,    33,    25,  2652,  1368,  2655,  2666,
   -1610,  1071,  2671,  2389,  2672,  2692,  2673,  2693,   582,  2390,
    1314,  2683,  2694,   858,  2698,  2699,  2710,  1063,  1369,  2714,
    1716,  2391,  1370,  2538,  2716,  1141,  2717,  2719,  2722,  2723,
    2453,    29,  2726,  2727,   860,  2440,  2728,  2732,  2733,  2752,
    2734,  2112,   969,  1371,  2743,  2753,  1372,  2747,  2754,  2762,
    2392,  2768,  2393,  2780,  2786,  2312,  2313,  2314,  2315,  2789,
    2787,  2790,  1373,  2796,  2799,  2801,  2809,  2810,  2797,  2798,
    2811,    31,   475,  2133,   670,  2823,  2812,  2481,  2827,  2830,
     502,  2835,  1879,  2838,  1876,    32,  1064,  1879,  2828,  2836,
    1879,  2840,  2492,  1358,  1876,  2495,  2665,  1832,   806,  1876,
     477,   477,  1876,   474,  2764,   571,  2822,  1022,  2646,    33,
    2394,  2795,  2802,   474,  1254,  2577,  1944,   477,   474,  1966,
    2272,   474,  2760,   582,  1066,  2518,  1995, -1610,  2800,  2759,
    1061,  -248,   687,  1940,  2239,  1789,  2228,  1876,  1198,  2395,
    1790,  1791,  1792, -1610,   652,   502,  1240,  2190, -1610,  1904,
    1179,  1374,  2686,   571,  1608,  2619,   474,  2302,  1230,  1375,
     477,   477,   967,  1229,  2751,  1915,  1588,  2155,  1064,  2691,
    2347,  1607,  1063,  1918,  2317,  2129,  2334,   502,   502,  2606,
    2125,  1234,  2682, -1610,  2681,  2688,  1751,  2689,  1429,   571,
    2749,  1257,  2750,   502,  1431,   619,  1435,  1436,   804,   620,
    2742,  2555,   477,  1376,  1907,  2396,   571,  1848,  2504,  2518,
    2397,   670,  1767,  1551,  2562,  1690,  2842,  1846,   670,   477,
    1072,  1876,  2824,   584,  2674,  2123,  2440,  2158,  2349,   502,
    2353,  2508,  2000,  1345,  1570,   477,  2415,  2264,  1150,  2532,
     474,  1471,  1879,  1996,    48,  2255,  2026,  2495,  2238,  2457,
    2223,  1656,  2227,  2398,  1876,  1959,  2616,  1749,  2369,  1071,
    1572,  2189,  2709,   477,  2758,     0,  2514,     0,     0,   502,
    2399,  2550,  2551,   474,     0,     0,     0,   571,     0,     0,
       0,     0,   477,   477,   477,     0,   477,  2565,     0,  1067,
       0,  2507,  1064,    48,   583,     0,     0,     0,     0,   652,
       0,     0,     0,  1132,     0,     0,  1133,   477,     0,     0,
     502, -1610, -1610, -1610,     0,     0,     0,   571,     0,     0,
       0,     0,     0,     0,   670,   670,     0,  1066,     0,     0,
       0, -1610,     0,     0,  2668,     0,  1139,     0,     0,  2540,
       0,  1794,     0,  1140,   583,   475,  1471,   602,     0,    48,
       0,     0,     0,     0,  2685,     0,   477,  1876,   502,     0,
     477,   477,  2492,  2629,     0,  1068,  2400,     0,  1141,     0,
       0,   477,     0,     0,     0,  2258,   474,     0,     0,  2657,
       0,     0,     0,     0,  1071,   652,   652,   652,     0,  2518,
    1072,  2420,  2583,     0,     0,   484,     0,     0,  2702,   485,
       0,  1876,     0,     0,     0,     0,     0,     0,     0,  1066,
    1795,     0,     0,     0,   477,   477,   477,     0,  2725,     0,
     474,     0,  -879,     0,     0,     0,     0,     0,     0,     0,
       0, -1610,     0,     0,  1061,    48,     0,  2492,  1157,  1158,
    1159,  1160,  1161,  1162,  1071,     0,  2616,  1064,  2481,     0,
       0,     0,     0,     0,  1071,     0,     0,     0,   486,  1067,
       0,     0,     0,  2638,  1619,   487,     0,     0,     0,     0,
    1142,  1061,  1093,     0,     0,     0,  1063,     0,     0,     0,
       0,   571,  1257,     0,     0,     0,  1143,  1061,  2518,     0,
       0,  1144,     0,  2773,     0,     0,     0,     0,     0,     0,
    1876,     0,     0,  2667,     0,     0,  1121,  1061,     0,   652,
       0,     0,   488,  1063,     0,     0,     0,     0,     0,   474,
       0,     0,     0,     0,     0,     0,  1147,     0,     0,  1063,
     477,     0,     0,  1066,     0,  1068,  1061,     0,   967,     0,
    2238,     0,     0,     0,     0,     0,     0,   489,     0,  1063,
       0,     0,   670,     0,     0,     0,     0,     0,     0,  1061,
       0,   571,     0,     0,     0,     0,     0,     0,   967,     0,
       0,     0,     0,     0,   602,   602,     0,   602,  1063,     0,
       0,  1150,  2239,   490,     0,     0,     0,     0,     0,     0,
     571,     0,     0,  1072,   571,     0,     0,     0,  1471,  1471,
       0,  1063,     0,  1471,     0,     0,  1796,  1797,  1798,     0,
    1799,  1800,  1801,  1802,  1803,  1804,     0,     0,   477,     0,
       0,     0,  1071,     0,   477,     0,     0,   477,     0,     0,
     491,   477,   492,   687,     0,     0,  1789,     0,     0,  1471,
    1471,  1790,  1791,  1792,     0,   477,     0,     0,   477,   477,
     477,   477,  1071,   493,     0,  1071,   494,     0,   477,   477,
       0,     0,  1067,   687,     0,     0,  1789,  2774,     0,     0,
     477,  1790,  1791,  1792,  1152,  1072,   477,   477,   477,   477,
     967,     0,     0,     0,   477,   477,     0,     0,  1066,   477,
       0,     0,  1061,   477,     0,     0,   477,   477,   477,   477,
     477,   477,   477,   477,   477,     0,     0,   477,     0,     0,
       0,   477,     0,     0,   477,     0,   477,     0,   477,     0,
       0,     0,     0,  1428,     0,   543,     0,     0,     0,     0,
       0,     0,     0,     0,  1063,     0,     0,     0,  1068,   477,
       0,     0,     0,     0,  1067,     0,     0,  2774,     0,     0,
       0,  1064,     0,     0,   477,     0,     0,     0,     0,     0,
       0,     0,     0,   477,   477,     0,     0,     0,     0,     0,
       0,    48,     0,     0,  1153,     0,  2837, -1610, -1610, -1610,
    2841,  1157,  1158,  1159,  1160,  1161,  1162,     0,  1064,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1072,
       0,     0,     0,     0,  1064,   967,     0,   967,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1061,     0,     0,
    1068,     0,   687,     0,  1064,  1789,     0,     0,  1385,  1386,
    1790,  1791,  1792,     0,     0,    48,     0,     0,     0,     0,
       0,     0,  1794,     0,     0,     0,   477,  2303,     0,   477,
     477,     0,   477,  1064,     0,     0,     0,     0,     0,  1063,
       0,     0,     0,     0,     0,     0,     0,     0,  1067,     0,
       0,     0, -1610,     0,  2239,     0,  1064,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   477,     0,     0,   967,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   670,  1511,  1387,  1388,     0,
       0,  1795,     0,     0,     0,  1385,  1386,     0,     0,     0,
     670,     0,   477,     0,  1471,  1471,  1471,  1471,     0,     0,
    1471,  1471,  1471,  1471,  1471,  1471,  1471,  1471,  1471,  1471,
       0,  1795,  1061,     0,  1068,     0,     0,     0,     0,  1061,
       0,     0,     0,     0,  1072,     0,     0,     0,     0,     0,
     477,   477,     0,     0,     0,     0,   477,     0,  1389,  1390,
    1391,  1392,  1393,  1394,     0,     0,  1395,  1396,     0,  1471,
    1471,     0,     0,     0,  1063,     0,     0,     0,     0,     0,
       0,  1063,  1066,     0,  1387,  1388,     0,     0,     0,     0,
       0,     0,  1061,     0,    48,     0,   477,   477,   477,  1064,
    1132,   477,  1061,  1133,     0,     0,     0,     0,  1134,  1135,
    1136,     0,     0,  1067,   477,   477,   477,   477,     0,  1066,
       0,  1794,   477,     0,     0,  1137,     0,     0,     0,     0,
       0,     0,     0,  1139,  1063,  1066,     0,   477,   477,     0,
    1140,     0,   477,     0,  1063,  1389,  1390,  1391,  1392,  1393,
    1394,     0,     0,  1395,  1396,  1066,   477,     0,     0,   477,
       0,   477,     0,     0,     0,  1141,     0,     0,     0,     0,
       0,     0,     0,     0,  1397,  1398,     0,     0,     0,     0,
       0,     0,   477,     0,  1066,     0,    48,     0,     0,  1068,
    1795,     0,     0,     0,   477,     0,     0,  1796,  1797,  1798,
       0,  1799,  1800,  1801,  1802,  1803,  1804,  1066,     0,     0,
       0,   477,     0,     0,     0,     0,     0,  1132,     0,     0,
    1133,     0,     0,     0,  1064,     0,   477,  1796,  1797,  1798,
    1061,  1799,  1800,  1801,  1802,  1803,  1804,     0,     0,     0,
       0,     0,   477,     0,     0,     0,     0,     0,     0,     0,
    1139,     0,     0,     0,     0,     0,     0, -1610,   477,     0,
       0,  1397,  1398,     0,     0,     0,     0,  1142,     0,     0,
    1061,     0,  1063,     0,     0,   967,   967,   967,     0,     0,
       0,     0,  1141,  1143,     0,  1399,  1400,     0,  1144,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1061,     0,     0,  1061,     0,     0,     0,     0,     0,  1145,
    1146,     0,  1063,     0,     0,     0,   477,     0,  1121,     0,
       0,     0,     0,  1147,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1066,     0,  1063,     0,     0,  1063,     0,     0,  1072,  1064,
       0,     0,     0,     0,  1842,     0,  1064,     0,     0,     0,
       0,  1148,  1121,     0,  1149,     0,   670,     0,     0,     0,
       0,   967,  1399,  1400,     0,     0,     0,     0,  1150,     0,
    1511,  1151,     0,   848, -1610,  1072,  1796,  1797,  1798, -1514,
    1799,  1800,  1801,  1802,  1803,  1804,  1852,     0,   477,     0,
   -1610,  1072,   849,     0,     0, -1610,     0,     0,   477,  1064,
       0,     0,   477,     0,  1870,   477,     0,  1067,     0,  1064,
       0,  1072,   477,   477,   477,   477,     0,    48,   477,   477,
     477,   477,   477,   477,   477,   477,   477,   477,     0,     0,
   -1610,   477,   477,     0,     0,     0,     0,     0,     0,     0,
    1072,     0,   850,     0,  1067,   477,     0,     0,     0,     0,
       0,   477,  1870,     0,   477,  1066,   477,   583,     0,     0,
    1067,  1152,     0,  1072,   477,     0,     0,   477,   477,     0,
       0, -1514,   477,   477,     0,     0,     0,     0,     0,     0,
    1067,     0,     0,  1068,     0,  1150,     0,     0,     0,   477,
       0,   477,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   477,     0,     0,  1471,     0,     0,     0,  1067,
       0,  2216,  1061,     0,     0,     0,     0,     0,     0,     0,
    1068,     0,     0,     0,     0,     0, -1514,     0,     0,     0,
       0,     0,  1067,     0,     0,   851,  1068,  1064,     0, -1514,
       0,   477,     0,     0, -1514,     0,     0,     0,     0, -1514,
       0,     0,     0,     0,  1063,     0,  1068,     0,   477,     0,
   -1514,  1153,     0, -1514,  1154,  1155,  1156,     0,  1157,  1158,
    1159,  1160,  1161,  1162,    48,     0,     0,  1064, -1610,     0,
    1066,  1780,     0,   852,     0,  1068,     0,  1066,     0,     0,
       0,   853, -1514,   967,     0,   967,  1072,   967,     0, -1516,
       0,     0,     0,   854,     0,     0,  1471,  1064,  1068,     0,
    1064, -1514,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   848,
       0,     0,     0,     0,     0,   855,     0,     0,     0,     0,
    1066,     0,     0,     0,     0,     0,     0,     0,   849,     0,
    1066,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1514,     0,     0, -1514,     0,  1067,     0,     0,     0, -1514,
       0,     0,     0,   477,     0,  1471,     0,     0, -1610,     0,
       0,     0,     0,   857,     0,  1157,  1158,  1159,  1160,  1161,
    1162, -1516,     0,  1121,     0,     0,     0,     0,   850,  2214,
       0,     0,     0,     0,     0,   858,     0,  2215,     0,  2124,
       0,  2127,     0,     0,     0,   477,   477,     0,     0,     0,
     477,  1072,     0,     0,     0,   477,   860, -1514,   477,   477,
       0,     0,     0,   477,     0,     0,     0,     0,     0,     0,
       0,  1068,     0,     0,  1132,     0, -1516,  1133,     0,     0,
       0,     0,     0,     0,     0,     0,   477,     0,     0, -1516,
     477,     0,     0,     0, -1516,     0,     0,  2216,     0, -1516,
       0,     0,     0,     0,     0,     0,     0,  1139,  1066,     0,
   -1516,     0,  1862, -1516, -1610,     0,     0,     0,     0,     0,
    1067,   851,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   477,     0,     0,     0,     0,     0,     0, -1514,  1141,
       0,     0, -1516,     0,     0,     0, -1514,     0,  1066,     0,
       0,     0,     0,     0,     0,   758,   758,     0,   967,  1064,
       0, -1516,     0, -1514,     0, -1514, -1514,   477,     0,   852,
       0,     0,     0,     0,     0,     0,  1072,   853,  1066,     0,
       0,  1066,     0,  1072,     0,     0,     0,     0,     0,   854,
      48,     0,  2217,     0,     0,     0,  1068,     0,     0,     0,
       0,     0, -1514,     0,     0, -1514, -1514, -1514,     0,     0,
   -1516,  2103,     0, -1516,     0,   877,   882,     0,     0, -1516,
       0,   855,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   670,     0,     0,  1072,     0,     0,     0,
       0, -1610,     0,   477,     0,  1067,  1072,     0,     0,     0,
       0,     0,  1067,     0,   477,   477,     0, -1610,   477,     0,
       0,     0, -1610,     0,     0,     0,     0,     0,     0,   857,
     477,     0,     0,     0,   877,     0,     0, -1516,     0,     0,
     477,     0,     0,     0,     0,   477,     0,     0,   477,     0,
    1080,   858,     0,     0,     0,   477,   477, -1610,     0,     0,
       0,     0,   477,     0,     0,  1067,  1870,     0,     0,     0,
    1870,     0,   860,     0,  2218,  1067,     0,  2219,  1102,     0,
       0,  1068,     0,   477,     0,   477,     0,     0,  1068,     0,
       0,     0,  1862,     0,     0,     0,     0,  1118,  1119,  1120,
       0,  1122,     0,     0,   477,     0,     0,     0,     0,     0,
       0,     0,  1150,    48,     0,    48,  1132,     0, -1516,  1133,
       0,     0,  1171,     0,     0,     0, -1516, -1530,     0,     0,
       0,     0,     0,     0,  1072,     0,     0,     0,     0,     0,
       0,  1068,     0, -1516,     0, -1516, -1516,     0,     0,  1139,
       0,  1068,     0,     0,     0,     0, -1610,     0,     0,     0,
    1066,     0,     0,     0,     0,     0,     0,   477,     0,     0,
       0,  1208,     0,   477,  1072,  1220,  1225,     0,  1265,     0,
       0,  1141, -1516,     0,     0, -1516, -1516, -1516,     0,     0,
       0,     0,     0,     0,     0,     0,   477,    48,     0,     0,
     477,     0,     0,  1067,  1072, -1610,     0,  1072,   477,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1530,
       0,     0,     0,     0,     0,     0,     0,     0,   477,   877,
     877,   877,     0,     0,     0,     0,     0,   967,     0,     0,
       0,   967,   477,  1067,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2106,     0,     0,     0,     0,     0,     0,
    1870,     0,     0,     0,     0,  1870,     0,     0,  1870,     0,
       0,     0,     0,  1067, -1530,     0,  1067,     0,     0,  1068,
       0,     0,  1165, -1610,     0,     0,     0, -1530,     0,     0,
       0,     0, -1530,     0,     0,     0,     0, -1530,     0, -1610,
     477,     0,     0,   477, -1610, -1610,     0,     0, -1530,     0,
       0, -1530,  1157,  1158,  1159,  1160,  1161,  1162,     0,  1068,
       0,  1165,     0,     0,     0,   477,     0,     0,     0,     0,
       0,     0,     0,   477,     0,     0,     0,     0,     0, -1610,
   -1530,     0,     0,     0,     0,   877,     0,   477,     0,  1068,
       0,     0,  1068,     0,     0,     0,     0,     0,     0, -1530,
       0,     0,     0,    48,   477,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    48,     0,
     477,   477,     0,     0,  1150,     0,     0,     0,     0,     0,
       0,  1165,     0,     0,     0,     0,  1165,     0, -1530,     0,
       0, -1530,     0,     0,     0,     0,     0, -1530,     0,     0,
    1870,     0,     0,     0,     0,   967,  1072,     0,  1121,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1422,
       0,     0,     0,     0,     0,     0,   477,     0,   477,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1445,     0,     0,  1462,     0,     0,  1474,     0,     0,     0,
       0,     0,     0,  1481,  1486, -1530,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1492,     0, -1610,     0,     0,
       0,  1496,  1497,  1498,  1499,  1067,    48,     0,     0,  1508,
    1509,     0,     0,     0,  1520,     0,     0,     0,  1523,     0,
       0,  1531,  1532,  1533,  1534,  1535,  1536,  1537,  1538,  1539,
       0,   477,  1540,     0,     0,     0,  1548,     0,     0,  1552,
    1862,   758,     0,   877,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1573,     0, -1530,     0,     0,     0,
      48,     0,     0,     0, -1530,     0,     0,     0,     0,     0,
       0,  1068,     0,     0,     0,     0,     0,     0,  1119,  1120,
       0, -1530,     0, -1530, -1530,     0,     0, -1610,     0,     0,
       0,     0,     0,     0,  1157,  1158,  1159,  1160,  1161,  1162,
       0,     0,     0,     0,  1165,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1530,     0,     0, -1530, -1530, -1530,  1165,     0,     0,     0,
       0,  1469,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1165,  1165,  1165,     0,  1165,     0,     0,     0,
       0,     0,     0,     0,     0,    48,     0,     0,     0,     0,
       0,   877,     0,     0,  1687,  1688,     0,  1689,     0,     0,
       0,     0,     0,  1131,     0,     0,     0,     0,  1132,     0,
       0,  1133,     0,     0,     0,     0,  1134,  1135,  1136,     0,
       0,     0,     0,     0,     0,  1165,     0,     0,     0,     0,
       0,  1725,     0,  1137,     0,     0,  1138,     0,     0,     0,
       0,  1139,     0,     0,     0,     0,     0,     0,  1140,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1165,     0,     0,     0,     0,   877,     0,     0,
     -40,     0,     0,  1141,  1165,     0,     0,     0,     0,  1165,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     1,
       0,  1132,     0,     0,  1133,     0,     0,     0,     0,     2,
       0,     3,     4,     0,     0,     0,  1765,     0,     0,     0,
       0,  1771,     0,     0,     0,     0,     0,     5,     0,     0,
       0,     0,     0,     0,  1139,     0,     6,     0,     0,     0,
       0, -1610,     0,     0,     0,     0,     0,     0,     7,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     8,
       0,     0,     0,  1788,     0,  1132,  1141,     0,  1133,     0,
       9,     0,    10,  1134,  1135,  1136,     0,     0,     0,  1486,
       0,  1486,  1486,     0,     0,  1142,     0,  1826,     0,     0,
      11,     0,     0,     0,     0,     0,     0,     0,  1139,     0,
       0,  1143,     0,     0,    12,  1140,  1144,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    13,     0,     0,     0,
       0,  1844,     0,    14,  1847,     0,  1849,  1145,  1146,     0,
    1141,    15,     0,    16,    17,     0,     0,     0,  2107,     0,
       0,  1147,     0,     0,     0,     0,    18,  1132,     0,     0,
    1133,     0,     0,     0,     0,  1134,  1135,  1136,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1610,     0,
       0,     0,  1137,     0,     0,    19,  1208,     0,     0,  1148,
    1139,     0,  1149,     0, -1610,     0,  1165,  1140,     0, -1610,
       0,  1225,     0,     0,     0,     0,  1150,     0,     0,  1151,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1165,
       0,     0,  1141,     0,    20,     0,     0,     0,     0,     0,
       0,     0,     0,  1938, -1610,     0,  1165,     0,  1469,  1469,
       0,  1805,  1142,  1469,     0,     0,     0,     0,  1165,     0,
       0,     0,     0,     0,     0,  1165,     0,     0,  1143,     0,
    1165,     0,     0,  1144,     0,     0,  1165,     0,     0,     0,
    1165,  1165,  1165,  1165,     0,     0,     0,     0,     0,  1469,
    1469,     0,  1165,  1165,  1145,  1146,     0,     0,     0,  1150,
       0,   877,     0,     0,  1165,     0,     0,  1165,  1147,  1152,
       0,    21,     0,     0,    22,  1165,  1165,  1165,  1165,  1165,
    1165,  1165,  1165,  1165,  1165,     0,     0,     0,     0,     0,
       0,     0,  1165,     0,  1142,     0,  1165,     0,     0,     0,
       0,     0,     0,     0,     0,    23,  1148,     0,     0,  1149,
    1143,     0,     0,    24,     0,  1144,     0,  1165,     0,     0,
       0,     0,     0,  1150,     0,     0,     0,    25,     0,     0,
       0,     0,     0,     0,    26,     0,  1145,  1146,    27,     0,
       0,     0,     0,  2052,     0,     0,     0,     0,     0,    28,
    1147,     0, -1610,  2056,     0,     0,     0,  2057,     0,     0,
    2059,     0,     0,    29,     0,     0,     0,     0,     0,  1153,
       0,     0,  1154,  1155,  1156,     0,  1157,  1158,  1159,  1160,
    1161,  1162,     0,     0,     0,     0,  2079,  2080,  1148,     0,
       0,  1149,     0,     0,     0,     0,     0,     0,    30,     0,
       0,     0,     0,    31,     0,  1150,  2092,     0,  1151,  2095,
       0,  2097,     0,     0,     0,     0,  1152,    32,     0,  2101,
       0,     0,     0,     0,     0,     0,     0,  2108,  2109,     0,
       0,  1165,  1165,  1165,     0,     0,     0,     0,     0,     0,
       0,    33,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1610,     0,     0,    34,     0,  2151,   -40,  1157,
    1158,  1159,  1160,  1161,  1162,     0,     0,     0,     0,  1165,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2178,     0,  1152,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1165,
       0,     0,     0,  2191,     0,  1165,  1153,     0,     0,  1154,
    1155,  1156,     0,  1157,  1158,  1159,  1160,  1161,  1162,     0,
    1805,  1805,  1165,     0,  1469,  1469,  1469,  1469,     0,     0,
    1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,
    1805,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1165,     0,     0,     0,  1805,  1805,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1165,  1469,
    1469,  1165,     0,  1165,     0,     0,     0,     0,  1153,     0,
       0,  1154,  1155,  1156,     0,  1157,  1158,  1159,  1160,  1161,
    1162,     0,     0,     0,     0,  1489,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2287,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1132,
       0,     0,  1133,     0,     0,     0,     0,  1134,  1135,  1136,
    2296,  2297,     0,     0,     0,  2298,     0,     0,     0,     0,
    2301,     0,  1165,  2304,  2305,     0,     0,  1132,  2309,     0,
    1133,     0,  1139,     0,     0,  1134,  1135,  1136,     0,  1140,
       0,     0,     0,     0,     0,  1132,     0,     0,  1133,     0,
       0,     0,  1137,  1134,  1135,  1136,     0,     0,     0,     0,
    1139,     0,     0,     0,  1141,     0,     0,  1140,     0,     0,
    1137,     0,     0,     0,     0,     0,     0,     0,  1139,     0,
       0,     0,     0,     0,     0,  1140,     0,     0,     0,     0,
       0,     0,  1141,     0,     0,     0,   758,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1141,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2410,     0,     0,     0,  1165,     0,     0,     0,
    1165,  1165,     0,  1165,     0,     0,  1805,  1805,  1805,  1805,
       0,     0,     0,  1805,  1805,  1805,  1805,  1805,  1805,  1805,
    1805,  1805,  1805,  1165,  1165,     0,  1142,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1165,     0,     0,  1165,
       0,  1165,  1143,     0,     0,  1165,     0,  1144,  1805,  1805,
       0,     0,  1165,  1165,  1142,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1610, -1610,
    1143,  1132,  1142,     0,  1133,  1144,     0,     0,     0,  2465,
    2466,     0,  1147,  2467,     0,     0,     0,     0,  1143,     0,
       0,     0,     0,  1144,     0,  1165,  1145,  1146,     0,  1132,
       0,     0,  1133,     0,  1139,     0,     0,     0,     0,     0,
    1147, -1610,     0,     0,  1145,  1146,     0,     0,     0,     0,
    2500,  2501,  1165, -1610,     0,     0,   504,   758,  1147,     0,
       0,     0,  1139,     0,     0,  1165,  1141,  1150,     0, -1610,
       0,     0,     0,     0,     0,     0,     0,     0,  1148,     0,
    2522,  1149,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1141,  1150,  1148,     0,  1151,  1149,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   505,
       0,     0,     0,  1150,     0,     0,  1151,     0,     0,     0,
       0,     0,     0,     0,   506,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2306,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1152,  1165,     0,     0,     0,  1469,     0,     0, -1610,     0,
    1165,  1165,  1165,     0,     0,  1165,     0,     0,  1165,  1165,
       0,   507,     0,  1165, -1610,     0,     0,     0,  1152, -1610,
     508,  2603,     0,     0,     0,     0, -1610,     0,     0,     0,
       0,     0,   509,  1122,     0,     0,  1152,   510,     0,     0,
       0,     0, -1610,     0,     0,     0,     0, -1610,     0,     0,
       0,     0,     0,  2630, -1610,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   511,     0,     0,  2644,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1610,     0,     0,     0,     0,     0,     0,     0,
    1153,     0,     0,  1154,  1155,  1156,  1469,  1157,  1158,  1159,
    1160,  1161,  1162,     0,     0,     0,     0,   512,     0,  1150,
     513,     0,     0,     0,  1165,     0,     0,     0,  1153,     0,
       0,  1154,  1155,  1156,     0,  1157,  1158,  1159,  1160,  1161,
    1162,     0,     0,     0,     0,  1828,  1153,  1150,     0,  1154,
    1155,  1156,     0,  1157,  1158,  1159,  1160,  1161,  1162,     0,
    2500,     0,     0,  2055,     0,     0,     0,     0,   758,     0,
       0,     0,     0,     0,  1805,  1469,     0,     0,     0,  1165,
    1165,  1165,     0,     0,   514,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2721,
     515,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1610,     0,  1165,  1165,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2739,  2739,     0,     0,     0,
       0,     0,   516,     0,     0,   517,  1165,     0,     0,     0,
   -1610,     0,     0,   518,     0,     0,   519,  1805,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   520,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   521,     0,
       0,     0,     0,  2739,     0,   522,     0,     0,     0,     0,
       0,     0,     0,     0,   523,     0,     0,     0,     0,  1805,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1610,     0,     0,     0,     0,  1165,     0,  1157,
    1158,  1159,  1160,  1161,  1162,   524,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1610,     0,     0,     0,  1165,     0,     0,  1157,  1158,  1159,
    1160,  1161,  1162,     0,     0,     0,  2739,     0,  1165,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    91,   684,   543,   685,   686,   687,   688,   689,     0,
       0,     0,     0,     0,     0,     0,     0,    92,    93,    94,
      95,    96,    97,    98,    99,   872,   100,   101,   102,     0,
       0,     0,     0,     0,     0,     0,   103,   104,     0,   105,
     106,   107,   108,   109,   110,   111,   112,   690,   114,   691,
     692,     0,   117,   118,   119,   120,   121,   122,   693,   694,
     123,   124,   695,   696,   127,  1165,   128,   129,   130,   131,
     697,     0,   698,     0,   134,   135,   136,   137,   138,   139,
     140,   141,   142,  1165,   143,   144,   145,   146,   147,   148,
       0,   149,   150,   151,   152,   699,   700,   701,   702,   703,
     704,   705,   154,   155,   156,   157,   158,   159,   160,   706,
     707,   163,   708,   164,     0,   165,   166,   167,   168,   169,
     170,     0,   171,   172,   173,   174,   175,   176,   177,   873,
       0,   178,   179,   709,   181,   182,   183,     0,   184,   185,
     186,     0,   187,   188,   189,     0,   190,   191,   192,   193,
     710,   195,   196,   197,   198,   711,   712,   200,     0,   201,
     202,   713,   204,     0,   205,     0,   206,   207,     0,   208,
     209,   210,   211,   212,   213,     0,   214,     0,     0,     0,
     215,   216,     0,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,     0,   228,   229,   230,   231,   232,
     233,     0,   234,   235,   236,   237,   238,   239,   240,   714,
     715,     0,   716,     0,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,     0,     0,   254,   255,   256,   257,
       0,   258,   259,   260,   717,   718,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   719,
     285,   720,   287,   288,   289,   290,   291,   721,   292,   293,
     294,   295,   722,   723,   297,   724,   299,   300,   301,     0,
     302,   303,     0,     0,   725,   305,   306,     0,     0,   307,
     308,   309,   310,   311,   726,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,     0,   323,   324,   727,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   728,   344,   345,
     346,   347,     0,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,     0,   361,   362,   363,
     364,   365,   366,   729,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,     0,   379,   380,   381,   382,
     383,   730,   384,   385,   386,   387,   388,   389,   390,   391,
     731,   393,     0,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   732,     0,   409,
     410,     0,   411,   412,   413,   414,   415,   416,   417,     0,
     733,   734,     0,     0,   420,   421,   735,   423,   736,   737,
     425,   426,   427,   428,   429,   430,   431,     0,     0,   432,
     433,   434,   435,   436,   738,     0,   437,   438,   439,   440,
     441,   442,   739,   874,   444,   445,   446,   447,   448,   449,
     450,     0,     0,   451,     0,     0,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   740,     0,     0,
       0,     0,     0,     0,   741,   742,   875,     0,     0,     0,
       0,     0,     0,   744,   876,     0,     0,     0,   745,    91,
     684,   543,   685,   686,   687,   688,   689,     0,     0,     0,
       0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
      97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
       0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
     108,   109,   110,   111,   112,   690,   114,   691,   692,     0,
     117,   118,   119,   120,   121,   122,   693,   694,   123,   124,
     695,   696,   127,     0,   128,   129,   130,   131,   697,     0,
     698,     0,   134,   135,   136,   137,   138,   139,   140,   141,
     142,     0,   143,   144,   145,   146,   147,   148,     0,   149,
     150,   151,   152,   699,   700,   701,   702,   703,   704,   705,
     154,   155,   156,   157,   158,   159,   160,   706,   707,   163,
     708,   164,     0,   165,   166,   167,   168,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,     0,     0,   178,
     179,   709,   181,   182,   183,     0,   184,   185,   186,     0,
     187,   188,   189,     0,   190,   191,   192,   193,   710,   195,
     196,   197,   198,   711,   712,   200,     0,   201,   202,   713,
     204,     0,   205,     0,   206,   207,     0,   208,   209,   210,
     211,   212,   213,     0,   214,     0,     0,     0,   215,   216,
       0,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,     0,   228,   229,   230,   231,   232,   233,     0,
     234,   235,   236,   237,   238,   239,   240,   714,   715,     0,
     716,     0,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,     0,     0,   254,   255,   256,   257,     0,   258,
     259,   260,   717,   718,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   719,   285,   720,
     287,   288,   289,   290,   291,   721,   292,   293,   294,   295,
     722,   723,   297,   724,   299,   300,   301,     0,   302,   303,
       0,     0,   725,   305,   306,     0,     0,   307,   308,   309,
     310,   311,   726,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,     0,   323,   324,   727,   326,   327,   328,
     329,   330,   331,     0,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   728,   344,   345,   346,   347,
       0,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,     0,   361,   362,   363,   364,   365,
     366,   729,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    25,   379,   380,   381,   382,   383,   730,
     384,   385,   386,   387,   388,   389,   390,   391,   731,   393,
       0,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   732,     0,   409,   410,    29,
     411,   412,   413,   414,   415,   416,   417,     0,   733,   734,
       0,     0,   420,   421,   735,   423,   736,   737,   425,   426,
     427,   428,   429,   430,   431,     0,     0,   432,   433,   434,
     435,   436,   738,     0,   437,   438,   439,   440,   441,   593,
     739,     0,   444,   445,   446,   447,   448,   449,   450,     0,
       0,   451,     0,    32,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   740,     0,    33,     0,     0,
       0,     0,   741,   742,     0,     0,     0,     0,     0,     0,
       0,   744,  2612,     0,     0,     0,   745,    91,   684,   543,
     685,   686,   687,   688,   689,     0,     0,     0,     0,     0,
       0,     0,     0,    92,    93,    94,    95,    96,    97,    98,
      99,     0,   100,   101,   102,     0,     0,     0,     0,     0,
       0,     0,   103,   104,     0,   105,   106,   107,   108,   109,
     110,   111,   112,   690,   114,   691,   692,     0,   117,   118,
     119,   120,   121,   122,   693,   694,   123,   124,   695,   696,
     127,     0,   128,   129,   130,   131,   697,     0,   698,     0,
     134,   135,   136,   137,   138,   139,   140,   141,   142,     0,
     143,   144,   145,   146,   147,   148,     0,   149,   150,   151,
     152,   699,   700,   701,   702,   703,   704,   705,   154,   155,
     156,   157,   158,   159,   160,   706,   707,   163,   708,   164,
       0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,     0,     0,   178,   179,   709,
     181,   182,   183,     0,   184,   185,   186,     0,   187,   188,
     189,     0,   190,   191,   192,   193,   710,   195,   196,   197,
     198,   711,   712,   200,     0,   201,   202,   713,   204,     0,
     205,     0,   206,   207,     0,   208,   209,   210,   211,   212,
     213,     0,   214,     0,     0,     0,   215,   216,     0,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
       0,   228,   229,   230,   231,   232,   233,     0,   234,   235,
     236,   237,   238,   239,   240,   714,   715,     0,   716,     0,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
       0,     0,   254,   255,   256,   257,     0,   258,   259,   260,
     717,   718,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   719,   285,   720,   287,   288,
     289,   290,   291,   721,   292,   293,   294,   295,   722,   723,
     297,   724,   299,   300,   301,     0,   302,   303,     0,     0,
     725,   305,   306,     0,     0,   307,   308,   309,   310,   311,
     726,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,     0,   323,   324,   727,   326,   327,   328,   329,   330,
     331,     0,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   728,   344,   345,   346,   347,     0,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,     0,   361,   362,   363,   364,   365,   366,   729,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,    25,   379,   380,   381,   382,   383,   730,   384,   385,
     386,   387,   388,   389,   390,   391,   731,   393,     0,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   732,     0,   409,   410,    29,   411,   412,
     413,   414,   415,   416,   417,     0,   733,   734,     0,     0,
     420,   421,   735,   423,   736,   737,   425,   426,   427,   428,
     429,   430,   431,     0,     0,   432,   433,   434,   435,   436,
     738,     0,   437,   438,   439,   440,   441,   593,   739,     0,
     444,   445,   446,   447,   448,   449,   450,     0,     0,   451,
       0,    32,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   740,     0,    33,     0,     0,     0,     0,
     741,   742,     0,     0,     0,     0,     0,     0,     0,   744,
       0,     0,     0,     0,   745,    91,   684,   543,   685,   686,
     687,   688,   689,     0,     0,     0,     0,     0,     0,     0,
       0,    92,    93,    94,    95,    96,    97,    98,    99,     0,
     100,   101,   102,     0,     0,     0,     0,     0,     0,     0,
     103,   104,     0,   105,   106,   107,   108,   109,   110,   111,
     112,   690,   114,   691,   692,  1482,   117,   118,   119,   120,
     121,   122,   693,   694,   123,   124,   695,   696,   127,     0,
     128,   129,   130,   131,   697,     0,   698,     0,   134,   135,
     136,   137,   138,   139,   140,   141,   142,     0,   143,   144,
     145,   146,   147,   148,     0,   149,   150,   151,   152,   699,
     700,   701,   702,   703,   704,   705,   154,   155,   156,   157,
     158,   159,   160,   706,   707,   163,   708,   164,     0,   165,
     166,   167,   168,   169,   170,     0,   171,   172,   173,   174,
     175,   176,   177,     0,     0,   178,   179,   709,   181,   182,
     183,     0,   184,   185,   186,     0,   187,   188,   189,     0,
     190,   191,   192,   193,   710,   195,   196,   197,   198,   711,
     712,   200,     0,   201,   202,   713,   204,     0,   205,     0,
     206,   207,  1483,   208,   209,   210,   211,   212,   213,     0,
     214,     0,     0,     0,   215,   216,     0,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,     0,   228,
     229,   230,   231,   232,   233,     0,   234,   235,   236,   237,
     238,   239,   240,   714,   715,     0,   716,     0,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,     0,  1484,
     254,   255,   256,   257,     0,   258,   259,   260,   717,   718,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   719,   285,   720,   287,   288,   289,   290,
     291,   721,   292,   293,   294,   295,   722,   723,   297,   724,
     299,   300,   301,     0,   302,   303,     0,     0,   725,   305,
     306,     0,     0,   307,   308,   309,   310,   311,   726,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,     0,
     323,   324,   727,   326,   327,   328,   329,   330,   331,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   728,   344,   345,   346,   347,     0,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
       0,   361,   362,   363,   364,   365,   366,   729,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,     0,
     379,   380,   381,   382,   383,   730,   384,   385,   386,   387,
     388,   389,   390,   391,   731,   393,     0,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   732,     0,   409,   410,     0,   411,   412,   413,   414,
     415,   416,   417,     0,   733,   734,     0,  1485,   420,   421,
     735,   423,   736,   737,   425,   426,   427,   428,   429,   430,
     431,     0,     0,   432,   433,   434,   435,   436,   738,     0,
     437,   438,   439,   440,   441,   442,   739,     0,   444,   445,
     446,   447,   448,   449,   450,     0,     0,   451,     0,     0,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   740,     0,     0,     0,     0,     0,     0,   741,   742,
       0,     0,     0,     0,     0,     0,     0,   744,     0,     0,
       0,     0,   745,    91,   684,   543,   685,   686,   687,   688,
     689,     0,     0,     0,     0,     0,     0,     0,     0,    92,
      93,    94,    95,    96,    97,    98,    99,     0,   100,   101,
     102,     0,     0,     0,     0,     0,     0,     0,   103,   104,
       0,   105,   106,   107,   108,   109,   110,   111,   112,   690,
     114,   691,   692,     0,   117,   118,   119,   120,   121,   122,
     693,   694,   123,   124,   695,   696,   127,     0,   128,   129,
     130,   131,   697,     0,   698,     0,   134,   135,   136,   137,
     138,   139,   140,   141,   142,     0,   143,   144,   145,   146,
     147,   148,     0,   149,   150,   151,   152,   699,   700,   701,
     702,   703,   704,   705,   154,   155,   156,   157,   158,   159,
     160,   706,   707,   163,   708,   164,     0,   165,   166,   167,
     168,   169,   170,     0,   171,   172,   173,   174,   175,   176,
     177,     0,     0,   178,   179,   709,   181,   182,   183,     0,
     184,   185,   186,     0,   187,   188,   189,     0,   190,   191,
     192,   193,   710,   195,   196,   197,   198,   711,   712,   200,
       0,   201,   202,   713,   204,     0,   205,     0,   206,   207,
       0,   208,   209,   210,   211,   212,   213,     0,   214,     0,
       0,     0,   215,   216,     0,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,     0,   228,   229,   230,
     231,   232,   233,     0,   234,   235,   236,   237,   238,   239,
     240,   714,   715,     0,   716,     0,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,     0,     0,   254,   255,
     256,   257,     0,   258,   259,   260,   717,   718,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   719,   285,   720,   287,   288,   289,   290,   291,   721,
     292,   293,   294,   295,   722,   723,   297,   724,   299,   300,
     301,     0,   302,   303,     0,     0,   725,   305,   306,     0,
       0,   307,   308,   309,   310,   311,   726,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,     0,   323,   324,
     727,   326,   327,   328,   329,   330,   331,     0,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   728,
     344,   345,   346,   347,     0,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,     0,   361,
     362,   363,   364,   365,   366,   729,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,     0,   379,   380,
     381,   382,   383,   730,   384,   385,   386,   387,   388,   389,
     390,   391,   731,   393,     0,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   732,
       0,   409,   410,     0,   411,   412,   413,   414,   415,   416,
     417,     0,   733,   734,     0,     0,   420,   421,   735,   423,
     736,   737,   425,   426,   427,   428,   429,   430,   431,     0,
       0,   432,   433,   434,   435,   436,   738,     0,   437,   438,
     439,   440,   441,   442,   739,     0,   444,   445,   446,   447,
     448,   449,   450,     0,     0,   451,     0,     0,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   740,
       0,     0,     0,     0,     0,     0,   741,   742,   743,     0,
       0,     0,     0,     0,     0,   744,     0,     0,     0,     0,
     745,    91,   684,   543,   685,   686,   687,   688,   689,     0,
       0,     0,     0,     0,     0,     0,     0,    92,    93,    94,
      95,    96,    97,    98,    99,  1218,   100,   101,   102,     0,
       0,     0,     0,     0,     0,     0,   103,   104,     0,   105,
     106,   107,   108,   109,   110,   111,   112,   690,   114,   691,
     692,     0,   117,   118,   119,   120,   121,   122,   693,   694,
     123,   124,   695,   696,   127,     0,   128,   129,   130,   131,
     697,     0,   698,     0,   134,   135,   136,   137,   138,   139,
     140,   141,   142,     0,   143,   144,   145,   146,   147,   148,
       0,   149,   150,   151,   152,   699,   700,   701,   702,   703,
     704,   705,   154,   155,   156,   157,   158,   159,   160,   706,
     707,   163,   708,   164,     0,   165,   166,   167,   168,   169,
     170,     0,   171,   172,   173,   174,   175,   176,   177,     0,
       0,   178,   179,   709,   181,   182,   183,     0,   184,   185,
     186,     0,   187,   188,   189,     0,   190,   191,   192,   193,
     710,   195,   196,   197,   198,   711,   712,   200,     0,   201,
     202,   713,   204,     0,   205,     0,   206,   207,     0,   208,
     209,   210,   211,   212,   213,     0,   214,     0,     0,     0,
     215,   216,     0,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,     0,   228,   229,   230,   231,   232,
     233,     0,   234,   235,   236,   237,   238,   239,   240,   714,
     715,     0,   716,     0,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,     0,     0,   254,   255,   256,   257,
       0,   258,   259,   260,   717,   718,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   719,
     285,   720,   287,   288,   289,   290,   291,   721,   292,   293,
     294,   295,   722,   723,   297,   724,   299,   300,   301,     0,
     302,   303,     0,     0,   725,   305,   306,     0,     0,   307,
     308,   309,   310,   311,   726,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,     0,   323,   324,   727,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   728,   344,   345,
     346,   347,     0,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,     0,   361,   362,   363,
     364,   365,   366,   729,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,     0,   379,   380,   381,   382,
     383,   730,   384,   385,   386,   387,   388,   389,   390,   391,
     731,   393,     0,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   732,     0,   409,
     410,     0,   411,   412,   413,   414,   415,   416,   417,     0,
     733,   734,     0,     0,   420,   421,   735,   423,   736,   737,
     425,   426,   427,   428,   429,   430,   431,     0,     0,   432,
     433,   434,   435,   436,   738,     0,   437,   438,   439,   440,
     441,   442,   739,     0,   444,   445,   446,   447,   448,   449,
     450,     0,     0,   451,     0,     0,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   740,     0,     0,
       0,     0,     0,     0,   741,   742,     0,     0,     0,     0,
       0,     0,     0,   744,     0,     0,     0,     0,   745,    91,
     684,   543,   685,   686,   687,   688,   689,     0,     0,     0,
       0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
      97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
       0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
     108,   109,   110,   111,   112,   690,   114,   691,   692,     0,
     117,   118,   119,   120,   121,   122,   693,   694,   123,   124,
     695,   696,   127,     0,   128,   129,   130,   131,   697,     0,
     698,     0,   134,   135,   136,   137,   138,   139,   140,   141,
     142,     0,   143,   144,   145,   146,   147,   148,     0,   149,
     150,   151,   152,   699,   700,   701,   702,   703,   704,   705,
     154,   155,   156,   157,   158,   159,   160,   706,   707,   163,
     708,   164,     0,   165,   166,   167,   168,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,     0,     0,   178,
     179,   709,   181,   182,   183,     0,   184,   185,   186,     0,
     187,   188,   189,     0,   190,   191,   192,   193,   710,   195,
     196,   197,   198,   711,   712,   200,     0,   201,   202,   713,
     204,     0,   205,     0,   206,   207,     0,   208,   209,   210,
     211,   212,   213,     0,   214,     0,     0,     0,   215,   216,
       0,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,     0,   228,   229,   230,   231,   232,   233,     0,
     234,   235,   236,   237,   238,   239,   240,   714,   715,     0,
     716,     0,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,     0,     0,   254,   255,   256,   257,     0,   258,
     259,   260,   717,   718,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   719,   285,   720,
     287,   288,   289,   290,   291,   721,   292,   293,   294,   295,
     722,   723,   297,   724,   299,   300,   301,     0,   302,   303,
       0,     0,   725,   305,   306,     0,     0,   307,   308,   309,
     310,   311,   726,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,     0,   323,   324,   727,   326,   327,   328,
     329,   330,   331,     0,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   728,   344,   345,   346,   347,
       0,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,     0,   361,   362,   363,   364,   365,
     366,   729,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,     0,   379,   380,   381,   382,   383,   730,
     384,   385,   386,   387,   388,   389,   390,   391,   731,   393,
       0,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   732,     0,   409,   410,     0,
     411,   412,   413,   414,   415,   416,   417,     0,   733,   734,
       0,     0,   420,   421,   735,   423,   736,   737,   425,   426,
     427,   428,   429,   430,   431,     0,     0,   432,   433,   434,
     435,   436,   738,     0,   437,   438,   439,   440,   441,   442,
     739,     0,   444,   445,   446,   447,   448,   449,   450,     0,
       0,   451,     0,     0,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   740,     0,     0,     0,     0,
       0,     0,   741,   742,     0,     0,     0,     0,     0,     0,
       0,   744,  1342,     0,     0,     0,   745,    91,   684,   543,
     685,   686,   687,   688,   689,     0,     0,     0,     0,     0,
       0,     0,     0,    92,    93,    94,    95,    96,    97,    98,
      99,     0,   100,   101,   102,     0,     0,     0,     0,     0,
       0,     0,   103,   104,     0,   105,   106,   107,   108,   109,
     110,   111,   112,   690,   114,   691,   692,     0,   117,   118,
     119,   120,   121,   122,   693,   694,   123,   124,   695,   696,
     127,     0,   128,   129,   130,   131,   697,     0,   698,     0,
     134,   135,   136,   137,   138,   139,   140,   141,   142,     0,
     143,   144,   145,   146,   147,   148,     0,   149,   150,   151,
     152,   699,   700,   701,   702,   703,   704,   705,   154,   155,
     156,   157,   158,   159,   160,   706,   707,   163,   708,   164,
       0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,     0,     0,   178,   179,   709,
     181,   182,   183,     0,   184,   185,   186,     0,   187,   188,
     189,     0,   190,   191,   192,   193,   710,   195,   196,   197,
     198,   711,   712,   200,     0,   201,   202,   713,   204,     0,
     205,     0,   206,   207,     0,   208,   209,   210,   211,   212,
     213,     0,   214,     0,     0,     0,   215,   216,     0,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
       0,   228,   229,   230,   231,   232,   233,     0,   234,   235,
     236,   237,   238,   239,   240,   714,   715,     0,   716,     0,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
       0,     0,   254,   255,   256,   257,     0,   258,   259,   260,
     717,   718,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   719,   285,   720,   287,   288,
     289,   290,   291,   721,   292,   293,   294,   295,   722,   723,
     297,   724,   299,   300,   301,     0,   302,   303,     0,     0,
     725,   305,   306,     0,     0,   307,   308,   309,   310,   311,
     726,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,     0,   323,   324,   727,   326,   327,   328,   329,   330,
     331,     0,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   728,   344,   345,   346,   347,     0,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,     0,   361,   362,   363,   364,   365,   366,   729,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,     0,   379,   380,   381,   382,   383,   730,   384,   385,
     386,   387,   388,   389,   390,   391,   731,   393,     0,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   732,     0,   409,   410,     0,   411,   412,
     413,   414,   415,   416,   417,     0,   733,   734,     0,     0,
     420,   421,   735,   423,   736,   737,   425,   426,   427,   428,
     429,   430,   431,     0,     0,   432,   433,   434,   435,   436,
     738,     0,   437,   438,   439,   440,   441,   442,   739,     0,
     444,   445,   446,   447,   448,   449,   450,     0,     0,   451,
       0,     0,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   740,     0,     0,     0,     0,     0,     0,
     741,   742,     0,     0,     0,     0,     0,     0,     0,   744,
    1472,     0,     0,     0,   745,    91,   684,   543,   685,   686,
     687,   688,   689,     0,     0,     0,     0,     0,     0,     0,
       0,    92,    93,    94,    95,    96,    97,    98,    99,     0,
     100,   101,   102,     0,     0,     0,     0,     0,     0,     0,
     103,   104,     0,   105,   106,   107,   108,   109,   110,   111,
     112,   690,   114,   691,   692,     0,   117,   118,   119,   120,
     121,   122,   693,   694,   123,   124,   695,   696,   127,     0,
     128,   129,   130,   131,   697,     0,   698,     0,   134,   135,
     136,   137,   138,   139,   140,   141,   142,     0,   143,   144,
     145,   146,   147,   148,     0,   149,   150,   151,   152,   699,
     700,   701,   702,   703,   704,   705,   154,   155,   156,   157,
     158,   159,   160,   706,   707,   163,   708,   164,     0,   165,
     166,   167,   168,   169,   170,     0,   171,   172,   173,   174,
     175,   176,   177,     0,     0,   178,   179,   709,   181,   182,
     183,     0,   184,   185,   186,     0,   187,   188,   189,     0,
     190,   191,   192,   193,   710,   195,   196,   197,   198,   711,
     712,   200,     0,   201,   202,   713,   204,     0,   205,     0,
     206,   207,     0,   208,   209,   210,   211,   212,   213,     0,
     214,     0,     0,     0,   215,   216,     0,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,     0,   228,
     229,   230,   231,   232,   233,     0,   234,   235,   236,   237,
     238,   239,   240,   714,   715,     0,   716,     0,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,     0,     0,
     254,   255,   256,   257,     0,   258,   259,   260,   717,   718,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   719,   285,   720,   287,   288,   289,   290,
     291,   721,   292,   293,   294,   295,   722,   723,   297,   724,
     299,   300,   301,     0,   302,   303,     0,     0,   725,   305,
     306,     0,     0,   307,   308,   309,   310,   311,   726,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,     0,
     323,   324,   727,   326,   327,   328,   329,   330,   331,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   728,   344,   345,   346,   347,     0,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
       0,   361,   362,   363,   364,   365,   366,   729,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,     0,
     379,   380,   381,   382,   383,   730,   384,   385,   386,   387,
     388,   389,   390,   391,   731,   393,     0,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   732,     0,   409,   410,     0,   411,   412,   413,   414,
     415,   416,   417,     0,   733,   734,     0,     0,   420,   421,
     735,   423,   736,   737,   425,   426,   427,   428,   429,   430,
     431,     0,     0,   432,   433,   434,   435,   436,   738,     0,
     437,   438,   439,   440,   441,   442,   739,  1684,   444,   445,
     446,   447,   448,   449,   450,     0,     0,   451,     0,     0,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   740,     0,     0,     0,     0,     0,     0,   741,   742,
       0,     0,     0,     0,     0,     0,     0,   744,     0,     0,
       0,     0,   745,    91,   684,   543,   685,   686,   687,   688,
     689,     0,     0,     0,     0,     0,     0,     0,     0,    92,
      93,    94,    95,    96,    97,    98,    99,     0,   100,   101,
     102,     0,     0,     0,     0,     0,     0,     0,   103,   104,
       0,   105,   106,   107,   108,   109,   110,   111,   112,   690,
     114,   691,   692,     0,   117,   118,   119,   120,   121,   122,
     693,   694,   123,   124,   695,   696,   127,     0,   128,   129,
     130,   131,   697,     0,   698,     0,   134,   135,   136,   137,
     138,   139,   140,   141,   142,     0,   143,   144,   145,   146,
     147,   148,     0,   149,   150,   151,   152,   699,   700,   701,
     702,   703,   704,   705,   154,   155,   156,   157,   158,   159,
     160,   706,   707,   163,   708,   164,     0,   165,   166,   167,
     168,   169,   170,     0,   171,   172,   173,   174,   175,   176,
     177,     0,     0,   178,   179,   709,   181,   182,   183,     0,
     184,   185,   186,     0,   187,   188,   189,     0,   190,   191,
     192,   193,   710,   195,   196,   197,   198,   711,   712,   200,
       0,   201,   202,   713,   204,     0,   205,     0,   206,   207,
    1483,   208,   209,   210,   211,   212,   213,     0,   214,     0,
       0,     0,   215,   216,     0,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,     0,   228,   229,   230,
     231,   232,   233,     0,   234,   235,   236,   237,   238,   239,
     240,   714,   715,     0,   716,     0,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,     0,     0,   254,   255,
     256,   257,     0,   258,   259,   260,   717,   718,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   719,   285,   720,   287,   288,   289,   290,   291,   721,
     292,   293,   294,   295,   722,   723,   297,   724,   299,   300,
     301,     0,   302,   303,     0,     0,   725,   305,   306,     0,
       0,   307,   308,   309,   310,   311,   726,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,     0,   323,   324,
     727,   326,   327,   328,   329,   330,   331,     0,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   728,
     344,   345,   346,   347,     0,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,     0,   361,
     362,   363,   364,   365,   366,   729,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,     0,   379,   380,
     381,   382,   383,   730,   384,   385,   386,   387,   388,   389,
     390,   391,   731,   393,     0,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   732,
       0,   409,   410,     0,   411,   412,   413,   414,   415,   416,
     417,     0,   733,   734,     0,     0,   420,   421,   735,   423,
     736,   737,   425,   426,   427,   428,   429,   430,   431,     0,
       0,   432,   433,   434,   435,   436,   738,     0,   437,   438,
     439,   440,   441,   442,   739,     0,   444,   445,   446,   447,
     448,   449,   450,     0,     0,   451,     0,     0,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   740,
       0,     0,     0,     0,     0,     0,   741,   742,     0,     0,
       0,     0,     0,     0,     0,   744,     0,     0,     0,     0,
     745,    91,   684,   543,   685,   686,   687,   688,   689,     0,
       0,     0,     0,     0,     0,     0,     0,    92,    93,    94,
      95,    96,    97,    98,    99,     0,   100,   101,   102,     0,
       0,     0,     0,     0,     0,     0,   103,   104,     0,   105,
     106,   107,   108,   109,   110,   111,   112,   690,   114,   691,
     692,     0,   117,   118,   119,   120,   121,   122,   693,   694,
     123,   124,   695,   696,   127,     0,   128,   129,   130,   131,
     697,     0,   698,     0,   134,   135,   136,   137,   138,   139,
     140,   141,   142,     0,   143,   144,   145,   146,   147,   148,
       0,   149,   150,   151,   152,   699,   700,   701,   702,   703,
     704,   705,   154,   155,   156,   157,   158,   159,   160,   706,
     707,   163,   708,   164,     0,   165,   166,   167,   168,   169,
     170,     0,   171,   172,   173,   174,   175,   176,   177,     0,
       0,   178,   179,   709,   181,   182,   183,     0,   184,   185,
     186,     0,   187,   188,   189,     0,   190,   191,   192,   193,
     710,   195,   196,   197,   198,   711,   712,   200,     0,   201,
     202,   713,   204,     0,   205,     0,   206,   207,     0,   208,
     209,   210,   211,   212,   213,     0,   214,     0,     0,     0,
     215,   216,     0,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,     0,   228,   229,   230,   231,   232,
     233,     0,   234,   235,   236,   237,   238,   239,   240,   714,
     715,     0,   716,     0,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,     0,     0,   254,   255,   256,   257,
       0,   258,   259,   260,   717,   718,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   719,
     285,   720,   287,   288,   289,   290,   291,   721,   292,   293,
     294,   295,   722,   723,   297,   724,   299,   300,   301,     0,
     302,   303,     0,     0,   725,   305,   306,     0,     0,   307,
     308,   309,   310,   311,   726,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,     0,   323,   324,   727,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   728,   344,   345,
     346,   347,     0,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,     0,   361,   362,   363,
     364,   365,   366,   729,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,     0,   379,   380,   381,   382,
     383,   730,   384,   385,   386,   387,   388,   389,   390,   391,
     731,   393,     0,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   732,     0,   409,
     410,     0,   411,   412,   413,   414,   415,   416,   417,     0,
     733,   734,     0,     0,   420,   421,   735,   423,   736,   737,
     425,   426,   427,   428,   429,   430,   431,     0,     0,   432,
     433,   434,   435,   436,   738,     0,   437,   438,   439,   440,
     441,   442,   739,     0,   444,   445,   446,   447,   448,   449,
     450,     0,     0,   451,     0,     0,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   740,     0,     0,
       0,     0,     0,     0,   741,   742,     0,     0,     0,     0,
       0,     0,     0,   744,     0,     0,     0,     0,   745,    91,
     684,   543,   685,   686,   687,   688,   689,     0,     0,     0,
       0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
      97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
       0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
     108,   109,   110,   111,   112,   690,   114,   691,   692,     0,
     117,   118,   119,   120,   121,   122,   693,   694,   123,   124,
     695,   696,   127,     0,   128,   129,   130,   131,   697,     0,
     698,     0,   134,   135,   136,   137,   138,   139,   140,   141,
     142,     0,   143,   144,   145,   146,   147,   148,     0,   149,
     150,   151,   152,   699,   700,   701,   702,   703,   704,   705,
     154,   155,   156,   157,   158,   159,   160,   706,   707,   163,
     708,   164,     0,   165,   166,   167,   168,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,     0,     0,   178,
     179,   709,   181,   182,   183,     0,   184,   185,   186,     0,
     187,   188,   189,     0,   190,   191,   192,   193,   710,   195,
     196,   197,   198,   711,   712,   200,     0,   201,   202,   713,
     204,     0,   205,     0,   206,   207,     0,   208,   209,   210,
     211,   212,   213,     0,   214,     0,     0,     0,   215,   216,
       0,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,     0,   228,   229,   230,   231,   232,   233,     0,
     234,   235,   236,   237,   238,   239,   240,   714,   715,     0,
     716,     0,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,     0,     0,   254,   255,   256,   257,     0,   258,
     259,   260,   717,   718,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   719,   285,   720,
     287,   288,   289,   290,   291,   721,   292,   293,   294,   295,
     722,   723,   297,   724,   299,   300,   301,     0,   302,   303,
       0,     0,   725,   305,   306,     0,     0,   307,   308,   309,
     310,   311,   726,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,     0,   323,   324,   727,   326,   327,   328,
     329,   330,   331,     0,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   728,   344,   345,   346,   347,
       0,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,     0,   361,   362,   363,   364,   365,
     366,   729,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,     0,   379,   380,   381,   382,   383,   730,
     384,   385,   386,   387,   388,   389,   390,   391,   731,   393,
       0,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   732,     0,   409,   410,     0,
     411,   412,   413,   414,   415,   416,   417,     0,   733,   734,
       0,     0,   420,   421,   735,   423,   736,   737,   425,   426,
     427,   428,   429,   430,   431,     0,     0,   432,   433,   434,
     435,   436,   738,     0,   437,   438,   439,   440,   441,   442,
     739,     0,   444,   445,   446,   447,   448,   449,   450,     0,
       0,   451,     0,     0,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   740,     0,     0,     0,     0,
       0,     0,  1221,  1222,     0,     0,     0,     0,     0,     0,
       0,   744,     0,     0,     0,     0,   745,    91,  1595,   543,
     685,   686,   687,   688,   689,     0,     0,     0,     0,     0,
       0,     0,     0,    92,    93,    94,    95,    96,    97,    98,
      99,     0,   100,   101,   102,     0,     0,     0,     0,     0,
       0,     0,   103,   104,     0,   105,   106,   107,   108,   109,
     110,   111,   112,   690,   114,   691,   692,     0,   117,   118,
     119,   120,   121,   122,   693,   694,   123,   124,   695,   696,
     127,     0,   128,   129,   130,   131,   697,     0,   698,     0,
     134,   135,   136,   137,   138,   139,   140,   141,   142,     0,
     143,   144,   145,   146,   147,   148,     0,   149,   150,   151,
     152,   699,   700,   701,   702,   703,   704,   705,   154,   155,
     156,   157,   158,   159,   160,   706,   707,   163,   708,   164,
       0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,     0,     0,   178,   179,   709,
     181,   182,   183,     0,   184,   185,   186,     0,   187,   188,
     189,     0,   190,   191,   192,   193,   710,   195,   196,   197,
     198,   711,   712,   200,     0,   201,   202,   713,   204,     0,
     205,     0,   206,   207,     0,   208,   209,   210,   211,   212,
     213,     0,   214,     0,     0,     0,   215,   216,     0,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
       0,   228,   229,   230,   231,   232,   233,     0,   234,   235,
     236,   237,   238,   239,   240,   714,   715,     0,   716,     0,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
       0,     0,   254,   255,   256,   257,     0,   258,   259,   260,
     717,   718,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   719,   285,   720,   287,   288,
     289,   290,   291,   721,   292,   293,   294,   295,   722,   723,
     297,   724,   299,   300,   301,     0,   302,   303,     0,     0,
     725,   305,   306,     0,     0,   307,   308,   309,   310,   311,
     726,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,     0,   323,   324,   727,   326,   327,   328,   329,   330,
     331,     0,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   728,   344,   345,   346,   347,     0,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,     0,   361,   362,   363,   364,   365,   366,   729,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,     0,   379,   380,   381,   382,   383,   730,   384,   385,
     386,   387,   388,   389,   390,   391,   731,   393,     0,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   732,     0,   409,   410,     0,   411,   412,
     413,   414,   415,   416,   417,     0,   733,   734,     0,     0,
     420,   421,   735,   423,   736,   737,   425,   426,   427,   428,
     429,   430,   431,     0,     0,   432,   433,   434,   435,   436,
     738,     0,   437,   438,   439,   440,   441,   442,   739,     0,
     444,   445,   446,   447,   448,   449,   450,     0,     0,   451,
       0,     0,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   740,     0,     0,     0,     0,     0,     0,
     741,   742,     0,     0,     0,     0,     0,     0,     0,   744,
       0,     0,     0,     0,   745,    91,   684,   543,   685,   686,
     687,   688,   689,     0,     0,     0,     0,     0,     0,     0,
       0,    92,    93,    94,    95,    96,    97,    98,    99,     0,
     100,   101,   102,     0,     0,     0,     0,     0,     0,     0,
     103,   104,     0,   105,   106,   107,   108,   109,   110,   111,
     112,   690,   114,   691,   692,     0,   117,   118,   119,   120,
     121,   122,   693,   694,   123,   124,   695,   696,   127,     0,
     128,   129,   130,   131,   697,     0,   698,     0,   134,   135,
     136,   137,   138,   139,   140,   141,   142,     0,   143,   144,
     145,   146,   147,   148,     0,   149,   150,   151,   152,   699,
     700,   701,   702,   703,   704,   705,   154,   155,   156,   157,
     158,   159,   160,   706,   707,   163,   708,   164,     0,   165,
     166,   167,   168,   169,   170,     0,   171,   172,   173,   174,
     175,   176,   177,     0,     0,   178,   179,   709,   181,   182,
     183,     0,   184,   185,   186,     0,   187,   188,   189,     0,
     190,   191,   192,   193,   710,   195,   196,   197,   198,   711,
     712,   200,     0,   201,   202,   713,   204,     0,   205,     0,
     206,   207,     0,   208,   209,   210,   211,   212,   213,     0,
     214,     0,     0,     0,   215,   216,     0,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,     0,   228,
     229,   230,   231,   232,   233,     0,   234,   235,   236,   237,
     238,   239,   240,   714,   715,     0,   716,     0,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,     0,     0,
     254,   255,   256,   257,     0,   258,   259,   260,   717,   718,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   719,   285,   720,   287,   288,   289,   290,
     291,   721,   292,   293,   294,   295,   722,   723,   297,   724,
     299,   300,   301,     0,   302,   303,     0,     0,   725,   305,
     306,     0,     0,   307,   308,   309,   310,   311,   726,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,     0,
     323,   324,   727,   326,   327,   328,   329,   330,   331,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   728,   344,   345,   346,   347,     0,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
       0,   361,   362,   363,   364,   365,   366,   729,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,     0,
     379,   380,   381,   382,   383,   730,   384,   385,   386,   387,
     388,   389,   390,   391,   731,   393,     0,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   732,     0,   409,   410,     0,   411,   412,   413,   414,
     415,   416,   417,     0,   733,   734,     0,     0,   420,   421,
     735,   423,   736,   737,   425,   426,   427,   428,   429,   430,
     431,     0,     0,   432,   433,   434,   435,   436,   738,     0,
     437,   438,   439,   440,   441,   442,   739,     0,   444,   445,
     446,   447,   448,   449,   450,     0,     0,   451,     0,     0,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   740,     0,     0,     0,     0,     0,     0,   741,   742,
       0,     0,     0,     0,     0,     0,     0,  2496,     0,     0,
       0,     0,   745,    91,   684,   543,   685,   686,   687,   688,
     689,     0,     0,     0,     0,     0,     0,     0,     0,    92,
      93,    94,    95,    96,    97,    98,    99,     0,   100,   101,
     102,     0,     0,     0,     0,     0,     0,     0,   103,   104,
       0,   105,   106,   107,   108,   109,   110,   111,  2736,   690,
     114,   691,   692,     0,   117,   118,   119,   120,   121,   122,
     693,   694,   123,   124,   695,   696,   127,     0,   128,   129,
     130,   131,   697,     0,   698,     0,   134,   135,   136,   137,
     138,   139,   140,   141,   142,     0,   143,   144,   145,   146,
     147,   148,     0,   149,   150,   151,  2737,   699,   700,   701,
     702,   703,   704,   705,   154,   155,   156,   157,   158,   159,
     160,   706,   707,   163,   708,   164,     0,   165,   166,   167,
     168,   169,   170,     0,   171,   172,   173,   174,   175,   176,
     177,     0,     0,   178,   179,   709,   181,   182,   183,     0,
     184,   185,   186,     0,   187,   188,   189,     0,   190,   191,
     192,   193,   710,   195,   196,   197,   198,   711,   712,   200,
       0,   201,   202,   713,   204,     0,   205,     0,   206,   207,
       0,   208,   209,   210,   211,   212,   213,     0,   214,     0,
       0,     0,   215,   216,     0,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,     0,   228,   229,   230,
     231,   232,   233,     0,   234,   235,   236,   237,   238,   239,
     240,   714,   715,     0,   716,     0,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,     0,     0,   254,   255,
     256,   257,     0,   258,   259,   260,   717,   718,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   719,   285,   720,   287,   288,   289,   290,   291,   721,
     292,   293,   294,   295,   722,   723,   297,   724,   299,   300,
     301,     0,   302,   303,     0,     0,   725,   305,   306,     0,
       0,   307,   308,   309,   310,   311,   726,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,     0,   323,   324,
     727,   326,   327,   328,   329,   330,   331,     0,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   728,
     344,   345,   346,   347,     0,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,     0,   361,
     362,   363,   364,   365,   366,   729,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,     0,   379,   380,
     381,   382,   383,   730,   384,   385,   386,   387,   388,   389,
     390,   391,   731,   393,     0,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   732,
       0,   409,   410,     0,   411,   412,   413,   414,   415,   416,
     417,     0,   733,   734,     0,     0,   420,   421,   735,   423,
     736,   737,   425,   426,   427,   428,  2738,   430,   431,     0,
       0,   432,   433,   434,   435,   436,   738,     0,   437,   438,
     439,   440,   441,   442,   739,     0,   444,   445,   446,   447,
     448,   449,   450,     0,     0,   451,     0,     0,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   740,
       0,     0,     0,     0,     0,     0,   741,   742,     0,     0,
       0,     0,     0,     0,     0,   744,     0,     0,     0,     0,
     745,    91,   684,   543,   685,   686,   687,   688,   689,     0,
       0,     0,     0,     0,     0,     0,     0,    92,    93,    94,
      95,    96,    97,    98,    99,     0,   100,   101,   102,     0,
       0,     0,     0,     0,     0,     0,   103,   104,     0,   105,
     106,   107,   108,   109,   110,   111,   112,   690,   114,   691,
     692,     0,   117,   118,   119,   120,   121,   122,   693,   694,
     123,   124,   695,   696,   127,     0,   128,   129,   130,   131,
     697,     0,   698,     0,   134,   135,   136,   137,   138,   139,
     140,   141,   142,     0,   143,   144,   145,   146,   147,   148,
       0,   149,   150,   151,  2737,   699,   700,   701,   702,   703,
     704,   705,   154,   155,   156,   157,   158,   159,   160,   706,
     707,   163,   708,   164,     0,   165,   166,   167,   168,   169,
     170,     0,   171,   172,   173,   174,   175,   176,   177,     0,
       0,   178,   179,   709,   181,   182,   183,     0,   184,   185,
     186,     0,   187,   188,   189,     0,   190,   191,   192,   193,
     710,   195,   196,   197,   198,   711,   712,   200,     0,   201,
     202,   713,   204,     0,   205,     0,   206,   207,     0,   208,
     209,   210,   211,   212,   213,     0,   214,     0,     0,     0,
     215,   216,     0,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,     0,   228,   229,   230,   231,   232,
     233,     0,   234,   235,   236,   237,   238,   239,   240,   714,
     715,     0,   716,     0,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,     0,     0,   254,   255,   256,   257,
       0,   258,   259,   260,   717,   718,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   719,
     285,   720,   287,   288,   289,   290,   291,   721,   292,   293,
     294,   295,   722,   723,   297,   724,   299,   300,   301,     0,
     302,   303,     0,     0,   725,   305,   306,     0,     0,   307,
     308,   309,   310,   311,   726,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,     0,   323,   324,   727,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   728,   344,   345,
     346,   347,     0,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,     0,   361,   362,   363,
     364,   365,   366,   729,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,     0,   379,   380,   381,   382,
     383,   730,   384,   385,   386,   387,   388,   389,   390,   391,
     731,   393,     0,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   732,     0,   409,
     410,     0,   411,   412,   413,   414,   415,   416,   417,     0,
     733,   734,     0,     0,   420,   421,   735,   423,   736,   737,
     425,   426,   427,   428,  2738,   430,   431,     0,     0,   432,
     433,   434,   435,   436,   738,     0,   437,   438,   439,   440,
     441,   442,   739,     0,   444,   445,   446,   447,   448,   449,
     450,     0,     0,   451,     0,     0,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   740,     0,     0,
       0,     0,     0,     0,   741,   742,     0,     0,     0,     0,
       0,     0,     0,   744,     0,     0,     0,     0,   745,    91,
     684,   543,   685,   686,   687,   688,   689,     0,     0,     0,
       0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
      97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
       0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
     108,   109,   110,   111,   112,   690,   114,   691,   692,     0,
     117,   118,   119,   120,   121,   122,   693,   694,   123,   124,
     695,   696,   127,     0,   128,   129,   130,   131,   697,     0,
     698,     0,   134,   135,   136,   137,   138,   139,   140,   141,
     142,     0,   143,   144,   145,   146,   147,   148,     0,   149,
     150,   151,   152,   699,   700,   701,   702,   703,   704,   705,
     154,   155,   156,   157,   158,   159,   160,   706,   707,   163,
       0,   164,     0,   165,   166,   167,   168,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,     0,     0,   178,
     179,   709,   181,   182,   183,     0,   184,   185,   186,     0,
     187,   188,   189,     0,   190,   191,   192,   193,   710,   195,
     196,   197,   198,   711,   712,   200,     0,   201,   202,   713,
     204,     0,   205,     0,   206,   207,     0,   208,   209,   210,
     211,   212,   213,     0,   214,     0,     0,     0,   215,   216,
       0,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,     0,   228,   229,   230,   231,   232,   233,     0,
     234,   235,   236,   237,   238,   239,   240,   714,   715,     0,
     716,     0,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,     0,     0,   254,   255,   256,   257,     0,   258,
     259,   260,   717,   718,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   719,   285,   720,
     287,   288,   289,   290,   291,     0,   292,   293,   294,   295,
     722,   723,   297,   724,   299,   300,   301,     0,   302,   303,
       0,     0,   725,   305,   306,     0,     0,   307,   308,   309,
     310,   311,   726,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,     0,   323,   324,   727,   326,   327,   328,
     329,   330,   331,     0,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   728,   344,   345,   346,   347,
       0,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,     0,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,     0,   379,   380,   381,   382,   383,   730,
     384,   385,   386,   387,   388,   389,   390,   391,   731,   393,
       0,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   732,     0,   409,   410,     0,
     411,   412,   413,   414,   415,   416,   417,     0,   733,   734,
       0,     0,   420,   421,   735,   423,   736,   737,   425,   426,
     427,   428,   429,   430,   431,     0,     0,   432,   433,   434,
     435,   436,   738,     0,   437,   438,   439,   440,   441,   442,
     739,     0,   444,   445,   446,   447,   448,   449,   450,     0,
       0,   451,     0,     0,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,     0,     0,     0,     0,     0,
       0,     0,  1464,  1465,     0,     0,    91,   684,   543,   685,
     686,  1466,   688,   689,     0,     0,   745,     0,     0,     0,
       0,     0,    92,    93,    94,    95,    96,    97,    98,    99,
       0,   100,   101,   102,     0,     0,     0,     0,     0,     0,
       0,   103,   104,     0,   105,   106,   107,   108,   109,   110,
     111,   112,   690,   114,   691,   692,     0,   117,   118,   119,
     120,   121,   122,   693,   694,   123,   124,   695,   696,   127,
       0,   128,   129,   130,   131,   697,     0,   698,     0,   134,
     135,   136,   137,   138,   139,   140,   141,   142,     0,   143,
     144,   145,   146,   147,   148,     0,   149,   150,   151,   152,
     699,   700,   701,   702,   703,   704,   705,   154,   155,   156,
     157,   158,   159,   160,   706,   707,   163,     0,   164,     0,
     165,   166,   167,   168,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,     0,   178,   179,   709,   181,
     182,   183,     0,   184,   185,   186,     0,   187,   188,   189,
       0,   190,   191,   192,   193,   710,   195,   196,   197,   198,
     711,   712,   200,     0,   201,   202,   713,   204,     0,   205,
       0,   206,   207,     0,   208,   209,   210,   211,   212,   213,
       0,   214,     0,     0,     0,   215,   216,     0,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,     0,
     228,   229,   230,   231,   232,   233,     0,   234,   235,   236,
     237,   238,   239,   240,   714,   715,     0,   716,     0,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,     0,
       0,   254,   255,   256,   257,     0,   258,   259,   260,   717,
     718,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   719,   285,   720,   287,   288,   289,
     290,   291,     0,   292,   293,   294,   295,   722,   723,   297,
     724,   299,   300,   301,     0,   302,   303,     0,     0,   304,
     305,   306,     0,     0,   307,   308,   309,   310,   311,   726,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
       0,   323,   324,   727,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   728,   344,   345,   346,   347,     0,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,     0,   361,   362,   363,   364,   365,   366,  1584,  1585,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
       0,   379,   380,   381,   382,   383,   730,   384,   385,   386,
     387,   388,   389,   390,   391,   731,   393,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   732,     0,   409,   410,     0,   411,   412,   413,
     414,   415,   416,   417,     0,   733,   734,     0,     0,   420,
     421,   735,   423,   736,   737,   425,   426,   427,   428,   429,
     430,   431,     0,     0,   432,   433,   434,   435,   436,   738,
       0,   437,   438,   439,   440,   441,   442,   739,     0,   444,
     445,   446,   447,   448,   449,   450,     0,     0,   451,     0,
       0,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,     0,     0,     0,     0,     0,     0,     0,  1586,
    1587,     0,     0,     0,     0,     0,     0,     0,  1466,     0,
       0,     0,     0,   745,    91,   684,   543,   685,   686,   687,
     688,   689,     0,     0,     0,     0,     0,     0,     0,     0,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,   108,   109,   110,   111,   112,
     690,   114,   691,   692,     0,   117,   118,   119,   120,   121,
     122,   693,   694,   123,   124,   695,   696,   127,     0,   128,
     129,   130,   131,   697,     0,   698,     0,   134,   135,   136,
     137,   138,   139,   140,   141,   142,     0,   143,   144,   145,
     146,   147,   148,     0,   149,   150,   151,   152,   699,   700,
     701,   702,   703,   704,   705,   154,   155,   156,   157,   158,
     159,   160,   706,   707,   163,     0,   164,     0,   165,   166,
     167,   168,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,     0,   178,   179,   709,   181,   182,   183,
       0,   184,   185,   186,     0,   187,   188,   189,     0,   190,
     191,   192,   193,   710,   195,   196,   197,   198,   711,   712,
     200,     0,   201,   202,   713,   204,     0,   205,     0,   206,
     207,     0,   208,   209,   210,   211,   212,   213,     0,   214,
       0,     0,     0,   215,   216,     0,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,     0,   228,   229,
     230,   231,   232,   233,     0,   234,   235,   236,   237,   238,
     239,   240,   714,   715,     0,   716,     0,   244,     0,   246,
     247,   248,   249,   250,   251,   252,   253,     0,     0,   254,
     255,   256,   257,     0,   258,   259,   260,   717,   718,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   719,   285,   720,   287,   288,   289,   290,   291,
       0,   292,   293,   294,   295,   722,   723,   297,   724,   299,
     300,   301,     0,   302,   303,     0,     0,   725,   305,   306,
       0,     0,   307,   308,   309,   310,   311,   726,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,     0,   323,
     324,   727,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     728,   344,   345,   346,   347,     0,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,     0,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,     0,   379,
     380,   381,   382,   383,   730,   384,   385,   386,   387,   388,
     389,   390,   391,   731,   393,     0,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     732,     0,   409,   410,     0,   411,   412,   413,   414,   415,
     416,   417,     0,   733,   734,     0,     0,   420,   421,   735,
     423,   736,   737,   425,   426,   427,   428,   429,   430,   431,
       0,     0,   432,   433,   434,   435,   436,   738,     0,   437,
     438,   439,   440,   441,   442,   739,     0,   444,   445,   446,
     447,   448,   449,   450,     0,     0,   451,     0,     0,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
       0,     0,     0,     0,     0,     0,     0,  1464,  1465,     0,
       0,     0,     0,     0,     0,     0,  1466,     0,     0,     0,
       0,   745,    91,   684,   543,   685,   686,   687,   688,   689,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,   108,   109,   110,   111, -1610,   690,   114,
     691,   692,     0,   117,   118,   119,   120,   121,   122,   693,
     694,   123,   124,   695,   696,   127,     0,   128,   129,   130,
     131,   697,     0,   698,     0,   134,   135,   136,   137,   138,
     139,   140,   141,   142,     0,   143,   144,   145,   146,   147,
     148,     0,   149,   150,   151,  2737,   699,   700,   701,   702,
     703,   704,   705,   154,   155,   156,   157,   158,   159,   160,
     706,   707,   163,   708,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,     0,   178,   179,   709,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,     0,   190,   191,   192,
     193,   710,   195,   196,   197,   198,   711,   712,   200,     0,
     201,   202,   713,   204,     0,   205,     0,   206,   207,     0,
     208,   209,   210,   211, -1610,   213,     0,   214,     0,     0,
       0,   215,   216,     0,   217,   218,   219,   220,   221,   222,
   -1610,   224,   225,   226,   227,     0,   228,   229,   230,   231,
     232,   233,     0,   234,   235,   236,   237,   238,   239,   240,
     714,   715,     0,   716,     0,   244,     0,     0,   247,   248,
     249,   250,   251,   252,   253,     0,     0,   254,   255,   256,
   -1610,     0,   258,   259,   260,   717,   718,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     719,   285,   720,   287,   288,   289,   290,   291,     0,   292,
     293,     0,   295,   722,   723,   297,   724,   299,   300,   301,
       0,   302,   303,     0,     0,   725,   305,   306,     0,     0,
     307,   308,   309,   310,   311,   726,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,     0,   323,   324,   727,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   728,   344,
     345,   346,   347,     0,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,     0,   361,   362,
     363,   364,   365,   366,   729,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,     0,   379,   380,   381,
     382,   383,   730,   384,   385,   386,   387,   388, -1610,   390,
     391,   731,   393,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   732,     0,
     409,   410,     0,   411,   412,   413,   414,   415,   416,   417,
       0,   733,   734,     0,     0,   420,   421,   735,   423,   736,
     737,   425,   426,   427,   428,  2738,   430,   431,     0,     0,
     432,   433,   434,   435,   436,   738,     0,   437,   438,   439,
     440,   441,   442,   739,     0,   444,   445,   446,   447,   448,
     449,   450,     0,     0,   451,     0,     0,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472, -1610,     0,
       0,     0,     0,     0,     0,   741,   742,     0,     0,     0,
       0,     0,     0,     0,   744,     0,     0,     0,     0,   745,
      91,   684,   543,   685,   686,   687,   688,   689,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,   108,   109,   110,   111,     0,   690,   114,   691,   692,
       0,   117,   118,   119,   120,   121,   122,   693,   694,   123,
     124,   695,   696,   127,     0,   128,   129,   130,   131,   697,
       0,   698,     0,   134,   135,   136,   137,   138,   139,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
     149,   150,   151,   152,   699,   700,   701,   702,   703,   704,
     705,   154,   155,   156,   157,   158,   159,   160,   706,   707,
     163,   708,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,     0,
     178,   179,   709,   181,   182,   183,     0,   184,   185,   186,
       0,   187,     0,   189,     0,   190,   191,   192,   193,   710,
     195,   196,   197,   198,   711,   712,   200,     0,   201,   202,
     713,   204,     0,   205,     0,   206,   207,     0,   208,   209,
     210,   211,     0,   213,     0,   214,     0,     0,     0,   215,
     216,     0,   217,   218,   219,   220,   221,   222,     0,   224,
     225,   226,   227,     0,   228,   229,   230,   231,   232,   233,
       0,   234,   235,   236,   237,   238,   239,   240,   714,   715,
       0,   716,     0,   244,     0,     0,   247,   248,   249,   250,
     251,   252,   253,     0,     0,   254,   255,   256,     0,     0,
     258,   259,   260,   717,   718,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   719,   285,
     720,   287,   288,   289,   290,   291,     0,   292,   293,     0,
     295,   722,   723,   297,   724,   299,   300,   301,     0,   302,
     303,     0,     0,   725,   305,   306,     0,     0,   307,   308,
     309,   310,   311,   726,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,     0,   323,   324,   727,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   728,   344,   345,   346,
     347,     0,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,     0,   361,   362,   363,   364,
     365,   366,   729,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,     0,   379,   380,   381,   382,   383,
     730,   384,   385,   386,   387,   388,     0,   390,   391,   731,
     393,     0,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   732,     0,   409,   410,
       0,   411,   412,   413,   414,   415,   416,   417,     0,   733,
     734,     0,     0,   420,   421,   735,   423,   736,   737,   425,
     426,   427,   428,   429,   430,   431,     0,     0,   432,   433,
     434,   435,   436,   738,     0,   437,   438,   439,   440,   441,
     442,   739,     0,   444,   445,   446,   447,   448,   449,   450,
       0,     0,   451,     0,     0,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,     0,     0,     0,     0,
       0,     0,   498,   741,   742,     0,     0,     0,     0,     0,
       0,     0,   744,     0,     0,     0,     0,   745,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,     0,  2130,     0,   103,   104,     0,
     105,   106,   107,     0,   109,   110,   111,   112,   113,     0,
     115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
       0,   123,   124,   125,   126,   127,     0,   128,   129,   130,
     131,   132,     0,     0,     0,   134,   135,   136,   137,   138,
       0,   140,   141,   142,     0,   143,   144,   145,   146,   147,
     148,     0,  -388,   150,   151,   152,     0,     0,     0,     0,
       0,     0,     0,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,     0,   178,   179,   180,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,     0,   200,     0,
     201,   202,   203,   204,     0,   205,     0,   206,     0,     0,
    -388,   209,   210,   211,     0,   213,     0,   214,     0,     0,
       0,   215,   216,     0,   217,   218,   219,   220,   221,   222,
       0,   224,   225,   226,   227,     0,   228,   229,   230,   231,
     232,   233,     0,   234,  -388,   236,   237,   238,   239,   240,
     241,   242,     0,   243,     0,   244,     0,     0,   247,  -388,
     249,   250,   251,   252,   253,     0,     0,   254,  -388,   256,
       0,     0,   258,   259,   260,     0,     0,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,  -388,   286,   287,   288,   289,   290,   291,     0,   292,
     293,     0,   295,     0,   296,   297,   298,   299,   300,   301,
       0,   302,   303,     0,     0,   304,   305,   306,     0,     0,
     307,   308,     0,   310,     0,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,     0,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,     0,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,     0,   361,   362,
    -388,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,     0,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,     0,   390,
     391,   392,   393,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,   411,  -388,   413,   414,   415,   416,   417,
       0,   418,   419,     0,     0,   420,   421,   422,   423,   424,
       0,   425,   426,   427,   428,   429,   430,   431,     0,     0,
     432,   433,   434,   435,   436,     0,     0,   437,   438,   439,
     440,   441,   442,   443,     0,   444,     0,   446,   447,   448,
     449,   450,     0,     0,   451,     0,     0,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,     0,     0,
      91,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   804,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,   694,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   697,
       0,   698,     0,   134,   135,   136,   137,   138,   139,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
     149,   150,   151,   152,   699,   700,   701,   702,   703,   704,
     705,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,     0,
     178,   179,   180,   181,   182,   183,     0,   184,   185,   186,
       0,   187,   188,   189,     0,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   711,     0,   200,     0,   201,   202,
     203,   204,     0,   205,     0,   206,   207,     0,   208,   209,
     210,   211,   212,   213,     0,   214,     0,  1866,     0,   215,
     216,     0,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,     0,   228,   229,   230,   231,   232,   233,
       0,   234,   235,   236,   237,   238,   239,   240,   241,   242,
       0,   243,     0,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,  1867,     0,   254,   255,   256,   257,     0,
     258,   259,   260,   717,   718,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,     0,   292,   293,   294,
     295,     0,   723,   297,   298,   299,   300,   301,     0,   302,
     303,     0,   568,   304,   305,   306,     0,     0,   307,   308,
     309,   310,   311,   726,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,     0,   323,   324,   727,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,     0,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,     0,   361,   362,   363,   364,
     365,   366,   367,  1868,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,    25,   379,   380,   381,   382,   383,
     730,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   732,     0,   409,   410,
      29,   411,   412,   413,   414,   415,   416,   417,     0,   418,
     419,     0,     0,   420,   421,   735,   423,   736,     0,   425,
     426,   427,   428,   429,   430,   431,     0,     0,   432,   433,
     434,   435,   436,   738,     0,   437,   438,   439,   440,   441,
     593,   443,     0,   444,   445,   446,   447,   448,   449,   450,
       0,     0,   451,     0,    32,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,     0,    91,    33,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1869,    92,    93,    94,    95,    96,    97,    98,
      99,     0,   100,   101,   102,     0,     0,     0,     0,     0,
       0,     0,   103,   104,     0,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,     0,   117,   118,
     119,   120,   121,   122,     0,   694,   123,   124,   125,   126,
     127,     0,   128,   129,   130,   131,   697,     0,   698,     0,
     134,   135,   136,   137,   138,   139,   140,   141,   142,     0,
     143,   144,   145,   146,   147,   148,     0,   149,   150,   151,
     152,   699,   700,   701,   702,   703,   704,   705,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,     0,   164,
       0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,     0,     0,   178,   179,   180,
     181,   182,   183,     0,   184,   185,   186,     0,   187,   188,
     189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   711,     0,   200,     0,   201,   202,   203,   204,     0,
     205,     0,   206,   207,     0,   208,   209,   210,   211,   212,
     213,     0,   214,     0,  1866,     0,   215,   216,     0,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
       0,   228,   229,   230,   231,   232,   233,     0,   234,   235,
     236,   237,   238,   239,   240,   241,   242,     0,   243,     0,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
    1867,     0,   254,   255,   256,   257,     0,   258,   259,   260,
     717,   718,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,     0,   292,   293,   294,   295,     0,   723,
     297,   298,   299,   300,   301,     0,   302,   303,     0,   568,
     304,   305,   306,     0,     0,   307,   308,   309,   310,   311,
     726,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,     0,   323,   324,   727,   326,   327,   328,   329,   330,
     331,     0,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,     0,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,     0,   361,   362,   363,   364,   365,   366,   367,
    1868,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,     0,   379,   380,   381,   382,   383,   730,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,     0,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   732,     0,   409,   410,     0,   411,   412,
     413,   414,   415,   416,   417,     0,   418,   419,     0,     0,
     420,   421,   735,   423,   736,     0,   425,   426,   427,   428,
     429,   430,   431,     0,     0,   432,   433,   434,   435,   436,
     738,     0,   437,   438,   439,   440,   441,   442,   443,     0,
     444,   445,   446,   447,   448,   449,   450,     0,     0,   451,
       0,     0,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,     0,    91,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1869,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,     0,   117,   118,   119,   120,   121,
     122,     0,   694,   123,   124,   125,   126,   127,     0,   128,
     129,   130,   131,   697,     0,   698,     0,   134,   135,   136,
     137,   138,   139,   140,   141,   142,     0,   143,   144,   145,
     146,   147,   148,     0,   149,   150,   151,   152,   699,   700,
     701,   702,   703,   704,   705,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,     0,   164,     0,   165,   166,
     167,   168,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,     0,   178,   179,   180,   181,   182,   183,
       0,   184,   185,   186,     0,   187,   188,   189,     0,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   711,     0,
     200,     0,   201,   202,   203,   204,     0,   205,     0,   206,
     207,     0,   208,   209,   210,   211,   212,   213,     0,   214,
       0,     0,     0,   215,   216,     0,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,     0,   228,   229,
     230,   231,   232,   233,     0,   234,   235,   236,   237,   238,
     239,   240,   241,   242,     0,   243,     0,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,     0,     0,   254,
     255,   256,   257,     0,   258,   259,   260,   717,   718,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
       0,   292,   293,   294,   295,     0,   723,   297,   298,   299,
     300,   301,     0,   302,   303,     0,     0,   304,   305,   306,
       0,     0,   307,   308,   309,   310,   311,   726,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,     0,   323,
     324,   727,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,     0,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,     0,
     361,   362,   363,   364,   365,   366,   367,  1868,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,     0,   379,
     380,   381,   382,   383,   730,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,     0,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     732,     0,   409,   410,     0,   411,   412,   413,   414,   415,
     416,   417,     0,   418,   419,     0,     0,   420,   421,   735,
     423,   736,     0,   425,   426,   427,   428,   429,   430,   431,
       0,     0,   432,   433,   434,   435,   436,   738,     0,   437,
     438,   439,   440,   441,   442,   443,     0,   444,   445,   446,
     447,   448,   449,   450,     0,     0,   451,     0,     0,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
       0,    91,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   582,    92,    93,    94,
      95,    96,    97,    98,    99,     0,   100,   101,   102,     0,
       0,     0,     0,     0,     0,     0,   103,   104,     0,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,     0,   117,   118,   119,   120,   121,   122,     0,   694,
     123,   124,   125,   126,   127,     0,   128,   129,   130,   131,
     697,     0,   698,     0,   134,   135,   136,   137,   138,   139,
     140,   141,   142,     0,   143,   144,   145,   146,   147,   148,
       0,   149,   150,   151,   152,   699,   700,   701,   702,   703,
     704,   705,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,     0,   164,     0,   165,   166,   167,   168,   169,
     170,     0,   171,   172,   173,   174,   175,   176,   177,     0,
       0,   178,   179,   180,   181,   182,   183,     0,   184,   185,
     186,     0,   187,   188,   189,     0,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   711,     0,   200,     0,   201,
     202,   203,   204,     0,   205,     0,   206,   207,     0,   208,
     209,   210,   211,   212,   213,     0,   214,     0,     0,     0,
     215,   216,     0,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,     0,   228,   229,   230,   231,   232,
     233,     0,   234,   235,   236,   237,   238,   239,   240,   241,
     242,     0,   243,     0,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,     0,     0,   254,   255,   256,   257,
       0,   258,   259,   260,   717,   718,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,     0,   292,   293,
     294,   295,     0,   723,   297,   298,   299,   300,   301,     0,
     302,   303,     0,     0,   304,   305,   306,     0,     0,   307,
     308,   309,   310,   311,   726,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,     0,   323,   324,   727,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,     0,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,     0,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,     0,   379,   380,   381,   382,
     383,   730,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,     0,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   732,     0,   409,
     410,     0,   411,   412,   413,   414,   415,   416,   417,     0,
     418,   419,     0,     0,   420,   421,   735,   423,   736,     0,
     425,   426,   427,   428,   429,   430,   431,     0,     0,   432,
     433,   434,   435,   436,   738,     0,   437,   438,   439,   440,
     441,   442,   443,     0,   444,   445,   446,   447,   448,   449,
     450,     0,     0,   451,     0,     0,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,     0,   664,  1011,
     543,     0,     0,     0,   688,     0,     0,     0,     0,     0,
       0,     0,     0,  2516,    92,    93,    94,    95,    96,    97,
      98,    99,     0,   100,   101,   102,     0,     0,     0,     0,
       0,     0,     0,   103,   104,     0,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,     0,   117,
     118,   119,   120,   121,   122,     0,     0,   123,   124,   125,
     126,   127,     0,   128,   129,   130,   131,   132,     0,   133,
       0,   134,   135,   136,   137,   138,   139,   140,   141,   142,
       0,   143,   144,   145,   146,   147,   148,     0,   149,   150,
     151,   152,     0,     0,     0,   153,     0,     0,     0,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,     0,
     164,     0,   165,   166,   167,   168,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,     0,     0,   178,   179,
     180,   181,   182,   183,     0,   184,   185,   186,     0,   187,
     188,   189,     0,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,  1012,   200,     0,   201,   202,   203,   204,
       0,   205,     0,   206,   207,     0,   208,   209,   210,   211,
     212,   213,     0,   214,     0,     0,     0,   215,   216,     0,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,     0,   228,   229,   230,   231,   232,   233,     0,   234,
     235,   236,   237,   238,   239,   240,   241,   242,     0,   243,
       0,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,     0,     0,   254,   255,   256,   257,     0,   258,   259,
     260,     0,     0,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,     0,   292,   293,   294,   295,     0,
     296,   297,   298,   299,   300,   301,     0,   302,   303,  1013,
       0,   304,   305,   306,     0,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,     0,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,     0,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,     0,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,   411,
     412,   413,   414,   415,   416,   417,     0,   418,   419,     0,
       0,   420,   421,   422,   423,   424,  1014,   425,   426,   427,
     428,   429,   430,   431,     0,     0,   432,   433,   434,   435,
     436,     0,     0,   437,   438,   439,   440,   441,   442,   443,
       0,   444,   445,   446,   447,   448,   449,   450,     0,     0,
     451,     0,     0,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,     0,   664,     0,     0,     0,     0,
       0,  1015,  1016,  1733,     0,     0,     0,     0,     0,     0,
    1734,    92,    93,    94,    95,    96,    97,    98,    99,     0,
     100,   101,   102,     3,     4,     0,     0,     0,     0,     0,
     103,   104,     0,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,     0,   117,   118,   119,   120,
     121,   122,     0,     0,   123,   124,   125,   126,   127,     0,
     128,   129,   130,   131,   132,     0,   133,     0,   134,   135,
     136,   137,   138,   139,   140,   141,   142,     0,   143,   144,
     145,   146,   147,   148,     0,   149,   150,   151,   152,     0,
       0,     0,   153,     0,     0,     0,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,     0,   164,     0,   165,
     166,   167,   168,   169,   170,     0,   171,   172,   173,   174,
     175,   176,   177,     0,     0,   178,   179,   180,   181,   182,
     183,     0,   184,   185,   186,     0,   187,   188,   189,     0,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
       0,   200,     0,   201,   202,   203,   204,     0,   205,     0,
     206,   207,     0,   208,   209,   210,   211,   212,   213,     0,
     214,     0,     0,     0,   215,   216,     0,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,     0,   228,
     229,   230,   231,   232,   233,     0,   234,   235,   236,   237,
     238,   239,   240,   241,   242,     0,   243,     0,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,     0,     0,
     254,   255,   256,   257,     0,   258,   259,   260,     0,     0,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,     0,   292,   293,   294,   295,     0,   296,   297,   298,
     299,   300,   301,     0,   302,   303,     0,     0,   304,   305,
     306,     0,     0,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,     0,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,     0,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
       0,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,    25,
     379,   380,   381,   382,   383,     0,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,    29,   411,   412,   413,   414,
     415,   416,   417,     0,   418,   419,     0,     0,   420,   421,
     422,   423,   424,     0,   425,   426,   427,   428,   429,   430,
     431,     0,     0,   432,   433,   434,   435,   436,     0,     0,
     437,   438,   439,   440,   441,   593,   443,     0,   444,   445,
     446,   447,   448,   449,   450,     0,     0,   451,     0,    32,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,     0,   498,    33,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   582,    92,    93,
      94,    95,    96,    97,    98,    99,   590,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,     0,   109,   110,   111,   112,   113,     0,
     115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
       0,   123,   124,   125,   126,   127,     0,   128,   129,   130,
     131,   132,     0,     0,     0,   134,   135,   136,   137,   138,
       0,   140,   141,   142,     0,   143,   144,   145,   146,   147,
     148,     0,     0,   150,   151,   152,     0,     0,     0,     0,
       0,     0,     0,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,     0,   178,   179,   180,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,     0,   200,     0,
     201,   202,   203,   204,     0,   205,     0,   206,     0,     0,
       0,   209,   210,   211,     0,   213,     0,   214,     0,     0,
       0,   215,   216,     0,   217,   218,   219,   220,   221,   222,
       0,   224,   225,   226,   227,     0,   228,   229,   230,   231,
     232,   233,     0,   234,     0,   236,   237,   238,   239,   240,
     241,   242,     0,   243,     0,   244,     0,     0,   247,     0,
     249,   250,   251,   252,   253,     0,     0,   254,     0,   256,
       0,     0,   258,   259,   260,     0,     0,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,     0,   286,   287,   288,   289,   290,   291,     0,   292,
     293,     0,   295,     0,   296,   297,   298,   299,   300,   301,
       0,   302,   303,     0,     0,   304,   305,   306,     0,     0,
     307,   308,     0,   310,     0,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,     0,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,     0,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,     0,   361,   362,
       0,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,    25,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,     0,   390,
     391,   392,   393,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,    29,   411,     0,   413,   414,   415,   416,   417,
       0,   591,   419,     0,     0,   592,   421,   422,   423,   424,
       0,   425,   426,   427,   428,   429,   430,   431,     0,     0,
     432,   433,   434,   435,   436,     0,     0,   437,   438,   439,
     440,   441,   593,   443,     0,   444,     0,   446,   447,   448,
     449,   450,     0,     0,   451,     0,    32,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,     0,   498,
      33,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   582,    92,    93,    94,    95,    96,
      97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
       0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
       0,   109,   110,   111,   112,   113,     0,   115,   116,     0,
     117,   118,   119,   120,   121,   122,     0,     0,   123,   124,
     125,   126,   127,     0,   128,   129,   130,   131,   132,     0,
       0,     0,   134,   135,   136,   137,   138,     0,   140,   141,
     142,     0,   143,   144,   145,   146,   147,   148,     0,     0,
     150,   151,   152,     0,     0,     0,     0,     0,     0,     0,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
       0,   164,     0,   165,   166,   167,   168,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,     0,     0,   178,
     179,   180,   181,   182,   183,     0,   184,   185,   186,     0,
     187,   188,   189,     0,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,     0,   200,     0,   201,   202,   203,
     204,     0,   205,     0,   206,     0,     0,     0,   209,   210,
     211,     0,   213,     0,   214,     0,     0,     0,   215,   216,
       0,   217,   218,   219,   220,   221,   222,     0,   224,   225,
     226,   227,     0,   228,   229,   230,   231,   232,   233,     0,
     234,     0,   236,   237,   238,   239,   240,   241,   242,     0,
     243,     0,   244,     0,     0,   247,     0,   249,   250,   251,
     252,   253,     0,     0,   254,     0,   256,     0,     0,   258,
     259,   260,     0,     0,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,     0,   286,
     287,   288,   289,   290,   291,     0,   292,   293,     0,   295,
       0,   296,   297,   298,   299,   300,   301,     0,   302,   303,
       0,     0,   304,   305,   306,     0,     0,   307,   308,     0,
     310,     0,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
       0,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,     0,   361,   362,     0,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    25,   379,   380,   381,   382,   383,     0,
     384,   385,   386,   387,   388,     0,   390,   391,   392,   393,
       0,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,    29,
     411,     0,   413,   414,   415,   416,   417,     0,   418,   419,
       0,     0,   420,   421,   422,   423,   424,     0,   425,   426,
     427,   428,   429,   430,   431,     0,     0,   432,   433,   434,
     435,   436,     0,     0,   437,   438,   439,   440,   441,   593,
     443,     0,   444,     0,   446,   447,   448,   449,   450,     0,
       0,   451,     0,    32,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,     0,   498,    33,  2320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   582,    92,    93,    94,    95,    96,    97,    98,    99,
       0,   100,   101,   102,     0,     0,     0,     0,     0,     0,
       0,   103,   104,     0,   105,   106,   107,     0,   109,   110,
     111,   112,   113,     0,   115,   116,     0,   117,   118,   119,
     120,   121,   122,     0,     0,   123,   124,   125,   126,   127,
       0,   128,   129,   130,   131,   132,     0,     0,     0,   134,
     135,   136,   137,   138,     0,   140,   141,   142,     0,   143,
     144,   145,   146,   147,   148,     0,     0,   150,   151,   152,
       0,     0,     0,     0,     0,     0,     0,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,     0,   164,     0,
     165,   166,   167,   168,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,     0,   178,   179,   180,   181,
     182,   183,     0,   184,   185,   186,     0,   187,   188,   189,
       0,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,     0,   200,     0,   201,   202,   203,   204,     0,   205,
       0,   206,     0,     0,     0,   209,   210,   211,     0,   213,
       0,   214,     0,     0,     0,   215,   216,     0,   217,   218,
     219,   220,   221,   222,     0,   224,   225,   226,   227,     0,
     228,   229,   230,   231,   232,   233,     0,   234,     0,   236,
     237,   238,   239,   240,   241,   242,     0,   243,     0,   244,
       0,     0,   247,     0,   249,   250,   251,   252,   253,     0,
       0,   254,     0,   256,     0,     0,   258,   259,   260,     0,
       0,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,     0,   286,   287,   288,   289,
     290,   291,     0,   292,   293,     0,   295,     0,   296,   297,
     298,   299,   300,   301,     0,   302,   303,     0,     0,   304,
     305,   306,     0,     0,   307,   308,     0,   310,     0,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
       0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,     0,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,     0,   361,   362,     0,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
       0,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,     0,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,   411,     0,   413,
     414,   415,   416,   417,     0,   418,   419,     0,     0,   420,
     421,   422,   423,   424,     0,   425,   426,   427,   428,   429,
     430,   431,     0,     0,   432,   433,   434,   435,   436,     0,
       0,   437,   438,   439,   440,   441,   442,   443,     0,   444,
       0,   446,   447,   448,   449,   450,     0,     0,   451,     0,
       0,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,     0,   498,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2338,    92,
      93,    94,    95,    96,    97,    98,    99,     0,   100,   101,
     102,     0,     0,     0,     0,     0,     0,     0,   103,   104,
       0,   105,   106,   107,     0,   109,   110,   111,   112,   113,
       0,   115,   116,     0,   117,   118,   119,   120,   121,   122,
       0,     0,   123,   124,   125,   126,   127,     0,   128,   129,
     130,   131,   132,     0,     0,     0,   134,   135,   136,   137,
     138,     0,   140,   141,   142,     0,   143,   144,   145,   146,
     147,   148,     0,     0,   150,   151,   152,     0,     0,     0,
       0,     0,     0,     0,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,     0,   164,     0,   165,   166,   167,
     168,   169,   170,     0,   171,   172,   173,   174,   175,   176,
     177,     0,     0,   178,   179,   180,   181,   182,   183,     0,
     184,   185,   186,     0,   187,   188,   189,     0,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,     0,   200,
       0,   201,   202,   203,   204,     0,   205,     0,   206,     0,
       0,     0,   209,   210,   211,     0,   213,     0,   214,     0,
       0,     0,   215,   216,     0,   217,   218,   219,   220,   221,
     222,     0,   224,   225,   226,   227,     0,   228,   229,   230,
     231,   232,   233,     0,   234,     0,   236,   237,   238,   239,
     240,   241,   242,     0,   243,     0,   244,     0,     0,   247,
       0,   249,   250,   251,   252,   253,     0,     0,   254,     0,
     256,     0,     0,   258,   259,   260,     0,     0,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,     0,   286,   287,   288,   289,   290,   291,     0,
     292,   293,     0,   295,     0,   296,   297,   298,   299,   300,
     301,     0,   302,   303,     0,     0,   304,   305,   306,     0,
       0,   307,   308,     0,   310,     0,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,     0,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,     0,   361,
     362,     0,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,     0,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,     0,
     390,   391,   392,   393,     0,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,     0,   411,     0,   413,   414,   415,   416,
     417,     0,   418,   419,     0,     0,   420,   421,   422,   423,
     424,     0,   425,   426,   427,   428,   429,   430,   431,     0,
       0,   432,   433,   434,   435,   436,     0,     0,   437,   438,
     439,   440,   441,   442,   443,     0,   444,     0,   446,   447,
     448,   449,   450,     0,     0,   451,     0,     0,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     0,
     498,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   784,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,     0,
     178,   179,   180,   181,   182,   183,     0,   184,   185,   186,
       0,   187,   188,   189,     0,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
     203,   204,     0,   205,     0,   206,     0,     0,     0,   209,
     210,   211,     0,   213,     0,   214,     0,     0,     0,   215,
     216,     0,   217,   218,   219,   220,   221,   222,     0,   224,
     225,   226,   227,     0,   228,   229,   230,   231,   232,   233,
       0,   234,     0,   236,   237,   238,   239,   240,   241,   242,
       0,   243,     0,   244,     0,     0,   247,     0,   249,   250,
     251,   252,   253,     0,     0,   254,     0,   256,     0,     0,
     258,   259,   260,     0,     0,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     286,   287,   288,   289,   290,   291,     0,   292,   293,     0,
     295,     0,   296,   297,   298,   299,   300,   301,     0,   302,
     303,     0,     0,   304,   305,   306,     0,     0,   307,   308,
       0,   310,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,     0,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,     0,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,     0,   361,   362,     0,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,     0,   379,   380,   381,   382,   383,
       0,   384,   385,   386,   387,   388,     0,   390,   391,   392,
     393,     0,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,   411,     0,   413,   414,   415,   416,   417,     0,   418,
     419,     0,     0,   420,   421,   422,   423,   424,     0,   425,
     426,   427,   428,   429,   430,   431,     0,     0,   432,   433,
     434,   435,   436,     0,     0,   437,   438,   439,   440,   441,
     442,   443,     0,   444,     0,   446,   447,   448,   449,   450,
       0,     0,   451,     0,     0,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,     0,   498,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1618,    92,    93,    94,    95,    96,    97,    98,
      99,     0,   100,   101,   102,     0,     0,     0,     0,     0,
       0,     0,   103,   104,     0,   105,   106,   107,     0,   109,
     110,   111,   112,   113,     0,   115,   116,     0,   117,   118,
     119,   120,   121,   122,     0,     0,   123,   124,   125,   126,
     127,     0,   128,   129,   130,   131,   132,     0,     0,     0,
     134,   135,   136,   137,   138,     0,   140,   141,   142,     0,
     143,   144,   145,   146,   147,   148,     0,     0,   150,   151,
     152,     0,     0,     0,     0,     0,     0,     0,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,     0,   164,
       0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,     0,     0,   178,   179,   180,
     181,   182,   183,     0,   184,   185,   186,     0,   187,   188,
     189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,     0,   200,     0,   201,   202,   203,   204,     0,
     205,     0,   206,     0,     0,     0,   209,   210,   211,     0,
     213,     0,   214,     0,     0,     0,   215,   216,     0,   217,
     218,   219,   220,   221,   222,     0,   224,   225,   226,   227,
       0,   228,   229,   230,   231,   232,   233,     0,   234,     0,
     236,   237,   238,   239,   240,   241,   242,     0,   243,     0,
     244,     0,     0,   247,     0,   249,   250,   251,   252,   253,
       0,     0,   254,     0,   256,     0,     0,   258,   259,   260,
       0,     0,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,     0,   286,   287,   288,
     289,   290,   291,     0,   292,   293,     0,   295,     0,   296,
     297,   298,   299,   300,   301,     0,   302,   303,     0,     0,
     304,   305,   306,     0,     0,   307,   308,     0,   310,     0,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,     0,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,     0,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,     0,   361,   362,     0,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,     0,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,     0,   390,   391,   392,   393,     0,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,     0,   411,     0,
     413,   414,   415,   416,   417,     0,   418,   419,     0,     0,
     420,   421,   422,   423,   424,     0,   425,   426,   427,   428,
     429,   430,   431,     0,     0,   432,   433,   434,   435,   436,
       0,     0,   437,   438,   439,   440,   441,   442,   443,     0,
     444,     0,   446,   447,   448,   449,   450,     0,     0,   451,
       0,     0,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,     0,     0,     0,     0,  1034,  1011,   543,
       0,     0,  1446,   688,     0,     0,     0,     0,     0,  2112,
    1447,  1448,  1449,    92,    93,    94,    95,    96,    97,    98,
      99,   885,   100,   101,   102,   886,   887,   888,   889,   890,
     891,   892,   103,   104,   893,   105,   106,   107,   108,   109,
     110,   111,     0,  1035,   114,  1036,  1037,   894,   117,   118,
     119,   120,   121,   122,   895,   896,   123,   124,  1038,  1039,
     127,   897,   128,   129,   130,   131,     0,   898,   133,   899,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   900,
     143,   144,   145,   146,   147,   148,   901,   149,   150,   151,
     152,   902,   903,   904,   153,   905,   906,   907,   154,   155,
     156,   157,   158,   159,   160,  1040,  1041,   163,   908,   164,
     909,   165,   166,   167,   168,   169,   170,   910,   171,   172,
     173,   174,   175,   176,   177,   911,   912,   178,   179,   709,
     181,   182,   183,   913,   184,   185,   186,   914,   187,   188,
     189,   915,   190,   191,   192,   193,     0,   195,   196,   197,
     198,     0,   916,   200,   917,   201,   202,  1042,   204,   918,
     205,   919,   206,   207,   920,   208,   209,   210,   211,   212,
     213,   921,   214,   922,   923,   924,     0,   216,   925,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     926,   228,   229,   230,   231,   232,   233,   927,   234,   235,
       0,   237,   238,   239,   240,  1043,  1044,   928,  1045,   929,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     930,   931,   254,   255,   256,   257,   932,   258,   259,   260,
     933,   934,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,  1046,   285,  1047,   287,   288,
     289,   290,  2229,   935,   292,   293,   294,   295,   936,     0,
     297,  1048,   299,   300,   301,   937,   302,   303,   938,   939,
    2230,   305,   306,   940,   941,   307,     0,   309,   310,   311,
       0,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   942,   323,   324,     0,   326,   327,     0,   329,   330,
     331,   943,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,  1049,   344,   345,   346,   347,   944,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   945,   361,   362,   363,   364,   365,   366,  1050,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   946,   379,   380,   381,   382,   383,   947,   384,  2231,
     386,   387,   388,   389,   390,   391,  1052,   393,   948,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,  1053,   407,     0,   949,   409,   410,   950,   411,   412,
     413,   414,   415,   416,   417,   951,  1054,  1055,   952,   953,
     420,   421,     0,   423,     0,   954,   425,   426,   427,   428,
     429,   430,   431,   955,   956,   432,   433,   434,   435,   436,
     957,   958,   437,   438,   439,   440,   441,     0,  1056,   959,
     444,   445,   446,   447,   448,   449,   450,   960,   961,   451,
     962,   963,   452,   453,   454,   455,   456,   457,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   469,
     470,   471,   472,     0,   498,     0,  1450,  1451,  1452,  1446,
    2232,  2233,  1455,  1456,  1457,  1458,     0,  1447,  1448,  1449,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,     0,   109,   110,   111,   112,
     113,     0,   115,   116,     0,   117,   118,   119,   120,   121,
     122,     0,     0,   123,   124,   125,   126,   127,     0,   128,
     129,   130,   131,   132,     0,     0,     0,   134,   135,   136,
     137,   138,     0,   140,   141,   142,     0,   143,   144,   145,
     146,   147,   148,     0,     0,   150,   151,   152,     0,     0,
       0,     0,     0,     0,     0,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,     0,   164,     0,   165,   166,
     167,   168,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,     0,   178,   179,   180,   181,   182,   183,
       0,   184,   185,   186,     0,   187,   188,   189,     0,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,     0,
     200,     0,   201,   202,   203,   204,     0,   205,     0,   206,
       0,     0,     0,   209,   210,   211,     0,   213,     0,   214,
       0,     0,     0,   215,   216,     0,   217,   218,   219,   220,
     221,   222,     0,   224,   225,   226,   227,     0,   228,   229,
     230,   231,   232,   233,     0,   234,     0,   236,   237,   238,
     239,   240,   241,   242,     0,   243,     0,   244,     0,     0,
     247,     0,   249,   250,   251,   252,   253,     0,     0,   254,
       0,   256,     0,     0,   258,   259,   260,     0,     0,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,     0,   286,   287,   288,   289,   290,   291,
       0,   292,   293,     0,   295,     0,   296,   297,   298,   299,
     300,   301,     0,   302,   303,     0,     0,   304,   305,   306,
       0,     0,   307,   308,     0,   310,     0,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,     0,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,     0,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,     0,
     361,   362,     0,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,     0,   379,
     380,   381,   382,   383,     0,   384,   385,   386,   387,   388,
       0,   390,   391,   392,   393,     0,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,   411,     0,   413,   414,   415,
     416,   417,     0,   418,   419,     0,     0,   420,   421,   422,
     423,   424,     0,   425,   426,   427,   428,   429,   430,   431,
       0,     0,   432,   433,   434,   435,   436,     0,     0,   437,
     438,   439,   440,   441,   442,   443,     0,   444,     0,   446,
     447,   448,   449,   450,     0,     0,   451,     0,     0,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
       0,     0,     0,  1450,  1451,  1452,     0,  1453,  1454,  1455,
    1456,  1457,  1458,  1132,     0,     0,  1133,     0,     0,     0,
       0,  1134,  1135,  1136,     0,     0,     0,     0,     0,     0,
       0,  1132,     0,     0,  1133,     0,     0,     0,  1137,  1134,
    1135,  1136,     0,     0,     0,     0,  1139,     0,     0,  1132,
       0,     0,  1133,  1140,     0,     0,  1137,  1134,  1135,  1136,
       0,     0,     0,     0,  1139,     0,     0,     0,     0,     0,
       0,  1140,     0,     0,  1137,     0,     0,  1132,  1141,     0,
    1133,     0,  1139,     0,     0,  1134,  1135,  1136,     0,  1140,
       0,     0,     0,     0,     0,  1132,  1141,     0,  1133,     0,
       0,     0,  1137,  1134,  1135,  1136,     0,     0,     0,     0,
    1139,     0,     0,     0,  1141,     0,     0,  1140,     0,     0,
    1137,     0,     0,     0,     0,     0,     0,     0,  1139,     0,
       0,     0,     0,     0,     0,  1140,     0,     0,     0,     0,
       0,     0,  1141,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1141,     0,  1132,     0,     0,  1133,     0,     0,     0,     0,
    1134,  1135,  1136,     0,     0,     0,     0,     0,     0,     0,
    1142,     0,     0,     0,     0,     0,     0,  1137,     0,     0,
       0,     0,     0,     0,     0,  1139,  1143,     0,  1142,     0,
       0,  1144,  1140,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1143,     0,  1142,     0,     0,  1144,
       0,     0,  1145,  1146,     0,     0,     0,  1141,     0,     0,
       0,     0,  1143,     0,     0,     0,  1147,  1144,     0,     0,
    1145,  1146,     0,     0,  1142,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1147,     0,     0,     0,  1145,  1146,
    1143,     0,  1142,     0,     0,  1144,     0,     0,     0,     0,
       0,     0,  1147,     0,  1148,     0,     0,  1149,  1143,     0,
       0,     0,     0,  1144,     0,     0,  1145,  1146,     0,     0,
       0,  1150,  1148,     0,  1151,  1149,     0,     0,     0,     0,
    1147,     0,     0,     0,  1145,  1146,     0,     0,     0,  1150,
    1148,     0,  1151,  1149,     0,     0,     0,     0,  1147,     0,
       0,     0,     0,     0,     0,     0,     0,  1150,     0,  1142,
    1151,     0,     0,     0,     0,     0,     0,     0,  1148,     0,
       0,  1149,     0,     0,     0,  1143,     0,     0,     0,     0,
    1144,     0,     0,     0,     0,  1150,  1148,     0,  1151,  1149,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1145,  1146,  1150,     0,     0,  1151,     0,     0,     0,
       0,     0,     0,     0,  1152,  1147,     0,   835,     0,     0,
       0,     0,     0,   836,     0,     0,  1132,     0,     0,  1133,
     848,     0,  1152,     0,  1134,  1135,  1136,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   849,
    1152,  1137,     0,  1148,     0,  1132,  1149,     0,  1133,  1139,
       0,     0,     0,  1134,  1135,  1136,  1140,     0,     0,     0,
    1150,     0,     0,  1151,     0,     0,     0,     0,  1152,     0,
    1137,     0,     0,     0,     0,     0,     0,     0,  1139,     0,
       0,  1141,     0,     0,     0,  1140,  1152,     0,     0,   850,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1153,     0,     0,  1154,  1155,  1156,
    1141,  1157,  1158,  1159,  1160,  1161,  1162,     0,     0,     0,
     837,  2090,  1153,     0,     0,  1154,  1155,  1156,     0,  1157,
    1158,  1159,  1160,  1161,  1162,     0,     0,     0,     0,  2193,
    1153,     0,     0,  1154,  1155,  1156,     0,  1157,  1158,  1159,
    1160,  1161,  1162,  1152,     0,     0,     0,  2289,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1153,     0,
       0,  1154,  1155,  1156,     0,  1157,  1158,  1159,  1160,  1161,
    1162,     0,   851,  1142,     0,  2307,  1153,     0,     0,  1154,
    1155,  1156,     0,  1157,  1158,  1159,  1160,  1161,  1162,  1143,
       0,     0,     0,  2468,  1144,     0,     0,     0,     0,     0,
       0,     0,  1142,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1145,  1146,     0,  1143,     0,
     852,     0,     0,  1144,     0,     0,     0,     0,   853,  1147,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     854,     0,     0,  1153,  1145,  1146,  1154,  1155,  1156,     0,
    1157,  1158,  1159,  1160,  1161,  1162,     0,     0,  1147,     0,
    2703,     0,   838,     0,     0,     0,     0,  1148,     0,     0,
    1149,     0,   855,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1150,     0,     0,  1151,     0,     0,
       0,     0,     0,     0,     0,     0,  1148,     0,     0,  1149,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1150,     0,   856,  1151,     0,     0,   840,
     857,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   858,     0,     0,     0,     0,     0,   859,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   860,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1152,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1152,     0,     0,     0,
       0,     0,     0,     0,   842,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1153,     0,     0,
    1154,  1155,  1156,     0,  1157,  1158,  1159,  1160,  1161,  1162,
       0,     0,     0,     0,  2715,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1153,   884,     0,  1154,
    1155,  1156,     0,  1157,  1158,  1159,  1160,  1161,  1162,     0,
       0,  1309,     0,    92,    93,    94,    95,    96,    97,    98,
      99,   885,   100,   101,   102,   886,   887,   888,   889,   890,
     891,   892,   103,   104,   893,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   894,   117,   118,
     119,   120,   121,   122,   895,   896,   123,   124,   125,   126,
     127,   897,   128,   129,   130,   131,   132,   898,   133,   899,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   900,
     143,   144,   145,   146,   147,   148,   901,   149,   150,   151,
     152,   902,   903,   904,   153,   905,   906,   907,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   908,   164,
     909,   165,   166,   167,   168,   169,   170,   910,   171,   172,
     173,   174,   175,   176,   177,   911,   912,   178,   179,   180,
     181,   182,   183,   913,   184,   185,   186,   914,   187,   188,
     189,   915,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   916,   200,   917,   201,   202,   203,   204,   918,
     205,   919,   206,   207,   920,   208,   209,   210,   211,   212,
     213,   921,   214,   922,   923,   924,   215,   216,   925,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     926,   228,   229,   230,   231,   232,   233,   927,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   928,   243,   929,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     930,   931,   254,   255,   256,   257,   932,   258,   259,   260,
     933,   934,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   935,   292,   293,   294,   295,   936,   296,
     297,   298,   299,   300,   301,   937,   302,   303,   938,   939,
     304,   305,   306,   940,   941,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   942,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   943,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   944,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   945,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   946,   379,   380,   381,   382,   383,   947,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   948,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   949,   409,   410,   950,   411,   412,
     413,   414,   415,   416,   417,   951,   418,   419,   952,   953,
     420,   421,   422,   423,   424,   954,   425,   426,   427,   428,
     429,   430,   431,   955,   956,   432,   433,   434,   435,   436,
     957,   958,   437,   438,   439,   440,   441,   442,   443,   959,
     444,   445,   446,   447,   448,   449,   450,   960,   961,   451,
     962,   963,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   498,     0,     0,     0,     0,     0,     0,
       0,     0,   964,     0,     0,     0,     0,     0,     0,    92,
      93,    94,    95,    96,    97,    98,    99,     0,   100,   101,
     102,     0,     0,     0,     0,     0,     0,     0,   103,   104,
       0,   105,   106,   107,     0,   109,   110,   111,   112,   113,
       0,   115,   116,     0,   117,   118,   119,   120,   121,   122,
       0,     0,   123,   124,   125,   126,   127,     0,   128,   129,
     130,   131,   132,     0,     0,     0,   134,   135,   136,   137,
     138,     0,   140,   141,   142,     0,   143,   144,   145,   146,
     147,   148,     0,     0,   150,   151,   152,     0,     0,     0,
       0,     0,     0,     0,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,     0,   164,     0,   165,   166,   167,
     168,   169,   170,     0,   171,   172,   173,   174,   175,   176,
     177,     0,     0,   178,   179,   180,   181,   182,   183,     0,
     184,   185,   186,     0,   187,   188,   189,     0,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,     0,   200,
       0,   201,   202,   203,   204,     0,   205,     0,   206,     0,
       0,     0,   209,   210,   211,     0,   213,     0,   214,     0,
       0,     0,   215,   216,     0,   217,   218,   219,   220,   221,
     222,     0,   224,   225,   226,   227,     0,   228,   229,   230,
     231,   232,   233,     0,   234,     0,   236,   237,   238,   239,
     240,   241,   242,     0,   243,     0,   244,     0,     0,   247,
       0,   249,   250,   251,   252,   253,     0,     0,   254,     0,
     256,     0,     0,   258,   259,   260,     0,     0,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,     0,   286,   287,   288,   289,   290,   291,     0,
     292,   293,     0,   295,     0,   296,   297,   298,   299,   300,
     301,     0,   302,   303,     0,     0,   304,   305,   306,     0,
       0,   307,   308,     0,   310,     0,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,     0,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,     0,   361,
     362,     0,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,     0,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,     0,
     390,   391,   392,   393,     0,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,     0,   411,     0,   413,   414,   415,   416,
     417,     0,   418,   419,     0,     0,   420,   421,   422,   423,
     424,     0,   425,   426,   427,   428,   429,   430,   431,     0,
       0,   432,   433,   434,   435,   436,     0,     0,   437,   438,
     439,   440,   441,   442,   443,     0,   444,     0,   446,   447,
     448,   449,   450,     0,     0,   451,     0,     0,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   664,
    1011,   543,     0,     0,     0,   688,     0,     0,  2031,     0,
       0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
      97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
       0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,     0,
     117,   118,   119,   120,   121,   122,     0,     0,   123,   124,
     125,   126,   127,     0,   128,   129,   130,   131,   132,     0,
     133,     0,   134,   135,   136,   137,   138,   139,   140,   141,
     142,     0,   143,   144,   145,   146,   147,   148,     0,   149,
     150,   151,   152,     0,     0,     0,   153,     0,     0,     0,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
    1188,   164,     0,   165,   166,   167,   168,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,     0,     0,   178,
     179,   180,   181,   182,   183,     0,   184,   185,   186,     0,
     187,   188,   189,     0,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,  1012,   200,     0,   201,   202,   203,
     204,     0,   205,     0,   206,   207,     0,   208,   209,   210,
     211,   212,   213,     0,   214,     0,     0,     0,   215,   216,
       0,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,     0,   228,   229,   230,   231,   232,   233,     0,
     234,   235,   236,   237,   238,   239,   240,   241,   242,     0,
     243,     0,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,     0,     0,   254,   255,   256,   257,     0,   258,
     259,   260,     0,     0,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,     0,   292,   293,   294,   295,
       0,   296,   297,   298,   299,   300,   301,     0,   302,   303,
    1013,     0,   304,   305,   306,     0,     0,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
       0,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,     0,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,     0,   379,   380,   381,   382,   383,     0,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
       0,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,     0,
     411,   412,   413,   414,   415,   416,   417,     0,   418,   419,
       0,     0,   420,   421,   422,   423,   424,  1014,   425,   426,
     427,   428,   429,   430,   431,     0,     0,   432,   433,   434,
     435,   436,     0,     0,   437,   438,   439,   440,   441,   442,
     443,     0,   444,   445,   446,   447,   448,   449,   450,     0,
       0,   451,     0,     0,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   664,  1011,   543,     0,     0,
       0,   688,  1015,  1016,     0,     0,     0,     0,     0,     0,
       0,    92,    93,    94,    95,    96,    97,    98,    99,     0,
     100,   101,   102,     0,     0,     0,     0,     0,     0,     0,
     103,   104,     0,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,     0,   117,   118,   119,   120,
     121,   122,     0,     0,   123,   124,   125,   126,   127,     0,
     128,   129,   130,   131,   132,     0,   133,     0,   134,   135,
     136,   137,   138,   139,   140,   141,   142,     0,   143,   144,
     145,   146,   147,   148,     0,   149,   150,   151,   152,     0,
       0,     0,   153,     0,     0,     0,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,  1190,   164,     0,   165,
     166,   167,   168,   169,   170,     0,   171,   172,   173,   174,
     175,   176,   177,     0,     0,   178,   179,   180,   181,   182,
     183,     0,   184,   185,   186,     0,   187,   188,   189,     0,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
    1012,   200,     0,   201,   202,   203,   204,     0,   205,     0,
     206,   207,     0,   208,   209,   210,   211,   212,   213,     0,
     214,     0,     0,     0,   215,   216,     0,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,     0,   228,
     229,   230,   231,   232,   233,     0,   234,   235,   236,   237,
     238,   239,   240,   241,   242,     0,   243,     0,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,     0,     0,
     254,   255,   256,   257,     0,   258,   259,   260,     0,     0,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,     0,   292,   293,   294,   295,     0,   296,   297,   298,
     299,   300,   301,     0,   302,   303,  1013,     0,   304,   305,
     306,     0,     0,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,     0,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,     0,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
       0,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,     0,
     379,   380,   381,   382,   383,     0,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,     0,   411,   412,   413,   414,
     415,   416,   417,     0,   418,   419,     0,     0,   420,   421,
     422,   423,   424,  1014,   425,   426,   427,   428,   429,   430,
     431,     0,     0,   432,   433,   434,   435,   436,     0,     0,
     437,   438,   439,   440,   441,   442,   443,     0,   444,   445,
     446,   447,   448,   449,   450,     0,     0,   451,     0,     0,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   664,  1011,   543,     0,     0,     0,   688,  1015,  1016,
       0,     0,     0,     0,     0,     0,     0,    92,    93,    94,
      95,    96,    97,    98,    99,     0,   100,   101,   102,     0,
       0,     0,     0,     0,     0,     0,   103,   104,     0,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,     0,   117,   118,   119,   120,   121,   122,     0,     0,
     123,   124,   125,   126,   127,     0,   128,   129,   130,   131,
     132,     0,   133,     0,   134,   135,   136,   137,   138,   139,
     140,   141,   142,     0,   143,   144,   145,   146,   147,   148,
       0,   149,   150,   151,   152,     0,     0,     0,   153,     0,
       0,     0,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,     0,   164,     0,   165,   166,   167,   168,   169,
     170,     0,   171,   172,   173,   174,   175,   176,   177,     0,
       0,   178,   179,   180,   181,   182,   183,     0,   184,   185,
     186,     0,   187,   188,   189,     0,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,  1012,   200,     0,   201,
     202,   203,   204,     0,   205,     0,   206,   207,     0,   208,
     209,   210,   211,   212,   213,     0,   214,     0,     0,     0,
     215,   216,     0,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,     0,   228,   229,   230,   231,   232,
     233,     0,   234,   235,   236,   237,   238,   239,   240,   241,
     242,     0,   243,     0,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,     0,     0,   254,   255,   256,   257,
       0,   258,   259,   260,     0,     0,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,     0,   292,   293,
     294,   295,     0,   296,   297,   298,   299,   300,   301,     0,
     302,   303,  1013,     0,   304,   305,   306,     0,     0,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,     0,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,     0,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,     0,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,     0,   379,   380,   381,   382,
     383,     0,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,     0,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,     0,   411,   412,   413,   414,   415,   416,   417,     0,
     418,   419,     0,     0,   420,   421,   422,   423,   424,  1014,
     425,   426,   427,   428,   429,   430,   431,     0,     0,   432,
     433,   434,   435,   436,     0,     0,   437,   438,   439,   440,
     441,   442,   443,     0,   444,   445,   446,   447,   448,   449,
     450,     0,     0,   451,     0,     0,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,     0,  1132,     0,
       0,  1133,     0,     0,  1015,  1016,  1134,  1135,  1136,     0,
       0,     0,     0,     0,     0,     0,  1132,     0,     0,  1133,
       0,     0,     0,  1137,  1134,  1135,  1136,  1580,     0,     0,
       0,  1139,     0,     0,  1132,     0,     0,  1133,  1140,     0,
       0,  1137,  1134,  1135,  1136,     0,     0,     0,     0,  1139,
       0,     0,     0,     0,     0,     0,  1140,     0,     0,  1137,
       0,     0,  1132,  1141,     0,  1133,     0,  1139,     0,     0,
    1134,  1135,  1136,     0,  1140,     0,     0,     0,     0,     0,
       0,  1141,     0,     0,     0,     0,     0,  1137,     0,     0,
    1769,     0,     0,     0,     0,  1139,     0,     0,     0,  1141,
       0,     0,  1140,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1581,     0,     0,     0,     0,     0,     0,
       0,     0,  1132,     0,     0,  1133,     0,  1141,     0,     0,
    1134,  1135,  1136,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1137,     0,     0,
       0,  1132,     0,     0,  1133,  1139,     0,     0,     0,  1134,
    1135,  1136,  1140,     0,     0,  1142,     0,     0,     0,     0,
       0,     0,     0,  1809,     0,     0,  1137,     0,  1810,  1818,
       0,  1143,     0,  1142,  1139,     0,  1144,  1141,     0,     0,
    2783,  1140,     0,     0,     0,     0,     0,     0,     0,  1143,
       0,  1142,     0,     0,  1144,     0,     0,  1145,  1146,     0,
       0,     0,     0,     0,     0,     0,  1141,  1143,     0,     0,
       0,  1147,  1144,     0,     0,  1145,  1146,     0,     0,  1142,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1147,
       0,     0,     0,  1145,  1146,  1143,     0,     0,     0,     0,
    1144,     0,     0,     0,     0,     0,     0,  1147,     0,  1148,
       0,     0,  1149,     0,     0,     0,     0,     0,     0,     0,
       0,  1145,  1146,     0,     0,     0,  1150,  1148,     0,  1151,
    1149,     0,     0,     0,     0,  1147,     0,     0,     0,  1142,
       0,     0,     0,     0,  1150,  1148,     0,  1151,  1149,     0,
       0,     0,     0,     0,     0,  1143,     0,     0,     0,     0,
    1144,     0,  1150,     0,     0,  1151,     0,     0,  1142,     0,
       0,     0,     0,  1148,     0,     0,  1149,     0,     0,     0,
       0,  1145,  1146,     0,  1143,     0,     0,     0,  2784,  1144,
    1150,     0,     0,  1151,     0,  1147,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1145,  1146,     0,     0,     0,     0,     0,     0,     0,  1152,
       0,     0,     0,     0,  1147,     0,     0,     0,     0,     0,
       0,     0,     0,  1148,     0,  1132,  1149,  1152,  1133,     0,
       0,     0,     0,  1134,  1135,  1136,     0,     0,     0,     0,
    1150,     0,     0,  1151,     0,  1152,     0,     0,     0,     0,
    1137,     0,  1148,     0,     0,  1149,     0,     0,  1139,     0,
       0,  1783,     0,     0,     0,  1140,     0,  1582,     0,  1150,
       0,     0,  1151,  1152,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1141,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1153,
       0,     0,  1154,  1155,  1156,     0,  1157,  1158,  1159,  1160,
    1161,  1162,     0,     0,     0,     0,     0,  1153,     0,     0,
    1154,  1155,  1156,  1152,  1157,  1158,  1159,  1160,  1161,  1162,
       0,     0,     0,     0,     0,  1153,     0,     0,  1154,  1155,
    1156,     0,  1157,  1158,  1159,  1160,  1161,  1162,     0,     0,
       0,  1132,  1152,     0,  1133,     0,     0,     0,     0,  1134,
    1135,  1136,     0,  1153,     0,     0,  1154,  1155,  1156,     0,
    1157,  1158,  1159,  1160,  1161,  1162,  1137,  1823,     0,     0,
    1132,     0,  1142,  1133,  1139,     0,     0,   835,  1134,  1135,
    1136,  1140,     0,   836,     0,     0,     0,     0,  1143,     0,
     848,     0,     0,  1144,     0,  1137,     0,     0,     0,     0,
       0,     0,     0,  1139,     0,     0,  1141,     0,     0,   849,
    1140,     0,     0,  1153,  1145,  1146,  1154,  1155,  1156,     0,
    1157,  1158,  1159,  1160,  1161,  1162,     0,     0,  1147,     0,
    1132,     0,     0,  1133,     0,  1141,     0,     0,  1134,  1135,
    1136,     0,  1153,     0,     0,  1154,  1155,  1156,     0,  1157,
    1158,  1159,  1160,  1161,  1162,  1137,     0,     0,     0,   850,
       0,     0,     0,  1139,     0,     0,  1148,     0,     0,  1149,
    1140,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1150,     0,     0,  1151,     0,     0,     0,
     837,     0,     0,     0,     0,  1141,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1142,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1143,     0,     0,     0,     0,  1144,
       0,     0,     0,     0,     0,     0,     0,  1142,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1145,  1146,   851,  1143,     0,     0,     0,     0,  1144,     0,
       0,     0,     0,     0,  1147,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1152,     0,     0,  1145,
    1146,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1147,     0,     0,     0,  1142,     0,     0,
     852,     0,  1148,     0,     0,  1149,     0,     0,   853,     0,
       0,     0,     0,  1143,     0,     0,     0,     0,  1144,  1150,
     854,     0,  1151,     0,     0,     0,     0,     0,     0,     0,
       0,  1148,     0,     0,  1149,     0,     0,     0,     0,  1145,
    1146,     0,   838,     0,     0,     0,     0,     0,  1150,     0,
       0,  1151,   855,  1147,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1153,     0,     0,  1154,
    1155,  1156,     0,  1157,  1158,  1159,  1160,  1161,  1162,     0,
       0,  1148,     0,     0,  1149,  1658,     0,     0,     0,   840,
     857,     0,     0,     0,     0,     0,     0,     0,  1150,     0,
       0,     0,  1152,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   858,     0,     0,     0,     0,     0,  1659,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1152,     0,   860,  2051,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   842,     0,     0,     0,     0,     0,
       0,  1152,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1153,     0,     0,  1154,  1155,  1156,     0,  1157,
    1158,  1159,  1160,  1161,  1162,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1153,     0,     0,  1154,  1155,  1156,     0,  1157,  1158,
    1159,  1160,  1161,  1162,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   884,     0,
    1500,  1153,     0,     0,  1154,  1155,  1156,     0,  1157,  1158,
    1159,  1160,  1161,  1162,    92,    93,    94,    95,    96,    97,
      98,    99,   885,   100,   101,   102,   886,   887,   888,   889,
     890,   891,   892,   103,   104,   893,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   894,   117,
     118,   119,   120,   121,   122,   895,   896,   123,   124,   125,
     126,   127,   897,   128,   129,   130,   131,   132,   898,   133,
     899,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     900,   143,   144,   145,   146,   147,   148,   901,   149,   150,
     151,   152,   902,   903,   904,   153,   905,   906,   907,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   908,
     164,   909,   165,   166,   167,   168,   169,   170,   910,   171,
     172,   173,   174,   175,   176,   177,   911,   912,   178,   179,
     180,   181,   182,   183,   913,   184,   185,   186,   914,   187,
     188,   189,   915,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   916,   200,   917,   201,   202,   203,   204,
     918,   205,   919,   206,   207,   920,   208,   209,   210,   211,
     212,   213,   921,   214,   922,   923,   924,   215,   216,   925,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   926,   228,   229,   230,   231,   232,   233,   927,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   928,   243,
     929,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   930,   931,   254,   255,   256,   257,   932,   258,   259,
     260,   933,   934,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   935,   292,   293,   294,   295,   936,
     296,   297,   298,   299,   300,   301,   937,   302,   303,   938,
     939,   304,   305,   306,   940,   941,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   942,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   943,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   944,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   945,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   946,   379,   380,   381,   382,   383,   947,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   948,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   949,   409,   410,   950,   411,
     412,   413,   414,   415,   416,   417,   951,   418,   419,   952,
     953,   420,   421,   422,   423,   424,   954,   425,   426,   427,
     428,   429,   430,   431,   955,   956,   432,   433,   434,   435,
     436,   957,   958,   437,   438,   439,   440,   441,   442,   443,
     959,   444,   445,   446,   447,   448,   449,   450,   960,   961,
     451,   962,   963,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   884,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      92,    93,    94,    95,    96,    97,    98,    99,   885,   100,
     101,   102,   886,   887,   888,   889,   890,   891,   892,   103,
     104,   893,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   894,   117,   118,   119,   120,   121,
     122,   895,   896,   123,   124,   125,   126,   127,   897,   128,
     129,   130,   131,   132,   898,   133,   899,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   900,   143,   144,   145,
     146,   147,   148,   901,   149,   150,   151,   152,   902,   903,
     904,   153,   905,   906,   907,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   908,   164,   909,   165,   166,
     167,   168,   169,   170,   910,   171,   172,   173,   174,   175,
     176,   177,   911,   912,   178,   179,   180,   181,   182,   183,
     913,   184,   185,   186,   914,   187,   188,   189,   915,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   916,
     200,   917,   201,   202,   203,   204,   918,   205,   919,   206,
     207,   920,   208,   209,   210,   211,   212,   213,   921,   214,
     922,   923,   924,   215,   216,   925,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   926,   228,   229,
     230,   231,   232,   233,   927,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   928,   243,   929,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   930,   931,   254,
     255,   256,   257,   932,   258,   259,   260,   933,   934,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     935,   292,   293,   294,   295,   936,   296,   297,   298,   299,
     300,   301,   937,   302,   303,   938,   939,   304,   305,   306,
     940,   941,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   942,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   943,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   944,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   945,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   946,   379,
     380,   381,   382,   383,   947,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   948,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   949,   409,   410,   950,   411,   412,   413,   414,   415,
     416,   417,   951,   418,   419,   952,   953,   420,   421,   422,
     423,   424,   954,   425,   426,   427,   428,   429,   430,   431,
     955,   956,   432,   433,   434,   435,   436,   957,   958,   437,
     438,   439,   440,   441,   442,   443,   959,   444,   445,   446,
     447,   448,   449,   450,   960,   961,   451,   962,   963,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     884,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
    1643,    97,    98,    99,   885,   100,   101,   102,   886,   887,
     888,   889,   890,   891,   892,   103,   104,   893,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     894,   117,   118,   119,   120,   121,   122,   895,   896,   123,
     124,   125,   126,   127,   897,   128,   129,   130,   131,   132,
     898,   133,   899,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   900,   143,   144,   145,   146,   147,   148,   901,
     149,   150,   151,   152,   902,   903,   904,   153,   905,   906,
     907,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   908,   164,   909,   165,   166,   167,   168,   169,   170,
     910,   171,   172,   173,   174,   175,   176,   177,   911,   912,
     178,   179,   180,  1644,   182,   183,   913,   184,   185,   186,
     914,   187,   188,   189,   915,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   916,   200,   917,   201,   202,
     203,   204,   918,   205,   919,   206,   207,   920,   208,   209,
     210,   211,   212,   213,   921,   214,   922,   923,   924,   215,
     216,   925,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   926,   228,   229,   230,   231,   232,   233,
     927,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     928,   243,   929,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   930,   931,   254,   255,   256,   257,   932,
     258,   259,   260,   933,   934,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   935,   292,   293,   294,
     295,   936,   296,   297,   298,   299,   300,   301,   937,   302,
     303,   938,   939,   304,   305,   306,   940,   941,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   942,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   943,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   944,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   945,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   946,   379,   380,   381,   382,   383,
     947,  1645,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   948,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   949,   409,   410,
     950,   411,   412,   413,   414,   415,   416,   417,   951,   418,
     419,   952,   953,   420,   421,   422,   423,   424,   954,   425,
     426,   427,   428,   429,   430,   431,   955,   956,   432,   433,
     434,   435,   436,   957,   958,   437,   438,   439,   440,   441,
     442,   443,   959,   444,   445,   446,   447,   448,   449,   450,
     960,   961,   451,   962,   963,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,    91,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    92,    93,    94,    95,    96,    97,    98,    99,
       0,   100,   101,   102,     0,     0,     0,     0,     0,     0,
       0,   103,   104,     0,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,     0,   117,   118,   119,
     120,   121,   122,     0,   694,   123,   124,   125,   126,   127,
       0,   128,   129,   130,   131,   697,     0,   698,     0,   134,
     135,   136,   137,   138,   139,   140,   141,   142,     0,   143,
     144,   145,   146,   147,   148,     0,   149,   150,   151,   152,
     699,   700,   701,   702,   703,   704,   705,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,     0,   164,     0,
     165,   166,   167,   168,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,     0,   178,   179,   180,   181,
     182,   183,     0,   184,   185,   186,     0,   187,   188,   189,
       0,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     711,     0,   200,     0,   201,   202,   203,   204,     0,   205,
       0,   206,   207,     0,   208,   209,   210,   211,   212,   213,
       0,   214,     0,     0,     0,   215,   216,     0,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,     0,
     228,   229,   230,   231,   232,   233,     0,   234,   235,   236,
     237,   238,   239,   240,   241,   242,     0,   243,     0,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,     0,
       0,   254,   255,   256,   257,     0,   258,   259,   260,   717,
     718,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,     0,   292,   293,   294,   295,     0,   723,   297,
     298,   299,   300,   301,     0,   302,   303,     0,     0,   304,
     305,   306,     0,     0,   307,   308,   309,   310,   311,   726,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
       0,   323,   324,   727,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,     0,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,     0,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
       0,   379,   380,   381,   382,   383,   730,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   732,     0,   409,   410,     0,   411,   412,   413,
     414,   415,   416,   417,     0,   418,   419,     0,     0,   420,
     421,   735,   423,   736,     0,   425,   426,   427,   428,   429,
     430,   431,     0,     0,   432,   433,   434,   435,   436,   738,
       0,   437,   438,   439,   440,   441,   442,   443,     0,   444,
     445,   446,   447,   448,   449,   450,     0,     0,   451,     0,
       0,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   664,     0,   543,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
       0,   123,   124,   125,   126,   127,     0,   128,   129,   130,
     131,   132,     0,   133,     0,   134,   135,   136,   137,   138,
     139,   140,   141,   142,     0,   143,   144,   145,   146,   147,
     148,     0,   149,   150,   151,   152,     0,     0,     0,   153,
       0,     0,     0,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,     0,   178,   179,   180,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,  1012,   200,     0,
     201,   202,   203,   204,     0,   205,     0,   206,   207,     0,
     208,   209,   210,   211,   212,   213,     0,   214,     0,     0,
       0,   215,   216,     0,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,     0,   228,   229,   230,   231,
     232,   233,     0,   234,   235,   236,   237,   238,   239,   240,
     241,   242,     0,   243,     0,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,     0,     0,   254,   255,   256,
     257,     0,   258,   259,   260,     0,     0,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,     0,   292,
     293,   294,   295,     0,   296,   297,   298,   299,   300,   301,
       0,   302,   303,  1013,     0,   304,   305,   306,     0,     0,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,     0,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,     0,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,     0,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,     0,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,   411,   412,   413,   414,   415,   416,   417,
       0,   418,   419,     0,     0,   420,   421,   422,   423,   424,
    1014,   425,   426,   427,   428,   429,   430,   431,     0,     0,
     432,   433,   434,   435,   436,     0,     0,   437,   438,   439,
     440,   441,   442,   443,     0,   444,   445,   446,   447,   448,
     449,   450,     0,     0,   451,     0,     0,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   664,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    92,    93,    94,    95,    96,    97,
      98,    99,     0,   100,   101,   102,     3,     4,     0,     0,
       0,     0,     0,   103,   104,     0,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,     0,   117,
     118,   119,   120,   121,   122,     0,     0,   123,   124,   125,
     126,   127,     0,   128,   129,   130,   131,   132,     0,   133,
       0,   134,   135,   136,   137,   138,   139,   140,   141,   142,
       0,   143,   144,   145,   146,   147,   148,     0,   149,   150,
     151,   152,     0,     0,     0,   153,     0,     0,     0,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,     0,
     164,     0,   165,   166,   167,   168,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,     0,     0,   178,   179,
     180,   181,   182,   183,     0,   184,   185,   186,     0,   187,
     188,   189,     0,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,     0,   200,     0,   201,   202,   203,   204,
       0,   205,     0,   206,   207,     0,   208,   209,   210,   211,
     212,   213,     0,   214,     0,     0,     0,   215,   216,     0,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,     0,   228,   229,   230,   231,   232,   233,     0,   234,
     235,   236,   237,   238,   239,   240,   241,   242,     0,   243,
       0,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,     0,     0,   254,   255,   256,   257,     0,   258,   259,
     260,     0,     0,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,     0,   292,   293,   294,   295,     0,
     296,   297,   298,   299,   300,   301,     0,   302,   303,     0,
       0,   304,   305,   306,     0,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,     0,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,     0,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,     0,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,   411,
     412,   413,   414,   415,   416,   417,     0,   418,   419,     0,
       0,   420,   421,   422,   423,   424,     0,   425,   426,   427,
     428,   429,   430,   431,     0,     0,   432,   433,   434,   435,
     436,     0,     0,   437,   438,   439,   440,   441,   442,   443,
       0,   444,   445,   446,   447,   448,   449,   450,     0,     0,
     451,     0,     0,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,    91,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,     0,   117,   118,   119,   120,   121,
     122,     0,     0,   123,   124,   125,   126,   127,     0,   128,
     129,   130,   131,   132,     0,   133,     0,   134,   135,   136,
     137,   138,   139,   140,   141,   142,     0,   143,   144,   145,
     146,   147,   148,     0,   149,   150,   151,   152,     0,     0,
       0,   153,     0,     0,     0,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,     0,   164,     0,   165,   166,
     167,   168,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,     0,   178,   179,   180,   181,   182,   183,
       0,   184,   185,   186,     0,   187,   188,   189,     0,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,     0,
     200,     0,   201,   202,   203,   204,     0,   205,     0,   206,
     207,     0,   208,   209,   210,   211,   212,   213,     0,   214,
       0,     0,     0,   215,   216,     0,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,     0,   228,   229,
     230,   231,   232,   233,     0,   234,   235,   236,   237,   238,
     239,   240,   241,   242,     0,   243,     0,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,     0,     0,   254,
     255,   256,   257,     0,   258,   259,   260,     0,     0,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
       0,   292,   293,   294,   295,     0,   296,   297,   298,   299,
     300,   301,     0,   302,   303,     0,     0,   304,   305,   306,
       0,     0,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,     0,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,     0,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,     0,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,     0,   379,
     380,   381,   382,   383,     0,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,     0,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,   411,   412,   413,   414,   415,
     416,   417,     0,   418,   419,     0,     0,   420,   421,   422,
     423,   424,     0,   425,   426,   427,   428,   429,   430,   431,
       0,     0,   432,   433,   434,   435,   436,     0,     0,   437,
     438,   439,   440,   441,   442,   443,     0,   444,   445,   446,
     447,   448,   449,   450,     0,     0,   451,     0,     0,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     498,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,  1247,   128,   129,   130,   131,   132,
       0,     0,  1248,   134,   135,   136,   137,   138,     0,   140,
     141,   142,  1249,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,     0,
     178,   179,   180,   181,   182,   183,     0,   184,   185,   186,
       0,   187,   188,   189,     0,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
     203,   204,     0,   205,  1250,   206,     0,     0,     0,   209,
     210,   211,     0,   213,     0,   214,     0,     0,     0,   215,
     216,     0,   217,   218,   219,   220,   221,  1251,     0,   224,
     225,   226,   227,     0,   228,   229,   230,   231,   232,   233,
       0,   234,     0,   236,   237,   238,   239,   240,   241,   242,
       0,   243,     0,   244,     0,     0,   247,     0,   249,   250,
     251,   252,   253,     0,     0,   254,     0,   256,     0,     0,
     258,   259,   260,     0,     0,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     286,   287,   288,   289,   290,   291,     0,   292,   293,     0,
     295,     0,   296,   297,   298,   299,   300,   301,     0,   302,
     303,     0,     0,   304,   305,   306,     0,     0,   307,   308,
       0,   310,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,     0,   323,   324,   325,   326,   327,
     328,   329,   330,   331,  1252,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,     0,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,     0,   361,   362,     0,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,     0,   379,   380,   381,   382,   383,
       0,   384,   385,   386,   387,   388,     0,   390,   391,   392,
     393,     0,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,   411,     0,   413,   414,   415,   416,   417,     0,   418,
     419,     0,     0,   420,   421,   422,   423,   424,     0,   425,
     426,   427,   428,   429,   430,   431,     0,  1253,   432,   433,
     434,   435,   436,     0,     0,   437,   438,   439,   440,   441,
     442,   443,     0,   444,     0,   446,   447,   448,   449,   450,
       0,     0,   451,     0,     0,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   498,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    92,    93,    94,    95,    96,    97,    98,    99,
       0,   100,   101,   102,     0,     0,     0,     0,     0,     0,
       0,   103,   104,     0,   105,   106,   107,     0,   109,   110,
     111,   112,   113,     0,   115,   116,     0,   117,   118,   119,
     120,   121,   122,     0,     0,   123,   124,   125,   126,   127,
    1247,   128,   129,   130,   131,   132,     0,     0,     0,   134,
     135,   136,   137,   138,     0,   140,   141,   142,  1249,   143,
     144,   145,   146,   147,   148,     0,     0,   150,   151,   152,
       0,     0,     0,     0,     0,     0,     0,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,     0,   164,     0,
     165,   166,   167,   168,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,     0,   178,   179,   180,   181,
     182,   183,     0,   184,   185,   186,     0,   187,   188,   189,
       0,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,     0,   200,     0,   201,   202,   203,   204,     0,   205,
    1250,   206,     0,     0,     0,   209,   210,   211,     0,   213,
       0,   214,     0,     0,     0,   215,   216,     0,   217,   218,
     219,   220,   221,   222,     0,   224,   225,   226,   227,     0,
     228,   229,   230,   231,   232,   233,     0,   234,     0,   236,
     237,   238,   239,   240,   241,   242,     0,   243,     0,   244,
       0,     0,   247,     0,   249,   250,   251,   252,   253,     0,
       0,   254,     0,   256,  1709,     0,   258,   259,   260,     0,
       0,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,     0,   286,   287,   288,   289,
     290,   291,     0,   292,   293,     0,   295,     0,   296,   297,
     298,   299,   300,   301,     0,   302,   303,     0,     0,   304,
     305,   306,     0,     0,   307,   308,     0,   310,     0,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
       0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
    1252,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,     0,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,     0,   361,   362,     0,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
       0,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,     0,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,   411,     0,   413,
     414,   415,   416,   417,     0,   418,   419,     0,     0,   420,
     421,   422,   423,   424,     0,   425,   426,   427,   428,   429,
     430,   431,     0,  1253,   432,   433,   434,   435,   436,     0,
       0,   437,   438,   439,   440,   441,   442,   443,     0,   444,
       0,   446,   447,   448,   449,   450,     0,     0,   451,     0,
       0,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   498,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       3,     4,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,     0,   109,   110,   111,   112,   113,     0,
     115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
       0,   123,   124,   125,   126,   127,     0,   128,   129,   130,
     131,   132,     0,     0,     0,   134,   135,   136,   137,   138,
       0,   140,   141,   142,     0,   143,   144,   145,   146,   147,
     148,     0,     0,   150,   151,   152,     0,     0,     0,     0,
       0,     0,     0,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,     0,   178,   179,   180,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,     0,   200,     0,
     201,   202,   203,   204,     0,   205,     0,   206,     0,     0,
       0,   209,   210,   211,     0,   213,     0,   214,     0,     0,
       0,   215,   216,     0,   217,   218,   219,   220,   221,   222,
       0,   224,   225,   226,   227,     0,   228,   229,   230,   231,
     232,   233,     0,   234,     0,   236,   237,   238,   239,   240,
     241,   242,     0,   243,     0,   244,     0,     0,   247,     0,
     249,   250,   251,   252,   253,     0,     0,   254,     0,   256,
       0,     0,   258,   259,   260,     0,     0,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,     0,   286,   287,   288,   289,   290,   291,     0,   292,
     293,     0,   295,     0,   296,   297,   298,   299,   300,   301,
       0,   302,   303,     0,     0,   304,   305,   306,     0,     0,
     307,   308,     0,   310,     0,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,     0,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,     0,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,     0,   361,   362,
       0,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,     0,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,     0,   390,
     391,   392,   393,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,   411,     0,   413,   414,   415,   416,   417,
       0,   418,   419,     0,     0,   420,   421,   422,   423,   424,
       0,   425,   426,   427,   428,   429,   430,   431,     0,     0,
     432,   433,   434,   435,   436,     0,     0,   437,   438,   439,
     440,   441,   442,   443,     0,   444,     0,   446,   447,   448,
     449,   450,     0,     0,   451,     0,     0,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   498,  2476,
       0,     0,     0,     0,  2477,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    92,    93,    94,    95,    96,    97,
      98,    99,     0,   100,   101,   102,     0,     0,     0,     0,
       0,     0,     0,   103,   104,     0,   105,   106,   107,     0,
     109,   110,   111,   112,   113,     0,   115,   116,     0,   117,
     118,   119,   120,   121,   122,     0,     0,   123,   124,   125,
     126,   127,     0,   128,   129,   130,   131,   132,     0,     0,
       0,   134,   135,   136,   137,   138,     0,   140,   141,   142,
       0,   143,   144,   145,   146,   147,   148,     0,     0,   150,
     151,   152,     0,     0,     0,     0,     0,     0,     0,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,     0,
     164,     0,   165,   166,   167,   168,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,     0,     0,   178,   179,
     180,   181,   182,   183,     0,   184,   185,   186,     0,   187,
     188,   189,     0,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,     0,   200,     0,   201,   202,   203,   204,
       0,   205,     0,   206,     0,     0,     0,   209,   210,   211,
       0,   213,     0,   214,     0,     0,     0,   215,   216,     0,
     217,   218,   219,   220,   221,   222,     0,   224,   225,   226,
     227,     0,   228,   229,   230,   231,   232,   233,     0,   234,
       0,   236,   237,   238,   239,   240,   241,   242,     0,   243,
       0,   244,     0,     0,   247,     0,   249,   250,   251,   252,
     253,     0,     0,   254,     0,   256,     0,     0,   258,   259,
     260,     0,     0,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,     0,   286,   287,
     288,   289,   290,   291,     0,   292,   293,     0,   295,     0,
     296,   297,   298,   299,   300,   301,     0,   302,   303,     0,
       0,   304,   305,   306,     0,     0,   307,   308,     0,   310,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,     0,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,     0,   361,   362,     0,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,     0,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,     0,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,   411,
       0,   413,   414,   415,   416,   417,     0,   418,   419,     0,
       0,   420,   421,   422,   423,   424,     0,   425,   426,   427,
     428,   429,   430,   431,     0,     0,   432,   433,   434,   435,
     436,     0,     0,   437,   438,   439,   440,   441,   442,   443,
       0,   444,     0,   446,   447,   448,   449,   450,     0,     0,
     451,     0,     0,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   498,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      92,    93,    94,    95,    96,    97,    98,    99,   499,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,     0,   109,   110,   111,   112,
     113,     0,   115,   116,     0,   117,   118,   119,   120,   121,
     122,     0,     0,   123,   124,   125,   126,   127,     0,   128,
     129,   130,   131,   132,     0,     0,     0,   134,   135,   136,
     137,   138,     0,   140,   141,   142,     0,   143,   144,   145,
     146,   147,   148,     0,     0,   150,   151,   152,     0,     0,
       0,     0,     0,     0,     0,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,     0,   164,     0,   165,   166,
     167,   168,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,     0,   178,   179,   180,   181,   182,   183,
       0,   184,   185,   186,     0,   187,   188,   189,     0,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,     0,
     200,     0,   201,   202,   203,   204,     0,   205,     0,   206,
       0,     0,     0,   209,   210,   211,     0,   213,     0,   214,
       0,     0,     0,   215,   216,     0,   217,   218,   219,   220,
     221,   222,     0,   224,   225,   226,   227,     0,   228,   229,
     230,   231,   232,   233,     0,   234,     0,   236,   237,   238,
     239,   240,   241,   242,     0,   243,     0,   244,     0,     0,
     247,     0,   249,   250,   251,   252,   253,     0,     0,   254,
       0,   256,     0,     0,   258,   259,   260,     0,     0,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,     0,   286,   287,   288,   289,   290,   291,
       0,   292,   293,     0,   295,     0,   296,   297,   298,   299,
     300,   301,     0,   302,   303,     0,     0,   304,   305,   306,
       0,     0,   307,   308,     0,   310,     0,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,     0,   323,
     324,   325,   326,   327,   328,   500,   330,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,     0,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,     0,
     361,   362,     0,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,     0,   379,
     380,   381,   382,   383,     0,   384,   385,   386,   387,   388,
       0,   390,   391,   392,   393,     0,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,   411,     0,   413,   414,   415,
     416,   417,     0,   418,   419,     0,     0,   420,   421,   422,
     423,   424,     0,   425,   426,   427,   428,   429,   430,   431,
       0,     0,   432,   433,   434,   435,   436,     0,     0,   437,
     438,   439,   440,   441,   442,   443,     0,   444,     0,   446,
     447,   448,   449,   450,     0,     0,   451,     0,     0,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     498,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,   548,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,     0,
     178,   179,   180,   181,   182,   183,     0,   184,   185,   186,
       0,   187,   188,   189,     0,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
     203,   204,     0,   205,     0,   206,     0,     0,     0,   209,
     210,   211,     0,   213,     0,   214,     0,     0,     0,   215,
     216,     0,   217,   218,   219,   220,   221,   222,     0,   224,
     225,   226,   227,     0,   228,   229,   230,   231,   232,   233,
       0,   234,     0,   236,   237,   238,   239,   240,   241,   242,
       0,   243,     0,   244,     0,     0,   247,     0,   249,   250,
     251,   252,   253,     0,     0,   254,     0,   256,     0,     0,
     258,   259,   260,     0,     0,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     286,   287,   288,   289,   290,   291,     0,   292,   293,     0,
     295,     0,   296,   297,   298,   299,   300,   301,     0,   302,
     303,     0,     0,   304,   305,   306,     0,     0,   307,   308,
       0,   310,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,     0,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,     0,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,     0,   361,   362,     0,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,     0,   379,   380,   381,   382,   383,
       0,   384,   385,   386,   387,   388,     0,   390,   391,   392,
     393,     0,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,   411,     0,   413,   414,   415,   416,   417,     0,   549,
     419,     0,     0,   550,   421,   422,   423,   424,     0,   425,
     426,   427,   428,   429,   430,   431,     0,     0,   432,   433,
     434,   435,   436,     0,     0,   437,   438,   439,   440,   441,
     442,   443,     0,   444,     0,   446,   447,   448,   449,   450,
       0,     0,   451,     0,     0,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   498,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    92,    93,    94,    95,    96,    97,    98,    99,
       0,   100,   101,   102,     0,     0,     0,     0,     0,     0,
       0,   103,   104,     0,   105,   106,   107,     0,   109,   110,
     111,   112,   113,     0,   115,   116,     0,   117,   118,   119,
     120,   121,   122,     0,     0,   123,   124,   125,   126,   127,
       0,   128,   129,   130,   131,   132,     0,     0,     0,   134,
     135,   136,   137,   138,     0,   140,   141,   142,     0,   143,
     144,   145,   146,   147,   148,     0,     0,   150,   151,   152,
       0,     0,     0,     0,     0,     0,     0,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,     0,   164,     0,
     165,   166,   167,   168,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,     0,   178,   179,   180,   181,
     182,   183,     0,   184,   185,   186,     0,   187,   188,   189,
       0,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,     0,   200,     0,   201,   202,   203,   204,     0,   205,
       0,   206,     0,     0,     0,   209,   210,   211,     0,   213,
       0,   214,     0,     0,     0,   215,   216,     0,   217,   218,
     219,   220,   221,   222,     0,   224,   225,   226,   227,     0,
     228,   229,   230,   231,   232,   233,     0,   234,     0,   236,
     237,   238,   239,   240,   241,   242,     0,   243,     0,   244,
       0,     0,   247,     0,   249,   250,   251,   252,   253,     0,
       0,   254,     0,   256,     0,     0,   258,   259,   260,     0,
       0,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,     0,   286,   287,   288,   289,
     290,   291,     0,   292,   293,     0,   295,     0,   296,   297,
     298,   299,   300,   301,     0,   302,   303,     0,   568,   304,
     305,   306,     0,     0,   307,   308,     0,   310,     0,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
       0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,     0,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,     0,   361,   362,     0,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
       0,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,     0,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,   411,     0,   413,
     414,   415,   416,   417,     0,   418,   419,     0,     0,   420,
     421,   422,   423,   424,     0,   425,   426,   427,   428,   429,
     430,   431,     0,     0,   432,   433,   434,   435,   436,     0,
       0,   437,   438,   439,   440,   441,   442,   443,     0,   444,
       0,   446,   447,   448,   449,   450,     0,     0,   451,     0,
       0,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   498,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,     0,   109,   110,   111,   112,   113,     0,
     115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
       0,   123,   124,   125,   126,   127,     0,   128,   129,   130,
     131,   132,     0,     0,     0,   134,   135,   136,   137,   138,
       0,   140,   141,   142,     0,   143,   144,   145,   146,   147,
     148,     0,     0,   150,   151,   152,     0,     0,     0,     0,
       0,     0,     0,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,     0,   178,   179,   180,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,     0,   200,     0,
     201,   202,   203,   204,     0,   205,     0,   206,     0,     0,
       0,   209,   210,   211,     0,   213,     0,   214,     0,     0,
       0,   215,   216,     0,   217,   218,   219,   220,   221,   614,
       0,   224,   225,   226,   227,     0,   228,   229,   230,   231,
     232,   233,     0,   234,     0,   236,   237,   238,   239,   240,
     241,   242,     0,   243,     0,   244,     0,     0,   247,     0,
     249,   250,   251,   252,   253,     0,     0,   254,     0,   256,
       0,     0,   258,   259,   260,     0,     0,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,     0,   286,   287,   288,   289,   290,   291,     0,   292,
     293,     0,   295,     0,   296,   297,   298,   299,   300,   301,
       0,   302,   303,     0,   568,   304,   305,   306,     0,     0,
     307,   308,     0,   310,     0,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,     0,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,     0,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,     0,   361,   362,
       0,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,     0,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,     0,   390,
     391,   392,   393,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,   411,     0,   413,   414,   415,   416,   417,
       0,   418,   419,     0,     0,   420,   421,   422,   423,   424,
       0,   425,   426,   427,   428,   429,   430,   431,     0,     0,
     432,   433,   434,   435,   436,     0,     0,   437,   438,   439,
     440,   441,   442,   443,     0,   444,     0,   446,   447,   448,
     449,   450,     0,     0,   451,     0,     0,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   498,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    92,    93,    94,    95,    96,    97,
      98,    99,   643,   100,   101,   102,     0,     0,     0,     0,
       0,     0,     0,   103,   104,     0,   105,   106,   107,     0,
     109,   110,   111,   112,   113,     0,   115,   116,     0,   117,
     118,   119,   120,   121,   122,     0,     0,   123,   124,   125,
     126,   127,     0,   128,   129,   130,   131,   132,     0,     0,
       0,   134,   135,   136,   137,   138,     0,   140,   141,   142,
       0,   143,   144,   145,   146,   147,   148,     0,     0,   150,
     151,   152,     0,     0,     0,     0,     0,     0,     0,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,     0,
     164,     0,   165,   166,   167,   168,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,     0,     0,   178,   179,
     180,   181,   182,   183,     0,   184,   185,   186,     0,   187,
     188,   189,     0,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,     0,   200,     0,   201,   202,   203,   204,
       0,   205,     0,   206,     0,     0,     0,   209,   210,   211,
       0,   213,     0,   214,     0,     0,     0,   215,   216,     0,
     217,   218,   219,   220,   221,   222,     0,   224,   225,   226,
     227,     0,   228,   229,   230,   231,   232,   233,     0,   234,
       0,   236,   237,   238,   239,   240,   241,   242,     0,   243,
       0,   244,     0,     0,   247,     0,   249,   250,   251,   252,
     253,     0,     0,   254,     0,   256,     0,     0,   258,   259,
     260,     0,     0,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,     0,   286,   287,
     288,   289,   290,   291,     0,   292,   293,     0,   295,     0,
     296,   297,   298,   299,   300,   301,     0,   302,   303,     0,
       0,   304,   305,   306,     0,     0,   307,   308,     0,   310,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,     0,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,     0,   361,   362,     0,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,     0,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,     0,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,   411,
       0,   413,   414,   415,   416,   417,     0,   418,   419,     0,
       0,   420,   421,   422,   423,   424,     0,   425,   426,   427,
     428,   429,   430,   431,     0,     0,   432,   433,   434,   435,
     436,     0,     0,   437,   438,   439,   440,   441,   442,   443,
       0,   444,     0,   446,   447,   448,   449,   450,     0,     0,
     451,     0,     0,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   498,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,     0,   109,   110,   111,   112,
     113,     0,   115,   116,     0,   117,   118,   119,   120,   121,
     122,     0,     0,   123,   124,   125,   126,   127,     0,   128,
     129,   130,   131,   132,     0,     0,     0,   134,   135,   136,
     137,   138,     0,   140,   141,   142,     0,   143,   144,   145,
     146,   147,   148,     0,     0,   150,   151,   152,     0,     0,
       0,     0,     0,     0,     0,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,     0,   164,     0,   165,   166,
     167,   168,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,     0,   178,   179,   180,   181,   182,   183,
       0,   184,   185,   186,     0,   187,   188,   189,     0,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,     0,
     200,     0,   201,   202,   203,   204,     0,   205,     0,   206,
       0,     0,     0,   209,   210,   211,     0,  1553,     0,   214,
       0,     0,     0,   215,   216,     0,   217,   218,   219,   220,
     221,   222,     0,   224,   225,   226,   227,     0,   228,   229,
     230,   231,   232,   233,     0,   234,     0,   236,   237,   238,
     239,   240,   241,   242,     0,   243,     0,   244,     0,     0,
     247,     0,   249,   250,   251,   252,   253,     0,     0,   254,
       0,   256,     0,     0,   258,   259,  1554,     0,     0,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,     0,   286,   287,   288,   289,   290,   291,
       0,   292,   293,     0,   295,     0,   296,   297,   298,   299,
     300,   301,     0,   302,   303,     0,     0,   304,   305,   306,
       0,     0,   307,   308,     0,   310,     0,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,     0,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,     0,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,     0,
     361,   362,     0,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,     0,   379,
     380,   381,   382,   383,     0,   384,   385,   386,   387,   388,
       0,   390,   391,   392,   393,     0,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,  1555,   411,     0,   413,  1556,   415,
    1557,   417,     0,   418,   419,     0,     0,   420,   421,   422,
     423,   424,     0,   425,   426,   427,   428,   429,   430,   431,
       0,     0,   432,   433,  1558,   435,   436,     0,     0,   437,
     438,   439,   440,   441,   442,   443,     0,   444,     0,   446,
     447,   448,   449,   450,     0,     0,   451,     0,     0,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     498,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,  2130,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,     0,
     178,   179,   180,   181,   182,   183,     0,   184,   185,   186,
       0,   187,   188,   189,     0,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
     203,   204,     0,   205,     0,   206,     0,     0,     0,   209,
     210,   211,     0,   213,     0,   214,     0,     0,     0,   215,
     216,     0,   217,   218,   219,   220,   221,   222,     0,   224,
     225,   226,   227,     0,   228,   229,   230,   231,   232,   233,
       0,   234,     0,   236,   237,   238,   239,   240,   241,   242,
       0,   243,     0,   244,     0,     0,   247,     0,   249,   250,
     251,   252,   253,     0,     0,   254,     0,   256,     0,     0,
     258,   259,   260,     0,     0,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     286,   287,   288,   289,   290,   291,     0,   292,   293,     0,
     295,     0,   296,   297,   298,   299,   300,   301,     0,   302,
     303,     0,     0,   304,   305,   306,     0,     0,   307,   308,
       0,   310,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,     0,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,     0,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,     0,   361,   362,     0,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,     0,   379,   380,   381,   382,   383,
       0,   384,   385,   386,   387,   388,     0,   390,   391,   392,
     393,     0,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,   411,     0,   413,   414,   415,   416,   417,     0,   418,
     419,     0,     0,   420,   421,   422,   423,   424,     0,   425,
     426,   427,   428,   429,   430,   431,     0,     0,   432,   433,
     434,   435,   436,     0,     0,   437,   438,   439,   440,   441,
     442,   443,     0,   444,     0,   446,   447,   448,   449,   450,
       0,     0,   451,     0,     0,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   498,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    92,    93,    94,    95,    96,    97,    98,    99,
       0,   100,   101,   102,     0,     0,     0,     0,     0,  2144,
       0,   103,   104,     0,   105,   106,   107,     0,   109,   110,
     111,   112,   113,     0,   115,   116,     0,   117,   118,   119,
     120,   121,   122,     0,     0,   123,   124,   125,   126,   127,
       0,   128,   129,   130,   131,   132,     0,     0,     0,   134,
     135,   136,   137,   138,     0,   140,   141,   142,     0,   143,
     144,   145,   146,   147,   148,     0,     0,   150,   151,   152,
       0,     0,     0,     0,     0,     0,     0,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,     0,   164,     0,
     165,   166,   167,   168,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,     0,   178,   179,   180,   181,
     182,   183,     0,   184,   185,   186,     0,   187,   188,   189,
       0,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,     0,   200,     0,   201,   202,   203,   204,     0,   205,
       0,   206,     0,     0,     0,   209,   210,   211,     0,   213,
       0,   214,     0,     0,     0,   215,   216,     0,   217,   218,
     219,   220,   221,   222,     0,   224,   225,   226,   227,     0,
     228,   229,   230,   231,   232,   233,     0,   234,     0,   236,
     237,   238,   239,   240,   241,   242,     0,   243,     0,   244,
       0,     0,   247,     0,   249,   250,   251,   252,   253,     0,
       0,   254,     0,   256,     0,     0,   258,   259,   260,     0,
       0,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,     0,   286,   287,   288,   289,
     290,   291,     0,   292,   293,     0,   295,     0,   296,   297,
     298,   299,   300,   301,     0,   302,   303,     0,     0,   304,
     305,   306,     0,     0,   307,   308,     0,   310,     0,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
       0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,     0,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,     0,   361,   362,     0,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
       0,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,     0,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,   411,     0,   413,
     414,   415,   416,   417,     0,   418,   419,     0,     0,   420,
     421,   422,   423,   424,     0,   425,   426,   427,   428,   429,
     430,   431,     0,     0,   432,   433,   434,   435,   436,     0,
       0,   437,   438,   439,   440,   441,   442,   443,     0,   444,
       0,   446,   447,   448,   449,   450,     0,     0,   451,     0,
       0,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   498,     0,  2320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,     0,   109,   110,   111,   112,   113,     0,
     115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
       0,   123,   124,   125,   126,   127,     0,   128,   129,   130,
     131,   132,     0,     0,     0,   134,   135,   136,   137,   138,
       0,   140,   141,   142,     0,   143,   144,   145,   146,   147,
     148,     0,     0,   150,   151,   152,     0,     0,     0,     0,
       0,     0,     0,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,     0,   178,   179,   180,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,     0,   200,     0,
     201,   202,   203,   204,     0,   205,     0,   206,     0,     0,
       0,   209,   210,   211,     0,   213,     0,   214,     0,     0,
       0,   215,   216,     0,   217,   218,   219,   220,   221,   222,
       0,   224,   225,   226,   227,     0,   228,   229,   230,   231,
     232,   233,     0,   234,     0,   236,   237,   238,   239,   240,
     241,   242,     0,   243,     0,   244,     0,     0,   247,     0,
     249,   250,   251,   252,   253,     0,     0,   254,     0,   256,
       0,     0,   258,   259,   260,     0,     0,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,     0,   286,   287,   288,   289,   290,   291,     0,   292,
     293,     0,   295,     0,   296,   297,   298,   299,   300,   301,
       0,   302,   303,     0,     0,   304,   305,   306,     0,     0,
     307,   308,     0,   310,     0,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,     0,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,     0,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,     0,   361,   362,
       0,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,     0,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,     0,   390,
     391,   392,   393,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,   411,     0,   413,   414,   415,   416,   417,
       0,   418,   419,     0,     0,   420,   421,   422,   423,   424,
       0,   425,   426,   427,   428,   429,   430,   431,     0,     0,
     432,   433,   434,   435,   436,     0,     0,   437,   438,   439,
     440,   441,   442,   443,     0,   444,     0,   446,   447,   448,
     449,   450,     0,     0,   451,     0,     0,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   498,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    92,    93,    94,    95,    96,    97,
      98,    99,     0,   100,   101,   102,     0,     0,     0,     0,
       0,     0,     0,   103,   104,     0,   105,   106,   107,     0,
     109,   110,   111,   112,   113,     0,   115,   116,     0,   117,
     118,   119,   120,   121,   122,     0,     0,   123,   124,   125,
     126,   127,     0,   128,   129,   130,   131,   132,     0,     0,
       0,   134,   135,   136,   137,   138,     0,   140,   141,   142,
       0,   143,   144,   145,   146,   147,   148,     0,     0,   150,
     151,   152,     0,     0,     0,     0,     0,     0,     0,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,     0,
     164,     0,   165,   166,   167,   168,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,     0,     0,   178,   179,
     180,   181,   182,   183,     0,   184,   185,   186,     0,   187,
     188,   189,     0,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,     0,   200,     0,   201,   202,   203,   204,
       0,   205,     0,   206,     0,     0,     0,   209,   210,   211,
       0,   213,     0,   214,     0,     0,     0,   215,   216,     0,
     217,   218,   219,   220,   221,   222,     0,   224,   225,   226,
     227,     0,   228,   229,   230,   231,   232,   233,     0,   234,
       0,   236,   237,   238,   239,   240,   241,   242,     0,   243,
       0,   244,     0,     0,   247,     0,   249,   250,   251,   252,
     253,     0,     0,   254,     0,   256,     0,     0,   258,   259,
     260,     0,     0,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,     0,   286,   287,
     288,   289,   290,   291,     0,   292,   293,     0,   295,     0,
     296,   297,   298,   299,   300,   301,     0,   302,   303,     0,
       0,   304,   305,   306,     0,     0,   307,   308,     0,   310,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,     0,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,     0,   361,   362,     0,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,     0,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,     0,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,   411,
       0,   413,   414,   415,   416,   417,     0,   418,   419,     0,
       0,   420,   421,   422,   423,   424,     0,   425,   426,   427,
     428,   429,   430,   431,     0,     0,   432,   433,   434,   435,
     436,     0,     0,   437,   438,   439,   440,   441,   442,   443,
       0,   444,     0,   446,   447,   448,   449,   450,     0,     0,
     451,     0,     0,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   498,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,     0,   109,   110,   111,   112,
     113,     0,   115,   116,     0,   117,   118,   119,   120,   121,
     122,     0,     0,   123,   124,   125,   126,   127,     0,   128,
     129,   130,   131,   132,     0,     0,     0,   134,   135,   136,
     137,   138,     0,   140,   141,   142,     0,   143,   144,   145,
     146,   147,   148,     0,     0,   150,   151,   152,     0,     0,
       0,     0,     0,     0,     0,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,     0,   164,     0,   165,   166,
     167,   168,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,     0,   178,   179,   180,   181,   182,   183,
       0,   184,   185,   186,     0,   187,   188,   189,     0,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,     0,
     200,     0,   201,   202,   203,   204,     0,   205,     0,   206,
       0,     0,     0,   209,   210,   211,     0,   213,     0,   214,
       0,     0,     0,   215,   216,     0,   217,   218,   219,   220,
     221,   222,     0,   224,   225,   226,   227,     0,   228,   229,
     230,   231,   232,   233,     0,   234,     0,   236,   237,   238,
     239,   240,   241,   242,     0,   243,     0,   244,     0,     0,
     247,     0,   249,   250,   251,   252,   253,     0,     0,   254,
       0,   256,     0,     0,   258,   259,   560,     0,     0,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,     0,   286,   287,   288,   289,   290,   291,
       0,   292,   293,     0,   295,     0,   296,   297,   298,   299,
     300,   301,     0,   302,   303,     0,     0,   304,   305,   306,
       0,     0,   307,   308,     0,   310,     0,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,     0,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,     0,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,     0,
     361,   362,     0,   364,   365,   366,   367,   368,   369,   370,
     371,   561,   373,   374,   375,   376,   377,   378,     0,   379,
     380,   381,   382,   562,     0,   384,   385,   386,   387,   388,
       0,   390,   391,   392,   393,     0,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,   411,     0,   413,   414,   415,
     416,   417,     0,   563,   419,     0,     0,   420,   421,   422,
     423,   424,     0,   425,   426,   427,   428,   429,   430,   431,
       0,     0,   432,   433,   434,   435,   436,     0,     0,   437,
     438,   439,   440,   441,   442,   443,     0,   444,     0,   446,
     447,   448,   449,   450,     0,     0,   451,     0,     0,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     498,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,     0,
     178,   179,   180,   181,   182,   183,     0,   184,   185,   186,
       0,   187,   188,   189,     0,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
     203,   204,     0,   205,     0,   206,     0,     0,     0,   209,
     210,   211,     0,   213,     0,   214,     0,     0,     0,   215,
     216,     0,   217,   218,   219,   220,   221,   222,     0,   224,
     225,   226,   227,     0,   228,   229,   230,   231,   232,   233,
       0,   234,     0,   236,   237,   238,   239,   240,   241,   242,
       0,   243,     0,   244,     0,     0,   247,     0,   249,   250,
     251,   252,   253,     0,     0,   254,     0,   256,     0,     0,
     258,   259,   260,     0,     0,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     286,   287,   288,   289,   290,   291,     0,   292,   293,     0,
     295,     0,   296,   297,   298,   299,   300,   301,     0,   302,
     303,     0,     0,   304,   305,   306,     0,     0,   307,   308,
       0,   310,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,     0,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   576,
     347,     0,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,     0,   361,   362,     0,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,     0,   379,   380,   381,   382,   383,
       0,   384,   385,   386,   387,   388,     0,   390,   391,   392,
     393,     0,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,   411,     0,   413,   414,   415,   416,   417,     0,   418,
     419,     0,     0,   420,   421,   422,   423,   424,     0,   425,
     426,   427,   428,   429,   430,   431,     0,     0,   432,   433,
     434,   435,   436,     0,     0,   437,   438,   439,   440,   441,
     442,   443,     0,   444,     0,   446,   447,   448,   449,   450,
       0,     0,   451,     0,     0,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   498,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    92,    93,    94,    95,    96,    97,    98,    99,
       0,   100,   101,   102,     0,     0,     0,     0,     0,     0,
       0,   103,   104,     0,   105,   106,   107,     0,   109,   110,
     111,   112,   113,     0,   115,   116,     0,   117,   118,   119,
     120,   121,   122,     0,     0,   123,   124,   125,   126,   127,
       0,   128,   129,   130,   131,   132,     0,     0,     0,   134,
     135,   136,   137,   138,     0,   140,   141,   142,     0,   143,
     144,   145,   146,   147,   148,     0,     0,   150,   151,   152,
       0,     0,     0,     0,     0,     0,     0,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,     0,   164,     0,
     165,   166,   167,   168,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,     0,   178,   179,   180,   181,
     182,   183,     0,   184,   185,   186,     0,   187,   188,   189,
       0,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,     0,   200,     0,   201,   202,   203,   204,     0,   205,
       0,   206,     0,     0,     0,   209,   210,   211,     0,   213,
       0,   214,     0,     0,     0,   215,   216,     0,   217,   218,
     219,   220,   221,   609,     0,   224,   225,   226,   227,     0,
     228,   229,   230,   231,   232,   233,     0,   234,     0,   236,
     237,   238,   239,   240,   241,   242,     0,   243,     0,   244,
       0,     0,   247,     0,   249,   250,   251,   252,   253,     0,
       0,   254,     0,   256,     0,     0,   258,   259,   260,     0,
       0,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,     0,   286,   287,   288,   289,
     290,   291,     0,   292,   293,     0,   295,     0,   296,   297,
     298,   299,   300,   301,     0,   302,   303,     0,     0,   304,
     305,   306,     0,     0,   307,   308,     0,   310,     0,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
       0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,     0,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,     0,   361,   362,     0,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
       0,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,     0,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,   411,     0,   413,
     414,   415,   416,   417,     0,   418,   419,     0,     0,   420,
     421,   422,   423,   424,     0,   425,   426,   427,   428,   429,
     430,   431,     0,     0,   432,   433,   434,   435,   436,     0,
       0,   437,   438,   439,   440,   441,   442,   443,     0,   444,
       0,   446,   447,   448,   449,   450,     0,     0,   451,     0,
       0,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   498,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,     0,   109,   110,   111,   112,   113,     0,
     115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
       0,   123,   124,   125,   126,   127,     0,   128,   129,   130,
     131,   132,     0,     0,     0,   134,   135,   136,   137,   138,
       0,   140,   141,   142,     0,   143,   144,   145,   146,   147,
     148,     0,     0,   150,   151,   152,     0,     0,     0,     0,
       0,     0,     0,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,     0,   178,   179,   180,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,     0,   200,     0,
     201,   202,   203,   204,     0,   205,     0,   206,     0,     0,
       0,   209,   210,   211,     0,   213,     0,   214,     0,     0,
       0,   215,   216,     0,   217,   218,   219,   220,   221,   612,
       0,   224,   225,   226,   227,     0,   228,   229,   230,   231,
     232,   233,     0,   234,     0,   236,   237,   238,   239,   240,
     241,   242,     0,   243,     0,   244,     0,     0,   247,     0,
     249,   250,   251,   252,   253,     0,     0,   254,     0,   256,
       0,     0,   258,   259,   260,     0,     0,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,     0,   286,   287,   288,   289,   290,   291,     0,   292,
     293,     0,   295,     0,   296,   297,   298,   299,   300,   301,
       0,   302,   303,     0,     0,   304,   305,   306,     0,     0,
     307,   308,     0,   310,     0,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,     0,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,     0,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,     0,   361,   362,
       0,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,     0,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,     0,   390,
     391,   392,   393,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,   411,     0,   413,   414,   415,   416,   417,
       0,   418,   419,     0,     0,   420,   421,   422,   423,   424,
       0,   425,   426,   427,   428,   429,   430,   431,     0,     0,
     432,   433,   434,   435,   436,     0,     0,   437,   438,   439,
     440,   441,   442,   443,     0,   444,     0,   446,   447,   448,
     449,   450,     0,     0,   451,     0,     0,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   498,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    92,    93,    94,    95,    96,    97,
      98,    99,     0,   100,   101,   102,     0,     0,     0,     0,
       0,     0,     0,   103,   104,     0,   105,   106,   107,     0,
     109,   110,   111,   112,   113,     0,   115,   116,     0,   117,
     118,   119,   120,   121,   122,     0,     0,   123,   124,   125,
     126,   127,     0,   128,   129,   130,   131,   132,     0,     0,
       0,   134,   135,   136,   137,   138,     0,   140,   141,   142,
       0,   143,   144,   145,   146,   147,   148,     0,     0,   150,
     151,   152,     0,     0,     0,     0,     0,     0,     0,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,     0,
     164,     0,   165,   166,   167,   168,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,     0,     0,   178,   179,
     180,   181,   182,   183,     0,   184,   185,   186,     0,   187,
     188,   189,     0,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,     0,   200,     0,   201,   202,   203,   204,
       0,   205,     0,   206,     0,     0,     0,   209,   210,   211,
       0,   213,     0,   214,     0,     0,     0,   215,   216,     0,
     217,   218,   219,   220,   221,   616,     0,   224,   225,   226,
     227,     0,   228,   229,   230,   231,   232,   233,     0,   234,
       0,   236,   237,   238,   239,   240,   241,   242,     0,   243,
       0,   244,     0,     0,   247,     0,   249,   250,   251,   252,
     253,     0,     0,   254,     0,   256,     0,     0,   258,   259,
     260,     0,     0,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,     0,   286,   287,
     288,   289,   290,   291,     0,   292,   293,     0,   295,     0,
     296,   297,   298,   299,   300,   301,     0,   302,   303,     0,
       0,   304,   305,   306,     0,     0,   307,   308,     0,   310,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,     0,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,     0,   361,   362,     0,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,     0,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,     0,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,   411,
       0,   413,   414,   415,   416,   417,     0,   418,   419,     0,
       0,   420,   421,   422,   423,   424,     0,   425,   426,   427,
     428,   429,   430,   431,     0,     0,   432,   433,   434,   435,
     436,     0,     0,   437,   438,   439,   440,   441,   442,   443,
       0,   444,     0,   446,   447,   448,   449,   450,     0,     0,
     451,     0,     0,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   498,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,     0,   109,   110,   111,   112,
     113,     0,   115,   116,     0,   117,   118,   119,   120,   121,
     122,     0,     0,   123,   124,   125,   126,   127,     0,   128,
     129,   130,   131,   132,     0,     0,     0,   134,   135,   136,
     137,   138,     0,   140,   141,   142,     0,   143,   144,   145,
     146,   147,   148,     0,     0,   150,   151,   152,     0,     0,
       0,     0,     0,     0,     0,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,     0,   164,     0,   165,   166,
     167,   168,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,     0,   178,   179,   180,   181,   182,   183,
       0,   184,   185,   186,     0,   187,   188,   189,     0,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,     0,
     200,     0,   201,   202,   203,   204,     0,   205,     0,   206,
       0,     0,     0,   209,   210,   211,     0,   213,     0,   214,
       0,     0,     0,   215,   216,     0,   217,   218,   219,   220,
     221,   635,     0,   224,   225,   226,   227,     0,   228,   229,
     230,   231,   232,   233,     0,   234,     0,   236,   237,   238,
     239,   240,   241,   242,     0,   243,     0,   244,     0,     0,
     247,     0,   249,   250,   251,   252,   253,     0,     0,   254,
       0,   256,     0,     0,   258,   259,   260,     0,     0,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,     0,   286,   287,   288,   289,   290,   291,
       0,   292,   293,     0,   295,     0,   296,   297,   298,   299,
     300,   301,     0,   302,   303,     0,     0,   304,   305,   306,
       0,     0,   307,   308,     0,   310,     0,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,     0,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,     0,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,     0,
     361,   362,     0,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,     0,   379,
     380,   381,   382,   383,     0,   384,   385,   386,   387,   388,
       0,   390,   391,   392,   393,     0,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,   411,     0,   413,   414,   415,
     416,   417,     0,   418,   419,     0,     0,   420,   421,   422,
     423,   424,     0,   425,   426,   427,   428,   429,   430,   431,
       0,     0,   432,   433,   434,   435,   436,     0,     0,   437,
     438,   439,   440,   441,   442,   443,     0,   444,     0,   446,
     447,   448,   449,   450,     0,     0,   451,     0,     0,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     498,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,     0,
     178,   179,   180,   181,   182,   183,     0,   184,   185,   186,
       0,   187,   188,   189,     0,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
     203,   204,     0,   205,     0,   206,     0,     0,     0,   209,
     210,   211,     0,   213,     0,   214,     0,     0,     0,   215,
     216,     0,   217,   218,   219,   220,   221,   651,     0,   224,
     225,   226,   227,     0,   228,   229,   230,   231,   232,   233,
       0,   234,     0,   236,   237,   238,   239,   240,   241,   242,
       0,   243,     0,   244,     0,     0,   247,     0,   249,   250,
     251,   252,   253,     0,     0,   254,     0,   256,     0,     0,
     258,   259,   260,     0,     0,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     286,   287,   288,   289,   290,   291,     0,   292,   293,     0,
     295,     0,   296,   297,   298,   299,   300,   301,     0,   302,
     303,     0,     0,   304,   305,   306,     0,     0,   307,   308,
       0,   310,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,     0,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,     0,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,     0,   361,   362,     0,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,     0,   379,   380,   381,   382,   383,
       0,   384,   385,   386,   387,   388,     0,   390,   391,   392,
     393,     0,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,   411,     0,   413,   414,   415,   416,   417,     0,   418,
     419,     0,     0,   420,   421,   422,   423,   424,     0,   425,
     426,   427,   428,   429,   430,   431,     0,     0,   432,   433,
     434,   435,   436,     0,     0,   437,   438,   439,   440,   441,
     442,   443,     0,   444,     0,   446,   447,   448,   449,   450,
       0,     0,   451,     0,     0,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   498,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    92,    93,    94,    95,    96,    97,    98,    99,
       0,   100,   101,   102,     0,     0,     0,     0,     0,     0,
       0,   103,   104,     0,   105,   106,   107,     0,   109,   110,
     111,   112,   113,     0,   115,   116,     0,   117,   118,   119,
     120,   121,   122,     0,     0,   123,   124,   125,   126,   127,
       0,   128,   129,   130,   131,   132,     0,     0,     0,   134,
     135,   136,   137,   138,     0,   140,   141,   142,     0,   143,
     144,   145,   146,   147,   148,     0,     0,   150,   151,   152,
       0,     0,     0,     0,     0,     0,     0,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,     0,   164,     0,
     165,   166,   167,   168,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,     0,   178,   179,   180,   181,
     182,   183,     0,   184,   185,   186,     0,   187,   188,   189,
       0,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,     0,   200,     0,   201,   202,   203,   204,     0,   205,
       0,   206,     0,     0,     0,   209,   210,   211,     0,   213,
       0,   214,     0,     0,     0,   215,   216,     0,   217,   218,
     219,   220,   221,   655,     0,   224,   225,   226,   227,     0,
     228,   229,   230,   231,   232,   233,     0,   234,     0,   236,
     237,   238,   239,   240,   241,   242,     0,   243,     0,   244,
       0,     0,   247,     0,   249,   250,   251,   252,   253,     0,
       0,   254,     0,   256,     0,     0,   258,   259,   260,     0,
       0,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,     0,   286,   287,   288,   289,
     290,   291,     0,   292,   293,     0,   295,     0,   296,   297,
     298,   299,   300,   301,     0,   302,   303,     0,     0,   304,
     305,   306,     0,     0,   307,   308,     0,   310,     0,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
       0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,     0,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,     0,   361,   362,     0,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
       0,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,     0,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,   411,     0,   413,
     414,   415,   416,   417,     0,   418,   419,     0,     0,   420,
     421,   422,   423,   424,     0,   425,   426,   427,   428,   429,
     430,   431,     0,     0,   432,   433,   434,   435,   436,     0,
       0,   437,   438,   439,   440,   441,   442,   443,     0,   444,
       0,   446,   447,   448,   449,   450,     0,     0,   451,     0,
       0,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   498,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,     0,   109,   110,   111,   112,   113,     0,
     115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
       0,   123,   124,   125,   126,   127,     0,   128,   129,   130,
     131,   132,     0,     0,     0,   134,   135,   136,   137,   138,
       0,   140,   141,   142,     0,   143,   144,   145,   146,   147,
     148,     0,     0,   150,   151,   152,     0,     0,     0,     0,
       0,     0,     0,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,     0,   178,   179,   180,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,     0,   200,     0,
     201,   202,   203,   204,     0,   205,     0,   206,     0,     0,
       0,   209,   210,   211,     0,   213,     0,   214,     0,     0,
       0,   215,   216,     0,   217,   218,   219,   220,   221,   658,
       0,   224,   225,   226,   227,     0,   228,   229,   230,   231,
     232,   233,     0,   234,     0,   236,   237,   238,   239,   240,
     241,   242,     0,   243,     0,   244,     0,     0,   247,     0,
     249,   250,   251,   252,   253,     0,     0,   254,     0,   256,
       0,     0,   258,   259,   260,     0,     0,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,     0,   286,   287,   288,   289,   290,   291,     0,   292,
     293,     0,   295,     0,   296,   297,   298,   299,   300,   301,
       0,   302,   303,     0,     0,   304,   305,   306,     0,     0,
     307,   308,     0,   310,     0,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,     0,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,     0,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,     0,   361,   362,
       0,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,     0,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,     0,   390,
     391,   392,   393,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,   411,     0,   413,   414,   415,   416,   417,
       0,   418,   419,     0,     0,   420,   421,   422,   423,   424,
       0,   425,   426,   427,   428,   429,   430,   431,     0,     0,
     432,   433,   434,   435,   436,     0,     0,   437,   438,   439,
     440,   441,   442,   443,     0,   444,     0,   446,   447,   448,
     449,   450,     0,     0,   451,     0,     0,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   498,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    92,    93,    94,    95,    96,    97,
      98,    99,     0,   100,   101,   102,     0,     0,     0,     0,
       0,     0,     0,   103,   104,     0,   105,   106,   107,     0,
     109,   110,   111,   112,   113,     0,   115,   116,     0,   117,
     118,   119,   120,   121,   122,     0,     0,   123,   124,   125,
     126,   127,     0,   128,   129,   130,   131,   132,     0,     0,
       0,   134,   135,   136,   137,   138,     0,   140,   141,   142,
       0,   143,   144,   145,   146,   147,   148,     0,     0,   150,
     151,   152,     0,     0,     0,     0,     0,     0,     0,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,     0,
     164,     0,   165,   166,   167,   168,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,     0,     0,   178,   179,
     180,   181,   182,   183,     0,   184,   185,   186,     0,   187,
     188,   189,     0,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,     0,   200,     0,   201,   202,   203,   204,
       0,   205,     0,   206,     0,     0,     0,   209,   210,   211,
       0,   213,     0,   214,     0,     0,     0,   215,   216,     0,
     217,   218,   219,   220,   221,   222,     0,   224,   225,   226,
     227,     0,   228,   229,   230,   231,   232,   233,     0,   234,
       0,   236,   237,   238,   239,   240,   241,   242,     0,   243,
       0,   244,     0,     0,   247,     0,   249,   250,   251,   252,
     253,     0,     0,   254,     0,   256,     0,     0,   258,   259,
     260,     0,     0,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,     0,   286,   287,
     288,   289,   290,   291,     0,   292,   293,     0,   295,     0,
     296,   297,   298,   299,   300,   301,     0,   302,   303,     0,
       0,   304,   305,   306,     0,     0,   307,   308,     0,   310,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,     0,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,     0,   361,   362,     0,   364,   365,   366,
     367,   368,   369,   370,   371,   561,   373,   374,   375,   376,
     377,   378,     0,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,     0,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,   411,
       0,   413,   414,   415,   416,   417,     0,   563,   419,     0,
       0,   420,   421,   422,   423,   424,     0,   425,   426,   427,
     428,   429,   430,   431,     0,     0,   432,   433,   434,   435,
     436,     0,     0,   437,   438,   439,   440,   441,   442,   443,
       0,   444,     0,   446,   447,   448,   449,   450,     0,     0,
     451,     0,     0,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   498,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,     0,   109,   110,   111,   112,
     113,     0,   115,   116,     0,   117,   118,   119,   120,   121,
     122,     0,     0,   123,   124,   125,   126,   127,     0,   128,
     129,   130,   131,   132,     0,     0,     0,   134,   135,   136,
     137,   138,     0,   140,   141,   142,     0,   143,   144,   145,
     146,   147,   148,     0,     0,   150,   151,   152,     0,     0,
       0,     0,     0,     0,     0,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,     0,   164,     0,   165,   166,
     167,   168,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,     0,   178,   179,   180,   181,   182,   183,
       0,   184,   185,   186,     0,   187,   188,   189,     0,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,     0,
     200,     0,   201,   202,   203,   204,     0,   205,     0,   206,
       0,     0,     0,   209,   210,   211,     0,   213,     0,   214,
       0,     0,     0,   215,   216,     0,   217,   218,   219,   220,
     221,   980,     0,   224,   225,   226,   227,     0,   228,   229,
     230,   231,   232,   233,     0,   234,     0,   236,   237,   238,
     239,   240,   241,   242,     0,   243,     0,   244,     0,     0,
     247,     0,   249,   250,   251,   252,   253,     0,     0,   254,
       0,   256,     0,     0,   258,   259,   260,     0,     0,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,     0,   286,   287,   288,   289,   290,   291,
       0,   292,   293,     0,   295,     0,   296,   297,   298,   299,
     300,   301,     0,   302,   303,     0,     0,   304,   305,   306,
       0,     0,   307,   308,     0,   310,     0,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,     0,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,     0,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,     0,
     361,   362,     0,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,     0,   379,
     380,   381,   382,   383,     0,   384,   385,   386,   387,   388,
       0,   390,   391,   392,   393,     0,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,   411,     0,   413,   414,   415,
     416,   417,     0,   418,   419,     0,     0,   420,   421,   422,
     423,   424,     0,   425,   426,   427,   428,   429,   430,   431,
       0,     0,   432,   433,   434,   435,   436,     0,     0,   437,
     438,   439,   440,   441,   442,   443,     0,   444,     0,   446,
     447,   448,   449,   450,     0,     0,   451,     0,     0,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     498,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,     0,
     178,   179,   180,   181,   182,   183,     0,   184,   185,   186,
       0,   187,   188,   189,     0,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
     203,   204,     0,   205,     0,   206,     0,     0,     0,   209,
     210,   211,     0,   213,     0,   214,     0,     0,     0,   215,
     216,     0,   217,   218,   219,   220,   221,   982,     0,   224,
     225,   226,   227,     0,   228,   229,   230,   231,   232,   233,
       0,   234,     0,   236,   237,   238,   239,   240,   241,   242,
       0,   243,     0,   244,     0,     0,   247,     0,   249,   250,
     251,   252,   253,     0,     0,   254,     0,   256,     0,     0,
     258,   259,   260,     0,     0,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     286,   287,   288,   289,   290,   291,     0,   292,   293,     0,
     295,     0,   296,   297,   298,   299,   300,   301,     0,   302,
     303,     0,     0,   304,   305,   306,     0,     0,   307,   308,
       0,   310,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,     0,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,     0,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,     0,   361,   362,     0,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,     0,   379,   380,   381,   382,   383,
       0,   384,   385,   386,   387,   388,     0,   390,   391,   392,
     393,     0,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,   411,     0,   413,   414,   415,   416,   417,     0,   418,
     419,     0,     0,   420,   421,   422,   423,   424,     0,   425,
     426,   427,   428,   429,   430,   431,     0,     0,   432,   433,
     434,   435,   436,     0,     0,   437,   438,   439,   440,   441,
     442,   443,     0,   444,     0,   446,   447,   448,   449,   450,
       0,     0,   451,     0,     0,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   498,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    92,    93,    94,    95,    96,    97,    98,    99,
       0,   100,   101,   102,     0,     0,     0,     0,     0,  1244,
       0,   103,   104,     0,   105,   106,   107,     0,   109,   110,
     111,   112,   113,     0,   115,   116,     0,   117,   118,   119,
     120,   121,   122,     0,     0,   123,   124,   125,   126,   127,
       0,   128,   129,   130,   131,   132,     0,     0,     0,   134,
     135,   136,   137,   138,     0,   140,   141,   142,     0,   143,
     144,   145,   146,   147,   148,     0,     0,   150,   151,   152,
       0,     0,     0,     0,     0,     0,     0,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,     0,   164,     0,
     165,   166,   167,   168,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,     0,   178,   179,   180,   181,
     182,   183,     0,   184,   185,   186,     0,   187,   188,   189,
       0,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,     0,   200,     0,   201,   202,   203,   204,     0,   205,
       0,   206,     0,     0,     0,   209,   210,   211,     0,   213,
       0,   214,     0,     0,     0,   215,   216,     0,   217,   218,
     219,   220,   221,   222,     0,   224,   225,   226,   227,     0,
     228,   229,   230,   231,   232,   233,     0,   234,     0,   236,
     237,   238,   239,   240,   241,   242,     0,   243,     0,   244,
       0,     0,   247,     0,   249,   250,   251,   252,   253,     0,
       0,   254,     0,   256,     0,     0,   258,   259,   260,     0,
       0,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,     0,   286,   287,   288,   289,
     290,   291,     0,   292,   293,     0,   295,     0,   296,   297,
     298,   299,   300,   301,     0,   302,   303,     0,     0,   304,
     305,   306,     0,     0,   307,   308,     0,   310,     0,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
       0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,     0,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,     0,   361,   362,     0,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
       0,   379,   380,   381,   382,   383,     0,     0,   385,   386,
     387,   388,     0,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,   411,     0,   413,
     414,   415,   416,   417,     0,   418,   419,     0,     0,   420,
     421,   422,   423,   424,     0,   425,   426,   427,   428,   429,
     430,   431,     0,     0,   432,   433,   434,   435,   436,     0,
       0,   437,   438,   439,   440,   441,   442,   443,     0,   444,
       0,   446,   447,   448,   449,   450,     0,     0,   451,     0,
       0,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   498,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,     0,   109,   110,   111,   112,   113,     0,
     115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
       0,   123,   124,   125,   126,   127,     0,   128,   129,   130,
     131,   132,     0,     0,     0,   134,   135,   136,   137,   138,
       0,   140,   141,   142,     0,   143,   144,   145,   146,   147,
     148,     0,     0,   150,   151,   152,     0,     0,     0,     0,
       0,     0,     0,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,     0,   178,   179,   180,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,     0,   200,     0,
     201,   202,   203,   204,     0,   205,     0,   206,     0,     0,
       0,   209,   210,   211,     0,   213,     0,   214,     0,     0,
       0,   215,   216,     0,   217,   218,   219,   220,   221,  1338,
       0,   224,   225,   226,   227,     0,   228,   229,   230,   231,
     232,   233,     0,   234,     0,   236,   237,   238,   239,   240,
     241,   242,     0,   243,     0,   244,     0,     0,   247,     0,
     249,   250,   251,   252,   253,     0,     0,   254,     0,   256,
       0,     0,   258,   259,   260,     0,     0,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,     0,   286,   287,   288,   289,   290,   291,     0,   292,
     293,     0,   295,     0,   296,   297,   298,   299,   300,   301,
       0,   302,   303,     0,     0,   304,   305,   306,     0,     0,
     307,   308,     0,   310,     0,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,     0,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,     0,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,     0,   361,   362,
       0,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,     0,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,     0,   390,
     391,   392,   393,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,   411,     0,   413,   414,   415,   416,   417,
       0,   418,   419,     0,     0,   420,   421,   422,   423,   424,
       0,   425,   426,   427,   428,   429,   430,   431,     0,     0,
     432,   433,   434,   435,   436,     0,     0,   437,   438,   439,
     440,   441,   442,   443,     0,   444,     0,   446,   447,   448,
     449,   450,     0,     0,   451,     0,     0,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   498,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    92,    93,    94,    95,    96,    97,
      98,    99,     0,   100,   101,   102,     0,     0,     0,     0,
       0,     0,     0,   103,   104,     0,   105,   106,   107,     0,
     109,   110,   111,   112,   113,     0,   115,   116,     0,   117,
     118,   119,   120,   121,   122,     0,     0,   123,   124,   125,
     126,   127,     0,   128,   129,   130,   131,   132,     0,     0,
       0,   134,   135,   136,   137,   138,     0,   140,   141,   142,
       0,   143,   144,   145,   146,   147,   148,     0,     0,   150,
     151,   152,     0,     0,     0,     0,     0,     0,     0,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,     0,
     164,     0,   165,   166,   167,   168,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,     0,     0,   178,   179,
     180,   181,   182,   183,     0,   184,   185,   186,     0,   187,
     188,   189,     0,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,     0,   200,     0,   201,   202,   203,   204,
       0,   205,     0,   206,     0,     0,     0,   209,   210,   211,
       0,   213,     0,   214,     0,     0,     0,   215,   216,     0,
     217,   218,   219,   220,   221,  1354,     0,   224,   225,   226,
     227,     0,   228,   229,   230,   231,   232,   233,     0,   234,
       0,   236,   237,   238,   239,   240,   241,   242,     0,   243,
       0,   244,     0,     0,   247,     0,   249,   250,   251,   252,
     253,     0,     0,   254,     0,   256,     0,     0,   258,   259,
     260,     0,     0,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,     0,   286,   287,
     288,   289,   290,   291,     0,   292,   293,     0,   295,     0,
     296,   297,   298,   299,   300,   301,     0,   302,   303,     0,
       0,   304,   305,   306,     0,     0,   307,   308,     0,   310,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,     0,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,     0,   361,   362,     0,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,     0,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,     0,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,   411,
       0,   413,   414,   415,   416,   417,     0,   418,   419,     0,
       0,   420,   421,   422,   423,   424,     0,   425,   426,   427,
     428,   429,   430,   431,     0,     0,   432,   433,   434,   435,
     436,     0,     0,   437,   438,   439,   440,   441,   442,   443,
       0,   444,     0,   446,   447,   448,   449,   450,     0,     0,
     451,     0,     0,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   498,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
     104,     0,   105,   106,   107,     0,   109,   110,   111,   112,
     113,     0,   115,   116,     0,   117,   118,   119,   120,   121,
     122,     0,     0,   123,   124,   125,   126,   127,     0,   128,
     129,   130,   131,   132,     0,     0,     0,   134,   135,   136,
     137,   138,     0,   140,   141,   142,     0,   143,   144,   145,
     146,   147,   148,     0,     0,   150,   151,   152,     0,     0,
       0,     0,     0,     0,     0,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,     0,   164,     0,   165,   166,
     167,   168,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,     0,   178,   179,   180,   181,   182,   183,
       0,   184,   185,   186,     0,   187,   188,   189,     0,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,     0,
     200,     0,   201,   202,   203,   204,     0,   205,     0,   206,
       0,     0,     0,   209,   210,   211,     0,   213,     0,   214,
       0,     0,     0,   215,   216,     0,   217,   218,   219,   220,
     221,  1627,     0,   224,   225,   226,   227,     0,   228,   229,
     230,   231,   232,   233,     0,   234,     0,   236,   237,   238,
     239,   240,   241,   242,     0,   243,     0,   244,     0,     0,
     247,     0,   249,   250,   251,   252,   253,     0,     0,   254,
       0,   256,     0,     0,   258,   259,   260,     0,     0,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,     0,   286,   287,   288,   289,   290,   291,
       0,   292,   293,     0,   295,     0,   296,   297,   298,   299,
     300,   301,     0,   302,   303,     0,     0,   304,   305,   306,
       0,     0,   307,   308,     0,   310,     0,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,     0,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,     0,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,     0,
     361,   362,     0,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,     0,   379,
     380,   381,   382,   383,     0,   384,   385,   386,   387,   388,
       0,   390,   391,   392,   393,     0,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,   411,     0,   413,   414,   415,
     416,   417,     0,   418,   419,     0,     0,   420,   421,   422,
     423,   424,     0,   425,   426,   427,   428,   429,   430,   431,
       0,     0,   432,   433,   434,   435,   436,     0,     0,   437,
     438,   439,   440,   441,   442,   443,     0,   444,     0,   446,
     447,   448,   449,   450,     0,     0,   451,     0,     0,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     498,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,     0,
     178,   179,   180,   181,   182,   183,     0,   184,   185,   186,
       0,   187,   188,   189,     0,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
     203,   204,     0,   205,     0,   206,     0,     0,     0,   209,
     210,   211,     0,   213,     0,   214,     0,     0,     0,   215,
     216,     0,   217,   218,   219,   220,   221,  1639,     0,   224,
     225,   226,   227,     0,   228,   229,   230,   231,   232,   233,
       0,   234,     0,   236,   237,   238,   239,   240,   241,   242,
       0,   243,     0,   244,     0,     0,   247,     0,   249,   250,
     251,   252,   253,     0,     0,   254,     0,   256,     0,     0,
     258,   259,   260,     0,     0,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     286,   287,   288,   289,   290,   291,     0,   292,   293,     0,
     295,     0,   296,   297,   298,   299,   300,   301,     0,   302,
     303,     0,     0,   304,   305,   306,     0,     0,   307,   308,
       0,   310,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,     0,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,     0,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,     0,   361,   362,     0,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,     0,   379,   380,   381,   382,   383,
       0,   384,   385,   386,   387,   388,     0,   390,   391,   392,
     393,     0,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,   411,     0,   413,   414,   415,   416,   417,     0,   418,
     419,     0,     0,   420,   421,   422,   423,   424,     0,   425,
     426,   427,   428,   429,   430,   431,     0,     0,   432,   433,
     434,   435,   436,     0,     0,   437,   438,   439,   440,   441,
     442,   443,     0,   444,     0,   446,   447,   448,   449,   450,
       0,     0,   451,     0,     0,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   498,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    92,    93,    94,    95,    96,    97,    98,    99,
       0,   100,   101,   102,     0,     0,     0,     0,     0,     0,
       0,   103,   104,     0,   105,   106,   107,     0,   109,   110,
     111,   112,   113,     0,   115,   116,     0,   117,   118,   119,
     120,   121,   122,     0,     0,   123,   124,   125,   126,   127,
       0,   128,   129,   130,   131,   132,     0,     0,     0,   134,
     135,   136,   137,   138,     0,   140,   141,   142,     0,   143,
     144,   145,   146,   147,   148,     0,     0,   150,   151,   152,
       0,     0,     0,     0,     0,     0,     0,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,     0,   164,     0,
     165,   166,   167,   168,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,     0,   178,   179,   180,   181,
     182,   183,     0,   184,   185,   186,     0,   187,   188,   189,
       0,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,     0,   200,     0,   201,   202,   203,   204,     0,   205,
       0,   206,     0,     0,     0,   209,   210,   211,     0,   213,
       0,   214,     0,     0,     0,   215,   216,     0,   217,   218,
     219,   220,   221,  1641,     0,   224,   225,   226,   227,     0,
     228,   229,   230,   231,   232,   233,     0,   234,     0,   236,
     237,   238,   239,   240,   241,   242,     0,   243,     0,   244,
       0,     0,   247,     0,   249,   250,   251,   252,   253,     0,
       0,   254,     0,   256,     0,     0,   258,   259,   260,     0,
       0,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,     0,   286,   287,   288,   289,
     290,   291,     0,   292,   293,     0,   295,     0,   296,   297,
     298,   299,   300,   301,     0,   302,   303,     0,     0,   304,
     305,   306,     0,     0,   307,   308,     0,   310,     0,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
       0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,     0,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,     0,   361,   362,     0,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
       0,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,     0,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,   411,     0,   413,
     414,   415,   416,   417,     0,   418,   419,     0,     0,   420,
     421,   422,   423,   424,     0,   425,   426,   427,   428,   429,
     430,   431,     0,     0,   432,   433,   434,   435,   436,     0,
       0,   437,   438,   439,   440,   441,   442,   443,     0,   444,
       0,   446,   447,   448,   449,   450,     0,     0,   451,     0,
       0,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   498,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,     0,   109,   110,   111,   112,   113,     0,
     115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
       0,   123,   124,   125,   126,   127,     0,   128,   129,   130,
     131,   132,     0,     0,     0,   134,   135,   136,   137,   138,
       0,   140,   141,   142,     0,   143,   144,   145,   146,   147,
     148,     0,     0,   150,   151,   152,     0,     0,     0,     0,
       0,     0,     0,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,     0,   178,   179,   180,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,     0,   200,     0,
     201,   202,   203,   204,     0,   205,     0,   206,     0,     0,
       0,   209,   210,   211,     0,   213,     0,   214,     0,     0,
       0,   215,   216,     0,   217,   218,   219,   220,   221,  2261,
       0,   224,   225,   226,   227,     0,   228,   229,   230,   231,
     232,   233,     0,   234,     0,   236,   237,   238,   239,   240,
     241,   242,     0,   243,     0,   244,     0,     0,   247,     0,
     249,   250,   251,   252,   253,     0,     0,   254,     0,   256,
       0,     0,   258,   259,   260,     0,     0,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,     0,   286,   287,   288,   289,   290,   291,     0,   292,
     293,     0,   295,     0,   296,   297,   298,   299,   300,   301,
       0,   302,   303,     0,     0,   304,   305,   306,     0,     0,
     307,   308,     0,   310,     0,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,     0,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,     0,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,     0,   361,   362,
       0,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,     0,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,     0,   390,
     391,   392,   393,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,   411,     0,   413,   414,   415,   416,   417,
       0,   418,   419,     0,     0,   420,   421,   422,   423,   424,
       0,   425,   426,   427,   428,   429,   430,   431,     0,     0,
     432,   433,   434,   435,   436,     0,     0,   437,   438,   439,
     440,   441,   442,   443,     0,   444,     0,   446,   447,   448,
     449,   450,     0,     0,   451,     0,     0,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,  1034,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    92,    93,    94,    95,    96,    97,
      98,    99,     0,   100,   101,   102,     0,     0,     0,     0,
       0,     0,     0,   103,   104,     0,   105,   106,   107,   108,
     109,   110,   111,     0,  1035,   114,  1036,  1037,     0,   117,
     118,   119,   120,   121,   122,     0,     0,   123,   124,  1038,
    1039,   127,     0,   128,   129,   130,   131,     0,     0,   133,
       0,   134,   135,   136,   137,   138,   139,   140,   141,   142,
       0,   143,   144,   145,   146,   147,   148,     0,   149,   150,
     151,   152,     0,     0,     0,   153,     0,     0,     0,   154,
     155,   156,   157,   158,   159,   160,  1040,  1041,   163,     0,
     164,     0,   165,   166,   167,   168,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,     0,     0,   178,   179,
     709,   181,   182,   183,     0,   184,   185,   186,     0,   187,
     188,   189,     0,   190,   191,   192,   193,     0,   195,   196,
     197,   198,     0,     0,   200,     0,   201,   202,  1042,   204,
       0,   205,     0,   206,   207,     0,   208,   209,   210,   211,
     212,   213,     0,   214,     0,     0,     0,     0,   216,     0,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,     0,   228,   229,   230,   231,   232,   233,     0,   234,
     235,     0,   237,   238,   239,   240,  1043,  1044,     0,  1045,
       0,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,     0,     0,   254,   255,   256,   257,     0,   258,   259,
     260,     0,     0,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,  1046,   285,  1047,   287,
     288,   289,   290,     0,     0,   292,   293,   294,   295,     0,
       0,   297,  1048,   299,   300,   301,     0,   302,   303,     0,
       0,   304,   305,   306,     0,     0,   307,     0,   309,   310,
     311,     0,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,     0,   323,   324,     0,   326,   327,     0,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,  1049,   344,   345,   346,   347,     0,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,     0,   361,   362,   363,   364,   365,   366,
    1050,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,     0,   379,   380,   381,   382,   383,     0,   384,
    1051,   386,   387,   388,   389,   390,   391,  1052,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,  1053,   407,     0,     0,   409,   410,     0,   411,
     412,   413,   414,   415,   416,   417,     0,  1054,  1055,     0,
       0,   420,   421,     0,   423,     0,     0,   425,   426,   427,
     428,   429,   430,   431,     0,     0,   432,   433,   434,   435,
     436,     0,     0,   437,   438,   439,   440,   441,     0,  1056,
       0,   444,   445,   446,   447,   448,   449,   450,     0,     0,
     451,     0,     0,   452,   453,   454,   455,   456,   457,   498,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     469,   470,   471,   472,     0,    92,    93,    94,    95,    96,
      97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
       0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
       0,   109,   110,   111,   112,   113,     0,   115,   116,     0,
     117,   118,   119,   120,   121,   122,     0,     0,   123,   124,
     125,   126,   127,     0,   128,   129,   130,   131,   132,     0,
       0,     0,   134,   135,   136,   137,   138,     0,   140,   141,
     142,     0,   143,   144,   145,   146,   147,   148,     0,     0,
     150,   151,   152,     0,     0,     0,     0,     0,     0,     0,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
       0,   164,     0,   165,   166,   167,   168,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,     0,     0,   178,
     179,   180,   181,   182,   183,     0,   184,   185,   186,     0,
     187,   188,   189,     0,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,     0,   200,     0,   201,   202,   203,
     204,     0,   205,     0,   206,     0,     0,     0,   209,   210,
     211,     0,   213,     0,   214,     0,     0,     0,   215,   216,
       0,   217,   218,   219,   220,   221,   222,     0,   224,   225,
     226,   227,     0,   228,   229,   230,   231,   232,   233,     0,
     234,     0,   236,   237,   238,   239,   240,   241,   242,     0,
     243,     0,   244,     0,     0,   247,     0,   249,   250,   251,
     252,   253,     0,     0,   254,     0,   256,     0,     0,   258,
     259,   260,     0,     0,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,     0,   286,
     287,   288,   289,   290,   291,     0,   292,   293,     0,   295,
       0,   296,   297,   298,   299,   300,   301,     0,   302,   303,
       0,     0,   304,   305,   306,     0,     0,   307,   308,     0,
     310,     0,   312,   313,   314,   315,   316,   317,   318,     0,
     320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,   332,   333,   334,   335,   336,   337,
     338,   339,   340,     0,   342,   343,   344,   345,   346,   347,
       0,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,     0,   361,   362,     0,   364,   365,
     366,   367,     0,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,     0,   379,   380,   381,   382,   383,     0,
     384,   385,   386,   387,   388,     0,   390,   391,   392,   393,
       0,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,     0,
     411,     0,   413,   414,   415,   416,   417,     0,   418,   419,
       0,     0,   420,   421,   422,   423,   424,     0,   425,   426,
     427,   428,   429,   430,   431,     0,     0,   432,   433,   434,
     435,   436,     0,     0,   437,   438,   439,   440,   441,   442,
     443,     0,   444,     0,   446,   447,   448,   449,   450,     0,
       0,   451,     0,     0,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,  1034,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    92,    93,    94,    95,    96,    97,    98,    99,     0,
     100,   101,   102,     0,     0,     0,     0,     0,     0,     0,
     103,   104,     0,   105,   106,   107,   108,   109,   110,   111,
       0,  1035,   114,  1036,  1037,     0,   117,   118,   119,   120,
     121,   122,     0,     0,   123,   124,  1038,  1039,   127,     0,
     128,   129,   130,   131,     0,     0,   133,     0,   134,   135,
     136,   137,   138,   139,   140,   141,   142,     0,   143,   144,
     145,   146,   147,   148,     0,   149,   150,   151,   152,     0,
       0,     0,   153,     0,     0,     0,   154,   155,   156,   157,
     158,   159,   160,  1040,  1041,   163,     0,   164,     0,   165,
     166,   167,   168,   169,   170,     0,   171,   172,   173,   174,
     175,   176,   177,     0,     0,   178,   179,   709,   181,   182,
     183,     0,   184,   185,   186,     0,   187,   188,   189,     0,
     190,   191,   192,   193,     0,   195,   196,   197,   198,     0,
       0,   200,     0,   201,   202,  1042,   204,     0,   205,     0,
     206,   207,     0,   208,   209,   210,   211,   212,   213,     0,
     214,     0,     0,     0,     0,   216,     0,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,     0,   228,
     229,   230,   231,   232,   233,     0,   234,   235,     0,   237,
     238,   239,   240,  1043,  1044,     0,  1045,     0,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,     0,     0,
     254,   255,   256,   257,     0,   258,   259,   260,     0,     0,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,  1046,   285,  1047,   287,   288,   289,   290,
       0,     0,   292,   293,   294,   295,     0,     0,   297,  1048,
     299,   300,   301,     0,   302,   303,     0,     0,   304,   305,
     306,     0,     0,   307,     0,   309,   310,   311,     0,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,     0,
     323,   324,     0,   326,   327,     0,   329,   330,   331,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,  1049,   344,   345,   346,   347,     0,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
       0,   361,   362,   363,   364,   365,   366,     0,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,     0,
     379,   380,   381,   382,   383,     0,   384,     0,   386,   387,
     388,   389,   390,   391,  1052,   393,     0,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,     0,
     407,     0,     0,   409,   410,     0,   411,   412,   413,   414,
     415,   416,   417,     0,  1054,  1055,     0,     0,   420,   421,
       0,   423,     0,     0,   425,   426,   427,   428,   429,   430,
     431,     0,     0,   432,   433,   434,   435,   436,     0,     0,
     437,   438,   439,   440,   441,     0,  1056,     0,   444,   445,
     446,   447,   448,   449,   450,     0,     0,   451,     0,     0,
     452,   453,   454,   455,   456,   457,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   469,   470,   471,
     472
};

static const yytype_int16 yycheck[] =
{
       6,    34,   613,   861,   603,    11,   620,   628,    50,    15,
       0,   559,     6,  1105,  1174,    21,    22,    23,   669,   835,
      26,   678,   669,    29,   656,   848,    32,    33,   525,   860,
    1071,     6,     0,     0,   571,     0,     0,   745,    44,   706,
     707,  1565,    16,   978,   532,   734,   978,   526,    16,   840,
     978,   978,  1008,  1577,    44,  1907,  1974,   724,  1643,  1133,
    1645,   837,  1998,   874,  1464,  1465,    29,   530,  1637,  1469,
    1094,   807,  1129,  1130,  1522,  1841,  1094,     0,  1869,    85,
      86,    87,    88,    89,     0,  1618,    20,  1094,    33,   865,
    2006,   622,     5,  1094,    11,  2010,  1073,     5,   532,    11,
      15,   532,     5,    15,  2266,  1505,  1506,  1634,    52,    15,
      22,   677,    50,   613,    15,   615,     9,   617,  1179,     5,
      32,    33,     5,   780,  1895,    88,    52,     3,  2267,   780,
      13,    14,   620,    15,  2318,    15,  1222,  2271,   531,     3,
      40,  1224,   170,   170,    73,     5,    40,    58,     5,   119,
       5,   171,     5,    13,    14,   575,    13,    14,   119,    27,
     996,  2254,   121,   116,     5,   215,    34,     5,     9,    92,
     633,     9,  2422,     9,    86,     9,     5,  1704,     5,    58,
      15,   669,   139,  1257,  1893,   669,   106,  2371,   676,   620,
       4,   848,   676,  2455,     5,     9,     0,   819,   849,   534,
     600,   852,   853,   217,    23,  2341,    11,  1930,    67,   746,
     170,   600,    75,    75,   221,     3,     4,     5,  1745,  1746,
     282,     9,    85,    85,     5,   241,  2555,     4,  1051,   284,
     290,  1875,     9,  1811,  2518,  2169,    41,   774,   669,   209,
     660,     9,   138,   147,   290,   676,    58,     3,    11,   355,
     306,  2216,    58,   306,  2633,   270,   787,   162,   241,   266,
     116,   106,   199,   273,    37,    85,   267,    87,    73,    89,
     117,  2455,     3,   757,    27,    31,    32,   162,    41,   878,
     673,  2379,     3,   367,    27,  2736,    11,   131,    92,  1945,
    1784,   402,   332,  1874,   782,   783,   780,   454,   782,   783,
     356,  2440,  2400,   327,   484,    11,   872,   873,   167,   213,
      73,   107,    59,   457,   130,   495,    41,   136,  1812,   403,
      67,   328,   801,   160,   744,   436,   114,  2263,    27,   114,
      30,   107,   356,  2099,  1782,    34,   149,   481,  1412,  2668,
     225,   217,   499,  2134,   360,   192,    11,  2138,    73,    27,
     123,   782,   783,   217,    54,   266,    34,  2493,  2809,   443,
     265,   284,   119,  2019,   985,   849,  1055,    68,   852,   853,
     377,   381,   484,  1040,  1041,  1944,  2755,   360,   131,   136,
     117,  1048,   996,   114,   197,   497,   290,   414,   131,   495,
    1790,  1791,  1792,  1793,  1051,   232,  1796,  1797,  1798,  1799,
    1800,  1801,  1802,  1803,  1804,  1805,   222,  2591,    73,   829,
     450,   495,  1026,   169,  1941,   171,  1943,   433,   274,  2703,
     435,   266,   988,   360,  2358,   348,   214,   827,   435,  2394,
    1522,   368,  1248,   495,   490,   279,   347,   490,   827,   499,
     495,  2539,   338,    11,  2773,  1845,  1846,   235,   449,   499,
     433,  2635,  2161,   499,   414,   192,     5,   484,   317,  2552,
     295,   796,    82,   374,  2714,   435,   403,  2190,   347,   288,
     497,   499,  2734,  1331,   435,   495,  1133,   483,   437,   495,
     284,  2125,  2060,   403,   490,  1107,   439,   501,   235,   274,
    1582,   497,   482,  1304,   500,   495,   453,   497,   995,   532,
     400,  1587,  2029,  1000,  2422,  1588,   400,   127,   996,  1006,
    1567,  1347,   495,   450,   482,   482,   384,   482,   482,   525,
     526,   527,  1010,  1002,  1138,   429,   345,   346,  2294,   495,
    2669,  1015,  1016,   446,   457,   347,  2670,  2328,  1026,   392,
     393,   347,  2333,  2124,   348,  2336,  1077,  2683,  1562,   582,
    2734,   414,   414,   241,   560,   374,   562,   495,   532,   316,
    1621,   603,   568,   531,   493,   996,  2728,   482,   497,  1380,
     576,   430,   487,   496,   491,   498,  1010,     0,  2349,  1010,
     495,   487,   495,   589,  1121,   493,   487,   495,   500,   497,
    1212,   498,   495,  1124,  1125,  1026,  1610,   587,  1575,   573,
    1257,   494,   608,  1087,  1088,   487,   540,   487,   542,   495,
    1176,  1095,   495,  1097,  1098,   527,  1009,   493,  2554,   587,
     587,  2206,   587,   587,  2193,   501,  1277,   561,  1112,   493,
    1114,   576,   638,   639,   640,   495,  1287,   501,   495,  1290,
     495,   585,  1716,  1127,  1141,   608,   367,  1178,   459,  2565,
    1138,  1265,  2567,   457,   495,  2188,  1076,   495,   494,   585,
     494,   114,  1273,   483,   576,  1085,   495,   171,   495,  1089,
     481,   587,   486,   487,    48,  2319,   682,   497,   459,  1753,
     457,   301,   403,   447,   495,   384,   491,   499,  1108,  1109,
    1782,   447,   496,   499,   498,  1769,  2462,  2488,   486,   487,
     481,  1300,  1301,  1302,   481,   673,   384,  1138,   164,   486,
     487,   744,  1363,  1345,   495,  1789,  1363,  1349,   486,   487,
    1352,   241,   443,  2774,  2172,   488,   489,   490,   491,  2256,
     407,   454,   409,  1347,  1758,   669,   457,  1221,  1222,  2675,
    1758,  1759,   676,   495,  1818,   433,  1246,  1414,   568,   176,
    1706,  1758,  1759,  1760,   221,  1412,  1757,    75,   105,    23,
     481,   486,   487,   488,   489,   490,   491,    85,   343,   589,
     114,  1828,  2823,  1273,   495,  1263,   499,  1265,   784,   332,
      44,  1489,   488,   489,   490,   491,  1283,  2838,   408,   131,
     332,  1288,  1292,  1277,   800,   801,  2714,  1297,   302,   266,
      75,   175,  1660,  1287,   499,   171,  1290,   495,   235,   160,
      85,   131,  2381,   747,   165,   368,   116,   191,   638,   639,
     640,   416,   196,   757,   830,   831,   368,   833,   834,   835,
       4,    67,  1263,  1569,  1265,     9,   770,   160,   158,   205,
     360,   847,  1464,  1465,   297,   189,   780,  1469,   782,   783,
     403,  1557,  1558,  1867,   220,  1869,   312,   231,   864,  1347,
    1323,   403,   868,   229,    23,   460,    11,   830,   812,   813,
      29,   815,  2808,  1684,   179,  1363,   380,   437,   114,  1363,
     160,   232,  1974,  1505,  1506,   165,   812,   813,   800,   815,
    1378,  2291,   496,  1669,  1378,   499,    41,   450,    27,   246,
    1974,   864,   459,   203,  2756,  2757,   131,   254,   450,   232,
     377,  1619,   437,   433,   367,   346,  1347,  1401,   486,   487,
     488,   489,   490,   491,   481,   269,  1717,   269,    73,  1720,
     281,     8,  1363,   158,    11,   495,   247,   279,   174,    16,
      17,    18,  1370,   374,  2529,   199,  1374,  1378,  1376,    78,
     403,   241,   232,     5,   274,  2524,     8,    86,   281,   279,
    2706,  2707,    14,  2815,   784,  1564,   266,   973,   435,   269,
     495,   459,    24,   979,     4,   495,    28,   136,   269,     9,
     407,   987,   409,   274,   493,   351,   115,   459,   497,   995,
     443,   419,  2392,   481,  1000,   450,  1002,  1003,  1418,  1005,
    1006,   281,  1008,   363,   457,   379,   433,   495,  1640,   481,
    1642,   831,   490,  1482,   834,  1484,  1485,   495,   618,   497,
     488,     8,    93,   495,    11,   495,   494,   847,   481,    16,
      17,    18,   490,   269,    92,   326,  1010,   495,   274,   497,
    2143,  1009,   495,  2146,   269,  2791,    33,     8,   868,   274,
      11,   407,   488,   409,   279,    16,    17,    18,   494,  1716,
     189,  2461,     4,  1483,     4,  2000,  2022,     9,  2000,     9,
     360,   200,  2000,  2000,   495,   495,   497,   677,   678,  1700,
    2172,   317,  1566,  1073,   241,   496,   496,  1734,   499,   499,
    1510,  1003,   496,  1005,   478,   499,  1753,  1955,   334,  1105,
     171,   421,  1586,  1587,   496,  1073,  1073,   499,  1073,  1073,
    2634,   431,  1769,   496,   695,   696,   499,   219,   496,   196,
    2134,   499,   497,  1954,  2138,  1739,  1942,  1816,  1817,   288,
    1550,    23,  1789,   496,   205,  1141,   499,    29,   478,   720,
     217,   241,   496,   433,   493,   499,   495,   284,   497,   220,
    2224,  1857,  1858,  1859,  1860,  1643,  1644,  1645,   229,   979,
    1094,  1818,  1953,  1994,  1955,   169,    23,  1173,  1790,  1791,
    1792,  1793,    29,   488,  1796,  1797,  1798,  1799,  1800,  1801,
    1802,  1803,  1804,  1805,  1841,   499,   345,  1193,  1008,  1195,
    2350,   262,     8,   495,   430,    11,   421,   457,  2239,   459,
      16,    17,    18,   360,   496,   495,   431,   499,   496,   286,
    2284,  2735,  1643,  1644,  1645,   374,   499,    33,  1926,   496,
    1194,    23,   499,  1845,  1846,   496,  2795,    29,   499,  1235,
     217,   496,  1729,   496,  2758,   478,   499,  1243,  1244,   597,
     219,   599,  1248,  1249,   136,    54,  1734,   496,   848,  1183,
     499,  1739,  1242,  1259,  1260,  1261,  1262,   407,  1264,   409,
     360,   407,   391,   409,  1270,   394,  1272,  2139,   495,  2141,
    1754,  1755,   872,   873,   874,   170,   433,  1283,  1284,   136,
     351,   440,  1288,  1289,   215,   187,   188,  1293,  1294,  1295,
    1296,   152,  1298,  1299,  1825,   496,   341,   496,   499,   286,
     499,  2825,   496,  1734,  2318,   499,    64,    65,  1739,   367,
      31,    32,  1318,   152,  2328,   496,  1322,  1974,   499,  2333,
     152,   496,  2336,  1974,   499,   286,    23,   152,   496,  1335,
    2422,   499,    29,   433,   136,   496,   496,  1249,   495,   499,
     496,   495,  1879,   499,  1334,   403,     8,  1259,  2422,  1261,
     252,   253,  1264,  1173,    16,    17,    18,  2371,  1270,  1973,
    1272,  1975,   496,     3,  2222,   499,   252,   253,    23,    13,
      14,    92,  1284,  1193,    29,  1195,  1382,  1289,  2194,  2420,
     269,  1293,  1294,  1295,  1296,   443,  1298,  1299,   988,  2021,
    1989,   496,    13,    14,   499,   495,   288,   496,    81,   457,
     499,   217,  1933,  1823,   450,   482,   483,   484,  2231,   486,
     487,   488,   489,   490,   491,  1235,   496,   496,  2492,   499,
     499,  2495,   496,   481,   496,   499,   495,   499,   560,  1363,
     562,   288,   461,  1466,   152,  1369,   497,   495,   152,   136,
     496,  2455,  2099,   499,  1378,   152,   147,   284,   176,   341,
      23,  1051,   496,   345,    93,   499,    29,  1038,  1039,   160,
     403,  2621,   364,   365,   165,   496,  1047,   495,   499,   496,
     286,   199,   499,   496,  2488,    36,   499,  1510,   364,   365,
     230,   136,   374,  1971,   341,  1973,   288,  1975,   345,   496,
    1974,   496,   499,   495,   499,   482,   483,   484,  1318,   486,
     487,   488,   489,   490,   491,   496,   496,   235,   499,   499,
     496,   496,   213,   499,   499,     5,  1522,   374,  1099,  1100,
       5,   482,   483,   484,   495,   486,   487,   488,   489,   490,
     491,   232,   171,  1133,    36,   355,   356,   165,   496,   341,
    1971,   499,  1973,   345,  1975,   355,   356,   496,   440,  1555,
     499,  2035,   496,    55,   495,   499,  1562,   496,   355,   356,
     499,   289,  2213,   136,   355,   356,   205,  2224,  1562,   313,
     496,   495,   374,   499,  2231,   496,  1176,  2591,   499,   495,
     281,   220,  1615,   440,   495,  1575,   495,  1562,     5,   290,
     229,   288,   496,  2225,  2226,   499,   496,  2428,   496,   499,
       5,   499,   496,   105,  1610,   499,  1612,  1575,  1575,  1615,
    1575,  1575,  1618,   256,   257,   495,  1610,   495,   367,  2150,
     495,  2635,  2714,   262,   286,   364,   365,  2284,  1634,   782,
     783,  2179,   495,   288,  2281,  1610,   678,  2294,   440,   495,
    2714,   495,     5,   495,   341,   284,   367,     5,   345,   495,
     495,  2182,   495,   495,   403,   458,    15,  1257,   215,   499,
      96,    36,   244,   230,   165,   281,   482,   483,   484,  2291,
     486,   487,   488,   489,   490,   491,   165,   374,   678,   407,
     279,   409,   403,   374,   495,   414,   341,   495,  1694,    85,
     345,   414,   499,  1699,   443,   414,   198,    54,  1704,  1705,
    1706,  1707,   430,  1709,  1304,   433,    54,   259,   457,   151,
     414,   496,   351,  1647,   501,   288,   414,  1723,  2206,   374,
    2734,   457,   443,  1729,   152,    92,   447,   269,   429,  2213,
     269,   495,   481,    36,  2218,  1555,   457,    36,   497,  1745,
    1746,   446,  1732,   440,   246,   499,   495,   495,  2232,  2233,
     495,    35,   254,   495,  2421,   495,     9,   453,  1692,   412,
     481,   495,   412,    11,   266,  2422,   499,   412,   341,   495,
    2392,  2422,   345,   495,   495,  2206,  1782,   274,   414,   181,
    1380,   161,   170,   496,   495,   440,     3,   213,     6,   499,
     377,   221,   285,  2281,    36,  1707,   298,   499,   437,   437,
    1734,   374,   495,   108,   109,  2462,   848,  1741,   221,  1743,
     269,  1853,  1412,  1747,  1748,   221,   290,   496,  1851,   322,
     482,   483,   484,   450,   486,   487,   488,   489,   490,   491,
     282,   495,   404,   152,   152,  2492,  1869,   457,  2495,  2461,
     269,   284,   269,   284,   346,    36,    36,    35,   848,  1855,
    2281,   493,   493,   170,   414,   414,   414,  1863,  1864,  1865,
     414,  1867,   496,  1869,  1870,   496,   368,   440,  1874,  1875,
     499,  2470,   496,  1867,   496,  1869,   478,   496,   496,  1699,
    2547,   496,   187,   188,   497,  1705,  1706,   389,   496,  1709,
     496,   496,  1867,  2390,  1869,   478,   496,   478,   496,   496,
     496,   170,   495,  1723,   151,   414,   495,   495,   294,   495,
    1916,  2525,    36,   454,  2772,   480,   285,   285,   435,  2540,
     285,    36,   499,   454,   240,   367,   414,   443,  1934,  2413,
    2414,  1937,   284,   484,   269,  1941,  1942,  1943,  2422,  1945,
      55,   152,   495,   248,   249,   250,   251,   252,   253,   199,
     288,   256,   257,   678,   152,  1961,   152,  1963,   414,   414,
     414,   403,   496,   414,   496,   494,   496,   495,   282,   496,
    1976,  1977,  1978,  1979,  1980,  1981,  1982,  1983,  1984,  1985,
     457,   499,   284,    36,   152,   152,   274,   493,   496,   143,
     105,   170,    11,  1999,   496,  2001,  2475,   496,   496,   165,
     496,   443,     0,   495,   454,  2011,   170,   170,   403,  1051,
     496,   481,   495,  2019,  2493,   457,  2022,  2638,    16,   499,
     181,   496,    76,  2029,   496,  1937,   487,   496,  2018,     3,
     495,  2037,   442,   285,    83,   348,    34,  2525,   152,   481,
    1974,  2529,   495,  1863,  1864,  1865,    44,   174,  2545,  1961,
     424,  1051,    36,   495,    52,   495,   495,  2714,    79,   364,
     365,   437,  1996,  2714,  1976,  1977,  1978,  1979,  1980,  1981,
    1982,  1983,  1984,  1985,   499,   494,  2496,  2556,   494,   170,
       3,   496,   496,   198,  1684,   496,   495,   495,   495,   147,
     405,  1133,   496,   293,  2525,   220,  1916,   220,  2529,  2713,
      54,   495,   160,   184,   291,   495,  2112,   165,  2719,  2115,
    2116,  2117,  2118,   496,     3,     3,  1716,   496,  2124,  2125,
     367,  2127,   484,   848,  2130,  2604,   457,   201,  2134,   190,
     274,   246,  2138,  1133,  2631,   274,   414,   484,  2144,   254,
    2134,   414,   496,    36,  2138,   221,   495,   269,   106,   457,
     284,   266,   495,  1753,    36,   213,   403,   494,   170,  2134,
     303,   495,   495,  2138,   220,   297,  2172,    50,  2588,  1769,
     475,   476,   495,   456,   232,   487,   496,    85,  2184,  1999,
     132,  2001,  2188,   298,   334,   495,   495,   221,  2194,  1789,
     495,  2181,   114,  2183,   678,    36,   443,   152,    73,   495,
       8,   121,  2022,    11,   222,   152,    36,   496,   356,   356,
     457,    94,    54,  2219,    36,  1257,   495,   499,  1818,   495,
    2154,   495,  2156,   281,   437,  2713,   442,    73,   189,    36,
    2714,   346,   290,    41,   481,   367,   437,   120,   424,   404,
      48,  1841,    67,    67,   287,   499,    67,    36,   495,    73,
    2256,   495,   358,   368,   487,    12,   374,  1257,   141,   484,
    2266,    85,   145,   274,   189,    73,   244,   495,   424,    36,
    2276,   403,     3,   495,   389,  2265,   495,   287,   287,    12,
     495,   495,  2713,   166,   496,   487,   169,   496,     9,   266,
     114,   284,   116,   355,     9,  2115,  2116,  2117,  2118,     9,
     342,   494,   185,   201,   284,   284,    33,   496,   119,   435,
     495,   443,  2318,  2319,   532,   385,   494,  2323,     9,    22,
    2326,   496,  2328,   125,  2318,   457,  1051,  2333,   487,   334,
    2336,   334,  2338,  1010,  2328,  2341,   222,   145,   587,  2333,
     558,   559,  2336,  2318,  2716,  2351,  2798,  2281,  2532,   481,
     174,  2759,  2771,  2328,   835,  2445,  1632,   575,  2333,  1644,
    2011,  2336,  2713,   495,   848,  2371,  1694,   175,  2769,  2711,
    1412,   429,     8,  1629,  1974,    11,  1973,  2371,   800,   203,
      16,    17,    18,   191,  2390,  2391,   830,  1935,   196,  1579,
     775,   274,  2601,  2399,  1238,  2504,  2371,    33,   822,   282,
     618,   619,   620,   821,  2694,  1594,  1212,  1883,  1133,  2613,
    2155,  1237,  1412,  1610,  2125,  1869,  2140,  2423,  2424,  2489,
    1867,   824,  2591,   231,  2590,  2608,  1381,  2609,  1094,  2435,
    2692,  2437,  2693,  2439,  1094,   493,  1094,  1094,   496,   497,
    2679,  2431,   660,   326,  1582,   269,  2452,  1528,  2347,  2455,
     274,   669,  1420,  1170,  2435,  1310,  2841,  1525,   676,   677,
     678,  2455,  2807,  2496,  2583,  1866,  2456,  1889,  2158,  2475,
    2161,  2352,  1702,   995,  1194,   693,  2218,  2003,   286,  2391,
    2455,  1107,  2488,  1698,   482,  1996,  1739,  2493,  2422,  2281,
    1956,  1271,  1971,   317,  2488,  1638,  2502,  1378,  2184,  2099,
    1195,  1934,  2635,   721,  2710,    -1,  2367,    -1,    -1,  2515,
     334,  2423,  2424,  2488,    -1,    -1,    -1,  2523,    -1,    -1,
      -1,    -1,   740,   741,   742,    -1,   744,  2439,    -1,   678,
      -1,  2351,  1257,   531,   532,    -1,    -1,    -1,    -1,  2545,
      -1,    -1,    -1,     8,    -1,    -1,    11,   765,    -1,    -1,
    2556,    16,    17,    18,    -1,    -1,    -1,  2563,    -1,    -1,
      -1,    -1,    -1,    -1,   782,   783,    -1,  1051,    -1,    -1,
      -1,   379,    -1,    -1,  2564,    -1,    41,    -1,    -1,  2399,
      -1,   217,    -1,    48,   582,  2591,  1212,   585,    -1,   587,
      -1,    -1,    -1,    -1,  2600,    -1,   814,  2591,  2604,    -1,
     818,   819,  2608,  2515,    -1,   678,   430,    -1,    73,    -1,
      -1,   829,    -1,    -1,    -1,  2435,  2591,    -1,    -1,  2553,
      -1,    -1,    -1,    -1,  2224,  2631,  2632,  2633,    -1,  2635,
     848,  2231,  2452,    -1,    -1,   172,    -1,    -1,  2628,   176,
      -1,  2635,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1133,
     286,    -1,    -1,    -1,   872,   873,   874,    -1,  2664,    -1,
    2635,    -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   479,    -1,    -1,  1716,   673,    -1,  2683,   486,   487,
     488,   489,   490,   491,  2284,    -1,  2692,  1412,  2694,    -1,
      -1,    -1,    -1,    -1,  2294,    -1,    -1,    -1,   235,   848,
      -1,    -1,    -1,  2523,  2710,   242,    -1,    -1,    -1,    -1,
     175,  1753,   710,    -1,    -1,    -1,  1716,    -1,    -1,    -1,
      -1,  2727,  2728,    -1,    -1,    -1,   191,  1769,  2734,    -1,
      -1,   196,    -1,  2723,    -1,    -1,    -1,    -1,    -1,    -1,
    2734,    -1,    -1,  2563,    -1,    -1,   744,  1789,    -1,  2755,
      -1,    -1,   289,  1753,    -1,    -1,    -1,    -1,    -1,  2734,
      -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,    -1,  1769,
     988,    -1,    -1,  1257,    -1,   848,  1818,    -1,   996,    -1,
    2714,    -1,    -1,    -1,    -1,    -1,    -1,   324,    -1,  1789,
      -1,    -1,  1010,    -1,    -1,    -1,    -1,    -1,    -1,  1841,
      -1,  2807,    -1,    -1,    -1,    -1,    -1,    -1,  1026,    -1,
      -1,    -1,    -1,    -1,   812,   813,    -1,   815,  1818,    -1,
      -1,   286,  2422,   360,    -1,    -1,    -1,    -1,    -1,    -1,
    2836,    -1,    -1,  1051,  2840,    -1,    -1,    -1,  1464,  1465,
      -1,  1841,    -1,  1469,    -1,    -1,   482,   483,   484,    -1,
     486,   487,   488,   489,   490,   491,    -1,    -1,  1076,    -1,
      -1,    -1,  2462,    -1,  1082,    -1,    -1,  1085,    -1,    -1,
     407,  1089,   409,     8,    -1,    -1,    11,    -1,    -1,  1505,
    1506,    16,    17,    18,    -1,  1103,    -1,    -1,  1106,  1107,
    1108,  1109,  2492,   430,    -1,  2495,   433,    -1,  1116,  1117,
      -1,    -1,  1051,     8,    -1,    -1,    11,  2727,    -1,    -1,
    1128,    16,    17,    18,   379,  1133,  1134,  1135,  1136,  1137,
    1138,    -1,    -1,    -1,  1142,  1143,    -1,    -1,  1412,  1147,
      -1,    -1,  1974,  1151,    -1,    -1,  1154,  1155,  1156,  1157,
    1158,  1159,  1160,  1161,  1162,    -1,    -1,  1165,    -1,    -1,
      -1,  1169,    -1,    -1,  1172,    -1,  1174,    -1,  1176,    -1,
      -1,    -1,    -1,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1974,    -1,    -1,    -1,  1051,  1197,
      -1,    -1,    -1,    -1,  1133,    -1,    -1,  2807,    -1,    -1,
      -1,  1716,    -1,    -1,  1212,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1221,  1222,    -1,    -1,    -1,    -1,    -1,
      -1,  1009,    -1,    -1,   479,    -1,  2836,   482,   483,   484,
    2840,   486,   487,   488,   489,   490,   491,    -1,  1753,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1257,
      -1,    -1,    -1,    -1,  1769,  1263,    -1,  1265,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2099,    -1,    -1,
    1133,    -1,     8,    -1,  1789,    11,    -1,    -1,   108,   109,
      16,    17,    18,    -1,    -1,  1073,    -1,    -1,    -1,    -1,
      -1,    -1,   217,    -1,    -1,    -1,  1304,    33,    -1,  1307,
    1308,    -1,  1310,  1818,    -1,    -1,    -1,    -1,    -1,  2099,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1257,    -1,
      -1,    -1,   217,    -1,  2714,    -1,  1841,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1344,    -1,    -1,  1347,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1363,  1144,   187,   188,    -1,
      -1,   286,    -1,    -1,    -1,   108,   109,    -1,    -1,    -1,
    1378,    -1,  1380,    -1,  1790,  1791,  1792,  1793,    -1,    -1,
    1796,  1797,  1798,  1799,  1800,  1801,  1802,  1803,  1804,  1805,
      -1,   286,  2224,    -1,  1257,    -1,    -1,    -1,    -1,  2231,
      -1,    -1,    -1,    -1,  1412,    -1,    -1,    -1,    -1,    -1,
    1418,  1419,    -1,    -1,    -1,    -1,  1424,    -1,   248,   249,
     250,   251,   252,   253,    -1,    -1,   256,   257,    -1,  1845,
    1846,    -1,    -1,    -1,  2224,    -1,    -1,    -1,    -1,    -1,
      -1,  2231,  1716,    -1,   187,   188,    -1,    -1,    -1,    -1,
      -1,    -1,  2284,    -1,  1242,    -1,  1464,  1465,  1466,  1974,
       8,  1469,  2294,    11,    -1,    -1,    -1,    -1,    16,    17,
      18,    -1,    -1,  1412,  1482,  1483,  1484,  1485,    -1,  1753,
      -1,   217,  1490,    -1,    -1,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    41,  2284,  1769,    -1,  1505,  1506,    -1,
      48,    -1,  1510,    -1,  2294,   248,   249,   250,   251,   252,
     253,    -1,    -1,   256,   257,  1789,  1524,    -1,    -1,  1527,
      -1,  1529,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   364,   365,    -1,    -1,    -1,    -1,
      -1,    -1,  1550,    -1,  1818,    -1,  1334,    -1,    -1,  1412,
     286,    -1,    -1,    -1,  1562,    -1,    -1,   482,   483,   484,
      -1,   486,   487,   488,   489,   490,   491,  1841,    -1,    -1,
      -1,  1579,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,  2099,    -1,  1594,   482,   483,   484,
    2422,   486,   487,   488,   489,   490,   491,    -1,    -1,    -1,
      -1,    -1,  1610,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      41,    -1,    -1,    -1,    -1,    -1,    -1,    48,  1626,    -1,
      -1,   364,   365,    -1,    -1,    -1,    -1,   175,    -1,    -1,
    2462,    -1,  2422,    -1,    -1,  1643,  1644,  1645,    -1,    -1,
      -1,    -1,    73,   191,    -1,   475,   476,    -1,   196,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2492,    -1,    -1,  2495,    -1,    -1,    -1,    -1,    -1,   217,
     218,    -1,  2462,    -1,    -1,    -1,  1684,    -1,  1466,    -1,
      -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1974,    -1,  2492,    -1,    -1,  2495,    -1,    -1,  1716,  2224,
      -1,    -1,    -1,    -1,   145,    -1,  2231,    -1,    -1,    -1,
      -1,   269,  1510,    -1,   272,    -1,  1734,    -1,    -1,    -1,
      -1,  1739,   475,   476,    -1,    -1,    -1,    -1,   286,    -1,
    1528,   289,    -1,    36,   175,  1753,   482,   483,   484,     0,
     486,   487,   488,   489,   490,   491,  1544,    -1,  1766,    -1,
     191,  1769,    55,    -1,    -1,   196,    -1,    -1,  1776,  2284,
      -1,    -1,  1780,    -1,  1562,  1783,    -1,  1716,    -1,  2294,
      -1,  1789,  1790,  1791,  1792,  1793,    -1,  1575,  1796,  1797,
    1798,  1799,  1800,  1801,  1802,  1803,  1804,  1805,    -1,    -1,
     231,  1809,  1810,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1818,    -1,   105,    -1,  1753,  1823,    -1,    -1,    -1,    -1,
      -1,  1829,  1610,    -1,  1832,  2099,  1834,  1615,    -1,    -1,
    1769,   379,    -1,  1841,  1842,    -1,    -1,  1845,  1846,    -1,
      -1,    92,  1850,  1851,    -1,    -1,    -1,    -1,    -1,    -1,
    1789,    -1,    -1,  1716,    -1,   286,    -1,    -1,    -1,  1867,
      -1,  1869,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1880,    -1,    -1,  2291,    -1,    -1,    -1,  1818,
      -1,   174,  2714,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1753,    -1,    -1,    -1,    -1,    -1,   147,    -1,    -1,    -1,
      -1,    -1,  1841,    -1,    -1,   198,  1769,  2422,    -1,   160,
      -1,  1919,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
      -1,    -1,    -1,    -1,  2714,    -1,  1789,    -1,  1936,    -1,
     181,   479,    -1,   184,   482,   483,   484,    -1,   486,   487,
     488,   489,   490,   491,  1732,    -1,    -1,  2462,   379,    -1,
    2224,   499,    -1,   246,    -1,  1818,    -1,  2231,    -1,    -1,
      -1,   254,   213,  1971,    -1,  1973,  1974,  1975,    -1,     0,
      -1,    -1,    -1,   266,    -1,    -1,  2392,  2492,  1841,    -1,
    2495,   232,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    -1,    -1,   298,    -1,    -1,    -1,    -1,
    2284,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    55,    -1,
    2294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     281,    -1,    -1,   284,    -1,  1974,    -1,    -1,    -1,   290,
      -1,    -1,    -1,  2051,    -1,  2461,    -1,    -1,   479,    -1,
      -1,    -1,    -1,   346,    -1,   486,   487,   488,   489,   490,
     491,    92,    -1,  1851,    -1,    -1,    -1,    -1,   105,   106,
      -1,    -1,    -1,    -1,    -1,   368,    -1,   114,    -1,  1867,
      -1,  1869,    -1,    -1,    -1,  2093,  2094,    -1,    -1,    -1,
    2098,  2099,    -1,    -1,    -1,  2103,   389,   348,  2106,  2107,
      -1,    -1,    -1,  2111,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1974,    -1,    -1,     8,    -1,   147,    11,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2134,    -1,    -1,   160,
    2138,    -1,    -1,    -1,   165,    -1,    -1,   174,    -1,   170,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,  2422,    -1,
     181,    -1,   403,   184,    48,    -1,    -1,    -1,    -1,    -1,
    2099,   198,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2179,    -1,    -1,    -1,    -1,    -1,    -1,   429,    73,
      -1,    -1,   213,    -1,    -1,    -1,   437,    -1,  2462,    -1,
      -1,    -1,    -1,    -1,    -1,   558,   559,    -1,  2206,  2714,
      -1,   232,    -1,   454,    -1,   456,   457,  2215,    -1,   246,
      -1,    -1,    -1,    -1,    -1,    -1,  2224,   254,  2492,    -1,
      -1,  2495,    -1,  2231,    -1,    -1,    -1,    -1,    -1,   266,
    2018,    -1,   269,    -1,    -1,    -1,  2099,    -1,    -1,    -1,
      -1,    -1,   493,    -1,    -1,   496,   497,   498,    -1,    -1,
     281,   145,    -1,   284,    -1,   618,   619,    -1,    -1,   290,
      -1,   298,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2281,    -1,    -1,  2284,    -1,    -1,    -1,
      -1,   175,    -1,  2291,    -1,  2224,  2294,    -1,    -1,    -1,
      -1,    -1,  2231,    -1,  2302,  2303,    -1,   191,  2306,    -1,
      -1,    -1,   196,    -1,    -1,    -1,    -1,    -1,    -1,   346,
    2318,    -1,    -1,    -1,   677,    -1,    -1,   348,    -1,    -1,
    2328,    -1,    -1,    -1,    -1,  2333,    -1,    -1,  2336,    -1,
     693,   368,    -1,    -1,    -1,  2343,  2344,   231,    -1,    -1,
      -1,    -1,  2350,    -1,    -1,  2284,  2134,    -1,    -1,    -1,
    2138,    -1,   389,    -1,   391,  2294,    -1,   394,   721,    -1,
      -1,  2224,    -1,  2371,    -1,  2373,    -1,    -1,  2231,    -1,
      -1,    -1,   403,    -1,    -1,    -1,    -1,   740,   741,   742,
      -1,   744,    -1,    -1,  2392,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   286,  2181,    -1,  2183,     8,    -1,   429,    11,
      -1,    -1,   765,    -1,    -1,    -1,   437,     0,    -1,    -1,
      -1,    -1,    -1,    -1,  2422,    -1,    -1,    -1,    -1,    -1,
      -1,  2284,    -1,   454,    -1,   456,   457,    -1,    -1,    41,
      -1,  2294,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,
    2714,    -1,    -1,    -1,    -1,    -1,    -1,  2455,    -1,    -1,
      -1,   814,    -1,  2461,  2462,   818,   819,    -1,   495,    -1,
      -1,    73,   493,    -1,    -1,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2484,  2265,    -1,    -1,
    2488,    -1,    -1,  2422,  2492,   379,    -1,  2495,  2496,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2516,   872,
     873,   874,    -1,    -1,    -1,    -1,    -1,  2525,    -1,    -1,
      -1,  2529,  2530,  2462,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   145,    -1,    -1,    -1,    -1,    -1,    -1,
    2328,    -1,    -1,    -1,    -1,  2333,    -1,    -1,  2336,    -1,
      -1,    -1,    -1,  2492,   147,    -1,  2495,    -1,    -1,  2422,
      -1,    -1,   758,   175,    -1,    -1,    -1,   160,    -1,    -1,
      -1,    -1,   165,    -1,    -1,    -1,    -1,   170,    -1,   191,
    2588,    -1,    -1,  2591,   196,   479,    -1,    -1,   181,    -1,
      -1,   184,   486,   487,   488,   489,   490,   491,    -1,  2462,
      -1,   797,    -1,    -1,    -1,  2613,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2621,    -1,    -1,    -1,    -1,    -1,   231,
     213,    -1,    -1,    -1,    -1,   988,    -1,  2635,    -1,  2492,
      -1,    -1,  2495,    -1,    -1,    -1,    -1,    -1,    -1,   232,
      -1,    -1,    -1,  2431,  2652,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2456,    -1,
    2678,  2679,    -1,    -1,   286,    -1,    -1,    -1,    -1,    -1,
      -1,   877,    -1,    -1,    -1,    -1,   882,    -1,   281,    -1,
      -1,   284,    -1,    -1,    -1,    -1,    -1,   290,    -1,    -1,
    2488,    -1,    -1,    -1,    -1,  2713,  2714,    -1,  2496,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1082,
      -1,    -1,    -1,    -1,    -1,    -1,  2734,    -1,  2736,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1103,    -1,    -1,  1106,    -1,    -1,  1109,    -1,    -1,    -1,
      -1,    -1,    -1,  1116,  1117,   348,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1128,    -1,   379,    -1,    -1,
      -1,  1134,  1135,  1136,  1137,  2714,  2564,    -1,    -1,  1142,
    1143,    -1,    -1,    -1,  1147,    -1,    -1,    -1,  1151,    -1,
      -1,  1154,  1155,  1156,  1157,  1158,  1159,  1160,  1161,  1162,
      -1,  2809,  1165,    -1,    -1,    -1,  1169,    -1,    -1,  1172,
     403,  1174,    -1,  1176,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1197,    -1,   429,    -1,    -1,    -1,
    2628,    -1,    -1,    -1,   437,    -1,    -1,    -1,    -1,    -1,
      -1,  2714,    -1,    -1,    -1,    -1,    -1,    -1,  1221,  1222,
      -1,   454,    -1,   456,   457,    -1,    -1,   479,    -1,    -1,
      -1,    -1,    -1,    -1,   486,   487,   488,   489,   490,   491,
      -1,    -1,    -1,    -1,  1080,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     493,    -1,    -1,   496,   497,   498,  1102,    -1,    -1,    -1,
      -1,  1107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1118,  1119,  1120,    -1,  1122,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2723,    -1,    -1,    -1,    -1,
      -1,  1304,    -1,    -1,  1307,  1308,    -1,  1310,    -1,    -1,
      -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    -1,    16,    17,    18,    -1,
      -1,    -1,    -1,    -1,    -1,  1171,    -1,    -1,    -1,    -1,
      -1,  1344,    -1,    33,    -1,    -1,    36,    -1,    -1,    -1,
      -1,    41,    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1208,    -1,    -1,    -1,    -1,  1380,    -1,    -1,
       0,    -1,    -1,    73,  1220,    -1,    -1,    -1,    -1,  1225,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    -1,    29,
      -1,    31,    32,    -1,    -1,    -1,  1419,    -1,    -1,    -1,
      -1,  1424,    -1,    -1,    -1,    -1,    -1,    47,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    -1,    56,    -1,    -1,    -1,
      -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    79,
      -1,    -1,    -1,  1466,    -1,     8,    73,    -1,    11,    -1,
      90,    -1,    92,    16,    17,    18,    -1,    -1,    -1,  1482,
      -1,  1484,  1485,    -1,    -1,   175,    -1,  1490,    -1,    -1,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,
      -1,   191,    -1,    -1,   124,    48,   196,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   136,    -1,    -1,    -1,
      -1,  1524,    -1,   143,  1527,    -1,  1529,   217,   218,    -1,
      73,   151,    -1,   153,   154,    -1,    -1,    -1,   145,    -1,
      -1,   231,    -1,    -1,    -1,    -1,   166,     8,    -1,    -1,
      11,    -1,    -1,    -1,    -1,    16,    17,    18,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   175,    -1,
      -1,    -1,    33,    -1,    -1,   195,  1579,    -1,    -1,   269,
      41,    -1,   272,    -1,   191,    -1,  1422,    48,    -1,   196,
      -1,  1594,    -1,    -1,    -1,    -1,   286,    -1,    -1,   289,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1445,
      -1,    -1,    73,    -1,   234,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1626,   231,    -1,  1462,    -1,  1464,  1465,
      -1,  1467,   175,  1469,    -1,    -1,    -1,    -1,  1474,    -1,
      -1,    -1,    -1,    -1,    -1,  1481,    -1,    -1,   191,    -1,
    1486,    -1,    -1,   196,    -1,    -1,  1492,    -1,    -1,    -1,
    1496,  1497,  1498,  1499,    -1,    -1,    -1,    -1,    -1,  1505,
    1506,    -1,  1508,  1509,   217,   218,    -1,    -1,    -1,   286,
      -1,  1684,    -1,    -1,  1520,    -1,    -1,  1523,   231,   379,
      -1,   311,    -1,    -1,   314,  1531,  1532,  1533,  1534,  1535,
    1536,  1537,  1538,  1539,  1540,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1548,    -1,   175,    -1,  1552,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   345,   269,    -1,    -1,   272,
     191,    -1,    -1,   353,    -1,   196,    -1,  1573,    -1,    -1,
      -1,    -1,    -1,   286,    -1,    -1,    -1,   367,    -1,    -1,
      -1,    -1,    -1,    -1,   374,    -1,   217,   218,   378,    -1,
      -1,    -1,    -1,  1766,    -1,    -1,    -1,    -1,    -1,   389,
     231,    -1,   379,  1776,    -1,    -1,    -1,  1780,    -1,    -1,
    1783,    -1,    -1,   403,    -1,    -1,    -1,    -1,    -1,   479,
      -1,    -1,   482,   483,   484,    -1,   486,   487,   488,   489,
     490,   491,    -1,    -1,    -1,    -1,  1809,  1810,   269,    -1,
      -1,   272,    -1,    -1,    -1,    -1,    -1,    -1,   438,    -1,
      -1,    -1,    -1,   443,    -1,   286,  1829,    -1,   289,  1832,
      -1,  1834,    -1,    -1,    -1,    -1,   379,   457,    -1,  1842,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1850,  1851,    -1,
      -1,  1687,  1688,  1689,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   481,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   479,    -1,    -1,   495,    -1,  1880,   498,   486,
     487,   488,   489,   490,   491,    -1,    -1,    -1,    -1,  1725,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1919,    -1,   379,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1765,
      -1,    -1,    -1,  1936,    -1,  1771,   479,    -1,    -1,   482,
     483,   484,    -1,   486,   487,   488,   489,   490,   491,    -1,
    1786,  1787,  1788,    -1,  1790,  1791,  1792,  1793,    -1,    -1,
    1796,  1797,  1798,  1799,  1800,  1801,  1802,  1803,  1804,  1805,
    1806,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1826,    -1,    -1,    -1,  1830,  1831,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1844,  1845,
    1846,  1847,    -1,  1849,    -1,    -1,    -1,    -1,   479,    -1,
      -1,   482,   483,   484,    -1,   486,   487,   488,   489,   490,
     491,    -1,    -1,    -1,    -1,   496,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2051,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    -1,    16,    17,    18,
    2093,  2094,    -1,    -1,    -1,  2098,    -1,    -1,    -1,    -1,
    2103,    -1,  1938,  2106,  2107,    -1,    -1,     8,  2111,    -1,
      11,    -1,    41,    -1,    -1,    16,    17,    18,    -1,    48,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    33,    16,    17,    18,    -1,    -1,    -1,    -1,
      41,    -1,    -1,    -1,    73,    -1,    -1,    48,    -1,    -1,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,
      -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,
      -1,    -1,    73,    -1,    -1,    -1,  2179,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2215,    -1,    -1,    -1,  2052,    -1,    -1,    -1,
    2056,  2057,    -1,  2059,    -1,    -1,  2062,  2063,  2064,  2065,
      -1,    -1,    -1,  2069,  2070,  2071,  2072,  2073,  2074,  2075,
    2076,  2077,  2078,  2079,  2080,    -1,   175,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2092,    -1,    -1,  2095,
      -1,  2097,   191,    -1,    -1,  2101,    -1,   196,  2104,  2105,
      -1,    -1,  2108,  2109,   175,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   217,   218,
     191,     8,   175,    -1,    11,   196,    -1,    -1,    -1,  2302,
    2303,    -1,   231,  2306,    -1,    -1,    -1,    -1,   191,    -1,
      -1,    -1,    -1,   196,    -1,  2151,   217,   218,    -1,     8,
      -1,    -1,    11,    -1,    41,    -1,    -1,    -1,    -1,    -1,
     231,    48,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,
    2343,  2344,  2178,   272,    -1,    -1,    21,  2350,   231,    -1,
      -1,    -1,    41,    -1,    -1,  2191,    73,   286,    -1,    48,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   269,    -1,
    2373,   272,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    73,   286,   269,    -1,   289,   272,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      -1,    -1,    -1,   286,    -1,    -1,   289,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    89,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   145,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     379,  2287,    -1,    -1,    -1,  2291,    -1,    -1,   175,    -1,
    2296,  2297,  2298,    -1,    -1,  2301,    -1,    -1,  2304,  2305,
      -1,   146,    -1,  2309,   191,    -1,    -1,    -1,   379,   196,
     155,  2484,    -1,    -1,    -1,    -1,   175,    -1,    -1,    -1,
      -1,    -1,   167,  2496,    -1,    -1,   379,   172,    -1,    -1,
      -1,    -1,   191,    -1,    -1,    -1,    -1,   196,    -1,    -1,
      -1,    -1,    -1,  2516,   231,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   199,    -1,    -1,  2530,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     479,    -1,    -1,   482,   483,   484,  2392,   486,   487,   488,
     489,   490,   491,    -1,    -1,    -1,    -1,   242,    -1,   286,
     245,    -1,    -1,    -1,  2410,    -1,    -1,    -1,   479,    -1,
      -1,   482,   483,   484,    -1,   486,   487,   488,   489,   490,
     491,    -1,    -1,    -1,    -1,   496,   479,   286,    -1,   482,
     483,   484,    -1,   486,   487,   488,   489,   490,   491,    -1,
    2613,    -1,    -1,   496,    -1,    -1,    -1,    -1,  2621,    -1,
      -1,    -1,    -1,    -1,  2460,  2461,    -1,    -1,    -1,  2465,
    2466,  2467,    -1,    -1,   309,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2652,
     325,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   379,    -1,  2500,  2501,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2678,  2679,    -1,    -1,    -1,
      -1,    -1,   357,    -1,    -1,   360,  2522,    -1,    -1,    -1,
     379,    -1,    -1,   368,    -1,    -1,   371,  2533,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   391,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   403,    -1,
      -1,    -1,    -1,  2736,    -1,   410,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   419,    -1,    -1,    -1,    -1,  2585,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   479,    -1,    -1,    -1,    -1,  2603,    -1,   486,
     487,   488,   489,   490,   491,   450,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     479,    -1,    -1,    -1,  2630,    -1,    -1,   486,   487,   488,
     489,   490,   491,    -1,    -1,    -1,  2809,    -1,  2644,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,  2721,    68,    69,    70,    71,
      72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
      82,    83,    84,  2739,    86,    87,    88,    89,    90,    91,
      -1,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,   124,   125,   126,   127,   128,   129,   130,   131,
      -1,   133,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
     162,   163,   164,    -1,   166,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,    -1,   178,    -1,    -1,    -1,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,    -1,
     282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,    -1,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,    -1,   401,
     402,    -1,   404,   405,   406,   407,   408,   409,   410,    -1,
     412,   413,    -1,    -1,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,    -1,    -1,   455,    -1,    -1,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,    -1,    -1,
      -1,    -1,    -1,    -1,   486,   487,   488,    -1,    -1,    -1,
      -1,    -1,    -1,   495,   496,    -1,    -1,    -1,   500,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,   125,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,   162,   163,
     164,    -1,   166,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,    -1,   178,    -1,    -1,    -1,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,    -1,    -1,   228,   229,   230,   231,    -1,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,    -1,   282,   283,
      -1,    -1,   286,   287,   288,    -1,    -1,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
      -1,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,    -1,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,    -1,   412,   413,
      -1,    -1,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,   436,    -1,   438,   439,   440,   441,   442,   443,
     444,    -1,   446,   447,   448,   449,   450,   451,   452,    -1,
      -1,   455,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,    -1,   481,    -1,    -1,
      -1,    -1,   486,   487,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   495,   496,    -1,    -1,    -1,   500,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,   162,   163,   164,    -1,
     166,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,    -1,   178,    -1,    -1,    -1,   182,   183,    -1,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
      -1,    -1,   228,   229,   230,   231,    -1,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,    -1,   282,   283,    -1,    -1,
     286,   287,   288,    -1,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,    -1,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,    -1,   412,   413,    -1,    -1,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
     436,    -1,   438,   439,   440,   441,   442,   443,   444,    -1,
     446,   447,   448,   449,   450,   451,   452,    -1,    -1,   455,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,    -1,   481,    -1,    -1,    -1,    -1,
     486,   487,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   495,
      -1,    -1,    -1,    -1,   500,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    -1,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    -1,
      68,    69,    70,    71,    72,    -1,    74,    -1,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    90,    91,    -1,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,   162,   163,   164,    -1,   166,    -1,
     168,   169,   170,   171,   172,   173,   174,   175,   176,    -1,
     178,    -1,    -1,    -1,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,    -1,   227,
     228,   229,   230,   231,    -1,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,    -1,   282,   283,    -1,    -1,   286,   287,
     288,    -1,    -1,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,    -1,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,    -1,   401,   402,    -1,   404,   405,   406,   407,
     408,   409,   410,    -1,   412,   413,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,   436,    -1,
     438,   439,   440,   441,   442,   443,   444,    -1,   446,   447,
     448,   449,   450,   451,   452,    -1,    -1,   455,    -1,    -1,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,    -1,    -1,    -1,    -1,    -1,    -1,   486,   487,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   495,    -1,    -1,
      -1,    -1,   500,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
      30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    -1,    68,    69,
      70,    71,    72,    -1,    74,    -1,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      90,    91,    -1,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,   124,   125,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,   162,   163,   164,    -1,   166,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,    -1,   178,    -1,
      -1,    -1,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,    -1,    -1,   228,   229,
     230,   231,    -1,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,    -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,
      -1,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,    -1,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
      -1,   401,   402,    -1,   404,   405,   406,   407,   408,   409,
     410,    -1,   412,   413,    -1,    -1,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,   436,    -1,   438,   439,
     440,   441,   442,   443,   444,    -1,   446,   447,   448,   449,
     450,   451,   452,    -1,    -1,   455,    -1,    -1,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
      -1,    -1,    -1,    -1,    -1,    -1,   486,   487,   488,    -1,
      -1,    -1,    -1,    -1,    -1,   495,    -1,    -1,    -1,    -1,
     500,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
      -1,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,   124,   125,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
     162,   163,   164,    -1,   166,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,    -1,   178,    -1,    -1,    -1,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,    -1,
     282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,    -1,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,    -1,   401,
     402,    -1,   404,   405,   406,   407,   408,   409,   410,    -1,
     412,   413,    -1,    -1,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
     442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
     452,    -1,    -1,   455,    -1,    -1,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,    -1,    -1,
      -1,    -1,    -1,    -1,   486,   487,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   495,    -1,    -1,    -1,    -1,   500,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,   125,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,   162,   163,
     164,    -1,   166,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,    -1,   178,    -1,    -1,    -1,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,    -1,    -1,   228,   229,   230,   231,    -1,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,    -1,   282,   283,
      -1,    -1,   286,   287,   288,    -1,    -1,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
      -1,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,    -1,   401,   402,    -1,
     404,   405,   406,   407,   408,   409,   410,    -1,   412,   413,
      -1,    -1,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,   436,    -1,   438,   439,   440,   441,   442,   443,
     444,    -1,   446,   447,   448,   449,   450,   451,   452,    -1,
      -1,   455,    -1,    -1,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,    -1,    -1,    -1,    -1,
      -1,    -1,   486,   487,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   495,   496,    -1,    -1,    -1,   500,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,   162,   163,   164,    -1,
     166,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,    -1,   178,    -1,    -1,    -1,   182,   183,    -1,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
      -1,    -1,   228,   229,   230,   231,    -1,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,    -1,   282,   283,    -1,    -1,
     286,   287,   288,    -1,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,    -1,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,    -1,   401,   402,    -1,   404,   405,
     406,   407,   408,   409,   410,    -1,   412,   413,    -1,    -1,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
     436,    -1,   438,   439,   440,   441,   442,   443,   444,    -1,
     446,   447,   448,   449,   450,   451,   452,    -1,    -1,   455,
      -1,    -1,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,    -1,    -1,    -1,    -1,    -1,    -1,
     486,   487,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   495,
     496,    -1,    -1,    -1,   500,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    -1,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    -1,
      68,    69,    70,    71,    72,    -1,    74,    -1,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    90,    91,    -1,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,   162,   163,   164,    -1,   166,    -1,
     168,   169,    -1,   171,   172,   173,   174,   175,   176,    -1,
     178,    -1,    -1,    -1,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,    -1,    -1,
     228,   229,   230,   231,    -1,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,    -1,   282,   283,    -1,    -1,   286,   287,
     288,    -1,    -1,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,    -1,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,    -1,   401,   402,    -1,   404,   405,   406,   407,
     408,   409,   410,    -1,   412,   413,    -1,    -1,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,   436,    -1,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,    -1,    -1,   455,    -1,    -1,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,    -1,    -1,    -1,    -1,    -1,    -1,   486,   487,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   495,    -1,    -1,
      -1,    -1,   500,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
      30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    -1,    68,    69,
      70,    71,    72,    -1,    74,    -1,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      90,    91,    -1,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,   124,   125,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,   162,   163,   164,    -1,   166,    -1,   168,   169,
     170,   171,   172,   173,   174,   175,   176,    -1,   178,    -1,
      -1,    -1,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,    -1,    -1,   228,   229,
     230,   231,    -1,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,    -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,
      -1,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,    -1,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
      -1,   401,   402,    -1,   404,   405,   406,   407,   408,   409,
     410,    -1,   412,   413,    -1,    -1,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,   436,    -1,   438,   439,
     440,   441,   442,   443,   444,    -1,   446,   447,   448,   449,
     450,   451,   452,    -1,    -1,   455,    -1,    -1,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
      -1,    -1,    -1,    -1,    -1,    -1,   486,   487,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   495,    -1,    -1,    -1,    -1,
     500,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
      -1,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,   124,   125,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
     162,   163,   164,    -1,   166,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,    -1,   178,    -1,    -1,    -1,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,    -1,
     282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,    -1,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,    -1,   401,
     402,    -1,   404,   405,   406,   407,   408,   409,   410,    -1,
     412,   413,    -1,    -1,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
     442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
     452,    -1,    -1,   455,    -1,    -1,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,    -1,    -1,
      -1,    -1,    -1,    -1,   486,   487,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   495,    -1,    -1,    -1,    -1,   500,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,   125,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,   162,   163,
     164,    -1,   166,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,    -1,   178,    -1,    -1,    -1,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,    -1,    -1,   228,   229,   230,   231,    -1,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,    -1,   282,   283,
      -1,    -1,   286,   287,   288,    -1,    -1,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
      -1,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,    -1,   401,   402,    -1,
     404,   405,   406,   407,   408,   409,   410,    -1,   412,   413,
      -1,    -1,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,   436,    -1,   438,   439,   440,   441,   442,   443,
     444,    -1,   446,   447,   448,   449,   450,   451,   452,    -1,
      -1,   455,    -1,    -1,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,    -1,    -1,    -1,    -1,
      -1,    -1,   486,   487,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   495,    -1,    -1,    -1,    -1,   500,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,   162,   163,   164,    -1,
     166,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,    -1,   178,    -1,    -1,    -1,   182,   183,    -1,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
      -1,    -1,   228,   229,   230,   231,    -1,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,    -1,   282,   283,    -1,    -1,
     286,   287,   288,    -1,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,    -1,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,    -1,   401,   402,    -1,   404,   405,
     406,   407,   408,   409,   410,    -1,   412,   413,    -1,    -1,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
     436,    -1,   438,   439,   440,   441,   442,   443,   444,    -1,
     446,   447,   448,   449,   450,   451,   452,    -1,    -1,   455,
      -1,    -1,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,    -1,    -1,    -1,    -1,    -1,    -1,
     486,   487,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   495,
      -1,    -1,    -1,    -1,   500,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    -1,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    -1,
      68,    69,    70,    71,    72,    -1,    74,    -1,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    90,    91,    -1,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,   162,   163,   164,    -1,   166,    -1,
     168,   169,    -1,   171,   172,   173,   174,   175,   176,    -1,
     178,    -1,    -1,    -1,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,    -1,    -1,
     228,   229,   230,   231,    -1,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,    -1,   282,   283,    -1,    -1,   286,   287,
     288,    -1,    -1,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,    -1,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,    -1,   401,   402,    -1,   404,   405,   406,   407,
     408,   409,   410,    -1,   412,   413,    -1,    -1,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,   436,    -1,
     438,   439,   440,   441,   442,   443,   444,    -1,   446,   447,
     448,   449,   450,   451,   452,    -1,    -1,   455,    -1,    -1,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,    -1,    -1,    -1,    -1,    -1,    -1,   486,   487,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   495,    -1,    -1,
      -1,    -1,   500,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
      30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    -1,    68,    69,
      70,    71,    72,    -1,    74,    -1,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      90,    91,    -1,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,   124,   125,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,   162,   163,   164,    -1,   166,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,    -1,   178,    -1,
      -1,    -1,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,    -1,    -1,   228,   229,
     230,   231,    -1,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,    -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,
      -1,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,    -1,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
      -1,   401,   402,    -1,   404,   405,   406,   407,   408,   409,
     410,    -1,   412,   413,    -1,    -1,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,   436,    -1,   438,   439,
     440,   441,   442,   443,   444,    -1,   446,   447,   448,   449,
     450,   451,   452,    -1,    -1,   455,    -1,    -1,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
      -1,    -1,    -1,    -1,    -1,    -1,   486,   487,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   495,    -1,    -1,    -1,    -1,
     500,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
      -1,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,   124,   125,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
     162,   163,   164,    -1,   166,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,    -1,   178,    -1,    -1,    -1,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,    -1,
     282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,    -1,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,    -1,   401,
     402,    -1,   404,   405,   406,   407,   408,   409,   410,    -1,
     412,   413,    -1,    -1,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
     442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
     452,    -1,    -1,   455,    -1,    -1,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,    -1,    -1,
      -1,    -1,    -1,    -1,   486,   487,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   495,    -1,    -1,    -1,    -1,   500,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,   125,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,   162,   163,
     164,    -1,   166,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,    -1,   178,    -1,    -1,    -1,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,    -1,    -1,   228,   229,   230,   231,    -1,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,    -1,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,    -1,   282,   283,
      -1,    -1,   286,   287,   288,    -1,    -1,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
      -1,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,    -1,   401,   402,    -1,
     404,   405,   406,   407,   408,   409,   410,    -1,   412,   413,
      -1,    -1,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,   436,    -1,   438,   439,   440,   441,   442,   443,
     444,    -1,   446,   447,   448,   449,   450,   451,   452,    -1,
      -1,   455,    -1,    -1,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   486,   487,    -1,    -1,     3,     4,     5,     6,
       7,   495,     9,    10,    -1,    -1,   500,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    74,    -1,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    89,    90,    91,    -1,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,    -1,   115,    -1,
     117,   118,   119,   120,   121,   122,    -1,   124,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,   162,   163,   164,    -1,   166,
      -1,   168,   169,    -1,   171,   172,   173,   174,   175,   176,
      -1,   178,    -1,    -1,    -1,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,    -1,
      -1,   228,   229,   230,   231,    -1,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,    -1,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,    -1,   286,
     287,   288,    -1,    -1,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,    -1,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,    -1,   401,   402,    -1,   404,   405,   406,
     407,   408,   409,   410,    -1,   412,   413,    -1,    -1,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,   436,
      -1,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,    -1,   455,    -1,
      -1,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   486,
     487,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   495,    -1,
      -1,    -1,    -1,   500,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,   162,   163,   164,    -1,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,    -1,   178,
      -1,    -1,    -1,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,   218,
     219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,
     229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
      -1,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,    -1,   282,   283,    -1,    -1,   286,   287,   288,
      -1,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,    -1,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,   401,   402,    -1,   404,   405,   406,   407,   408,
     409,   410,    -1,   412,   413,    -1,    -1,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
     449,   450,   451,   452,    -1,    -1,   455,    -1,    -1,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   486,   487,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   495,    -1,    -1,    -1,
      -1,   500,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    74,    -1,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,   162,   163,   164,    -1,   166,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,    -1,   178,    -1,    -1,
      -1,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,   220,
     221,   222,   223,   224,   225,    -1,    -1,   228,   229,   230,
     231,    -1,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,    -1,   270,
     271,    -1,   273,   274,   275,   276,   277,   278,   279,   280,
      -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,    -1,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,    -1,
     401,   402,    -1,   404,   405,   406,   407,   408,   409,   410,
      -1,   412,   413,    -1,    -1,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,   436,    -1,   438,   439,   440,
     441,   442,   443,   444,    -1,   446,   447,   448,   449,   450,
     451,   452,    -1,    -1,   455,    -1,    -1,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,    -1,
      -1,    -1,    -1,    -1,    -1,   486,   487,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   495,    -1,    -1,    -1,    -1,   500,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    44,    45,    46,    47,    -1,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,    -1,   117,   118,   119,   120,   121,   122,
      -1,   124,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,    -1,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,   162,
     163,   164,    -1,   166,    -1,   168,   169,    -1,   171,   172,
     173,   174,    -1,   176,    -1,   178,    -1,    -1,    -1,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,    -1,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,   220,   221,   222,
     223,   224,   225,    -1,    -1,   228,   229,   230,    -1,    -1,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,    -1,   270,   271,    -1,
     273,   274,   275,   276,   277,   278,   279,   280,    -1,   282,
     283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,    -1,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,    -1,   380,   381,   382,
     383,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,    -1,   401,   402,
      -1,   404,   405,   406,   407,   408,   409,   410,    -1,   412,
     413,    -1,    -1,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,   436,    -1,   438,   439,   440,   441,   442,
     443,   444,    -1,   446,   447,   448,   449,   450,   451,   452,
      -1,    -1,   455,    -1,    -1,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,    -1,    -1,    -1,    -1,
      -1,    -1,     3,   486,   487,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   495,    -1,    -1,    -1,    -1,   500,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    36,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    93,    94,    95,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,    -1,   159,    -1,
     161,   162,   163,   164,    -1,   166,    -1,   168,    -1,    -1,
     171,   172,   173,   174,    -1,   176,    -1,   178,    -1,    -1,
      -1,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
      -1,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,   220,
     221,   222,   223,   224,   225,    -1,    -1,   228,   229,   230,
      -1,    -1,   233,   234,   235,    -1,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,    -1,   270,
     271,    -1,   273,    -1,   275,   276,   277,   278,   279,   280,
      -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,    -1,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,    -1,   368,   369,   370,
     371,   372,    -1,   374,   375,   376,   377,   378,    -1,   380,
     381,   382,   383,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,    -1,
     401,   402,    -1,   404,   405,   406,   407,   408,   409,   410,
      -1,   412,   413,    -1,    -1,   416,   417,   418,   419,   420,
      -1,   422,   423,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
     441,   442,   443,   444,    -1,   446,    -1,   448,   449,   450,
     451,   452,    -1,    -1,   455,    -1,    -1,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,    -1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   496,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,    -1,   115,    -1,   117,   118,   119,   120,   121,   122,
      -1,   124,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,    -1,   159,    -1,   161,   162,
     163,   164,    -1,   166,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,   176,    -1,   178,    -1,   180,    -1,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,   228,   229,   230,   231,    -1,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,    -1,   270,   271,   272,
     273,    -1,   275,   276,   277,   278,   279,   280,    -1,   282,
     283,    -1,   285,   286,   287,   288,    -1,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,    -1,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,    -1,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,    -1,   412,
     413,    -1,    -1,   416,   417,   418,   419,   420,    -1,   422,
     423,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,   436,    -1,   438,   439,   440,   441,   442,
     443,   444,    -1,   446,   447,   448,   449,   450,   451,   452,
      -1,    -1,   455,    -1,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,    -1,     3,   481,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   495,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,    -1,   159,    -1,   161,   162,   163,   164,    -1,
     166,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,    -1,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,    -1,   228,   229,   230,   231,    -1,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,    -1,   270,   271,   272,   273,    -1,   275,
     276,   277,   278,   279,   280,    -1,   282,   283,    -1,   285,
     286,   287,   288,    -1,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,    -1,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,    -1,   401,   402,    -1,   404,   405,
     406,   407,   408,   409,   410,    -1,   412,   413,    -1,    -1,
     416,   417,   418,   419,   420,    -1,   422,   423,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
     436,    -1,   438,   439,   440,   441,   442,   443,   444,    -1,
     446,   447,   448,   449,   450,   451,   452,    -1,    -1,   455,
      -1,    -1,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   495,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,    -1,
     159,    -1,   161,   162,   163,   164,    -1,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,    -1,   178,
      -1,    -1,    -1,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,
     229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
      -1,   270,   271,   272,   273,    -1,   275,   276,   277,   278,
     279,   280,    -1,   282,   283,    -1,    -1,   286,   287,   288,
      -1,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,    -1,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,   401,   402,    -1,   404,   405,   406,   407,   408,
     409,   410,    -1,   412,   413,    -1,    -1,   416,   417,   418,
     419,   420,    -1,   422,   423,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
     449,   450,   451,   452,    -1,    -1,   455,    -1,    -1,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   495,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
      -1,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,    -1,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,   124,   125,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,    -1,   159,    -1,   161,
     162,   163,   164,    -1,   166,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,    -1,   178,    -1,    -1,    -1,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,    -1,   270,   271,
     272,   273,    -1,   275,   276,   277,   278,   279,   280,    -1,
     282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,    -1,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,    -1,   401,
     402,    -1,   404,   405,   406,   407,   408,   409,   410,    -1,
     412,   413,    -1,    -1,   416,   417,   418,   419,   420,    -1,
     422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
     442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
     452,    -1,    -1,   455,    -1,    -1,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,    -1,     3,     4,
       5,    -1,    -1,    -1,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   495,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    74,
      -1,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    90,    91,    -1,    93,    94,
      95,    96,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,    -1,
     115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,   162,   163,   164,
      -1,   166,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,    -1,   178,    -1,    -1,    -1,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,    -1,    -1,   228,   229,   230,   231,    -1,   233,   234,
     235,    -1,    -1,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,    -1,   270,   271,   272,   273,    -1,
     275,   276,   277,   278,   279,   280,    -1,   282,   283,   284,
      -1,   286,   287,   288,    -1,    -1,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,    -1,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    -1,   368,   369,   370,   371,   372,    -1,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,    -1,   401,   402,    -1,   404,
     405,   406,   407,   408,   409,   410,    -1,   412,   413,    -1,
      -1,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,    -1,   438,   439,   440,   441,   442,   443,   444,
      -1,   446,   447,   448,   449,   450,   451,   452,    -1,    -1,
     455,    -1,    -1,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,    -1,     3,    -1,    -1,    -1,    -1,
      -1,   486,   487,   488,    -1,    -1,    -1,    -1,    -1,    -1,
     495,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      28,    29,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      38,    39,    -1,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    -1,    -1,    62,    63,    64,    65,    66,    -1,
      68,    69,    70,    71,    72,    -1,    74,    -1,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    90,    91,    -1,    93,    94,    95,    96,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,    -1,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
      -1,   159,    -1,   161,   162,   163,   164,    -1,   166,    -1,
     168,   169,    -1,   171,   172,   173,   174,   175,   176,    -1,
     178,    -1,    -1,    -1,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,    -1,    -1,
     228,   229,   230,   231,    -1,   233,   234,   235,    -1,    -1,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,    -1,   270,   271,   272,   273,    -1,   275,   276,   277,
     278,   279,   280,    -1,   282,   283,    -1,    -1,   286,   287,
     288,    -1,    -1,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,    -1,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,    -1,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,    -1,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,    -1,   412,   413,    -1,    -1,   416,   417,
     418,   419,   420,    -1,   422,   423,   424,   425,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,   441,   442,   443,   444,    -1,   446,   447,
     448,   449,   450,   451,   452,    -1,    -1,   455,    -1,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,    -1,     3,   481,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   495,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,    -1,   159,    -1,
     161,   162,   163,   164,    -1,   166,    -1,   168,    -1,    -1,
      -1,   172,   173,   174,    -1,   176,    -1,   178,    -1,    -1,
      -1,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
      -1,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,    -1,    -1,   228,    -1,   230,
      -1,    -1,   233,   234,   235,    -1,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,   268,    -1,   270,
     271,    -1,   273,    -1,   275,   276,   277,   278,   279,   280,
      -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,    -1,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,    -1,   374,   375,   376,   377,   378,    -1,   380,
     381,   382,   383,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,    -1,
     401,   402,   403,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,    -1,    -1,   416,   417,   418,   419,   420,
      -1,   422,   423,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
     441,   442,   443,   444,    -1,   446,    -1,   448,   449,   450,
     451,   452,    -1,    -1,   455,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,    -1,     3,
     481,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   495,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,   125,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,    -1,   159,    -1,   161,   162,   163,
     164,    -1,   166,    -1,   168,    -1,    -1,    -1,   172,   173,
     174,    -1,   176,    -1,   178,    -1,    -1,    -1,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,
     234,   235,    -1,    -1,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,   268,    -1,   270,   271,    -1,   273,
      -1,   275,   276,   277,   278,   279,   280,    -1,   282,   283,
      -1,    -1,   286,   287,   288,    -1,    -1,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
      -1,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,    -1,   401,   402,   403,
     404,    -1,   406,   407,   408,   409,   410,    -1,   412,   413,
      -1,    -1,   416,   417,   418,   419,   420,    -1,   422,   423,
     424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,    -1,    -1,   438,   439,   440,   441,   442,   443,
     444,    -1,   446,    -1,   448,   449,   450,   451,   452,    -1,
      -1,   455,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,    -1,     3,   481,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   495,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
      47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    -1,    86,
      87,    88,    89,    90,    91,    -1,    -1,    94,    95,    96,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,    -1,   115,    -1,
     117,   118,   119,   120,   121,   122,    -1,   124,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,    -1,   159,    -1,   161,   162,   163,   164,    -1,   166,
      -1,   168,    -1,    -1,    -1,   172,   173,   174,    -1,   176,
      -1,   178,    -1,    -1,    -1,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,    -1,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,    -1,
      -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,    -1,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,   268,    -1,   270,   271,    -1,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,    -1,   286,
     287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,    -1,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
      -1,   368,   369,   370,   371,   372,    -1,   374,   375,   376,
     377,   378,    -1,   380,   381,   382,   383,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,    -1,   401,   402,    -1,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,    -1,    -1,   416,
     417,   418,   419,   420,    -1,   422,   423,   424,   425,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
      -1,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
      -1,   448,   449,   450,   451,   452,    -1,    -1,   455,    -1,
      -1,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   495,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
      30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      -1,    41,    42,    43,    -1,    45,    46,    47,    48,    49,
      -1,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      -1,    -1,    62,    63,    64,    65,    66,    -1,    68,    69,
      70,    71,    72,    -1,    -1,    -1,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    -1,    86,    87,    88,    89,
      90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,    -1,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,   124,   125,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,    -1,   159,
      -1,   161,   162,   163,   164,    -1,   166,    -1,   168,    -1,
      -1,    -1,   172,   173,   174,    -1,   176,    -1,   178,    -1,
      -1,    -1,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
      -1,   221,   222,   223,   224,   225,    -1,    -1,   228,    -1,
     230,    -1,    -1,   233,   234,   235,    -1,    -1,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,    -1,   263,   264,   265,   266,   267,   268,    -1,
     270,   271,    -1,   273,    -1,   275,   276,   277,   278,   279,
     280,    -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,
      -1,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,    -1,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,    -1,   368,   369,
     370,   371,   372,    -1,   374,   375,   376,   377,   378,    -1,
     380,   381,   382,   383,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
      -1,   401,   402,    -1,   404,    -1,   406,   407,   408,   409,
     410,    -1,   412,   413,    -1,    -1,   416,   417,   418,   419,
     420,    -1,   422,   423,   424,   425,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,    -1,    -1,   438,   439,
     440,   441,   442,   443,   444,    -1,   446,    -1,   448,   449,
     450,   451,   452,    -1,    -1,   455,    -1,    -1,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   495,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
      -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,    -1,   115,    -1,   117,   118,   119,   120,   121,   122,
      -1,   124,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,    -1,   159,    -1,   161,   162,
     163,   164,    -1,   166,    -1,   168,    -1,    -1,    -1,   172,
     173,   174,    -1,   176,    -1,   178,    -1,    -1,    -1,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,    -1,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,
     233,   234,   235,    -1,    -1,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,   268,    -1,   270,   271,    -1,
     273,    -1,   275,   276,   277,   278,   279,   280,    -1,   282,
     283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,    -1,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,    -1,   368,   369,   370,   371,   372,
      -1,   374,   375,   376,   377,   378,    -1,   380,   381,   382,
     383,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,    -1,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,    -1,    -1,   416,   417,   418,   419,   420,    -1,   422,
     423,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,    -1,   438,   439,   440,   441,   442,
     443,   444,    -1,   446,    -1,   448,   449,   450,   451,   452,
      -1,    -1,   455,    -1,    -1,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   495,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
      46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
      96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,    -1,   159,    -1,   161,   162,   163,   164,    -1,
     166,    -1,   168,    -1,    -1,    -1,   172,   173,   174,    -1,
     176,    -1,   178,    -1,    -1,    -1,   182,   183,    -1,   185,
     186,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
      -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,
      -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,    -1,   263,   264,   265,
     266,   267,   268,    -1,   270,   271,    -1,   273,    -1,   275,
     276,   277,   278,   279,   280,    -1,   282,   283,    -1,    -1,
     286,   287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,    -1,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,    -1,   368,   369,   370,   371,   372,    -1,   374,   375,
     376,   377,   378,    -1,   380,   381,   382,   383,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,    -1,   401,   402,    -1,   404,    -1,
     406,   407,   408,   409,   410,    -1,   412,   413,    -1,    -1,
     416,   417,   418,   419,   420,    -1,   422,   423,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,    -1,   438,   439,   440,   441,   442,   443,   444,    -1,
     446,    -1,   448,   449,   450,   451,   452,    -1,    -1,   455,
      -1,    -1,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,    -1,    -1,    -1,    -1,     3,     4,     5,
      -1,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,   495,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,    -1,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,    -1,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,    -1,   293,   294,   295,
      -1,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,    -1,   311,   312,    -1,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,    -1,   419,    -1,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   475,
     476,   477,   478,    -1,     3,    -1,   482,   483,   484,     8,
     486,   487,   488,   489,   490,   491,    -1,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,    -1,
     159,    -1,   161,   162,   163,   164,    -1,   166,    -1,   168,
      -1,    -1,    -1,   172,   173,   174,    -1,   176,    -1,   178,
      -1,    -1,    -1,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,    -1,    -1,   228,
      -1,   230,    -1,    -1,   233,   234,   235,    -1,    -1,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,   268,
      -1,   270,   271,    -1,   273,    -1,   275,   276,   277,   278,
     279,   280,    -1,   282,   283,    -1,    -1,   286,   287,   288,
      -1,    -1,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,    -1,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,    -1,   368,
     369,   370,   371,   372,    -1,   374,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,   401,   402,    -1,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,    -1,    -1,   416,   417,   418,
     419,   420,    -1,   422,   423,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,    -1,   438,
     439,   440,   441,   442,   443,   444,    -1,   446,    -1,   448,
     449,   450,   451,   452,    -1,    -1,   455,    -1,    -1,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
      -1,    -1,    -1,   482,   483,   484,    -1,   486,   487,   488,
     489,   490,   491,     8,    -1,    -1,    11,    -1,    -1,    -1,
      -1,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    33,    16,
      17,    18,    -1,    -1,    -1,    -1,    41,    -1,    -1,     8,
      -1,    -1,    11,    48,    -1,    -1,    33,    16,    17,    18,
      -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,    -1,
      -1,    48,    -1,    -1,    33,    -1,    -1,     8,    73,    -1,
      11,    -1,    41,    -1,    -1,    16,    17,    18,    -1,    48,
      -1,    -1,    -1,    -1,    -1,     8,    73,    -1,    11,    -1,
      -1,    -1,    33,    16,    17,    18,    -1,    -1,    -1,    -1,
      41,    -1,    -1,    -1,    73,    -1,    -1,    48,    -1,    -1,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,
      -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,
      -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      73,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    -1,
      16,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     175,    -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    41,   191,    -1,   175,    -1,
      -1,   196,    48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   191,    -1,   175,    -1,    -1,   196,
      -1,    -1,   217,   218,    -1,    -1,    -1,    73,    -1,    -1,
      -1,    -1,   191,    -1,    -1,    -1,   231,   196,    -1,    -1,
     217,   218,    -1,    -1,   175,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,   217,   218,
     191,    -1,   175,    -1,    -1,   196,    -1,    -1,    -1,    -1,
      -1,    -1,   231,    -1,   269,    -1,    -1,   272,   191,    -1,
      -1,    -1,    -1,   196,    -1,    -1,   217,   218,    -1,    -1,
      -1,   286,   269,    -1,   289,   272,    -1,    -1,    -1,    -1,
     231,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,   286,
     269,    -1,   289,   272,    -1,    -1,    -1,    -1,   231,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,    -1,   175,
     289,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   269,    -1,
      -1,   272,    -1,    -1,    -1,   191,    -1,    -1,    -1,    -1,
     196,    -1,    -1,    -1,    -1,   286,   269,    -1,   289,   272,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   217,   218,   286,    -1,    -1,   289,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   379,   231,    -1,    23,    -1,    -1,
      -1,    -1,    -1,    29,    -1,    -1,     8,    -1,    -1,    11,
      36,    -1,   379,    -1,    16,    17,    18,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    55,
     379,    33,    -1,   269,    -1,     8,   272,    -1,    11,    41,
      -1,    -1,    -1,    16,    17,    18,    48,    -1,    -1,    -1,
     286,    -1,    -1,   289,    -1,    -1,    -1,    -1,   379,    -1,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,
      -1,    73,    -1,    -1,    -1,    48,   379,    -1,    -1,   105,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   479,    -1,    -1,   482,   483,   484,
      73,   486,   487,   488,   489,   490,   491,    -1,    -1,    -1,
     136,   496,   479,    -1,    -1,   482,   483,   484,    -1,   486,
     487,   488,   489,   490,   491,    -1,    -1,    -1,    -1,   496,
     479,    -1,    -1,   482,   483,   484,    -1,   486,   487,   488,
     489,   490,   491,   379,    -1,    -1,    -1,   496,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   479,    -1,
      -1,   482,   483,   484,    -1,   486,   487,   488,   489,   490,
     491,    -1,   198,   175,    -1,   496,   479,    -1,    -1,   482,
     483,   484,    -1,   486,   487,   488,   489,   490,   491,   191,
      -1,    -1,    -1,   496,   196,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   175,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   217,   218,    -1,   191,    -1,
     246,    -1,    -1,   196,    -1,    -1,    -1,    -1,   254,   231,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     266,    -1,    -1,   479,   217,   218,   482,   483,   484,    -1,
     486,   487,   488,   489,   490,   491,    -1,    -1,   231,    -1,
     496,    -1,   288,    -1,    -1,    -1,    -1,   269,    -1,    -1,
     272,    -1,   298,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   286,    -1,    -1,   289,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   269,    -1,    -1,   272,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   286,    -1,   341,   289,    -1,    -1,   345,
     346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   368,    -1,    -1,    -1,    -1,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   389,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   379,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   440,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   479,    -1,    -1,
     482,   483,   484,    -1,   486,   487,   488,   489,   490,   491,
      -1,    -1,    -1,    -1,   496,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   479,     3,    -1,   482,
     483,   484,    -1,   486,   487,   488,   489,   490,   491,    -1,
      -1,   494,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   488,    -1,    -1,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
      30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      -1,    41,    42,    43,    -1,    45,    46,    47,    48,    49,
      -1,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      -1,    -1,    62,    63,    64,    65,    66,    -1,    68,    69,
      70,    71,    72,    -1,    -1,    -1,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    -1,    86,    87,    88,    89,
      90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,    -1,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,   124,   125,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,    -1,   159,
      -1,   161,   162,   163,   164,    -1,   166,    -1,   168,    -1,
      -1,    -1,   172,   173,   174,    -1,   176,    -1,   178,    -1,
      -1,    -1,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
      -1,   221,   222,   223,   224,   225,    -1,    -1,   228,    -1,
     230,    -1,    -1,   233,   234,   235,    -1,    -1,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,    -1,   263,   264,   265,   266,   267,   268,    -1,
     270,   271,    -1,   273,    -1,   275,   276,   277,   278,   279,
     280,    -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,
      -1,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,    -1,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,    -1,   368,   369,
     370,   371,   372,    -1,   374,   375,   376,   377,   378,    -1,
     380,   381,   382,   383,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
      -1,   401,   402,    -1,   404,    -1,   406,   407,   408,   409,
     410,    -1,   412,   413,    -1,    -1,   416,   417,   418,   419,
     420,    -1,   422,   423,   424,   425,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,    -1,    -1,   438,   439,
     440,   441,   442,   443,   444,    -1,   446,    -1,   448,   449,
     450,   451,   452,    -1,    -1,   455,    -1,    -1,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,     3,
       4,     5,    -1,    -1,    -1,     9,    -1,    -1,   488,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    93,
      94,    95,    96,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,   125,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,   162,   163,
     164,    -1,   166,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,    -1,   178,    -1,    -1,    -1,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,    -1,    -1,   228,   229,   230,   231,    -1,   233,
     234,   235,    -1,    -1,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,    -1,   270,   271,   272,   273,
      -1,   275,   276,   277,   278,   279,   280,    -1,   282,   283,
     284,    -1,   286,   287,   288,    -1,    -1,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
      -1,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,    -1,   401,   402,    -1,
     404,   405,   406,   407,   408,   409,   410,    -1,   412,   413,
      -1,    -1,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,    -1,    -1,   438,   439,   440,   441,   442,   443,
     444,    -1,   446,   447,   448,   449,   450,   451,   452,    -1,
      -1,   455,    -1,    -1,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,     3,     4,     5,    -1,    -1,
      -1,     9,   486,   487,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    -1,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    -1,    -1,    62,    63,    64,    65,    66,    -1,
      68,    69,    70,    71,    72,    -1,    74,    -1,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    90,    91,    -1,    93,    94,    95,    96,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,   162,   163,   164,    -1,   166,    -1,
     168,   169,    -1,   171,   172,   173,   174,   175,   176,    -1,
     178,    -1,    -1,    -1,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,    -1,    -1,
     228,   229,   230,   231,    -1,   233,   234,   235,    -1,    -1,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,    -1,   270,   271,   272,   273,    -1,   275,   276,   277,
     278,   279,   280,    -1,   282,   283,   284,    -1,   286,   287,
     288,    -1,    -1,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,    -1,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,    -1,
     368,   369,   370,   371,   372,    -1,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,    -1,   401,   402,    -1,   404,   405,   406,   407,
     408,   409,   410,    -1,   412,   413,    -1,    -1,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,   441,   442,   443,   444,    -1,   446,   447,
     448,   449,   450,   451,   452,    -1,    -1,   455,    -1,    -1,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,     3,     4,     5,    -1,    -1,    -1,     9,   486,   487,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
      -1,    93,    94,    95,    96,    -1,    -1,    -1,   100,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,    -1,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,   124,   125,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
     162,   163,   164,    -1,   166,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,    -1,   178,    -1,    -1,    -1,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
      -1,   233,   234,   235,    -1,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,    -1,   270,   271,
     272,   273,    -1,   275,   276,   277,   278,   279,   280,    -1,
     282,   283,   284,    -1,   286,   287,   288,    -1,    -1,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,    -1,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,    -1,   368,   369,   370,   371,
     372,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,    -1,   401,
     402,    -1,   404,   405,   406,   407,   408,   409,   410,    -1,
     412,   413,    -1,    -1,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,    -1,    -1,   438,   439,   440,   441,
     442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
     452,    -1,    -1,   455,    -1,    -1,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,    -1,     8,    -1,
      -1,    11,    -1,    -1,   486,   487,    16,    17,    18,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    33,    16,    17,    18,    37,    -1,    -1,
      -1,    41,    -1,    -1,     8,    -1,    -1,    11,    48,    -1,
      -1,    33,    16,    17,    18,    -1,    -1,    -1,    -1,    41,
      -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    33,
      -1,    -1,     8,    73,    -1,    11,    -1,    41,    -1,    -1,
      16,    17,    18,    -1,    48,    -1,    -1,    -1,    -1,    -1,
      -1,    73,    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,
      36,    -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    73,
      -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    73,    -1,    -1,
      16,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,
      -1,     8,    -1,    -1,    11,    41,    -1,    -1,    -1,    16,
      17,    18,    48,    -1,    -1,   175,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   165,    -1,    -1,    33,    -1,   170,    36,
      -1,   191,    -1,   175,    41,    -1,   196,    73,    -1,    -1,
     164,    48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   191,
      -1,   175,    -1,    -1,   196,    -1,    -1,   217,   218,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    73,   191,    -1,    -1,
      -1,   231,   196,    -1,    -1,   217,   218,    -1,    -1,   175,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   231,
      -1,    -1,    -1,   217,   218,   191,    -1,    -1,    -1,    -1,
     196,    -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,   269,
      -1,    -1,   272,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   217,   218,    -1,    -1,    -1,   286,   269,    -1,   289,
     272,    -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,   175,
      -1,    -1,    -1,    -1,   286,   269,    -1,   289,   272,    -1,
      -1,    -1,    -1,    -1,    -1,   191,    -1,    -1,    -1,    -1,
     196,    -1,   286,    -1,    -1,   289,    -1,    -1,   175,    -1,
      -1,    -1,    -1,   269,    -1,    -1,   272,    -1,    -1,    -1,
      -1,   217,   218,    -1,   191,    -1,    -1,    -1,   312,   196,
     286,    -1,    -1,   289,    -1,   231,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     217,   218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,
      -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   269,    -1,     8,   272,   379,    11,    -1,
      -1,    -1,    -1,    16,    17,    18,    -1,    -1,    -1,    -1,
     286,    -1,    -1,   289,    -1,   379,    -1,    -1,    -1,    -1,
      33,    -1,   269,    -1,    -1,   272,    -1,    -1,    41,    -1,
      -1,   307,    -1,    -1,    -1,    48,    -1,   437,    -1,   286,
      -1,    -1,   289,   379,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   479,
      -1,    -1,   482,   483,   484,    -1,   486,   487,   488,   489,
     490,   491,    -1,    -1,    -1,    -1,    -1,   479,    -1,    -1,
     482,   483,   484,   379,   486,   487,   488,   489,   490,   491,
      -1,    -1,    -1,    -1,    -1,   479,    -1,    -1,   482,   483,
     484,    -1,   486,   487,   488,   489,   490,   491,    -1,    -1,
      -1,     8,   379,    -1,    11,    -1,    -1,    -1,    -1,    16,
      17,    18,    -1,   479,    -1,    -1,   482,   483,   484,    -1,
     486,   487,   488,   489,   490,   491,    33,   170,    -1,    -1,
       8,    -1,   175,    11,    41,    -1,    -1,    23,    16,    17,
      18,    48,    -1,    29,    -1,    -1,    -1,    -1,   191,    -1,
      36,    -1,    -1,   196,    -1,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    41,    -1,    -1,    73,    -1,    -1,    55,
      48,    -1,    -1,   479,   217,   218,   482,   483,   484,    -1,
     486,   487,   488,   489,   490,   491,    -1,    -1,   231,    -1,
       8,    -1,    -1,    11,    -1,    73,    -1,    -1,    16,    17,
      18,    -1,   479,    -1,    -1,   482,   483,   484,    -1,   486,
     487,   488,   489,   490,   491,    33,    -1,    -1,    -1,   105,
      -1,    -1,    -1,    41,    -1,    -1,   269,    -1,    -1,   272,
      48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   286,    -1,    -1,   289,    -1,    -1,    -1,
     136,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   175,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   191,    -1,    -1,    -1,    -1,   196,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   175,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     217,   218,   198,   191,    -1,    -1,    -1,    -1,   196,    -1,
      -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   379,    -1,    -1,   217,
     218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   231,    -1,    -1,    -1,   175,    -1,    -1,
     246,    -1,   269,    -1,    -1,   272,    -1,    -1,   254,    -1,
      -1,    -1,    -1,   191,    -1,    -1,    -1,    -1,   196,   286,
     266,    -1,   289,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   269,    -1,    -1,   272,    -1,    -1,    -1,    -1,   217,
     218,    -1,   288,    -1,    -1,    -1,    -1,    -1,   286,    -1,
      -1,   289,   298,   231,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   479,    -1,    -1,   482,
     483,   484,    -1,   486,   487,   488,   489,   490,   491,    -1,
      -1,   269,    -1,    -1,   272,   341,    -1,    -1,    -1,   345,
     346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,    -1,
      -1,    -1,   379,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   368,    -1,    -1,    -1,    -1,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   379,    -1,   389,   411,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   440,    -1,    -1,    -1,    -1,    -1,
      -1,   379,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   479,    -1,    -1,   482,   483,   484,    -1,   486,
     487,   488,   489,   490,   491,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   479,    -1,    -1,   482,   483,   484,    -1,   486,   487,
     488,   489,   490,   491,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
       5,   479,    -1,    -1,   482,   483,   484,    -1,   486,   487,
     488,   489,   490,   491,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    74,    -1,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    89,    90,    91,    -1,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,    -1,   115,    -1,
     117,   118,   119,   120,   121,   122,    -1,   124,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,    -1,   159,    -1,   161,   162,   163,   164,    -1,   166,
      -1,   168,   169,    -1,   171,   172,   173,   174,   175,   176,
      -1,   178,    -1,    -1,    -1,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,    -1,
      -1,   228,   229,   230,   231,    -1,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,    -1,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,    -1,   286,
     287,   288,    -1,    -1,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,    -1,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,    -1,   401,   402,    -1,   404,   405,   406,
     407,   408,   409,   410,    -1,   412,   413,    -1,    -1,   416,
     417,   418,   419,   420,    -1,   422,   423,   424,   425,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,   436,
      -1,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,    -1,   455,    -1,
      -1,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    74,    -1,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    93,    94,    95,    96,    -1,    -1,    -1,   100,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,   162,   163,   164,    -1,   166,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,    -1,   178,    -1,    -1,
      -1,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,    -1,    -1,   228,   229,   230,
     231,    -1,   233,   234,   235,    -1,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,    -1,   270,
     271,   272,   273,    -1,   275,   276,   277,   278,   279,   280,
      -1,   282,   283,   284,    -1,   286,   287,   288,    -1,    -1,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,    -1,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,    -1,   368,   369,   370,
     371,   372,    -1,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,    -1,
     401,   402,    -1,   404,   405,   406,   407,   408,   409,   410,
      -1,   412,   413,    -1,    -1,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
     441,   442,   443,   444,    -1,   446,   447,   448,   449,   450,
     451,   452,    -1,    -1,   455,    -1,    -1,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    74,
      -1,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    90,    91,    -1,    93,    94,
      95,    96,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,    -1,
     115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,    -1,   159,    -1,   161,   162,   163,   164,
      -1,   166,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,    -1,   178,    -1,    -1,    -1,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,    -1,    -1,   228,   229,   230,   231,    -1,   233,   234,
     235,    -1,    -1,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,    -1,   270,   271,   272,   273,    -1,
     275,   276,   277,   278,   279,   280,    -1,   282,   283,    -1,
      -1,   286,   287,   288,    -1,    -1,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,    -1,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    -1,   368,   369,   370,   371,   372,    -1,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,    -1,   401,   402,    -1,   404,
     405,   406,   407,   408,   409,   410,    -1,   412,   413,    -1,
      -1,   416,   417,   418,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,    -1,   438,   439,   440,   441,   442,   443,   444,
      -1,   446,   447,   448,   449,   450,   451,   452,    -1,    -1,
     455,    -1,    -1,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    93,    94,    95,    96,    -1,    -1,
      -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,    -1,
     159,    -1,   161,   162,   163,   164,    -1,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,    -1,   178,
      -1,    -1,    -1,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,
     229,   230,   231,    -1,   233,   234,   235,    -1,    -1,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
      -1,   270,   271,   272,   273,    -1,   275,   276,   277,   278,
     279,   280,    -1,   282,   283,    -1,    -1,   286,   287,   288,
      -1,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,    -1,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,    -1,   368,
     369,   370,   371,   372,    -1,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,   401,   402,    -1,   404,   405,   406,   407,   408,
     409,   410,    -1,   412,   413,    -1,    -1,   416,   417,   418,
     419,   420,    -1,   422,   423,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,    -1,   438,
     439,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
     449,   450,   451,   452,    -1,    -1,   455,    -1,    -1,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      -1,    -1,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    -1,
      -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,    -1,   115,    -1,   117,   118,   119,   120,   121,   122,
      -1,   124,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,    -1,   159,    -1,   161,   162,
     163,   164,    -1,   166,   167,   168,    -1,    -1,    -1,   172,
     173,   174,    -1,   176,    -1,   178,    -1,    -1,    -1,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,    -1,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,
     233,   234,   235,    -1,    -1,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,   268,    -1,   270,   271,    -1,
     273,    -1,   275,   276,   277,   278,   279,   280,    -1,   282,
     283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,    -1,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,    -1,   368,   369,   370,   371,   372,
      -1,   374,   375,   376,   377,   378,    -1,   380,   381,   382,
     383,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,    -1,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,    -1,    -1,   416,   417,   418,   419,   420,    -1,   422,
     423,   424,   425,   426,   427,   428,    -1,   430,   431,   432,
     433,   434,   435,    -1,    -1,   438,   439,   440,   441,   442,
     443,   444,    -1,   446,    -1,   448,   449,   450,   451,   452,
      -1,    -1,   455,    -1,    -1,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
      47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    -1,    -1,    94,    95,    96,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,    -1,   115,    -1,
     117,   118,   119,   120,   121,   122,    -1,   124,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,    -1,   159,    -1,   161,   162,   163,   164,    -1,   166,
     167,   168,    -1,    -1,    -1,   172,   173,   174,    -1,   176,
      -1,   178,    -1,    -1,    -1,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,    -1,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,    -1,
      -1,   228,    -1,   230,   231,    -1,   233,   234,   235,    -1,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,   268,    -1,   270,   271,    -1,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,    -1,   286,
     287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,    -1,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
      -1,   368,   369,   370,   371,   372,    -1,   374,   375,   376,
     377,   378,    -1,   380,   381,   382,   383,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,    -1,   401,   402,    -1,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,    -1,    -1,   416,
     417,   418,   419,   420,    -1,   422,   423,   424,   425,   426,
     427,   428,    -1,   430,   431,   432,   433,   434,   435,    -1,
      -1,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
      -1,   448,   449,   450,   451,   452,    -1,    -1,   455,    -1,
      -1,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      31,    32,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,    -1,   159,    -1,
     161,   162,   163,   164,    -1,   166,    -1,   168,    -1,    -1,
      -1,   172,   173,   174,    -1,   176,    -1,   178,    -1,    -1,
      -1,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
      -1,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,    -1,    -1,   228,    -1,   230,
      -1,    -1,   233,   234,   235,    -1,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,   268,    -1,   270,
     271,    -1,   273,    -1,   275,   276,   277,   278,   279,   280,
      -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,    -1,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,    -1,   368,   369,   370,
     371,   372,    -1,   374,   375,   376,   377,   378,    -1,   380,
     381,   382,   383,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,    -1,
     401,   402,    -1,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,    -1,    -1,   416,   417,   418,   419,   420,
      -1,   422,   423,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
     441,   442,   443,   444,    -1,   446,    -1,   448,   449,   450,
     451,   452,    -1,    -1,   455,    -1,    -1,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,     3,     4,
      -1,    -1,    -1,    -1,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,
      45,    46,    47,    48,    49,    -1,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    -1,
      -1,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      -1,    86,    87,    88,    89,    90,    91,    -1,    -1,    94,
      95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,    -1,
     115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,    -1,   159,    -1,   161,   162,   163,   164,
      -1,   166,    -1,   168,    -1,    -1,    -1,   172,   173,   174,
      -1,   176,    -1,   178,    -1,    -1,    -1,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,    -1,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,
     235,    -1,    -1,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,   268,    -1,   270,   271,    -1,   273,    -1,
     275,   276,   277,   278,   279,   280,    -1,   282,   283,    -1,
      -1,   286,   287,   288,    -1,    -1,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,    -1,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    -1,   368,   369,   370,   371,   372,    -1,   374,
     375,   376,   377,   378,    -1,   380,   381,   382,   383,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,    -1,   401,   402,    -1,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,    -1,
      -1,   416,   417,   418,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,    -1,   438,   439,   440,   441,   442,   443,   444,
      -1,   446,    -1,   448,   449,   450,   451,   452,    -1,    -1,
     455,    -1,    -1,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,    -1,
     159,    -1,   161,   162,   163,   164,    -1,   166,    -1,   168,
      -1,    -1,    -1,   172,   173,   174,    -1,   176,    -1,   178,
      -1,    -1,    -1,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,    -1,    -1,   228,
      -1,   230,    -1,    -1,   233,   234,   235,    -1,    -1,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,   268,
      -1,   270,   271,    -1,   273,    -1,   275,   276,   277,   278,
     279,   280,    -1,   282,   283,    -1,    -1,   286,   287,   288,
      -1,    -1,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,    -1,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,    -1,   368,
     369,   370,   371,   372,    -1,   374,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,   401,   402,    -1,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,    -1,    -1,   416,   417,   418,
     419,   420,    -1,   422,   423,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,    -1,   438,
     439,   440,   441,   442,   443,   444,    -1,   446,    -1,   448,
     449,   450,   451,   452,    -1,    -1,   455,    -1,    -1,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
      -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,    -1,   115,    -1,   117,   118,   119,   120,   121,   122,
      -1,   124,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,    -1,   159,    -1,   161,   162,
     163,   164,    -1,   166,    -1,   168,    -1,    -1,    -1,   172,
     173,   174,    -1,   176,    -1,   178,    -1,    -1,    -1,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,    -1,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,
     233,   234,   235,    -1,    -1,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,   268,    -1,   270,   271,    -1,
     273,    -1,   275,   276,   277,   278,   279,   280,    -1,   282,
     283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,    -1,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,    -1,   368,   369,   370,   371,   372,
      -1,   374,   375,   376,   377,   378,    -1,   380,   381,   382,
     383,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,    -1,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,    -1,    -1,   416,   417,   418,   419,   420,    -1,   422,
     423,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,    -1,   438,   439,   440,   441,   442,
     443,   444,    -1,   446,    -1,   448,   449,   450,   451,   452,
      -1,    -1,   455,    -1,    -1,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
      47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    -1,    86,
      87,    88,    89,    90,    91,    -1,    -1,    94,    95,    96,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,    -1,   115,    -1,
     117,   118,   119,   120,   121,   122,    -1,   124,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,    -1,   159,    -1,   161,   162,   163,   164,    -1,   166,
      -1,   168,    -1,    -1,    -1,   172,   173,   174,    -1,   176,
      -1,   178,    -1,    -1,    -1,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,    -1,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,    -1,
      -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,    -1,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,   268,    -1,   270,   271,    -1,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,   285,   286,
     287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,    -1,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
      -1,   368,   369,   370,   371,   372,    -1,   374,   375,   376,
     377,   378,    -1,   380,   381,   382,   383,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,    -1,   401,   402,    -1,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,    -1,    -1,   416,
     417,   418,   419,   420,    -1,   422,   423,   424,   425,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
      -1,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
      -1,   448,   449,   450,   451,   452,    -1,    -1,   455,    -1,
      -1,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,    -1,   159,    -1,
     161,   162,   163,   164,    -1,   166,    -1,   168,    -1,    -1,
      -1,   172,   173,   174,    -1,   176,    -1,   178,    -1,    -1,
      -1,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
      -1,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,    -1,    -1,   228,    -1,   230,
      -1,    -1,   233,   234,   235,    -1,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,   268,    -1,   270,
     271,    -1,   273,    -1,   275,   276,   277,   278,   279,   280,
      -1,   282,   283,    -1,   285,   286,   287,   288,    -1,    -1,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,    -1,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,    -1,   368,   369,   370,
     371,   372,    -1,   374,   375,   376,   377,   378,    -1,   380,
     381,   382,   383,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,    -1,
     401,   402,    -1,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,    -1,    -1,   416,   417,   418,   419,   420,
      -1,   422,   423,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
     441,   442,   443,   444,    -1,   446,    -1,   448,   449,   450,
     451,   452,    -1,    -1,   455,    -1,    -1,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,
      45,    46,    47,    48,    49,    -1,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    -1,
      -1,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      -1,    86,    87,    88,    89,    90,    91,    -1,    -1,    94,
      95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,    -1,
     115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,    -1,   159,    -1,   161,   162,   163,   164,
      -1,   166,    -1,   168,    -1,    -1,    -1,   172,   173,   174,
      -1,   176,    -1,   178,    -1,    -1,    -1,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,    -1,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,
     235,    -1,    -1,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,   268,    -1,   270,   271,    -1,   273,    -1,
     275,   276,   277,   278,   279,   280,    -1,   282,   283,    -1,
      -1,   286,   287,   288,    -1,    -1,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,    -1,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    -1,   368,   369,   370,   371,   372,    -1,   374,
     375,   376,   377,   378,    -1,   380,   381,   382,   383,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,    -1,   401,   402,    -1,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,    -1,
      -1,   416,   417,   418,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,    -1,   438,   439,   440,   441,   442,   443,   444,
      -1,   446,    -1,   448,   449,   450,   451,   452,    -1,    -1,
     455,    -1,    -1,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,    -1,
     159,    -1,   161,   162,   163,   164,    -1,   166,    -1,   168,
      -1,    -1,    -1,   172,   173,   174,    -1,   176,    -1,   178,
      -1,    -1,    -1,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,    -1,    -1,   228,
      -1,   230,    -1,    -1,   233,   234,   235,    -1,    -1,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,   268,
      -1,   270,   271,    -1,   273,    -1,   275,   276,   277,   278,
     279,   280,    -1,   282,   283,    -1,    -1,   286,   287,   288,
      -1,    -1,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,    -1,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,    -1,   368,
     369,   370,   371,   372,    -1,   374,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,   401,   402,   403,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,    -1,    -1,   416,   417,   418,
     419,   420,    -1,   422,   423,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,    -1,   438,
     439,   440,   441,   442,   443,   444,    -1,   446,    -1,   448,
     449,   450,   451,   452,    -1,    -1,   455,    -1,    -1,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    36,    -1,    38,    39,    -1,    41,    42,
      43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
      -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,    -1,   115,    -1,   117,   118,   119,   120,   121,   122,
      -1,   124,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,    -1,   159,    -1,   161,   162,
     163,   164,    -1,   166,    -1,   168,    -1,    -1,    -1,   172,
     173,   174,    -1,   176,    -1,   178,    -1,    -1,    -1,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,    -1,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,
     233,   234,   235,    -1,    -1,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,   268,    -1,   270,   271,    -1,
     273,    -1,   275,   276,   277,   278,   279,   280,    -1,   282,
     283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,    -1,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,    -1,   368,   369,   370,   371,   372,
      -1,   374,   375,   376,   377,   378,    -1,   380,   381,   382,
     383,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,    -1,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,    -1,    -1,   416,   417,   418,   419,   420,    -1,   422,
     423,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,    -1,   438,   439,   440,   441,   442,
     443,   444,    -1,   446,    -1,   448,   449,   450,   451,   452,
      -1,    -1,   455,    -1,    -1,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    36,
      -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
      47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    -1,    86,
      87,    88,    89,    90,    91,    -1,    -1,    94,    95,    96,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,    -1,   115,    -1,
     117,   118,   119,   120,   121,   122,    -1,   124,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,    -1,   159,    -1,   161,   162,   163,   164,    -1,   166,
      -1,   168,    -1,    -1,    -1,   172,   173,   174,    -1,   176,
      -1,   178,    -1,    -1,    -1,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,    -1,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,    -1,
      -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,    -1,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,   268,    -1,   270,   271,    -1,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,    -1,   286,
     287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,    -1,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
      -1,   368,   369,   370,   371,   372,    -1,   374,   375,   376,
     377,   378,    -1,   380,   381,   382,   383,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,    -1,   401,   402,    -1,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,    -1,    -1,   416,
     417,   418,   419,   420,    -1,   422,   423,   424,   425,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
      -1,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
      -1,   448,   449,   450,   451,   452,    -1,    -1,   455,    -1,
      -1,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,    -1,   159,    -1,
     161,   162,   163,   164,    -1,   166,    -1,   168,    -1,    -1,
      -1,   172,   173,   174,    -1,   176,    -1,   178,    -1,    -1,
      -1,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
      -1,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,    -1,    -1,   228,    -1,   230,
      -1,    -1,   233,   234,   235,    -1,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,   268,    -1,   270,
     271,    -1,   273,    -1,   275,   276,   277,   278,   279,   280,
      -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,    -1,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,    -1,   368,   369,   370,
     371,   372,    -1,   374,   375,   376,   377,   378,    -1,   380,
     381,   382,   383,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,    -1,
     401,   402,    -1,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,    -1,    -1,   416,   417,   418,   419,   420,
      -1,   422,   423,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
     441,   442,   443,   444,    -1,   446,    -1,   448,   449,   450,
     451,   452,    -1,    -1,   455,    -1,    -1,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,
      45,    46,    47,    48,    49,    -1,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    -1,
      -1,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      -1,    86,    87,    88,    89,    90,    91,    -1,    -1,    94,
      95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,    -1,
     115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,    -1,   159,    -1,   161,   162,   163,   164,
      -1,   166,    -1,   168,    -1,    -1,    -1,   172,   173,   174,
      -1,   176,    -1,   178,    -1,    -1,    -1,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,    -1,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,
     235,    -1,    -1,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,   268,    -1,   270,   271,    -1,   273,    -1,
     275,   276,   277,   278,   279,   280,    -1,   282,   283,    -1,
      -1,   286,   287,   288,    -1,    -1,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,    -1,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    -1,   368,   369,   370,   371,   372,    -1,   374,
     375,   376,   377,   378,    -1,   380,   381,   382,   383,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,    -1,   401,   402,    -1,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,    -1,
      -1,   416,   417,   418,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,    -1,   438,   439,   440,   441,   442,   443,   444,
      -1,   446,    -1,   448,   449,   450,   451,   452,    -1,    -1,
     455,    -1,    -1,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,    -1,
     159,    -1,   161,   162,   163,   164,    -1,   166,    -1,   168,
      -1,    -1,    -1,   172,   173,   174,    -1,   176,    -1,   178,
      -1,    -1,    -1,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,    -1,    -1,   228,
      -1,   230,    -1,    -1,   233,   234,   235,    -1,    -1,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,   268,
      -1,   270,   271,    -1,   273,    -1,   275,   276,   277,   278,
     279,   280,    -1,   282,   283,    -1,    -1,   286,   287,   288,
      -1,    -1,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,    -1,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,    -1,   368,
     369,   370,   371,   372,    -1,   374,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,   401,   402,    -1,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,    -1,    -1,   416,   417,   418,
     419,   420,    -1,   422,   423,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,    -1,   438,
     439,   440,   441,   442,   443,   444,    -1,   446,    -1,   448,
     449,   450,   451,   452,    -1,    -1,   455,    -1,    -1,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
      -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,    -1,   115,    -1,   117,   118,   119,   120,   121,   122,
      -1,   124,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,    -1,   159,    -1,   161,   162,
     163,   164,    -1,   166,    -1,   168,    -1,    -1,    -1,   172,
     173,   174,    -1,   176,    -1,   178,    -1,    -1,    -1,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,    -1,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,
     233,   234,   235,    -1,    -1,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,   268,    -1,   270,   271,    -1,
     273,    -1,   275,   276,   277,   278,   279,   280,    -1,   282,
     283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,    -1,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,    -1,   368,   369,   370,   371,   372,
      -1,   374,   375,   376,   377,   378,    -1,   380,   381,   382,
     383,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,    -1,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,    -1,    -1,   416,   417,   418,   419,   420,    -1,   422,
     423,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,    -1,   438,   439,   440,   441,   442,
     443,   444,    -1,   446,    -1,   448,   449,   450,   451,   452,
      -1,    -1,   455,    -1,    -1,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
      47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    -1,    86,
      87,    88,    89,    90,    91,    -1,    -1,    94,    95,    96,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,    -1,   115,    -1,
     117,   118,   119,   120,   121,   122,    -1,   124,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,    -1,   159,    -1,   161,   162,   163,   164,    -1,   166,
      -1,   168,    -1,    -1,    -1,   172,   173,   174,    -1,   176,
      -1,   178,    -1,    -1,    -1,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,    -1,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,    -1,
      -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,    -1,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,   268,    -1,   270,   271,    -1,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,    -1,   286,
     287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,    -1,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
      -1,   368,   369,   370,   371,   372,    -1,   374,   375,   376,
     377,   378,    -1,   380,   381,   382,   383,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,    -1,   401,   402,    -1,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,    -1,    -1,   416,
     417,   418,   419,   420,    -1,   422,   423,   424,   425,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
      -1,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
      -1,   448,   449,   450,   451,   452,    -1,    -1,   455,    -1,
      -1,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,    -1,   159,    -1,
     161,   162,   163,   164,    -1,   166,    -1,   168,    -1,    -1,
      -1,   172,   173,   174,    -1,   176,    -1,   178,    -1,    -1,
      -1,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
      -1,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,    -1,    -1,   228,    -1,   230,
      -1,    -1,   233,   234,   235,    -1,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,   268,    -1,   270,
     271,    -1,   273,    -1,   275,   276,   277,   278,   279,   280,
      -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,    -1,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,    -1,   368,   369,   370,
     371,   372,    -1,   374,   375,   376,   377,   378,    -1,   380,
     381,   382,   383,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,    -1,
     401,   402,    -1,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,    -1,    -1,   416,   417,   418,   419,   420,
      -1,   422,   423,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
     441,   442,   443,   444,    -1,   446,    -1,   448,   449,   450,
     451,   452,    -1,    -1,   455,    -1,    -1,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,
      45,    46,    47,    48,    49,    -1,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    -1,
      -1,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      -1,    86,    87,    88,    89,    90,    91,    -1,    -1,    94,
      95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,    -1,
     115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,    -1,   159,    -1,   161,   162,   163,   164,
      -1,   166,    -1,   168,    -1,    -1,    -1,   172,   173,   174,
      -1,   176,    -1,   178,    -1,    -1,    -1,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,    -1,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,
     235,    -1,    -1,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,   268,    -1,   270,   271,    -1,   273,    -1,
     275,   276,   277,   278,   279,   280,    -1,   282,   283,    -1,
      -1,   286,   287,   288,    -1,    -1,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,    -1,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    -1,   368,   369,   370,   371,   372,    -1,   374,
     375,   376,   377,   378,    -1,   380,   381,   382,   383,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,    -1,   401,   402,    -1,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,    -1,
      -1,   416,   417,   418,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,    -1,   438,   439,   440,   441,   442,   443,   444,
      -1,   446,    -1,   448,   449,   450,   451,   452,    -1,    -1,
     455,    -1,    -1,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,    -1,
     159,    -1,   161,   162,   163,   164,    -1,   166,    -1,   168,
      -1,    -1,    -1,   172,   173,   174,    -1,   176,    -1,   178,
      -1,    -1,    -1,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,    -1,    -1,   228,
      -1,   230,    -1,    -1,   233,   234,   235,    -1,    -1,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,   268,
      -1,   270,   271,    -1,   273,    -1,   275,   276,   277,   278,
     279,   280,    -1,   282,   283,    -1,    -1,   286,   287,   288,
      -1,    -1,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,    -1,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,    -1,   368,
     369,   370,   371,   372,    -1,   374,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,   401,   402,    -1,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,    -1,    -1,   416,   417,   418,
     419,   420,    -1,   422,   423,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,    -1,   438,
     439,   440,   441,   442,   443,   444,    -1,   446,    -1,   448,
     449,   450,   451,   452,    -1,    -1,   455,    -1,    -1,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
      -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,    -1,   115,    -1,   117,   118,   119,   120,   121,   122,
      -1,   124,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,    -1,   159,    -1,   161,   162,
     163,   164,    -1,   166,    -1,   168,    -1,    -1,    -1,   172,
     173,   174,    -1,   176,    -1,   178,    -1,    -1,    -1,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,    -1,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,
     233,   234,   235,    -1,    -1,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,   268,    -1,   270,   271,    -1,
     273,    -1,   275,   276,   277,   278,   279,   280,    -1,   282,
     283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,    -1,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,    -1,   368,   369,   370,   371,   372,
      -1,   374,   375,   376,   377,   378,    -1,   380,   381,   382,
     383,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,    -1,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,    -1,    -1,   416,   417,   418,   419,   420,    -1,   422,
     423,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,    -1,   438,   439,   440,   441,   442,
     443,   444,    -1,   446,    -1,   448,   449,   450,   451,   452,
      -1,    -1,   455,    -1,    -1,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
      47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    -1,    86,
      87,    88,    89,    90,    91,    -1,    -1,    94,    95,    96,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,    -1,   115,    -1,
     117,   118,   119,   120,   121,   122,    -1,   124,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,    -1,   159,    -1,   161,   162,   163,   164,    -1,   166,
      -1,   168,    -1,    -1,    -1,   172,   173,   174,    -1,   176,
      -1,   178,    -1,    -1,    -1,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,    -1,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,    -1,
      -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,    -1,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,   268,    -1,   270,   271,    -1,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,    -1,   286,
     287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,    -1,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
      -1,   368,   369,   370,   371,   372,    -1,   374,   375,   376,
     377,   378,    -1,   380,   381,   382,   383,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,    -1,   401,   402,    -1,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,    -1,    -1,   416,
     417,   418,   419,   420,    -1,   422,   423,   424,   425,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
      -1,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
      -1,   448,   449,   450,   451,   452,    -1,    -1,   455,    -1,
      -1,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,    -1,   159,    -1,
     161,   162,   163,   164,    -1,   166,    -1,   168,    -1,    -1,
      -1,   172,   173,   174,    -1,   176,    -1,   178,    -1,    -1,
      -1,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
      -1,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,    -1,    -1,   228,    -1,   230,
      -1,    -1,   233,   234,   235,    -1,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,   268,    -1,   270,
     271,    -1,   273,    -1,   275,   276,   277,   278,   279,   280,
      -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,    -1,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,    -1,   368,   369,   370,
     371,   372,    -1,   374,   375,   376,   377,   378,    -1,   380,
     381,   382,   383,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,    -1,
     401,   402,    -1,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,    -1,    -1,   416,   417,   418,   419,   420,
      -1,   422,   423,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
     441,   442,   443,   444,    -1,   446,    -1,   448,   449,   450,
     451,   452,    -1,    -1,   455,    -1,    -1,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,
      45,    46,    47,    48,    49,    -1,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    -1,
      -1,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      -1,    86,    87,    88,    89,    90,    91,    -1,    -1,    94,
      95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,    -1,
     115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,    -1,   159,    -1,   161,   162,   163,   164,
      -1,   166,    -1,   168,    -1,    -1,    -1,   172,   173,   174,
      -1,   176,    -1,   178,    -1,    -1,    -1,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,    -1,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,
     235,    -1,    -1,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,   268,    -1,   270,   271,    -1,   273,    -1,
     275,   276,   277,   278,   279,   280,    -1,   282,   283,    -1,
      -1,   286,   287,   288,    -1,    -1,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,    -1,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    -1,   368,   369,   370,   371,   372,    -1,   374,
     375,   376,   377,   378,    -1,   380,   381,   382,   383,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,    -1,   401,   402,    -1,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,    -1,
      -1,   416,   417,   418,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,    -1,   438,   439,   440,   441,   442,   443,   444,
      -1,   446,    -1,   448,   449,   450,   451,   452,    -1,    -1,
     455,    -1,    -1,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,    -1,
     159,    -1,   161,   162,   163,   164,    -1,   166,    -1,   168,
      -1,    -1,    -1,   172,   173,   174,    -1,   176,    -1,   178,
      -1,    -1,    -1,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,    -1,    -1,   228,
      -1,   230,    -1,    -1,   233,   234,   235,    -1,    -1,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,   268,
      -1,   270,   271,    -1,   273,    -1,   275,   276,   277,   278,
     279,   280,    -1,   282,   283,    -1,    -1,   286,   287,   288,
      -1,    -1,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,    -1,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,    -1,   368,
     369,   370,   371,   372,    -1,   374,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,   401,   402,    -1,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,    -1,    -1,   416,   417,   418,
     419,   420,    -1,   422,   423,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,    -1,   438,
     439,   440,   441,   442,   443,   444,    -1,   446,    -1,   448,
     449,   450,   451,   452,    -1,    -1,   455,    -1,    -1,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
      -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,    -1,   115,    -1,   117,   118,   119,   120,   121,   122,
      -1,   124,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,    -1,   159,    -1,   161,   162,
     163,   164,    -1,   166,    -1,   168,    -1,    -1,    -1,   172,
     173,   174,    -1,   176,    -1,   178,    -1,    -1,    -1,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,    -1,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,
     233,   234,   235,    -1,    -1,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,   268,    -1,   270,   271,    -1,
     273,    -1,   275,   276,   277,   278,   279,   280,    -1,   282,
     283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,    -1,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,    -1,   368,   369,   370,   371,   372,
      -1,   374,   375,   376,   377,   378,    -1,   380,   381,   382,
     383,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,    -1,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,    -1,    -1,   416,   417,   418,   419,   420,    -1,   422,
     423,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,    -1,   438,   439,   440,   441,   442,
     443,   444,    -1,   446,    -1,   448,   449,   450,   451,   452,
      -1,    -1,   455,    -1,    -1,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    36,
      -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
      47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    -1,    86,
      87,    88,    89,    90,    91,    -1,    -1,    94,    95,    96,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,    -1,   115,    -1,
     117,   118,   119,   120,   121,   122,    -1,   124,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,    -1,   159,    -1,   161,   162,   163,   164,    -1,   166,
      -1,   168,    -1,    -1,    -1,   172,   173,   174,    -1,   176,
      -1,   178,    -1,    -1,    -1,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,    -1,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,    -1,
      -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,    -1,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,   268,    -1,   270,   271,    -1,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,    -1,   286,
     287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,    -1,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
      -1,   368,   369,   370,   371,   372,    -1,    -1,   375,   376,
     377,   378,    -1,   380,   381,   382,   383,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,    -1,   401,   402,    -1,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,    -1,    -1,   416,
     417,   418,   419,   420,    -1,   422,   423,   424,   425,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
      -1,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
      -1,   448,   449,   450,   451,   452,    -1,    -1,   455,    -1,
      -1,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,    -1,   159,    -1,
     161,   162,   163,   164,    -1,   166,    -1,   168,    -1,    -1,
      -1,   172,   173,   174,    -1,   176,    -1,   178,    -1,    -1,
      -1,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
      -1,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,    -1,    -1,   228,    -1,   230,
      -1,    -1,   233,   234,   235,    -1,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,   268,    -1,   270,
     271,    -1,   273,    -1,   275,   276,   277,   278,   279,   280,
      -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,    -1,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,    -1,   368,   369,   370,
     371,   372,    -1,   374,   375,   376,   377,   378,    -1,   380,
     381,   382,   383,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,    -1,
     401,   402,    -1,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,    -1,    -1,   416,   417,   418,   419,   420,
      -1,   422,   423,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
     441,   442,   443,   444,    -1,   446,    -1,   448,   449,   450,
     451,   452,    -1,    -1,   455,    -1,    -1,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,
      45,    46,    47,    48,    49,    -1,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    -1,
      -1,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      -1,    86,    87,    88,    89,    90,    91,    -1,    -1,    94,
      95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,    -1,
     115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,    -1,   159,    -1,   161,   162,   163,   164,
      -1,   166,    -1,   168,    -1,    -1,    -1,   172,   173,   174,
      -1,   176,    -1,   178,    -1,    -1,    -1,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,    -1,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,
     235,    -1,    -1,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,   268,    -1,   270,   271,    -1,   273,    -1,
     275,   276,   277,   278,   279,   280,    -1,   282,   283,    -1,
      -1,   286,   287,   288,    -1,    -1,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,    -1,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    -1,   368,   369,   370,   371,   372,    -1,   374,
     375,   376,   377,   378,    -1,   380,   381,   382,   383,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,    -1,   401,   402,    -1,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,    -1,
      -1,   416,   417,   418,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,    -1,   438,   439,   440,   441,   442,   443,   444,
      -1,   446,    -1,   448,   449,   450,   451,   452,    -1,    -1,
     455,    -1,    -1,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,    -1,
     159,    -1,   161,   162,   163,   164,    -1,   166,    -1,   168,
      -1,    -1,    -1,   172,   173,   174,    -1,   176,    -1,   178,
      -1,    -1,    -1,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,    -1,    -1,   228,
      -1,   230,    -1,    -1,   233,   234,   235,    -1,    -1,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,   268,
      -1,   270,   271,    -1,   273,    -1,   275,   276,   277,   278,
     279,   280,    -1,   282,   283,    -1,    -1,   286,   287,   288,
      -1,    -1,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,    -1,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,    -1,   368,
     369,   370,   371,   372,    -1,   374,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,   401,   402,    -1,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,    -1,    -1,   416,   417,   418,
     419,   420,    -1,   422,   423,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,    -1,   438,
     439,   440,   441,   442,   443,   444,    -1,   446,    -1,   448,
     449,   450,   451,   452,    -1,    -1,   455,    -1,    -1,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
      -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,    -1,   115,    -1,   117,   118,   119,   120,   121,   122,
      -1,   124,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,    -1,   159,    -1,   161,   162,
     163,   164,    -1,   166,    -1,   168,    -1,    -1,    -1,   172,
     173,   174,    -1,   176,    -1,   178,    -1,    -1,    -1,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,    -1,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,
     233,   234,   235,    -1,    -1,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,   268,    -1,   270,   271,    -1,
     273,    -1,   275,   276,   277,   278,   279,   280,    -1,   282,
     283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,    -1,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,    -1,   368,   369,   370,   371,   372,
      -1,   374,   375,   376,   377,   378,    -1,   380,   381,   382,
     383,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,    -1,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,    -1,    -1,   416,   417,   418,   419,   420,    -1,   422,
     423,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,    -1,   438,   439,   440,   441,   442,
     443,   444,    -1,   446,    -1,   448,   449,   450,   451,   452,
      -1,    -1,   455,    -1,    -1,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
      47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    -1,    86,
      87,    88,    89,    90,    91,    -1,    -1,    94,    95,    96,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,    -1,   115,    -1,
     117,   118,   119,   120,   121,   122,    -1,   124,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,    -1,   159,    -1,   161,   162,   163,   164,    -1,   166,
      -1,   168,    -1,    -1,    -1,   172,   173,   174,    -1,   176,
      -1,   178,    -1,    -1,    -1,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,    -1,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,    -1,
      -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,    -1,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,   268,    -1,   270,   271,    -1,   273,    -1,   275,   276,
     277,   278,   279,   280,    -1,   282,   283,    -1,    -1,   286,
     287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,    -1,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
      -1,   368,   369,   370,   371,   372,    -1,   374,   375,   376,
     377,   378,    -1,   380,   381,   382,   383,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,    -1,   401,   402,    -1,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,    -1,    -1,   416,
     417,   418,   419,   420,    -1,   422,   423,   424,   425,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
      -1,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
      -1,   448,   449,   450,   451,   452,    -1,    -1,   455,    -1,
      -1,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,    -1,   159,    -1,
     161,   162,   163,   164,    -1,   166,    -1,   168,    -1,    -1,
      -1,   172,   173,   174,    -1,   176,    -1,   178,    -1,    -1,
      -1,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
      -1,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,    -1,    -1,   228,    -1,   230,
      -1,    -1,   233,   234,   235,    -1,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,   268,    -1,   270,
     271,    -1,   273,    -1,   275,   276,   277,   278,   279,   280,
      -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,    -1,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,    -1,   368,   369,   370,
     371,   372,    -1,   374,   375,   376,   377,   378,    -1,   380,
     381,   382,   383,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,    -1,
     401,   402,    -1,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,    -1,    -1,   416,   417,   418,   419,   420,
      -1,   422,   423,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
     441,   442,   443,   444,    -1,   446,    -1,   448,   449,   450,
     451,   452,    -1,    -1,   455,    -1,    -1,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    44,
      45,    46,    47,    -1,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    -1,    -1,    74,
      -1,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    90,    91,    -1,    93,    94,
      95,    96,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,    -1,
     115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,    -1,   153,   154,
     155,   156,    -1,    -1,   159,    -1,   161,   162,   163,   164,
      -1,   166,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,    -1,   178,    -1,    -1,    -1,    -1,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
     205,    -1,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,    -1,    -1,   228,   229,   230,   231,    -1,   233,   234,
     235,    -1,    -1,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,    -1,    -1,   270,   271,   272,   273,    -1,
      -1,   276,   277,   278,   279,   280,    -1,   282,   283,    -1,
      -1,   286,   287,   288,    -1,    -1,   291,    -1,   293,   294,
     295,    -1,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,   308,   309,    -1,   311,   312,    -1,   314,
     315,   316,    -1,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,    -1,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    -1,   368,   369,   370,   371,   372,    -1,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,    -1,   401,   402,    -1,   404,
     405,   406,   407,   408,   409,   410,    -1,   412,   413,    -1,
      -1,   416,   417,    -1,   419,    -1,    -1,   422,   423,   424,
     425,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,    -1,   438,   439,   440,   441,   442,    -1,   444,
      -1,   446,   447,   448,   449,   450,   451,   452,    -1,    -1,
     455,    -1,    -1,   458,   459,   460,   461,   462,   463,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     475,   476,   477,   478,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,   125,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,    -1,   159,    -1,   161,   162,   163,
     164,    -1,   166,    -1,   168,    -1,    -1,    -1,   172,   173,
     174,    -1,   176,    -1,   178,    -1,    -1,    -1,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,
     234,   235,    -1,    -1,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,   268,    -1,   270,   271,    -1,   273,
      -1,   275,   276,   277,   278,   279,   280,    -1,   282,   283,
      -1,    -1,   286,   287,   288,    -1,    -1,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,    -1,
     304,   305,   306,    -1,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,   318,   319,   320,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
      -1,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,    -1,   352,   353,
     354,   355,    -1,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,    -1,   401,   402,    -1,
     404,    -1,   406,   407,   408,   409,   410,    -1,   412,   413,
      -1,    -1,   416,   417,   418,   419,   420,    -1,   422,   423,
     424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,    -1,    -1,   438,   439,   440,   441,   442,   443,
     444,    -1,   446,    -1,   448,   449,   450,   451,   452,    -1,
      -1,   455,    -1,    -1,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    -1,    41,    42,    43,    44,    45,    46,    47,
      -1,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    -1,    -1,    62,    63,    64,    65,    66,    -1,
      68,    69,    70,    71,    -1,    -1,    74,    -1,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    90,    91,    -1,    93,    94,    95,    96,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,    -1,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,    -1,   153,   154,   155,   156,    -1,
      -1,   159,    -1,   161,   162,   163,   164,    -1,   166,    -1,
     168,   169,    -1,   171,   172,   173,   174,   175,   176,    -1,
     178,    -1,    -1,    -1,    -1,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,   205,    -1,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,    -1,    -1,
     228,   229,   230,   231,    -1,   233,   234,   235,    -1,    -1,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
      -1,    -1,   270,   271,   272,   273,    -1,    -1,   276,   277,
     278,   279,   280,    -1,   282,   283,    -1,    -1,   286,   287,
     288,    -1,    -1,   291,    -1,   293,   294,   295,    -1,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
     308,   309,    -1,   311,   312,    -1,   314,   315,   316,    -1,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,    -1,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,    -1,
     368,   369,   370,   371,   372,    -1,   374,    -1,   376,   377,
     378,   379,   380,   381,   382,   383,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,    -1,
     398,    -1,    -1,   401,   402,    -1,   404,   405,   406,   407,
     408,   409,   410,    -1,   412,   413,    -1,    -1,   416,   417,
      -1,   419,    -1,    -1,   422,   423,   424,   425,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,   441,   442,    -1,   444,    -1,   446,   447,
     448,   449,   450,   451,   452,    -1,    -1,   455,    -1,    -1,
     458,   459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   475,   476,   477,
     478
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    19,    29,    31,    32,    47,    56,    68,    79,    90,
      92,   110,   124,   136,   143,   151,   153,   154,   166,   195,
     234,   311,   314,   345,   353,   367,   374,   378,   389,   403,
     438,   443,   457,   481,   495,   503,   504,   505,   506,   507,
     514,   518,   564,   567,   568,   570,   572,   576,   577,   578,
     579,   580,   581,   625,   752,   762,   764,   765,   766,   767,
     774,   795,   798,   803,   806,   809,   810,   812,   813,   819,
     826,   828,   845,   848,   859,   865,   866,   867,   869,   871,
     872,   876,   416,   460,   868,   199,   360,   368,   403,   450,
     868,     3,    19,    20,    21,    22,    23,    24,    25,    26,
      28,    29,    30,    38,    39,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    54,    55,    56,
      57,    58,    59,    62,    63,    64,    65,    66,    68,    69,
      70,    71,    72,    74,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    86,    87,    88,    89,    90,    91,    93,
      94,    95,    96,   100,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   115,   117,   118,   119,   120,   121,
     122,   124,   125,   126,   127,   128,   129,   130,   133,   134,
     135,   136,   137,   138,   140,   141,   142,   144,   145,   146,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     159,   161,   162,   163,   164,   166,   168,   169,   171,   172,
     173,   174,   175,   176,   178,   182,   183,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   197,   198,
     199,   200,   201,   202,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   214,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   228,   229,   230,   231,   233,   234,
     235,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   270,   271,   272,   273,   275,   276,   277,   278,
     279,   280,   282,   283,   286,   287,   288,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   368,
     369,   370,   371,   372,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   401,
     402,   404,   405,   406,   407,   408,   409,   410,   412,   413,
     416,   417,   418,   419,   420,   422,   423,   424,   425,   426,
     427,   428,   431,   432,   433,   434,   435,   438,   439,   440,
     441,   442,   443,   444,   446,   447,   448,   449,   450,   451,
     452,   455,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   681,   739,   743,   745,   890,   891,   892,
     868,    50,   495,   840,   172,   176,   235,   242,   289,   324,
     360,   407,   409,   430,   433,   562,   773,   846,     3,    27,
     314,   737,   743,   890,    21,    74,    89,   146,   155,   167,
     172,   199,   242,   245,   309,   325,   357,   360,   368,   371,
     391,   403,   410,   419,   450,   814,   815,   818,   868,   737,
      92,   447,   495,   510,   514,   564,   572,   576,   866,   872,
     107,    68,   107,     5,   742,   763,   743,   737,    27,   412,
     416,   569,   743,   807,   808,   868,    27,   131,   588,   589,
     235,   360,   372,   412,   569,   860,   861,   868,   285,   636,
     735,   743,   171,   495,   800,   495,   332,   582,   583,   737,
     582,     3,   495,   577,   578,   581,     0,   498,   447,   508,
      27,   412,   416,   443,   569,   576,   147,   213,   290,   429,
     590,   591,   577,   579,   580,   499,   119,   209,   435,   190,
     735,   737,   190,   735,   190,   636,   190,   735,   495,   493,
     497,   726,   728,   572,   576,   805,   866,   872,   735,   407,
     409,   407,   409,   343,   179,   190,   743,   332,   368,   403,
     450,   199,   735,    27,   737,   247,   419,   106,   403,   450,
     363,   190,   743,   746,   816,   190,   736,   737,   190,   737,
     495,   870,   562,   510,     3,   511,   513,   514,   516,   517,
     890,   891,   892,   508,   742,   742,   484,   495,   495,   804,
     478,   219,   497,   284,     4,     6,     7,     8,     9,    10,
      49,    51,    52,    60,    61,    64,    65,    72,    74,    97,
      98,    99,   100,   101,   102,   103,   111,   112,   114,   135,
     152,   157,   158,   163,   211,   212,   214,   236,   237,   261,
     263,   269,   274,   275,   277,   286,   296,   310,   329,   355,
     373,   382,   399,   412,   413,   418,   420,   421,   436,   444,
     479,   486,   487,   488,   495,   500,   577,   651,   654,   657,
     658,   659,   661,   662,   663,   664,   666,   667,   678,   680,
     681,   682,   684,   697,   698,   702,   720,   725,   732,   733,
     739,   740,   741,   742,   743,   731,   732,   860,   742,   860,
     478,   170,   414,   484,   495,   735,   488,   728,     3,   169,
     171,   447,   514,   799,   801,   169,   802,   678,   706,   582,
     499,   495,   748,   499,   496,   496,   505,   735,   478,   219,
      27,   131,   587,   587,    54,   587,   160,   165,   232,   281,
     596,   598,   599,   618,   620,   621,   622,   590,   591,   495,
     170,   215,   573,   636,   152,    23,    29,   136,   288,   341,
     345,   374,   440,   853,   856,   857,   341,   152,    36,    55,
     105,   198,   246,   254,   266,   298,   341,   346,   368,   374,
     389,   820,   823,   856,   152,   341,   374,   856,   152,   341,
     374,   856,    27,   131,   445,   488,   496,   678,   707,   708,
     745,   749,   678,   727,     3,    27,    31,    32,    33,    34,
      35,    36,    37,    40,    53,    60,    61,    67,    73,    75,
      85,    92,    97,    98,    99,   101,   102,   103,   114,   116,
     123,   131,   132,   139,   143,   147,   158,   160,   165,   167,
     170,   177,   179,   180,   181,   184,   196,   203,   213,   215,
     226,   227,   232,   236,   237,   269,   274,   281,   284,   285,
     289,   290,   307,   317,   334,   348,   367,   373,   384,   400,
     403,   411,   414,   415,   421,   429,   430,   436,   437,   445,
     453,   454,   456,   457,   488,   738,   750,   890,   891,   892,
     893,   726,   496,   495,   552,   562,     3,   269,   796,   450,
     190,   735,   190,   566,   735,   735,    81,   770,   495,   847,
     461,    82,   127,   301,   408,   152,   497,   747,    58,   347,
     499,   817,   152,   499,   817,   152,   284,   706,   403,   496,
     499,     4,   158,   284,   421,   486,   487,   509,   511,   512,
     515,   741,   742,   822,   825,   510,   495,   835,   839,   515,
     822,   862,   864,   707,     3,    49,    51,    52,    64,    65,
     111,   112,   163,   211,   212,   214,   261,   263,   277,   329,
     355,   375,   382,   397,   412,   413,   444,   647,   648,   650,
     652,   654,   656,   658,   659,   660,   662,   663,   666,   667,
     709,   745,   890,    36,   230,   743,   495,   729,   446,   665,
     678,   724,   495,   665,   665,   495,   165,   495,   495,   495,
     653,   653,   313,   577,   495,   495,   655,   495,   495,    64,
      65,   665,   678,   495,   653,   495,   495,   495,   495,   495,
     459,   481,   495,   668,   495,   668,   495,   495,   678,   678,
     678,   577,   678,   706,   729,   728,   742,   495,   495,   741,
     742,     3,     8,    11,    16,    17,    18,    33,    36,    41,
      48,    73,   175,   191,   196,   217,   218,   231,   269,   272,
     286,   289,   379,   479,   482,   483,   484,   486,   487,   488,
     489,   490,   491,   700,   701,   702,   704,   458,   685,    15,
     295,   678,    15,   215,   499,   584,   495,   742,   728,   584,
       3,   114,   235,   667,   742,   822,   863,    96,   114,   864,
     114,   864,   735,   496,   499,   508,   496,   499,   583,   736,
      36,   244,   748,   230,   579,   579,   592,   593,   678,   579,
     162,   265,   612,   221,   266,   328,   377,   435,    27,   607,
     678,   486,   487,   608,   609,   678,   680,   618,   619,   599,
     598,   596,   597,   165,   621,   279,   623,   596,   618,   706,
     573,   735,   874,   374,    36,   743,   735,    67,    75,    85,
     167,   190,   317,   430,   533,   543,   558,   743,    75,    85,
     811,    85,   811,   495,   414,   495,   531,   241,   433,   531,
      85,   499,   414,   735,   650,   822,    54,   824,   822,   822,
     105,   246,   254,    54,   414,   457,   481,   821,   259,   360,
     821,   823,   636,    85,   414,   811,   360,   735,   414,   360,
     707,   707,   708,   496,   499,   590,   591,    13,    14,   494,
     501,   414,   551,   556,   743,   457,   838,   332,   450,   267,
     449,   753,   152,    92,   518,   570,   767,   797,   826,   735,
     269,   820,   827,   269,    36,   495,   552,   552,   190,   546,
     743,   771,   496,   707,    36,   816,   738,   497,   746,   736,
     737,   737,   746,   496,   190,   566,   735,   510,   516,     4,
     741,     4,   741,   750,   837,   844,    50,    94,   120,   141,
     145,   166,   169,   185,   274,   282,   326,   841,   499,   496,
     499,   650,   495,    35,   649,   108,   109,   187,   188,   248,
     249,   250,   251,   252,   253,   256,   257,   364,   365,   475,
     476,   495,   669,   670,   671,   672,   673,   674,   675,   676,
     677,   496,   499,   653,   747,   805,   706,   726,   495,   453,
     721,   722,   678,   706,   495,   741,   741,   706,     3,   669,
     670,   671,   672,   673,   674,   675,   676,   710,   711,   742,
     741,   741,   741,   665,   665,   678,     8,    16,    17,    18,
     482,   483,   484,   486,   487,   488,   489,   490,   491,   700,
     705,   743,   678,   712,   486,   487,   495,   679,   680,   702,
     714,   725,   496,   706,   678,   706,   715,   412,   412,   741,
     741,   678,    53,   170,   227,   415,   678,   706,   718,   496,
     499,   741,   678,   677,   677,   648,   678,   678,   678,   678,
       5,   750,   751,   412,    40,   400,   730,   746,   678,   678,
     495,   577,   719,   131,   158,   269,   274,   279,   421,   431,
     678,   274,   495,   678,   414,    48,   175,   191,   196,   231,
     379,   678,   678,   678,   678,   678,   678,   678,   678,   678,
     678,    27,    34,   384,   699,   181,   161,   686,   678,   355,
     495,   698,   678,   176,   235,   403,   407,   409,   433,   585,
     735,   733,   170,   626,   707,   626,   495,   742,   496,   735,
     799,   735,   865,   678,   496,   495,     3,   777,   778,   499,
      37,   123,   437,   594,   355,   356,   486,   487,   609,   611,
     680,   377,   221,   285,   499,     4,   610,   741,   610,   355,
     356,   611,   734,   735,   273,   381,   624,   619,   597,   496,
     437,   575,    36,   114,   297,   495,   576,   873,   495,   743,
     878,   887,   889,   743,   341,   856,   495,   190,   543,   737,
     221,   269,   221,   437,   495,   536,   648,   737,   743,   190,
     737,   190,   743,    23,   136,   374,   526,   541,   750,   852,
     855,   737,   535,   555,   750,   737,   853,   737,   341,   374,
     820,   856,   822,   746,   737,   822,   746,   737,   822,   341,
     374,   856,   737,   737,   737,   737,   341,   374,   856,   737,
     737,   590,   590,   590,   445,   708,   496,   678,   678,   678,
     727,   322,   834,   496,   499,   282,   170,   414,   829,   450,
     735,   404,   743,   562,   495,   152,   152,   151,   576,   231,
     533,   543,   547,   550,   559,   561,   743,   457,   459,   538,
     457,   772,   269,   284,   496,   678,   817,   738,   817,   284,
     817,   269,    36,   488,   495,   515,   822,   836,   496,   499,
      36,   833,   742,   833,   269,   274,   326,   833,   833,   862,
      35,   649,   646,   743,   493,   493,   741,   414,   414,   414,
     414,   648,   653,   496,   706,   678,   139,   722,   723,    36,
     496,   678,   496,   496,   496,   496,   170,   496,   496,   496,
     499,   496,   497,   307,   713,   496,   679,   679,   678,    11,
      16,    17,    18,   196,   217,   286,   482,   483,   484,   486,
     487,   488,   489,   490,   491,   702,   679,   496,   496,   165,
     170,   716,   717,   496,   478,   478,   496,   496,    36,   718,
     706,   718,   718,   170,   496,   729,   678,   496,   496,   478,
     679,   679,   145,   706,   170,   131,   158,   274,   279,   421,
     431,   495,   145,   705,   678,   400,   730,   678,   719,   678,
     414,   495,   577,   495,   495,   294,   690,   407,   409,   407,
     409,   735,   403,   586,   586,   586,   180,   226,   356,   495,
     577,   627,   628,   629,   636,   637,   681,   683,   684,   743,
     454,   642,   590,   642,   741,   677,   748,   805,    36,   499,
     642,    15,   482,   487,   495,   779,   780,   783,   789,   790,
     791,   792,   793,   794,   593,   286,   700,   703,   480,   595,
       4,   741,   611,   285,   435,   608,   499,   240,   627,   454,
     574,   743,   443,   402,   436,   882,   743,   877,   886,   284,
     879,   883,   889,   729,   499,   626,   484,   414,   678,   269,
     558,   495,   152,   495,   536,   199,   556,   519,   288,   529,
     519,    23,   136,   345,   346,   374,   849,   850,   851,   857,
     858,   152,   817,   152,   817,   526,   541,   526,   522,   742,
     496,   499,   496,   499,   484,   497,   414,   360,    85,   414,
     811,   360,   414,   414,   414,   360,   496,   496,   496,   708,
     494,   392,   393,   742,   843,   551,   834,   735,   552,   495,
     796,   403,   556,   735,   566,   735,   737,   457,   565,   735,
     496,   499,   282,   531,   282,   284,   530,   531,    36,   152,
     735,   746,   152,   515,   831,   842,   837,   742,   742,   274,
     556,   488,   556,   742,   742,   493,   496,   499,   648,   741,
     494,   741,   496,   670,   672,   673,   674,   673,   674,   674,
     496,   411,   678,   143,   648,   496,   678,   678,   705,   678,
     716,   648,   679,   679,   679,   679,   131,   269,   279,   679,
     679,   679,   679,   679,   679,   679,   679,   679,   679,   678,
     678,   717,   716,   668,   668,   648,   496,   496,   496,   706,
     496,   677,   678,    33,    33,   678,   496,   678,   170,   495,
     709,   678,   496,   145,   679,   679,   145,   145,   678,   678,
     591,   454,   495,   691,   743,   586,   586,   586,   586,   735,
     735,   735,   495,   774,   577,   637,   170,   577,   628,   629,
      36,   630,   631,   743,   499,    93,   171,   205,   220,   229,
     262,   351,   633,   631,    36,   630,   632,   743,   481,   641,
     728,   678,   181,   613,   496,   613,   496,   496,   778,    76,
     775,   487,     3,   217,   493,   501,   785,   787,   788,     3,
     782,   780,   495,   595,   162,   225,   285,   735,   678,   348,
     881,   442,   729,   496,   499,    83,   881,   496,   499,   878,
     574,   678,   737,   496,   152,   556,   543,   556,   519,   546,
     496,   116,   203,   266,   269,   542,   495,   553,   174,   114,
     189,   269,   531,   821,   106,   114,   174,   269,   391,   394,
     531,   823,   374,   851,   424,   737,   743,   855,   555,   268,
     286,   375,   486,   487,   520,   557,   648,   703,   742,   745,
     822,   893,   750,   737,   737,   737,   737,   737,   737,   737,
     737,   737,   737,   590,   821,   843,   495,   772,   735,   755,
     756,   190,   735,   496,   827,    36,   495,   870,   106,   266,
     540,   538,   547,    79,   576,   546,   437,   769,   817,   566,
     496,   499,   556,   741,   743,   494,   494,   678,   496,   496,
     717,   170,   131,   279,   495,   496,   678,   678,   678,   709,
     496,   678,    33,    33,   678,   678,   145,   496,   496,   678,
     692,   743,   735,   735,   735,   735,   631,   632,   495,   496,
       5,   743,   744,   405,   604,   605,   495,   628,   220,   293,
     634,   628,   634,   220,   633,   634,   220,   605,   495,   743,
     605,   495,   291,    54,   184,   617,   742,   617,   742,   779,
     495,   496,   493,   788,   785,   786,     3,   781,   784,     3,
      15,   487,   786,   496,   705,   732,   576,   297,   576,   877,
     284,   495,   875,   484,   889,   881,   519,   543,   496,   496,
     457,   549,   117,   192,   201,   116,   439,   526,   544,    67,
      73,    85,   114,   116,   174,   203,   269,   274,   317,   334,
     430,   524,   525,   537,    30,    54,   563,   190,   274,   822,
     678,   563,   274,   486,   487,   825,   743,   648,   817,   817,
     745,   747,   484,   414,   414,   496,   835,   437,   830,   832,
     556,    36,   221,   757,   496,   499,   269,   495,   772,   151,
     576,   550,   565,   106,   149,   197,   530,   119,   136,   316,
     457,   571,   284,   743,   768,   495,    36,   842,   494,   648,
     679,   170,   495,   709,   496,   678,   678,   678,   496,   303,
     693,   638,   639,   683,   630,   495,     4,     9,   600,   602,
     603,   743,   736,   628,   284,   437,   635,   628,   220,   628,
     643,   644,   743,   495,   643,   743,   495,   614,   615,   616,
     678,   678,   456,   687,   687,   733,   776,   735,   781,   487,
     488,   494,   786,   496,   882,    85,   495,   683,   743,   880,
     888,   132,   678,   334,   549,   495,   539,   519,   496,   499,
     495,   746,   737,   679,   563,   117,   192,   116,   274,   221,
     735,   549,   114,    36,   152,    73,   645,   747,   490,   520,
     737,   737,   821,   121,   496,   576,   495,   222,   758,   138,
     338,   754,   756,   152,    36,   737,   565,   496,    27,    78,
      86,   115,   189,   200,   391,   394,   534,   534,   356,   356,
      59,    67,   235,   735,   888,   679,   709,   496,    54,   590,
     496,   499,    36,   640,   736,   306,   490,   306,   356,   490,
     495,   495,   496,   678,   495,   628,   635,   496,   499,   648,
     643,   496,   496,   499,   688,   689,   743,   437,   601,   601,
     496,   499,   488,   494,     9,   494,    15,   487,   442,   737,
     678,    73,   884,   884,   496,   499,   270,   435,   735,   519,
     545,   548,   750,   526,   678,   269,   525,    36,   549,   552,
     189,   746,   437,   854,   490,   424,   835,   742,   772,   571,
     736,     3,   114,   759,   130,   222,   404,   735,   576,   870,
     538,    67,   287,    67,   769,   496,   496,   706,   327,   356,
     694,   641,   638,   495,   496,   743,   600,   736,   644,   645,
     496,   615,   499,    36,   358,   733,     9,   494,   487,    12,
      15,   487,   576,   496,   746,   746,   885,   885,   642,   880,
     374,   552,   496,   499,   484,   496,   189,   244,   560,   495,
     521,   678,   424,    36,   496,   743,     3,   495,   495,   571,
     565,   530,   287,   287,   495,   772,    48,    96,   426,   678,
     695,   696,   695,   496,   643,   496,   499,   496,   496,   689,
     691,   603,    12,   487,     9,   884,   594,   594,   887,   560,
     548,   520,   266,   532,   521,   171,   302,   380,   284,   527,
     528,   554,   820,   576,   735,   760,   761,   888,   642,   696,
     355,   164,   312,   164,   312,   496,     9,   342,   606,     9,
     494,   885,   595,   595,   642,   528,   201,   119,   435,   284,
     554,   284,   527,   496,   571,   757,   496,   499,   496,    33,
     496,   495,   494,    15,   487,   594,   519,    58,   266,   347,
     374,   523,   523,   385,   761,   772,   696,     9,   487,   595,
      22,   114,   274,   757,   642,   496,   334,   735,   125,   757,
     334,   735,   758
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_int16 yyr1[] =
{
       0,   502,   503,   504,   504,   505,   505,   505,   505,   505,
     505,   505,   505,   505,   505,   505,   505,   505,   505,   505,
     505,   505,   505,   505,   505,   505,   505,   505,   505,   505,
     505,   505,   505,   505,   505,   505,   505,   505,   505,   505,
     505,   506,   507,   507,   507,   507,   508,   508,   509,   509,
     509,   510,   510,   510,   510,   510,   511,   511,   511,   511,
     512,   512,   513,   513,   514,   514,   515,   515,   515,   515,
     516,   517,   517,   518,   518,   519,   519,   520,   520,   520,
     520,   520,   520,   521,   521,   522,   523,   523,   523,   523,
     523,   524,   524,   524,   524,   525,   525,   525,   525,   525,
     525,   525,   525,   526,   527,   528,   528,   528,   528,   528,
     529,   529,   530,   530,   530,   530,   531,   532,   532,   533,
     533,   534,   534,   534,   534,   534,   534,   534,   534,   535,
     535,   536,   537,   537,   537,   537,   538,   538,   538,   538,
     539,   540,   540,   540,   541,   542,   542,   542,   542,   542,
     542,   543,   544,   544,   545,   545,   546,   547,   547,   547,
     548,   548,   549,   549,   550,   550,   551,   552,   552,   553,
     553,   554,   555,   555,   555,   555,   556,   556,   557,   557,
     557,   558,   558,   558,   558,   558,   558,   559,   559,   560,
     560,   560,   560,   561,   562,   562,   562,   562,   562,   562,
     562,   562,   563,   563,   564,   564,   565,   565,   565,   566,
     567,   567,   567,   567,   567,   568,   568,   569,   569,   570,
     570,   570,   570,   571,   571,   571,   571,   572,   573,   573,
     573,   574,   574,   575,   575,   576,   576,   577,   577,   578,
     578,   578,   578,   578,   578,   578,   578,   579,   579,   580,
     580,   580,   580,   580,   580,   580,   581,   581,   581,   582,
     582,   583,   584,   584,   585,   585,   585,   585,   585,   585,
     585,   585,   585,   586,   586,   587,   587,   587,   588,   588,
     589,   589,   590,   590,   591,   592,   592,   593,   593,   594,
     594,   594,   595,   595,   595,   596,   596,   596,   596,   597,
     597,   598,   598,   598,   598,   599,   599,   600,   600,   600,
     600,   600,   600,   601,   601,   602,   602,   603,   603,   603,
     603,   604,   605,   605,   606,   606,   607,   607,   608,   609,
     609,   609,   610,   610,   611,   611,   612,   612,   613,   613,
     614,   614,   615,   615,   616,   617,   617,   618,   618,   619,
     619,   620,   620,   621,   622,   622,   622,   622,   623,   623,
     624,   624,   624,   625,   625,   626,   626,   627,   627,   628,
     628,   628,   628,   628,   628,   628,   628,   629,   629,   629,
     629,   629,   629,   630,   630,   630,   630,   631,   631,   632,
     632,   632,   632,   632,   633,   633,   633,   633,   634,   634,
     635,   635,   636,   636,   636,   636,   637,   637,   638,   639,
     639,   640,   640,   641,   641,   642,   642,   643,   643,   644,
     645,   645,   646,   646,   647,   647,   648,   648,   648,   648,
     648,   648,   648,   649,   649,   649,   650,   650,   650,   650,
     650,   650,   650,   651,   651,   651,   651,   652,   652,   653,
     653,   654,   654,   654,   654,   654,   654,   654,   654,   654,
     654,   654,   655,   655,   656,   656,   657,   657,   658,   659,
     660,   660,   661,   661,   662,   663,   664,   664,   664,   664,
     664,   664,   665,   665,   666,   666,   666,   666,   667,   668,
     668,   668,   669,   669,   670,   670,   671,   671,   672,   672,
     673,   673,   674,   674,   675,   675,   676,   676,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   678,   678,   678,   678,   678,   678,
     678,   678,   678,   678,   678,   678,   678,   678,   678,   678,
     678,   678,   678,   678,   678,   678,   678,   678,   678,   678,
     678,   678,   678,   678,   678,   678,   678,   678,   678,   678,
     678,   678,   678,   678,   678,   678,   678,   678,   678,   678,
     678,   678,   678,   678,   678,   678,   678,   678,   678,   678,
     678,   678,   678,   678,   678,   678,   678,   678,   678,   678,
     679,   679,   679,   679,   679,   679,   679,   679,   679,   679,
     679,   679,   679,   679,   679,   679,   679,   679,   679,   679,
     679,   679,   679,   680,   680,   680,   680,   680,   680,   680,
     680,   680,   680,   681,   681,   681,   681,   681,   681,   681,
     682,   682,   683,   683,   684,   684,   684,   684,   684,   684,
     684,   684,   684,   684,   684,   684,   684,   684,   684,   684,
     684,   684,   684,   684,   684,   684,   684,   684,   684,   684,
     684,   684,   685,   685,   686,   686,   687,   687,   688,   688,
     689,   690,   690,   690,   691,   692,   692,   693,   693,   694,
     694,   694,   695,   695,   696,   696,   696,   696,   696,   697,
     697,   698,   698,   699,   699,   699,   700,   700,   701,   701,
     701,   701,   701,   701,   701,   701,   701,   701,   701,   701,
     702,   702,   703,   703,   704,   704,   704,   704,   704,   704,
     704,   704,   705,   705,   706,   706,   707,   707,   708,   708,
     708,   709,   709,   710,   710,   711,   711,   711,   711,   711,
     711,   711,   711,   711,   711,   712,   712,   713,   714,   714,
     715,   715,   715,   715,   715,   715,   716,   717,   718,   718,
     718,   719,   719,   720,   721,   721,   722,   723,   723,   724,
     724,   725,   725,   726,   726,   726,   726,   727,   727,   728,
     728,   729,   729,   730,   730,   731,   731,   732,   732,   733,
     733,   733,   733,   734,   734,   735,   735,   736,   736,   737,
     738,   739,   739,   740,   740,   740,   740,   740,   740,   740,
     740,   740,   740,   740,   740,   740,   740,   741,   742,   743,
     743,   743,   744,   744,   745,   745,   745,   746,   746,   747,
     747,   748,   748,   749,   750,   750,   750,   750,   750,   751,
     751,   752,   752,   753,   753,   754,   754,   755,   755,   756,
     756,   757,   758,   758,   759,   759,   760,   760,   761,   762,
     763,   764,   765,   766,   766,   766,   766,   767,   767,   768,
     769,   769,   770,   770,   771,   771,   772,   772,   773,   773,
     774,   775,   775,   776,   776,   777,   777,   778,   778,   779,
     779,   780,   780,   781,   782,   783,   784,   784,   785,   786,
     786,   787,   787,   788,   788,   789,   789,   790,   790,   790,
     791,   791,   791,   791,   792,   792,   792,   792,   793,   793,
     793,   793,   794,   794,   794,   795,   795,   796,   796,   797,
     797,   797,   797,   798,   798,   798,   798,   798,   799,   799,
     799,   799,   799,   800,   800,   801,   801,   802,   802,   803,
     804,   804,   805,   805,   805,   805,   806,   807,   807,   808,
     808,   808,   809,   809,   810,   810,   810,   810,   810,   810,
     810,   810,   810,   810,   810,   810,   810,   811,   811,   812,
     812,   812,   813,   813,   813,   813,   813,   813,   814,   814,
     814,   814,   814,   814,   814,   814,   814,   814,   814,   814,
     814,   814,   814,   815,   815,   815,   815,   815,   815,   815,
     816,   816,   817,   817,   817,   818,   818,   818,   819,   819,
     820,   820,   821,   821,   821,   822,   822,   822,   822,   823,
     823,   823,   823,   823,   823,   823,   823,   823,   823,   823,
     823,   823,   823,   824,   824,   825,   825,   825,   826,   826,
     827,   827,   828,   828,   829,   829,   830,   830,   831,   831,
     832,   832,   833,   833,   834,   834,   835,   835,   836,   836,
     836,   836,   836,   837,   838,   838,   839,   839,   840,   840,
     841,   841,   841,   841,   841,   841,   841,   841,   841,   841,
     841,   841,   841,   841,   842,   843,   843,   843,   844,   844,
     845,   846,   846,   847,   847,   848,   848,   848,   848,   848,
     848,   848,   848,   849,   849,   850,   850,   851,   851,   851,
     851,   852,   852,   853,   853,   853,   853,   853,   853,   853,
     853,   853,   853,   853,   853,   853,   853,   853,   853,   853,
     853,   853,   853,   853,   853,   853,   853,   853,   853,   853,
     853,   853,   854,   854,   855,   855,   855,   855,   856,   856,
     857,   858,   858,   859,   859,   859,   860,   860,   860,   860,
     861,   861,   861,   861,   862,   862,   863,   863,   863,   863,
     863,   863,   863,   864,   864,   865,   865,   866,   867,   867,
     867,   867,   867,   867,   868,   868,   868,   869,   869,   869,
     870,   870,   871,   871,   871,   871,   871,   871,   872,   873,
     873,   873,   873,   873,   874,   874,   875,   875,   875,   876,
     876,   877,   878,   878,   879,   879,   879,   880,   880,   880,
     881,   881,   882,   882,   883,   883,   884,   884,   885,   885,
     886,   886,   887,   887,   888,   888,   889,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   891,   891,   891,   891,   891,
     891,   891,   891,   891,   891,   891,   891,   891,   891,   891,
     891,   891,   891,   891,   891,   891,   891,   891,   891,   891,
     891,   891,   891,   891,   891,   891,   891,   891,   891,   891,
     891,   891,   891,   891,   891,   891,   891,   891,   891,   891,
     891,   891,   891,   891,   892,   892,   892,   892,   892,   892,
     892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
     892,   892,   892,   892,   892,   892,   892,   892,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     2,     2,     4,     3,     5,     1,     0,     1,     1,
       0,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     1,     1,     1,     1,     1,     1,
       2,     1,     1,     9,    12,     0,     2,     1,     1,     1,
       1,     1,     1,     3,     0,     1,     2,     1,     1,     2,
       2,     3,     1,     1,     2,     2,     1,     2,     3,     5,
       2,     5,     5,     2,     3,     1,     1,     2,     2,     0,
       4,     0,     3,     4,     4,     0,     3,     2,     0,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     3,     1,     2,     2,     2,     2,     2,     2,     0,
       3,     3,     3,     0,     1,     2,     1,     2,     2,     2,
       2,     4,     1,     3,     1,     3,     1,     1,     1,     1,
       3,     1,     2,     0,     1,     0,     1,     3,     0,     2,
       0,     3,     3,     1,     5,     3,     1,     3,     1,     4,
       5,     5,     6,     3,     7,     4,    11,     1,     3,     2,
       2,     2,     0,     3,     1,     1,     2,     2,     2,     2,
       1,     0,     1,     2,     7,    10,     2,     3,     0,     4,
       2,     2,     3,     4,     2,     1,     1,     1,     3,     9,
      11,    12,    14,     3,     4,     4,     0,     7,     1,     2,
       3,     2,     0,     2,     0,     1,     1,     3,     3,     1,
       2,     4,     4,     2,     3,     5,     5,     1,     1,    10,
      10,     1,     2,     4,     4,     4,     2,     2,     3,     1,
       3,     6,     2,     0,     3,     3,     4,     4,     4,     4,
       3,     2,     1,     1,     0,     1,     1,     0,     1,     5,
       1,     0,     1,     0,     3,     1,     3,     4,     3,     1,
       1,     0,     2,     2,     0,     2,     2,     1,     1,     1,
       0,     2,     4,     5,     4,     2,     3,     2,     2,     2,
       2,     1,     2,     3,     0,     1,     0,     5,     1,     4,
       6,     2,     1,     0,     4,     0,     1,     1,     1,     1,
       2,     2,     1,     1,     1,     1,     1,     1,     3,     0,
       1,     3,     1,     1,     2,     2,     0,     1,     3,     1,
       0,     1,     2,     3,     2,     4,     2,     3,     2,     0,
       1,     2,     0,     4,     5,     2,     0,     1,     3,     3,
       3,     3,     3,     3,     1,     4,     2,     3,     4,     5,
       4,     5,     4,     5,     2,     4,     1,     1,     0,     1,
       4,     5,     4,     0,     2,     2,     2,     1,     1,     0,
       4,     2,     1,     2,     2,     4,     2,     6,     2,     1,
       3,     4,     0,     2,     0,     2,     0,     1,     3,     3,
       2,     0,     2,     4,     1,     1,     2,     3,     5,     6,
       2,     3,     4,     3,     4,     0,     1,     1,     1,     1,
       1,     2,     4,     1,     1,     1,     1,     2,     3,     3,
       0,     1,     1,     1,     1,     1,     2,     2,     2,     2,
       2,     1,     3,     0,     1,     1,     1,     1,     5,     2,
       1,     1,     1,     1,     4,     1,     2,     2,     1,     3,
       3,     2,     1,     0,     5,     2,     5,     2,     1,     3,
       3,     0,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     3,     3,     3,
       3,     3,     3,     0,     1,     3,     3,     5,     2,     2,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     2,     2,     3,     3,     2,     2,     3,
       3,     5,     4,     6,     3,     5,     4,     6,     4,     6,
       5,     7,     3,     2,     4,     3,     2,     1,     3,     3,
       3,     3,     4,     3,     4,     3,     4,     5,     6,     6,
       7,     6,     7,     6,     7,     3,     4,     4,     6,     1,
       1,     3,     2,     2,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     2,     2,     5,
       6,     6,     7,     1,     1,     2,     2,     4,     1,     1,
       1,     2,     2,     3,     5,     6,     8,     6,     6,     4,
       4,     1,     1,     1,     5,     1,     1,     4,     1,     4,
       1,     4,     1,     4,     1,     1,     1,     1,     1,     1,
       6,     4,     4,     4,     4,     6,     5,     5,     5,     4,
       6,     4,     5,     0,     5,     0,     2,     0,     1,     3,
       3,     2,     2,     0,     6,     1,     0,     3,     0,     2,
       2,     0,     1,     4,     2,     2,     2,     2,     2,     4,
       3,     1,     5,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     4,     1,     4,     1,     4,     1,     2,     1,     2,
       1,     2,     1,     3,     1,     3,     1,     3,     1,     3,
       3,     1,     3,     3,     0,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     4,     3,     2,     3,     0,
       3,     3,     2,     2,     1,     0,     2,     2,     3,     2,
       1,     1,     3,     5,     1,     2,     4,     2,     0,     1,
       0,     1,     2,     2,     2,     3,     5,     1,     0,     1,
       2,     0,     2,     1,     0,     1,     0,     1,     3,     3,
       2,     1,     1,     1,     3,     1,     2,     1,     3,     1,
       1,     1,     2,     1,     1,     1,     1,     1,     2,     6,
       2,     5,     3,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       3,     3,     0,     1,     1,     1,     1,     1,     1,     1,
       1,    14,     4,     1,     1,     1,     1,     1,     3,     5,
       3,     4,     2,     3,     1,     1,     1,     3,    11,     2,
       1,     4,     3,     2,     3,     2,     3,    13,    16,     1,
       2,     0,     1,     0,     1,     0,     2,     0,     1,     0,
       9,     4,     0,     1,     3,     2,     4,     2,     0,     1,
       2,     1,     1,     2,     2,     3,     1,     0,     2,     1,
       0,     1,     1,     2,     1,     1,     1,     1,     1,     1,
       5,     6,     9,     3,     6,     7,    10,     4,     5,     6,
       9,     3,     1,     1,     2,     4,     7,     2,     0,     1,
       1,     1,     1,     4,     5,     5,     4,     6,     1,     1,
       1,     1,     1,     1,     0,     1,     3,     1,     0,     5,
       3,     0,     1,     1,     1,     1,     2,     1,     1,     1,
       2,     3,     2,     1,     6,     6,     8,     6,     8,     6,
       8,     6,     8,     8,    10,     8,    10,     1,     0,     2,
       4,     5,     6,     4,     6,     4,     6,     8,     1,     1,
       1,     1,     1,     2,     1,     2,     1,     1,     1,     3,
       3,     3,     3,     2,     2,     1,     3,     1,     1,     1,
       1,     3,     1,     1,     0,     1,     1,     1,     4,     6,
       1,     2,     1,     1,     0,     1,     2,     2,     1,     2,
       2,     1,     2,     3,     2,     2,     2,     2,     3,     3,
       3,     1,     3,     1,     0,     1,     2,     2,     5,     8,
       1,     0,    11,     9,     1,     1,     3,     0,     1,     3,
       1,     0,     1,     0,     1,     0,     1,     3,     1,     1,
       1,     3,     0,     2,     2,     0,     2,     0,     1,     0,
       1,     1,     1,     3,     3,     1,     1,     3,     3,     3,
       3,     4,     3,     2,     1,     1,     1,     1,     1,     3,
       6,     1,     1,     2,     3,     4,     6,     4,     6,     4,
       6,     4,     6,     1,     2,     3,     2,     1,     3,     2,
       3,     1,     3,     2,     5,     3,     6,     4,     6,     6,
       6,     5,     5,     6,     9,     4,     5,     7,     6,     4,
       8,     4,     2,     4,     3,     6,     4,     2,     2,     2,
       2,     1,     2,     0,     1,     2,     2,     2,     1,     3,
       4,     2,     0,     2,     3,     3,     1,     3,     3,     2,
       3,     3,     3,     3,     1,     1,     1,     1,     3,     5,
       1,     1,     1,     1,     3,     2,     4,     8,     2,     2,
       2,     2,     2,     2,     1,     1,     0,     3,     9,    12,
       3,     0,     6,     8,     6,     8,     6,     8,     7,     1,
       4,     4,     7,     2,     1,     3,     4,     3,     0,     1,
       0,     2,     3,     5,     8,     5,     0,     5,     5,     7,
       2,     0,     1,     1,     1,     3,     2,     0,     1,     0,
       1,     3,     1,     3,     1,     3,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YYUSE (yyoutput);
  YYUSE (yylocationp);
  YYUSE (yyscanner);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyo, yytoknum[yytype], *yyvaluep);
# endif
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  YY_LOCATION_PRINT (yyo, *yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yytype, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[+yyssp[yyi + 1 - yynrhs]],
                       &yyvsp[(yyi + 1) - (yynrhs)]
                       , &(yylsp[(yyi + 1) - (yynrhs)])                       , yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen(S) (YY_CAST (YYPTRDIFF_T, strlen (S)))
#  else
/* Return the length of YYSTR.  */
static YYPTRDIFF_T
yystrlen (const char *yystr)
{
  YYPTRDIFF_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYPTRDIFF_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYPTRDIFF_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            else
              goto append;

          append:
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (yyres)
    return yystpcpy (yyres, yystr) - yyres;
  else
    return yystrlen (yystr);
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYPTRDIFF_T *yymsg_alloc, char **yymsg,
                yy_state_t *yyssp, int yytoken)
{
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat: reported tokens (one for the "unexpected",
     one per "expected"). */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Actual size of YYARG. */
  int yycount = 0;
  /* Cumulated lengths of YYARG.  */
  YYPTRDIFF_T yysize = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[+*yyssp];
      YYPTRDIFF_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
      yysize = yysize0;
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYPTRDIFF_T yysize1
                    = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
                    yysize = yysize1;
                  else
                    return 2;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
    default: /* Avoid compiler warnings. */
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    /* Don't count the "%s"s in the final size, but reserve room for
       the terminator.  */
    YYPTRDIFF_T yysize1 = yysize + (yystrlen (yyformat) - 2 * yycount) + 1;
    if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
      yysize = yysize1;
    else
      return 2;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          ++yyp;
          ++yyformat;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);
  YYUSE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs;

    yy_state_fast_t yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.
       'yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss;
    yy_state_t *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYPTRDIFF_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYPTRDIFF_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    goto yyexhaustedlab;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
# undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2:
#line 483 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 13555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3:
#line 499 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 13571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4:
#line 511 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 13582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 40:
#line 555 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 13588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 41:
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 13598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 42:
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 13609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 43:
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 13623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 44:
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 13634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 45:
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 13645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 46:
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 13651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 47:
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 13657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48:
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 13663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49:
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 13669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50:
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 13675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56:
#line 65 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 13681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57:
#line 66 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 13687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58:
#line 67 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 13693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59:
#line 68 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 13699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60:
#line 73 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 13705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61:
#line 74 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 13711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62:
#line 80 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 13719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63:
#line 84 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 13727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64:
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 13733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65:
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 13739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66:
#line 97 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 13745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67:
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 13751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68:
#line 99 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 13757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69:
#line 105 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 13763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70:
#line 111 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 13771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71:
#line 118 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 13777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72:
#line 119 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 13783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73:
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->if_not_exists = false;
					(yyval.node) = (PGNode *)n;
				}
#line 13800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74:
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->if_not_exists = true;
					(yyval.node) = (PGNode *)n;
				}
#line 13817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75:
#line 41 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 13823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76:
#line 43 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 13851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77:
#line 69 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 13857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78:
#line 70 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 13863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79:
#line 71 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 13869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80:
#line 72 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 13875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81:
#line 73 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 13881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82:
#line 74 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 13887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83:
#line 78 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 13893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84:
#line 79 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 13899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85:
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 13905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86:
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 13911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87:
#line 90 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 13917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88:
#line 91 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 13923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89:
#line 92 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 13929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90:
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 13935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91:
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 13946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92:
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 13952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93:
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 13958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94:
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 13975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95:
#line 125 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 13986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 96:
#line 132 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 13997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97:
#line 139 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 14011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98:
#line 149 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 14025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99:
#line 159 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 14041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100:
#line 171 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 14054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101:
#line 180 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 14067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102:
#line 189 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 14086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103:
#line 208 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 14094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104:
#line 214 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 14100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105:
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 14106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106:
#line 222 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 14112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107:
#line 224 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 14118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108:
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 14124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109:
#line 228 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 14130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110:
#line 233 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 14136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111:
#line 234 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                        { (yyval.list) = NIL; }
#line 14142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112:
#line 238 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 14148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113:
#line 239 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 14154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114:
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 14160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115:
#line 241 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 14166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116:
#line 246 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 14172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117:
#line 250 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 14178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118:
#line 251 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 14184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119:
#line 257 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 14195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120:
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 14201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121:
#line 268 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 14207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122:
#line 269 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 14213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123:
#line 270 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 14219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124:
#line 271 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 14225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125:
#line 272 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 14231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126:
#line 273 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 14237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127:
#line 274 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 14243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128:
#line 275 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 14249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129:
#line 281 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 14255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130:
#line 282 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 14261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131:
#line 286 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 14267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132:
#line 292 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 14278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133:
#line 299 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 14289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134:
#line 306 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 14300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135:
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 14311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136:
#line 324 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 14317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137:
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 14323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138:
#line 326 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 14329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139:
#line 327 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 14335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140:
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 14341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141:
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 14347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142:
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 14353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143:
#line 338 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 14359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144:
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 14365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145:
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 14371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146:
#line 349 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 14377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147:
#line 350 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 14383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148:
#line 351 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 14389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149:
#line 352 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 14395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150:
#line 353 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 14401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151:
#line 359 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					n->fdwoptions = (yyvsp[-1].list);
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
				}
#line 14424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152:
#line 382 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 14432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153:
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 14440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154:
#line 392 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 14446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155:
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 14452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156:
#line 397 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 14458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157:
#line 401 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 14464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158:
#line 402 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 14470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159:
#line 403 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 14476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160:
#line 408 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 14484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161:
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 14492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162:
#line 419 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 14498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163:
#line 420 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 14504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164:
#line 425 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 14510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165:
#line 426 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 14516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166:
#line 431 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 14524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167:
#line 438 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 14530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168:
#line 439 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 14536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169:
#line 444 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 14542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170:
#line 445 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 14548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171:
#line 449 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 14554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172:
#line 455 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 14562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173:
#line 459 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 14570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174:
#line 463 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 14579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175:
#line 468 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 14587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176:
#line 475 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 14593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177:
#line 476 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 14599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178:
#line 480 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 14605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179:
#line 482 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 14615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180:
#line 488 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 14626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181:
#line 499 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 14643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182:
#line 513 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 14660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183:
#line 526 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 14678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184:
#line 541 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 14695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185:
#line 554 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 14713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186:
#line 569 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 14735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187:
#line 591 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 14743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188:
#line 595 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 14751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189:
#line 602 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 14759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190:
#line 606 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 14771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191:
#line 614 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 14779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192:
#line 618 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 14787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193:
#line 626 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 14798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194:
#line 635 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 14804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195:
#line 636 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 14810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196:
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 14816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197:
#line 638 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 14822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198:
#line 640 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 14833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199:
#line 647 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 14844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200:
#line 653 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 14850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201:
#line 654 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 14856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202:
#line 659 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 14862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203:
#line 660 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 14868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204:
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->if_not_exists = false;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 14885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205:
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->if_not_exists = true;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 14902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206:
#line 41 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 14908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207:
#line 42 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 14914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208:
#line 43 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 14920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209:
#line 49 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 14934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210:
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				(yyval.node) = (PGNode *) n;
			}
#line 14945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211:
#line 11 "third_party/libpg_query/grammar/statements/variable_show.y"
                                {
					PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *) n;
				}
#line 14955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212:
#line 17 "third_party/libpg_query/grammar/statements/variable_show.y"
                                {
					PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
					n->name = (char*) "timezone";
					(yyval.node) = (PGNode *) n;
				}
#line 14965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213:
#line 23 "third_party/libpg_query/grammar/statements/variable_show.y"
                                {
					PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
					n->name = (char*) "transaction_isolation";
					(yyval.node) = (PGNode *) n;
				}
#line 14975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214:
#line 29 "third_party/libpg_query/grammar/statements/variable_show.y"
                                {
					PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
					n->name = (char*) "all";
					(yyval.node) = (PGNode *) n;
				}
#line 14985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217:
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 14991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218:
#line 41 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 14997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219:
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->replace = false;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 15013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220:
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->replace = true;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 15029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221:
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->replace = false;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 15050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222:
#line 54 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->replace = true;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 15071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223:
#line 74 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 15077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224:
#line 75 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 15083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225:
#line 76 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 15089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226:
#line 77 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 15095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227:
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 15109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228:
#line 22 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 15117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229:
#line 26 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 15128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230:
#line 33 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 15139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231:
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 15145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232:
#line 44 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 15151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233:
#line 50 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 15157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234:
#line 51 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 15163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237:
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 15169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238:
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 15175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239:
#line 68 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 15181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 240:
#line 70 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 15192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 241:
#line 77 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 15204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 242:
#line 85 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 15216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 243:
#line 93 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 15228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244:
#line 101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 15240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245:
#line 109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 15252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246:
#line 117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 15264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247:
#line 127 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 15270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248:
#line 128 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 15276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249:
#line 158 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->intoClause = (yyvsp[-6].into);
					n->fromClause = (yyvsp[-5].list);
					n->whereClause = (yyvsp[-4].node);
					n->groupClause = (yyvsp[-3].list);
					n->havingClause = (yyvsp[-2].node);
					n->windowClause = (yyvsp[-1].list);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 15293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250:
#line 173 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-8].list);
					n->targetList = (yyvsp[-7].list);
					n->intoClause = (yyvsp[-6].into);
					n->fromClause = (yyvsp[-5].list);
					n->whereClause = (yyvsp[-4].node);
					n->groupClause = (yyvsp[-3].list);
					n->havingClause = (yyvsp[-2].node);
					n->windowClause = (yyvsp[-1].list);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 15311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251:
#line 186 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 15317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252:
#line 188 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 15340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253:
#line 207 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 15348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254:
#line 211 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 15356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255:
#line 215 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 15364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256:
#line 236 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 15375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257:
#line 243 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 15386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 258:
#line 250 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 15397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 259:
#line 259 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 15403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260:
#line 260 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 15409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261:
#line 264 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-5].str);
				n->aliascolnames = (yyvsp[-4].list);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-5]);
				(yyval.node) = (PGNode *) n;
			}
#line 15422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262:
#line 276 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 15436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263:
#line 286 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 15442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264:
#line 295 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 15451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265:
#line 300 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 15460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266:
#line 305 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 15469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267:
#line 310 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 15478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268:
#line 315 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 15490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269:
#line 323 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 15502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270:
#line 331 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 15511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271:
#line 336 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 15520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272:
#line 341 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 15529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273:
#line 347 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 15535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274:
#line 348 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 15541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275:
#line 352 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 15547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276:
#line 353 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 15553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277:
#line 354 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 15559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278:
#line 361 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 15565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279:
#line 362 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 15571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280:
#line 366 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 15577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 281:
#line 367 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 15583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 282:
#line 371 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 15589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 283:
#line 372 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 15595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284:
#line 376 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 15601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285:
#line 380 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 15607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286:
#line 381 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 15613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287:
#line 385 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 15626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288:
#line 394 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 15639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289:
#line 404 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 15645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290:
#line 405 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 15651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291:
#line 406 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 15657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292:
#line 409 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 15663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293:
#line 410 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 15669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294:
#line 411 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 15675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295:
#line 415 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 15681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296:
#line 416 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 15687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297:
#line 417 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 15693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298:
#line 418 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 15699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299:
#line 422 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 15705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300:
#line 423 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 15711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301:
#line 428 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 15717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302:
#line 430 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 15730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303:
#line 446 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 15736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304:
#line 448 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 15742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305:
#line 453 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 15748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306:
#line 456 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 15754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307:
#line 464 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 15762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308:
#line 468 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 15770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309:
#line 472 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 15778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310:
#line 476 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 15786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311:
#line 480 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 15794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312:
#line 484 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 15802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313:
#line 491 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 15810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314:
#line 495 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 15816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315:
#line 502 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 15822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316:
#line 503 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 15828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317:
#line 508 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), (yyvsp[0].ival), (yylsp[-4]));
				}
#line 15836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318:
#line 512 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, -1, (yylsp[0]));
		}
#line 15844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319:
#line 516 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), -1, (yylsp[-3]));
		}
#line 15852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320:
#line 520 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), (yyvsp[-1].ival), (yylsp[-5]));
		}
#line 15860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321:
#line 527 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 15868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322:
#line 533 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 15874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323:
#line 534 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 15880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324:
#line 539 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 15886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325:
#line 540 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 15892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326:
#line 544 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 15898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327:
#line 546 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 15907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328:
#line 553 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 15913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329:
#line 573 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 15919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330:
#line 575 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 15925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331:
#line 577 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 15931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332:
#line 581 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 15937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333:
#line 582 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 15943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334:
#line 586 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 15949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335:
#line 587 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 15955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336:
#line 590 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 15961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337:
#line 591 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 15967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338:
#line 616 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 15973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339:
#line 617 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 15979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340:
#line 621 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 15985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341:
#line 622 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 15991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 342:
#line 626 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 15997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343:
#line 627 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344:
#line 632 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 16011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345:
#line 644 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 16017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346:
#line 645 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 16023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347:
#line 649 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 16029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348:
#line 650 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 16035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349:
#line 654 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 16041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350:
#line 655 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 16047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351:
#line 659 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 16053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352:
#line 660 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 16059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353:
#line 665 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 16071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354:
#line 675 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 16077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355:
#line 676 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 16083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356:
#line 677 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 16089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357:
#line 678 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 16095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358:
#line 682 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 16101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359:
#line 683 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 16107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360:
#line 688 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 16113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361:
#line 689 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 16119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362:
#line 690 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 16125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363:
#line 700 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 16135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364:
#line 706 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 16145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365:
#line 723 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 16151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366:
#line 725 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 16157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367:
#line 729 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 16163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368:
#line 730 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 16169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369:
#line 737 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 16179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370:
#line 743 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 16191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371:
#line 751 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 16203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372:
#line 759 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					/*
					 * The SQL spec does not permit a subselect
					 * (<derived_table>) without an alias clause,
					 * so we don't either.  This avoids the problem
					 * of needing to invent a unique refname for it.
					 * That could be surmounted if there's sufficient
					 * popular demand, but for now let's just implement
					 * the spec and see if anyone complains.
					 * However, it does seem like a good idea to emit
					 * an error message that's better than "syntax error".
					 */
					if ((yyvsp[-1].alias) == NULL)
					{
						if (IsA((yyvsp[-2].node), PGSelectStmt) &&
							((PGSelectStmt *) (yyvsp[-2].node))->valuesLists)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("VALUES in FROM must have an alias"),
									 errhint("For example, FROM (VALUES ...) [AS] foo."),
									 parser_errposition((yylsp[-2]))));
						else
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("subquery in FROM must have an alias"),
									 errhint("For example, FROM (SELECT ...) [AS] foo."),
									 parser_errposition((yylsp[-2]))));
					}
					(yyval.node) = (PGNode *) n;
				}
#line 16243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373:
#line 795 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					/* same comment as above */
					if ((yyvsp[0].alias) == NULL)
					{
						if (IsA((yyvsp[-1].node), PGSelectStmt) &&
							((PGSelectStmt *) (yyvsp[-1].node))->valuesLists)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("VALUES in FROM must have an alias"),
									 errhint("For example, FROM (VALUES ...) [AS] foo."),
									 parser_errposition((yylsp[-1]))));
						else
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("subquery in FROM must have an alias"),
									 errhint("For example, FROM (SELECT ...) [AS] foo."),
									 parser_errposition((yylsp[-1]))));
					}
					(yyval.node) = (PGNode *) n;
				}
#line 16273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374:
#line 821 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 16281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375:
#line 825 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 16290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376:
#line 830 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 16298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377:
#line 855 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 16306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378:
#line 859 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 16323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379:
#line 872 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->isNatural = false;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 16341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380:
#line 886 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 16360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 381:
#line 901 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->isNatural = true;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 16376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 382:
#line 913 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = true;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 16393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383:
#line 929 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 16403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384:
#line 935 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 16412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385:
#line 940 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 16422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 386:
#line 946 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 16431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 387:
#line 952 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 16437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 388:
#line 953 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 16443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 389:
#line 962 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 16451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 390:
#line 966 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 16459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 391:
#line 970 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 16469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 392:
#line 976 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 16479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 393:
#line 982 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 16487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 394:
#line 987 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 16493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 395:
#line 988 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 16499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 396:
#line 989 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 16505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 397:
#line 990 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 16511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 398:
#line 994 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 16517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399:
#line 995 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 16523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400:
#line 1007 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 16529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401:
#line 1008 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402:
#line 1014 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 16546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403:
#line 1021 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 16557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404:
#line 1028 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 16568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405:
#line 1035 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 16579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406:
#line 1067 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 16594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407:
#line 1078 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 16609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408:
#line 1091 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 16615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409:
#line 1095 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 16621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410:
#line 1096 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 16627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411:
#line 1099 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 16633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412:
#line 1100 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 16639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413:
#line 1103 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 16645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414:
#line 1104 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 16651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415:
#line 1109 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 16657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416:
#line 1110 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 16663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417:
#line 1116 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 16671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418:
#line 1120 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 16679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419:
#line 1126 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 16701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420:
#line 1147 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 16713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421:
#line 1154 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 16719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422:
#line 1167 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 16727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423:
#line 1170 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 16735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426:
#line 1177 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 16744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427:
#line 1182 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 16754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428:
#line 1189 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 16763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429:
#line 1194 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 16773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430:
#line 1200 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 16782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431:
#line 1205 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 16792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432:
#line 1210 "third_party/libpg_query/grammar/statements/select.y"
                                                              {
               (yyval.typnam) = SystemTypeName("struct");
               (yyval.typnam)->typmods = (yyvsp[-1].list);
               (yyval.typnam)->location = (yylsp[-3]);
			}
#line 16802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433:
#line 1219 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 16808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434:
#line 1221 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 16814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435:
#line 1223 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 16820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436:
#line 1227 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437:
#line 1228 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438:
#line 1229 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439:
#line 1230 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440:
#line 1231 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441:
#line 1233 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 16859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442:
#line 1238 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 16869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443:
#line 1257 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444:
#line 1258 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445:
#line 1259 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446:
#line 1260 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447:
#line 1272 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 16903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448:
#line 1278 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-2].str)), (yyvsp[-1].list)));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-2]);
				}
#line 16913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449:
#line 1285 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 16919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450:
#line 1286 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 16925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 451:
#line 1293 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 16934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452:
#line 1298 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 16943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453:
#line 1303 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 16952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454:
#line 1308 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 16961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455:
#line 1313 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 16970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456:
#line 1318 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 16979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457:
#line 1323 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 16988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458:
#line 1328 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 16998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459:
#line 1334 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460:
#line 1340 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461:
#line 1346 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 17027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462:
#line 1353 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 17052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463:
#line 1374 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 17060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464:
#line 1384 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 17068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465:
#line 1388 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 17076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466:
#line 1396 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 17084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467:
#line 1400 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 17093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468:
#line 1408 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 17106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469:
#line 1420 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470:
#line 1441 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 17132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471:
#line 1445 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 17140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472:
#line 1451 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 17148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473:
#line 1455 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 17163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474:
#line 1468 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 17173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475:
#line 1476 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 17185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476:
#line 1486 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 17191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477:
#line 1488 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 17197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478:
#line 1490 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 17203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479:
#line 1492 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 17209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480:
#line 1494 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 17215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481:
#line 1496 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 17221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482:
#line 1500 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 17227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483:
#line 1501 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 17233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484:
#line 1509 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 17246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485:
#line 1518 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486:
#line 1526 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 17271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487:
#line 1535 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488:
#line 1546 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 17292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489:
#line 1553 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 17298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490:
#line 1554 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 17304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491:
#line 1555 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 17310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508:
#line 1584 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 17316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509:
#line 1586 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 17322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 510:
#line 1588 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 17328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 511:
#line 1590 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 17334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512:
#line 1592 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 17340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 513:
#line 1594 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 17346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 514:
#line 1596 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 17352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515:
#line 1598 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 17358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516:
#line 1600 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 17367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517:
#line 1605 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 17376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518:
#line 1610 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 17386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519:
#line 1616 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 17397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520:
#line 1623 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 17406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521:
#line 1628 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 17416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522:
#line 1634 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 17425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523:
#line 1639 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 17431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524:
#line 1670 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 17437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525:
#line 1673 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), (yylsp[-1])); }
#line 17443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526:
#line 1675 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 17455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527:
#line 1683 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 17465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528:
#line 1698 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 17471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529:
#line 1700 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 17477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530:
#line 1702 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531:
#line 1704 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532:
#line 1706 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533:
#line 1708 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534:
#line 1710 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535:
#line 1712 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536:
#line 1714 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537:
#line 1716 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538:
#line 1718 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539:
#line 1720 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540:
#line 1722 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541:
#line 1724 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542:
#line 1727 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543:
#line 1729 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 17561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544:
#line 1731 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 17567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545:
#line 1734 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 546:
#line 1736 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 547:
#line 1738 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 17585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 548:
#line 1740 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 17591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 549:
#line 1743 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 17600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 550:
#line 1748 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 17609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 551:
#line 1753 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 17620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552:
#line 1760 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 17629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553:
#line 1765 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 17640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554:
#line 1772 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 17649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555:
#line 1777 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 17661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556:
#line 1785 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 17670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557:
#line 1790 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 17682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558:
#line 1799 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 17694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559:
#line 1807 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 17706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560:
#line 1815 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 17718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561:
#line 1823 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 17730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562:
#line 1841 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 17742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563:
#line 1849 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 17754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564:
#line 1857 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 17766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565:
#line 1865 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 17778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566:
#line 1873 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 17790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567:
#line 1880 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 17799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568:
#line 1885 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->parameters = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 17811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569:
#line 1893 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->parameters = list_make1((yyvsp[-2].node));
				n->function = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 17823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570:
#line 1901 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 17843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571:
#line 1917 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 17855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572:
#line 1925 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 17867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573:
#line 1933 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 17879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574:
#line 1941 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 17891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575:
#line 1949 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 17903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576:
#line 1957 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 17915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577:
#line 1965 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 17923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578:
#line 1969 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 17931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579:
#line 1973 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 17939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580:
#line 1977 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 17947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581:
#line 1981 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 17959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582:
#line 1989 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 17971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583:
#line 1997 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 17983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584:
#line 2005 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 17995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585:
#line 2013 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 18019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586:
#line 2033 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 18045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587:
#line 2055 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 18060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588:
#line 2066 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 18071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589:
#line 2073 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 18089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590:
#line 2098 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 18095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591:
#line 2100 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), (yylsp[-1])); }
#line 18101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592:
#line 2102 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 18107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593:
#line 2104 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 18113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594:
#line 2106 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595:
#line 2108 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596:
#line 2110 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597:
#line 2112 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598:
#line 2114 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599:
#line 2116 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600:
#line 2118 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601:
#line 2120 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602:
#line 2122 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 603:
#line 2124 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 604:
#line 2126 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 605:
#line 2128 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606:
#line 2130 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607:
#line 2132 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 18197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608:
#line 2134 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 18203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609:
#line 2136 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 18211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610:
#line 2140 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 18219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611:
#line 2144 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 18227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612:
#line 2148 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 18235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613:
#line 2161 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 18241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614:
#line 2162 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 18247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615:
#line 2164 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeParamRef(0, (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeParamRef(0, (yylsp[-1]));
				}
#line 18263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616:
#line 2176 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[-1].ival);
					p->location = (yylsp[-1]);
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) p;
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) p;
				}
#line 18282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617:
#line 2191 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (yyvsp[-2].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *)n;
					}
					else
						(yyval.node) = (yyvsp[-2].node);
				}
#line 18298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618:
#line 2203 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 18304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619:
#line 2205 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 18310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620:
#line 2207 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 18325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621:
#line 2218 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 18353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622:
#line 2242 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 18368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623:
#line 2255 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 18376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624:
#line 2259 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-4].list), (yyvsp[-2].list), (yylsp[-4]));
					n->agg_order = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625:
#line 2265 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), list_make1((yyvsp[-2].node)), (yylsp[-5]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626:
#line 2272 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-7].list), lappend((yyvsp[-5].list), (yyvsp[-2].node)), (yylsp[-7]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627:
#line 2279 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-2].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-1].list);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 18422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628:
#line 2289 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-2].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-1].list);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629:
#line 2296 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * We consider AGGREGATE(*) to invoke a parameterless
					 * aggregate.  This does the right thing for COUNT(*),
					 * and there are no other aggregates in SQL that accept
					 * '*' as parameter.
					 *
					 * The PGFuncCall node is also marked agg_star = true,
					 * so that later processing can detect what the argument
					 * really was.
					 */
					PGFuncCall *n = makeFuncCall((yyvsp[-3].list), NIL, (yylsp[-3]));
					n->agg_star = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630:
#line 2324 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-3].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-2].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-2]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-2]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-2]))));
						n->agg_order = (yyvsp[-2].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-1].node);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 18492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631:
#line 2359 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 18498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632:
#line 2369 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 18504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633:
#line 2370 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634:
#line 2378 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 18520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635:
#line 2384 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_DATE, -1, (yylsp[0]));
				}
#line 18528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636:
#line 2388 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME, -1, (yylsp[0]));
				}
#line 18536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637:
#line 2392 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 18544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638:
#line 2396 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP, -1, (yylsp[0]));
				}
#line 18552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639:
#line 2400 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 18560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 640:
#line 2404 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME, -1, (yylsp[0]));
				}
#line 18568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 641:
#line 2408 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 18576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642:
#line 2412 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP, -1, (yylsp[0]));
				}
#line 18584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643:
#line 2416 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 18592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644:
#line 2420 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_ROLE, -1, (yylsp[0]));
				}
#line 18600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645:
#line 2424 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_USER, -1, (yylsp[0]));
				}
#line 18608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646:
#line 2428 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_SESSION_USER, -1, (yylsp[0]));
				}
#line 18616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647:
#line 2432 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_USER, -1, (yylsp[0]));
				}
#line 18624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648:
#line 2436 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_CATALOG, -1, (yylsp[0]));
				}
#line 18632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649:
#line 2440 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_SCHEMA, -1, (yylsp[0]));
				}
#line 18640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650:
#line 2444 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), (yylsp[-5])); }
#line 18646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651:
#line 2446 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 18654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652:
#line 2450 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 18667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653:
#line 2459 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position(B, A) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 18676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654:
#line 2464 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 18687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655:
#line 2471 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 18706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656:
#line 2486 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 18717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657:
#line 2493 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 18725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658:
#line 2497 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 18733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659:
#line 2501 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 18741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660:
#line 2505 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 18749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661:
#line 2509 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 18760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662:
#line 2522 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 18766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663:
#line 2523 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 18772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664:
#line 2527 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 18778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665:
#line 2528 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 18784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666:
#line 2536 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 18790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667:
#line 2537 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 18796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668:
#line 2541 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 18802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669:
#line 2543 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 18808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670:
#line 2548 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 18818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671:
#line 2556 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 18824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672:
#line 2558 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 18841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673:
#line 2571 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 18847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674:
#line 2576 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 18865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675:
#line 2601 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 18871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676:
#line 2602 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 18877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677:
#line 2605 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 18883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678:
#line 2606 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 18889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679:
#line 2618 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					if (n->frameOptions & (FRAMEOPTION_START_VALUE_PRECEDING |
										   FRAMEOPTION_END_VALUE_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("RANGE PRECEDING is only supported with UNBOUNDED"),
								 parser_errposition((yylsp[-1]))));
					if (n->frameOptions & (FRAMEOPTION_START_VALUE_FOLLOWING |
										   FRAMEOPTION_END_VALUE_FOLLOWING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("RANGE FOLLOWING is only supported with UNBOUNDED"),
								 parser_errposition((yylsp[-1]))));
					(yyval.windef) = n;
				}
#line 18911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680:
#line 2636 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					(yyval.windef) = n;
				}
#line 18921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681:
#line 2642 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 18933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682:
#line 2652 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 18954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683:
#line 2669 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);
					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_VALUE_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_VALUE_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 18995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684:
#line 2714 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 19007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685:
#line 2722 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 19019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686:
#line 2730 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 19031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687:
#line 2738 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 19043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688:
#line 2746 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 19055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689:
#line 2766 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 19061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690:
#line 2767 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 19067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691:
#line 2770 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 19073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692:
#line 2771 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 19079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693:
#line 2774 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 19085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694:
#line 2775 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 19091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695:
#line 2776 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 19097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696:
#line 2779 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 19103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697:
#line 2780 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 19109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698:
#line 2783 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 19115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699:
#line 2784 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 19121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700:
#line 2785 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 19127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701:
#line 2786 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 19133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702:
#line 2787 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 19139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703:
#line 2788 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 19145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704:
#line 2789 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 19151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705:
#line 2790 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 19157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706:
#line 2791 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 19163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707:
#line 2792 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 19169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708:
#line 2793 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 19175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709:
#line 2794 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 19181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710:
#line 2798 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 19187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711:
#line 2800 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 19193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712:
#line 2805 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 19199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713:
#line 2807 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 19205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714:
#line 2812 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 19211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715:
#line 2814 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 19217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716:
#line 2816 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 19223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717:
#line 2818 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 19229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718:
#line 2820 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 19235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719:
#line 2822 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 19241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720:
#line 2824 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 19247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721:
#line 2826 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 19253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722:
#line 2840 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 19259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723:
#line 2842 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 19265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724:
#line 2846 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 19273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725:
#line 2850 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 19281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726:
#line 2857 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 19289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727:
#line 2861 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 19297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728:
#line 2867 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 19305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729:
#line 2871 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 19318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730:
#line 2880 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 19331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731:
#line 2890 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 19337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732:
#line 2891 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 19343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733:
#line 2896 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 19351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734:
#line 2899 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 19357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735:
#line 2906 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 19363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736:
#line 2907 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 19369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737:
#line 2908 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 19375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738:
#line 2909 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 19381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739:
#line 2910 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 19387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740:
#line 2911 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 19393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741:
#line 2912 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 19399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742:
#line 2913 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 19405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743:
#line 2914 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 19411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744:
#line 2915 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 19417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745:
#line 2926 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 19425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746:
#line 2930 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 19433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747:
#line 2937 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 19439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748:
#line 2943 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-2].node)); }
#line 19445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749:
#line 2944 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 19451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750:
#line 2961 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 19459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751:
#line 2965 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 19468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752:
#line 2970 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 19476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753:
#line 2974 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), -1));
				}
#line 19495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754:
#line 2989 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 19503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755:
#line 2993 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 19509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756:
#line 2997 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757:
#line 3000 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758:
#line 3003 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 19527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759:
#line 3004 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760:
#line 3005 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 19539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761:
#line 3009 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 19550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762:
#line 3015 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 19556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763:
#line 3026 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 19570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764:
#line 3039 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765:
#line 3040 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 19582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766:
#line 3045 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 19594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767:
#line 3055 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768:
#line 3056 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 19606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769:
#line 3059 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 19612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770:
#line 3060 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 19618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771:
#line 3064 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 19626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772:
#line 3068 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 19634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773:
#line 3075 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 19642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774:
#line 3079 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeNode(PGAStar);
				}
#line 19650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775:
#line 3083 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 19662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776:
#line 3091 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 19674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777:
#line 3101 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778:
#line 3102 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 19686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779:
#line 3106 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780:
#line 3107 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 19698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781:
#line 3111 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 19704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 782:
#line 3112 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 19710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785:
#line 3126 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786:
#line 3127 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 19722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787:
#line 3131 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 19728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788:
#line 3132 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 19734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789:
#line 3136 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 19746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790:
#line 3152 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 19758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791:
#line 3160 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 19770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792:
#line 3168 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnRef *n = makeNode(PGColumnRef);
					n->fields = list_make1(makeNode(PGAStar));
					n->location = (yylsp[0]);

					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)n;
					(yyval.target)->location = (yylsp[0]);
				}
#line 19786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793:
#line 3189 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 19792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794:
#line 3190 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 19798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795:
#line 3202 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 19806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796:
#line 3206 "third_party/libpg_query/grammar/statements/select.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 19835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797:
#line 3233 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 19841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798:
#line 3235 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 19847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799:
#line 3239 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800:
#line 3241 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801:
#line 3252 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 19865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802:
#line 3254 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 19874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803:
#line 3265 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 19882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804:
#line 3269 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 19890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805:
#line 3273 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 19898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806:
#line 3277 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 19906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807:
#line 3281 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 19919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808:
#line 3290 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 19930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809:
#line 3297 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-5].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, nor ORDER BY.
					 */
					foreach(lc, (yyvsp[-3].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-2].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-2]))));

					t->typmods = (yyvsp[-3].list);
					t->location = (yylsp[-5]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 19966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810:
#line 3329 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 19974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811:
#line 3333 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 19982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 812:
#line 3337 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 19990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813:
#line 3341 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 19998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814:
#line 3345 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 20006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815:
#line 3349 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 20014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816:
#line 3353 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 20022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817:
#line 3358 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 20028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818:
#line 3359 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819:
#line 3375 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820:
#line 3376 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821:
#line 3377 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822:
#line 3380 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823:
#line 3381 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824:
#line 3386 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825:
#line 3387 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826:
#line 3388 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827:
#line 3391 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 20088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828:
#line 3392 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 20094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829:
#line 3396 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 20100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830:
#line 3398 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 20106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831:
#line 3402 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832:
#line 3403 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 20118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834:
#line 3414 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835:
#line 3415 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836:
#line 3416 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837:
#line 3417 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838:
#line 3418 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839:
#line 3421 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840:
#line 3422 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841:
#line 15 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                {
					PGCreatePropertyGraphStmt *n = makeNode(PGCreatePropertyGraphStmt);
					n->name = (yyvsp[-10].str);
					n->vertex_tables = 	(yyvsp[-6].list);
					n->edge_tables = (yyvsp[-1].list);
					// n->property_graph_content = $5;
					(yyval.node) = (PGNode *)n;
					// n = $5;
				}
#line 20174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842:
#line 25 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                {
					PGCreatePropertyGraphStmt *n = makeNode(PGCreatePropertyGraphStmt);
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847:
#line 46 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 20190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848:
#line 47 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 20196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 849:
#line 53 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                {
					PGPropertyGraphTable *n = makeNode(PGPropertyGraphTable);
					n->name = (yyvsp[-4].range);
					n->labels = (yyvsp[-2].list);
					n->keys = (yyvsp[-3].list);
					n->is_vertex_table = true;
					n->contains_discriminator = true;
					n->discriminator = (yyvsp[0].str);
					(yyval.node) = (PGNode *) n;
				}
#line 20211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 850:
#line 65 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                {
					PGPropertyGraphTable *n = makeNode(PGPropertyGraphTable);
					n->name = (yyvsp[-2].range);
					n->labels = (yyvsp[0].list);
					n->keys = (yyvsp[-1].list);
					n->is_vertex_table = true;
					n->contains_discriminator = false;
					(yyval.node) = (PGNode *) n;
				}
#line 20225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 851:
#line 78 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 852:
#line 82 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].str)); }
#line 20237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 853:
#line 83 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].str)); }
#line 20243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 854:
#line 87 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 855:
#line 89 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                                                        { (yyval.str) = (char*) "default"; }
#line 20255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 856:
#line 93 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 20261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 857:
#line 94 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 20267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 858:
#line 101 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                {
					PGPropertyGraphTable *n = makeNode(PGPropertyGraphTable);
					n->name = (yyvsp[-10].range);
					n->keys = (yyvsp[-9].list);
					n->is_vertex_table = false;
					n->source_key = (yyvsp[-7].list);
					n->source_key_reference = (yyvsp[-5].range);
					n->destination_key = (yyvsp[-3].list);
					n->destination_key_reference = (yyvsp[-1].range);
					n->labels = (yyvsp[0].list); 
					(yyval.node) = (PGNode *) n;
				}
#line 20284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 859:
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 860:
#line 16 "third_party/libpg_query/grammar/statements/load.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 861:
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 20314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 862:
#line 21 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 863:
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 20334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 864:
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 20344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 865:
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 20354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 866:
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 20364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 867:
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->if_not_exists = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 868:
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->if_not_exists = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 869:
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 870:
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 871:
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 20436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 872:
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 20442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 873:
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 20448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 874:
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 875:
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 20460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 876:
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 877:
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 20472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 878:
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 20478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 879:
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 20484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 880:
#line 12 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
    {
        PGMatchPattern *n = makeNode(PGMatchPattern);
        n->pg_name = (yyvsp[-7].str);
        n->pattern = (yyvsp[-4].list);
        n->where_clause = (yyvsp[-3].node);
        n->columns = (yyvsp[-2].list);
        
        n->name = (yyvsp[0].range);
        // n->pg_name = $6;
        // n->pattern = $9;
        // n->where_clause = $10;
        // n->columns = $11;
        
        // n->name = $13;
        (yyval.node) = (PGNode *) n;
    }
#line 20505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 881:
#line 32 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                             { (yyval.list) = (yyvsp[-1].list); }
#line 20511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 882:
#line 33 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                               { (yyval.list) = NIL; }
#line 20517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 883:
#line 38 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                { 
                    (yyval.list) = list_make1((yyvsp[0].target)); 
                }
#line 20525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884:
#line 42 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                {
                     (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); 
                }
#line 20533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885:
#line 49 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
    { 
        (yyval.list) = list_make1(list_make2((yyvsp[-1].str),(yyvsp[0].list))); 
    }
#line 20541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886:
#line 53 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
    { 
        (yyval.list) = lappend((yyvsp[-3].list), list_make1(list_make2((yyvsp[-1].str),(yyvsp[0].list))));
    }
#line 20549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887:
#line 60 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                                    {(yyval.str) = (yyvsp[-1].str); }
#line 20555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888:
#line 61 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                                    {(yyval.str) = NULL;}
#line 20561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889:
#line 65 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                                {(yyval.list) = list_make1((yyvsp[0].node));}
#line 20567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890:
#line 66 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));}
#line 20573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891:
#line 70 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892:
#line 71 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893:
#line 77 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
            {
                PGGraphVariablePattern *n = makeNode(PGGraphVariablePattern);
                n->alias_name = (yyvsp[-1].str);
                n->label_name = (yyvsp[0].str);
                (yyval.node) = (PGNode *) n;
                
            }
#line 20597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894:
#line 86 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
            {
                PGGraphVariablePattern *n = makeNode(PGGraphVariablePattern);
                n->alias_name = (yyvsp[-1].str);
                n->label_name = (yyvsp[0].str);
                (yyval.node) = (PGNode *) n;
            }
#line 20608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895:
#line 94 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
            { 
                PGGraphElementPattern *n = makeNode(PGGraphElementPattern);
                n->pattern_clause = (yyvsp[-1].node);
                // n->label_name = $3;
                n->is_vertex_pattern = true;
                (yyval.node) = (PGNode *) n;
            }
#line 20620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896:
#line 105 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                    { (yyval.str) = (yyvsp[0].str); }
#line 20626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897:
#line 106 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                    { (yyval.str) = NULL; }
#line 20632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898:
#line 110 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                    { (yyval.str) = (yyvsp[0].str);}
#line 20638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899:
#line 114 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                    { (yyval.str) = (yyvsp[0].str); }
#line 20644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900:
#line 115 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                    { (yyval.str) = NULL; }
#line 20650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903:
#line 127 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
            { 
                PGGraphVariablePattern *n = makeNode(PGGraphVariablePattern);
                n->alias_name = (yyvsp[-1].str);
                n->label_name = (yyvsp[0].str);
                (yyval.node) = (PGNode *) n;
            }
#line 20661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904:
#line 134 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
            { 
                PGGraphVariablePattern *n = makeNode(PGGraphVariablePattern);
                n->alias_name = (yyvsp[0].str);
                (yyval.node) = (PGNode *) n;
            }
#line 20671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905:
#line 142 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                                    {(yyval.node) = (yyvsp[0].node);}
#line 20677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906:
#line 145 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
            {
                //how to handle this for conversion in tranform
                (yyval.node) = (PGNode *) makeString((yyvsp[0].str));
            }
#line 20686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907:
#line 152 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                                    {(yyval.node) = (yyvsp[0].node);}
#line 20692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908:
#line 153 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                                    {(yyval.node) = (yyvsp[0].node);}
#line 20698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909:
#line 154 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                                    {(yyval.node) = (yyvsp[0].node);}
#line 20704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910:
#line 161 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
            {
                PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
                n->pattern_clause = (yyvsp[-2].node);
                n->direction = PG_MATCH_DIR_RIGHT;
                n->is_vertex_pattern = false;
                n->star_pattern = PG_STAR_NONE;
                (yyval.node) = (PGNode *) n;
            }
#line 20717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911:
#line 170 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
            {
                PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
                n->pattern_clause = (yyvsp[-3].node);
                n->direction = PG_MATCH_DIR_RIGHT;
                n->is_vertex_pattern = false;
                n->star_pattern = PG_STAR_ALL;
                // $$ = $3;
                (yyval.node) = (PGNode *) n;
            }
#line 20731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912:
#line 180 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
            {
                PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
                n->pattern_clause = (yyvsp[-6].node);
                n->direction = PG_MATCH_DIR_RIGHT;
                n->is_vertex_pattern = false;
                n->star_pattern = PG_STAR_BOUNDED;
                n->lower_bound = (yyvsp[-4].ival);
                n->upper_bound = (yyvsp[-2].ival);
                (yyval.node) = (PGNode *) n;
            }
#line 20746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913:
#line 191 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
            { 
                PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
                n->pattern_clause = (yyvsp[-1].node);
                n->direction = PG_MATCH_DIR_RIGHT;
                n->is_vertex_pattern = false;
                n->star_pattern = PG_STAR_NONE;
                (yyval.node) = (PGNode *) n;
            }
#line 20759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914:
#line 203 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                { 
                    PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
                    n->pattern_clause = (yyvsp[-2].node);
                    n->direction = PG_MATCH_DIR_LEFT;
                    n->is_vertex_pattern = false;
                    n->star_pattern = PG_STAR_NONE;
                    (yyval.node) = (PGNode *) n;
                }
#line 20772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915:
#line 213 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                { 
                    PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
                    n->pattern_clause = (yyvsp[-3].node);
                    n->direction = PG_MATCH_DIR_LEFT;
                    n->is_vertex_pattern = false;
                    n->star_pattern = PG_STAR_ALL;
                    (yyval.node) = (PGNode *) n;
                }
#line 20785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916:
#line 223 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                { 
                    PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
                    n->pattern_clause = (yyvsp[-6].node);
                    n->direction = PG_MATCH_DIR_LEFT;
                    n->is_vertex_pattern = false;
                    n->star_pattern = PG_STAR_BOUNDED;
                    n->lower_bound = (yyvsp[-4].ival);
                    n->upper_bound = (yyvsp[-2].ival);
                    (yyval.node) = (PGNode *) n;
                }
#line 20800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917:
#line 234 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                { 
                    
                    PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
                    n->pattern_clause = (yyvsp[-1].node);
                    n->direction = PG_MATCH_DIR_LEFT;
                    n->is_vertex_pattern = false;
                    n->star_pattern = PG_STAR_NONE;
                    (yyval.node) = (PGNode *) n;
                }
#line 20814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918:
#line 247 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                { 
                    PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
                    n->pattern_clause = (yyvsp[-2].node);
                    n->direction = PG_MATCH_DIR_ANY;
                    n->is_vertex_pattern = false;
                    n->star_pattern = PG_STAR_NONE;
                    (yyval.node) = (PGNode *) n;
                }
#line 20827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919:
#line 256 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                { 
                    PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
                    n->pattern_clause = (yyvsp[-3].node);
                    n->direction = PG_MATCH_DIR_ANY;
                    n->is_vertex_pattern = false;
                    n->star_pattern = PG_STAR_ALL;
                    (yyval.node) = (PGNode *) n;
                }
#line 20840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920:
#line 265 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                { 
                    PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
                    n->pattern_clause = (yyvsp[-6].node);
                    n->direction = PG_MATCH_DIR_ANY;
                    n->is_vertex_pattern = false;
                    n->star_pattern = PG_STAR_BOUNDED;
                    n->lower_bound = (yyvsp[-4].ival);
                    n->upper_bound = (yyvsp[-2].ival);
                    (yyval.node) = (PGNode *) n;
                }
#line 20855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921:
#line 277 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                { 
                    PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
                    n->pattern_clause = (yyvsp[-1].node);
                    n->direction = PG_MATCH_DIR_ANY;
                    n->is_vertex_pattern = false;
                    n->star_pattern = PG_STAR_NONE;
                    (yyval.node) = (PGNode *) n;
                }
#line 20868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922:
#line 288 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                    { (yyval.str) = "-"; }
#line 20874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923:
#line 289 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                             { (yyval.str) = "->"; }
#line 20880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924:
#line 290 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                       { (yyval.str) = "<-"; }
#line 20886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925:
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					/* ...but not both */
					n->schemaname = (yyvsp[-1].str);
					n->schemaElts = (yyvsp[0].list);
					n->if_not_exists = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926:
#line 17 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					/* ...but not here */
					n->schemaname = (yyvsp[-1].str);
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->if_not_exists = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927:
#line 35 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 20927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928:
#line 41 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 20933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933:
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934:
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[0].range);
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935:
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 20985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936:
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 20997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937:
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 21011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938:
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 21017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939:
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 21023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940:
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 21029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941:
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 21035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942:
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 21049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943:
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 21055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944:
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 21061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945:
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 21067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946:
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 21073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947:
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 21079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948:
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 21085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949:
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 21097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950:
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951:
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 21109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 956:
#line 2 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].vsetstmt); }
#line 21115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 957:
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 21126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 958:
#line 15 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					(yyval.vsetstmt) = n;
				}
#line 21136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 959:
#line 24 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 21142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 960:
#line 26 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 21153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 961:
#line 33 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 21164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 962:
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 963:
#line 12 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 964:
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 965:
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 966:
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 967:
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 968:
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969:
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970:
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971:
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972:
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973:
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974:
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975:
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976:
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 977:
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 21373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 978:
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 21379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 979:
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 980:
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981:
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982:
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983:
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984:
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985:
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986:
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 21484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987:
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 21498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988:
#line 73 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 21504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989:
#line 74 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 21510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990:
#line 75 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 21516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 991:
#line 76 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 21522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 992:
#line 77 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 21528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 993:
#line 78 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 21534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 994:
#line 79 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 21540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 995:
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 21546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 996:
#line 81 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 21552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997:
#line 82 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 21558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 998:
#line 83 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 21564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 999:
#line 84 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 21570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1000:
#line 85 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 21576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1001:
#line 86 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 21582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1002:
#line 87 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 21588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1003:
#line 92 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 21594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1004:
#line 93 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 21600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1005:
#line 94 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 21606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1006:
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 21612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1007:
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 21618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1008:
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 21624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1009:
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 21630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1010:
#line 103 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 21636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1011:
#line 104 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 21642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1012:
#line 109 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 21648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1013:
#line 110 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 21654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1014:
#line 111 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 21660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1015:
#line 116 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 21666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1016:
#line 117 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 21672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1017:
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 21678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1018:
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1019:
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1020:
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 21708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1021:
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 21714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1022:
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 21720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1023:
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 21726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1024:
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 21732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1025:
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 21738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1026:
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 21744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027:
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 21753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028:
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 21759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029:
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 21767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030:
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031:
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 21783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032:
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 21791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033:
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034:
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035:
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036:
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 21823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037:
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 21831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038:
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 21839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039:
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 21848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040:
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041:
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 21864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042:
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043:
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 21878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044:
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 21884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045:
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046:
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 21896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047:
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 21902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048:
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->if_not_exists = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049:
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->if_not_exists = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050:
#line 32 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051:
#line 33 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 21942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1052:
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 21974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053:
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 21997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054:
#line 53 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 22003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055:
#line 54 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 22009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056:
#line 60 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 22017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057:
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 22023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058:
#line 69 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 22031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059:
#line 73 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 22039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060:
#line 80 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 22045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061:
#line 81 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 22051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062:
#line 85 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 22057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063:
#line 86 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 22063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064:
#line 91 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 22069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065:
#line 92 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 22075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066:
#line 96 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067:
#line 97 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068:
#line 102 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 22093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069:
#line 103 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 22099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070:
#line 104 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 22105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071:
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 22111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072:
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 22117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073:
#line 112 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 22125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1074:
#line 120 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 22133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075:
#line 123 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 22139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076:
#line 128 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 22145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077:
#line 129 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 22151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078:
#line 135 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 22159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079:
#line 138 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 22165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080:
#line 144 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 22173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081:
#line 148 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 22181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082:
#line 152 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 22189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083:
#line 156 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084:
#line 160 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085:
#line 164 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 22213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086:
#line 168 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 22221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087:
#line 172 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088:
#line 176 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089:
#line 180 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 22245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090:
#line 184 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 22253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091:
#line 188 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 22261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092:
#line 192 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 22269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093:
#line 196 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 22277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094:
#line 203 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 22283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095:
#line 209 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096:
#line 210 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 22295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097:
#line 211 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 22301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098:
#line 217 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 22309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099:
#line 221 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 22317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100:
#line 8 "third_party/libpg_query/grammar/statements/create_function.y"
                                {
					PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
					n->name = (yyvsp[-3].range);
					n->params = (yyvsp[-2].list);
					n->function = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103:
#line 24 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 22337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104:
#line 28 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 22345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105:
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106:
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107:
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108:
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109:
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110:
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111:
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112:
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113:
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 22455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114:
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 22461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115:
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116:
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 22473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117:
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 22481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118:
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 22489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119:
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 22504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120:
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 22512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121:
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 22520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122:
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 22528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123:
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124:
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125:
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126:
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127:
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128:
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 22599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129:
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 22610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130:
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 22622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131:
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132:
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133:
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 22658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134:
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 22678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1135:
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1136:
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1137:
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1138:
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1139:
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1140:
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 22758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1141:
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1142:
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1143:
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1144:
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 22810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1145:
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1146:
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1147:
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 22846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1148:
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 22856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1149:
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1150:
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1151:
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 22889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1152:
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1153:
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 22901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1154:
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 22909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1155:
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 22918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1156:
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 22927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1157:
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 22935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1158:
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 22941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1159:
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 22947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1160:
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1161:
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 22959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1162:
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 22965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1163:
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->is_local = false;
					(yyval.node) = (PGNode *) n;
				}
#line 22975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1164:
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->is_local = true;
					(yyval.node) = (PGNode *) n;
				}
#line 22985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1165:
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->is_local = false;
					(yyval.node) = (PGNode *) n;
				}
#line 22995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1166:
#line 32 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 23001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1167:
#line 34 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 23012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1168:
#line 42 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 23027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1169:
#line 53 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 23039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170:
#line 65 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 23051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171:
#line 73 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 23063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172:
#line 81 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 23074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173:
#line 88 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 23085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174:
#line 98 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 23091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175:
#line 100 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 23097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176:
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 23105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177:
#line 110 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 23113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178:
#line 114 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 23132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179:
#line 129 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 23143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180:
#line 135 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 23149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181:
#line 136 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 23155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182:
#line 137 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 23161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183:
#line 141 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184:
#line 142 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 23173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185:
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 23187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186:
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 23201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187:
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 23216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1188:
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 23227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1189:
#line 10 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 23237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190:
#line 16 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 23247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191:
#line 22 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 23258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192:
#line 29 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 23269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193:
#line 36 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 23280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194:
#line 45 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 23286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195:
#line 46 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 23292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196:
#line 47 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 23298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197:
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 23309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198:
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->if_not_exists = false;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 23329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199:
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->if_not_exists = true;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 23349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1200:
#line 51 "third_party/libpg_query/grammar/statements/execute.y"
                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 23355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1201:
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 23361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202:
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203:
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204:
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1205:
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1206:
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1207:
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1208:
#line 10 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-3].range);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 23451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1209:
#line 22 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 23461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1210:
#line 28 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 23472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1211:
#line 35 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 23482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1212:
#line 41 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 23493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1213:
#line 48 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 23503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1214:
#line 58 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 23511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1215:
#line 62 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 23520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1216:
#line 71 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 23532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1217:
#line 80 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 23544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1218:
#line 88 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 23552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1219:
#line 95 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 23558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1220:
#line 96 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 23564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1221:
#line 102 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 23576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1222:
#line 114 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 23585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1223:
#line 119 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 23610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1224:
#line 144 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 23623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1225:
#line 154 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 23636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1226:
#line 163 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 23644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1227:
#line 170 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 23659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1228:
#line 181 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 23674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1229:
#line 192 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 23689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1230:
#line 206 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1231:
#line 207 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 23701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1232:
#line 213 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 23707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1233:
#line 214 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 23713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1234:
#line 219 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 23719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1235:
#line 220 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 23725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236:
#line 226 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237:
#line 227 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 23737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238:
#line 231 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1239:
#line 232 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 23749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1240:
#line 238 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 23755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1241:
#line 240 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 23761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1242:
#line 245 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1243:
#line 246 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 23773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1244:
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 23779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1245:
#line 251 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 23785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1246:
#line 257 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 23797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 23801 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = YY_CAST (char *, YYSTACK_ALLOC (YY_CAST (YYSIZE_T, yymsg_alloc)));
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (&yylloc, yyscanner, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;


#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif


/*-----------------------------------------------------.
| yyreturn -- parsing is finished, return the result.  |
`-----------------------------------------------------*/
yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[+*yyssp], yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
#line 273 "third_party/libpg_query/grammar/statements/insert.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	n->seed = seed;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	return (PGNode *) p;
}

static PGNode *
makeParamRefCast(int number, int location, PGTypeName *tpname)
{
	PGNode *p = makeParamRef(number, location);
	return makeTypeCast(p, tpname, -1);
}

/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make2(makeString(DEFAULT_SCHEMA),
											   makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

static PGNode *
makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod, int location)
{
	PGSQLValueFunction *svf = makeNode(PGSQLValueFunction);

	svf->op = op;
	/* svf->type will be filled during parse analysis */
	svf->typmod = typmod;
	svf->location = location;
	return (PGNode *) svf;
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
